
// =================================================================
//
//                           * WARNING *
//
//                    This file is generated!
//
//  Changes made to this file will be overwritten. If changes are
//  required to the generated code, the service_crategen project
//  must be updated to generate the changes.
//
// =================================================================

#[allow(warnings)]
use hyper::Client;
use hyper::status::StatusCode;
use rusoto_core::request::DispatchSignedRequest;
use rusoto_core::region;

use std::fmt;
use std::error::Error;
use std::io;
use std::io::Read;
use rusoto_core::request::HttpDispatchError;
use rusoto_core::credential::{CredentialsError, ProvideAwsCredentials};

use std::str::FromStr;
use xml::EventReader;
use xml::reader::ParserConfig;
use rusoto_core::param::{Params, ServiceParams};
use rusoto_core::signature::SignedRequest;
use xml::reader::XmlEvent;
use rusoto_core::xmlutil::{Next, Peek, XmlParseError, XmlResponse};
use rusoto_core::xmlutil::{characters, end_element, start_element, skip_tree, peek_at_name};
use rusoto_core::xmlerror::*;

enum DeserializerNext {
    Close,
    Skip,
    Element(String),
}
#[doc="<p>Data returned by the <b>DescribeAccountAttributes</b> action.</p>"]
#[derive(Default,Debug,Clone)]
pub struct AccountAttributesMessage {
    #[doc="<p>A list of <a>AccountQuota</a> objects. Within this list, each quota has a name, a count of usage toward the quota maximum, and a maximum value for the quota.</p>"]
    pub account_quotas: Option<Vec<AccountQuota>>,
}

struct AccountAttributesMessageDeserializer;
impl AccountAttributesMessageDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<AccountAttributesMessage, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = AccountAttributesMessage::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "AccountQuotas" => {
                            obj.account_quotas =
                                Some(try!(AccountQuotaListDeserializer::deserialize("AccountQuotas",
                                                                                    stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p>Describes a quota for an AWS account, for example, the number of DB instances allowed.</p>"]
#[derive(Default,Debug,Clone)]
pub struct AccountQuota {
    #[doc="<p>The name of the Amazon RDS quota for this AWS account.</p>"]
    pub account_quota_name: Option<String>,
    #[doc="<p>The maximum allowed value for the quota.</p>"]
    pub max: Option<i64>,
    #[doc="<p>The amount currently used toward the quota maximum.</p>"]
    pub used: Option<i64>,
}

struct AccountQuotaDeserializer;
impl AccountQuotaDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<AccountQuota, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = AccountQuota::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "AccountQuotaName" => {
                            obj.account_quota_name =
                                Some(try!(StringDeserializer::deserialize("AccountQuotaName",
                                                                          stack)));
                        }
                        "Max" => {
                            obj.max = Some(try!(LongDeserializer::deserialize("Max", stack)));
                        }
                        "Used" => {
                            obj.used = Some(try!(LongDeserializer::deserialize("Used", stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct AccountQuotaListDeserializer;
impl AccountQuotaListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<AccountQuota>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "AccountQuota" {
                        obj.push(try!(AccountQuotaDeserializer::deserialize("AccountQuota",
                                                                            stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct AddRoleToDBClusterMessage {
    #[doc="<p>The name of the DB cluster to associate the IAM role with.</p>"]
    pub db_cluster_identifier: String,
    #[doc="<p>The Amazon Resource Name (ARN) of the IAM role to associate with the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.</p>"]
    pub role_arn: String,
}


/// Serialize `AddRoleToDBClusterMessage` contents to a `SignedRequest`.
struct AddRoleToDBClusterMessageSerializer;
impl AddRoleToDBClusterMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &AddRoleToDBClusterMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "DBClusterIdentifier"),
                   &obj.db_cluster_identifier.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "RoleArn"),
                   &obj.role_arn.replace("+", "%2B"));

    }
}

#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct AddSourceIdentifierToSubscriptionMessage {
    #[doc="<p>The identifier of the event source to be added. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it cannot end with a hyphen or contain two consecutive hyphens.</p> <p>Constraints:</p> <ul> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>"]
    pub source_identifier: String,
    #[doc="<p>The name of the RDS event notification subscription you want to add a source identifier to.</p>"]
    pub subscription_name: String,
}


/// Serialize `AddSourceIdentifierToSubscriptionMessage` contents to a `SignedRequest`.
struct AddSourceIdentifierToSubscriptionMessageSerializer;
impl AddSourceIdentifierToSubscriptionMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &AddSourceIdentifierToSubscriptionMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "SourceIdentifier"),
                   &obj.source_identifier.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "SubscriptionName"),
                   &obj.subscription_name.replace("+", "%2B"));

    }
}

#[derive(Default,Debug,Clone)]
pub struct AddSourceIdentifierToSubscriptionResult {
    pub event_subscription: Option<EventSubscription>,
}

struct AddSourceIdentifierToSubscriptionResultDeserializer;
impl AddSourceIdentifierToSubscriptionResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>
        (tag_name: &str,
         stack: &mut T)
         -> Result<AddSourceIdentifierToSubscriptionResult, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = AddSourceIdentifierToSubscriptionResult::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "EventSubscription" => {
                            obj.event_subscription =
                                Some(try!(EventSubscriptionDeserializer::deserialize("EventSubscription",
                                                                                     stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct AddTagsToResourceMessage {
    #[doc="<p>The Amazon RDS resource the tags will be added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing\"> Constructing an RDS Amazon Resource Name (ARN)</a>.</p>"]
    pub resource_name: String,
    #[doc="<p>The tags to be assigned to the Amazon RDS resource.</p>"]
    pub tags: Vec<Tag>,
}


/// Serialize `AddTagsToResourceMessage` contents to a `SignedRequest`.
struct AddTagsToResourceMessageSerializer;
impl AddTagsToResourceMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &AddTagsToResourceMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "ResourceName"),
                   &obj.resource_name.replace("+", "%2B"));
        TagListSerializer::serialize(params, &format!("{}{}", prefix, "Tags"), &obj.tags);

    }
}

struct ApplyMethodDeserializer;
impl ApplyMethodDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<String, XmlParseError> {
        try!(start_element(tag_name, stack));
        let obj = try!(characters(stack));
        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct ApplyPendingMaintenanceActionMessage {
    #[doc="<p>The pending maintenance action to apply to this resource.</p> <p>Valid values: <code>system-update</code>, <code>db-upgrade</code> </p>"]
    pub apply_action: String,
    #[doc="<p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type <code>immediate</code> cannot be undone.</p> <p>Valid values:</p> <ul> <li> <p> <code>immediate</code> - Apply the maintenance action immediately.</p> </li> <li> <p> <code>next-maintenance</code> - Apply the maintenance action during the next maintenance window for the resource.</p> </li> <li> <p> <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code> opt-in requests.</p> </li> </ul>"]
    pub opt_in_type: String,
    #[doc="<p>The RDS Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing\"> Constructing an RDS Amazon Resource Name (ARN)</a>.</p>"]
    pub resource_identifier: String,
}


/// Serialize `ApplyPendingMaintenanceActionMessage` contents to a `SignedRequest`.
struct ApplyPendingMaintenanceActionMessageSerializer;
impl ApplyPendingMaintenanceActionMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ApplyPendingMaintenanceActionMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "ApplyAction"),
                   &obj.apply_action.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "OptInType"),
                   &obj.opt_in_type.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "ResourceIdentifier"),
                   &obj.resource_identifier.replace("+", "%2B"));

    }
}

#[derive(Default,Debug,Clone)]
pub struct ApplyPendingMaintenanceActionResult {
    pub resource_pending_maintenance_actions: Option<ResourcePendingMaintenanceActions>,
}

struct ApplyPendingMaintenanceActionResultDeserializer;
impl ApplyPendingMaintenanceActionResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>
        (tag_name: &str,
         stack: &mut T)
         -> Result<ApplyPendingMaintenanceActionResult, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = ApplyPendingMaintenanceActionResult::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "ResourcePendingMaintenanceActions" => {
                            obj.resource_pending_maintenance_actions = Some(try!(ResourcePendingMaintenanceActionsDeserializer::deserialize("ResourcePendingMaintenanceActions", stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct AttributeValueListDeserializer;
impl AttributeValueListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<String>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "AttributeValue" {
                        obj.push(try!(StringDeserializer::deserialize("AttributeValue", stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}

/// Serialize `AttributeValueList` contents to a `SignedRequest`.
struct AttributeValueListSerializer;
impl AttributeValueListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.member.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct AuthorizeDBSecurityGroupIngressMessage {
    #[doc="<p>The IP range to authorize.</p>"]
    pub cidrip: Option<String>,
    #[doc="<p>The name of the DB security group to add authorization to.</p>"]
    pub db_security_group_name: String,
    #[doc="<p> Id of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. </p>"]
    pub ec2_security_group_id: Option<String>,
    #[doc="<p> Name of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. </p>"]
    pub ec2_security_group_name: Option<String>,
    #[doc="<p> AWS account number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS Access Key ID is not an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. </p>"]
    pub ec2_security_group_owner_id: Option<String>,
}


/// Serialize `AuthorizeDBSecurityGroupIngressMessage` contents to a `SignedRequest`.
struct AuthorizeDBSecurityGroupIngressMessageSerializer;
impl AuthorizeDBSecurityGroupIngressMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &AuthorizeDBSecurityGroupIngressMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.cidrip {
            params.put(&format!("{}{}", prefix, "CIDRIP"),
                       &field_value.replace("+", "%2B"));
        }
        params.put(&format!("{}{}", prefix, "DBSecurityGroupName"),
                   &obj.db_security_group_name.replace("+", "%2B"));
        if let Some(ref field_value) = obj.ec2_security_group_id {
            params.put(&format!("{}{}", prefix, "EC2SecurityGroupId"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.ec2_security_group_name {
            params.put(&format!("{}{}", prefix, "EC2SecurityGroupName"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.ec2_security_group_owner_id {
            params.put(&format!("{}{}", prefix, "EC2SecurityGroupOwnerId"),
                       &field_value.replace("+", "%2B"));
        }

    }
}

#[derive(Default,Debug,Clone)]
pub struct AuthorizeDBSecurityGroupIngressResult {
    pub db_security_group: Option<DBSecurityGroup>,
}

struct AuthorizeDBSecurityGroupIngressResultDeserializer;
impl AuthorizeDBSecurityGroupIngressResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>
        (tag_name: &str,
         stack: &mut T)
         -> Result<AuthorizeDBSecurityGroupIngressResult, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = AuthorizeDBSecurityGroupIngressResult::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "DBSecurityGroup" => {
                            obj.db_security_group =
                                Some(try!(DBSecurityGroupDeserializer::deserialize("DBSecurityGroup",
                                                                                   stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p>Contains Availability Zone information.</p> <p> This data type is used as an element in the following data type:</p> <ul> <li> <p> <a>OrderableDBInstanceOption</a> </p> </li> </ul>"]
#[derive(Default,Debug,Clone)]
pub struct AvailabilityZone {
    #[doc="<p>The name of the availability zone.</p>"]
    pub name: Option<String>,
}

struct AvailabilityZoneDeserializer;
impl AvailabilityZoneDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<AvailabilityZone, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = AvailabilityZone::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "Name" => {
                            obj.name = Some(try!(StringDeserializer::deserialize("Name", stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct AvailabilityZoneListDeserializer;
impl AvailabilityZoneListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<AvailabilityZone>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "AvailabilityZone" {
                        obj.push(try!(AvailabilityZoneDeserializer::deserialize("AvailabilityZone",
                                                                                stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
struct AvailabilityZonesDeserializer;
impl AvailabilityZonesDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<String>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "AvailabilityZone" {
                        obj.push(try!(StringDeserializer::deserialize("AvailabilityZone", stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}

/// Serialize `AvailabilityZones` contents to a `SignedRequest`.
struct AvailabilityZonesSerializer;
impl AvailabilityZonesSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.member.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

struct BooleanDeserializer;
impl BooleanDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<bool, XmlParseError> {
        try!(start_element(tag_name, stack));
        let obj = bool::from_str(try!(characters(stack)).as_ref()).unwrap();
        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct BooleanOptionalDeserializer;
impl BooleanOptionalDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<bool, XmlParseError> {
        try!(start_element(tag_name, stack));
        let obj = bool::from_str(try!(characters(stack)).as_ref()).unwrap();
        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p>A CA certificate for an AWS account.</p>"]
#[derive(Default,Debug,Clone)]
pub struct Certificate {
    #[doc="<p>The Amazon Resource Name (ARN) for the certificate.</p>"]
    pub certificate_arn: Option<String>,
    #[doc="<p>The unique key that identifies a certificate.</p>"]
    pub certificate_identifier: Option<String>,
    #[doc="<p>The type of the certificate.</p>"]
    pub certificate_type: Option<String>,
    #[doc="<p>The thumbprint of the certificate.</p>"]
    pub thumbprint: Option<String>,
    #[doc="<p>The starting date from which the certificate is valid.</p>"]
    pub valid_from: Option<String>,
    #[doc="<p>The final date that the certificate continues to be valid.</p>"]
    pub valid_till: Option<String>,
}

struct CertificateDeserializer;
impl CertificateDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Certificate, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = Certificate::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "CertificateArn" => {
                            obj.certificate_arn =
                                Some(try!(StringDeserializer::deserialize("CertificateArn",
                                                                          stack)));
                        }
                        "CertificateIdentifier" => {
                            obj.certificate_identifier =
                                Some(try!(StringDeserializer::deserialize("CertificateIdentifier",
                                                                          stack)));
                        }
                        "CertificateType" => {
                            obj.certificate_type =
                                Some(try!(StringDeserializer::deserialize("CertificateType",
                                                                          stack)));
                        }
                        "Thumbprint" => {
                            obj.thumbprint = Some(try!(StringDeserializer::deserialize("Thumbprint",
                                                                                       stack)));
                        }
                        "ValidFrom" => {
                            obj.valid_from = Some(try!(TStampDeserializer::deserialize("ValidFrom",
                                                                                       stack)));
                        }
                        "ValidTill" => {
                            obj.valid_till = Some(try!(TStampDeserializer::deserialize("ValidTill",
                                                                                       stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct CertificateListDeserializer;
impl CertificateListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<Certificate>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "Certificate" {
                        obj.push(try!(CertificateDeserializer::deserialize("Certificate", stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
#[doc="<p>Data returned by the <b>DescribeCertificates</b> action.</p>"]
#[derive(Default,Debug,Clone)]
pub struct CertificateMessage {
    #[doc="<p>The list of <a>Certificate</a> objects for the AWS account.</p>"]
    pub certificates: Option<Vec<Certificate>>,
    #[doc="<p> An optional pagination token provided by a previous <a>DescribeCertificates</a> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . </p>"]
    pub marker: Option<String>,
}

struct CertificateMessageDeserializer;
impl CertificateMessageDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<CertificateMessage, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = CertificateMessage::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "Certificates" => {
                            obj.certificates =
                                Some(try!(CertificateListDeserializer::deserialize("Certificates",
                                                                                   stack)));
                        }
                        "Marker" => {
                            obj.marker = Some(try!(StringDeserializer::deserialize("Marker",
                                                                                   stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p> This data type is used as a response element in the action <a>DescribeDBEngineVersions</a>. </p>"]
#[derive(Default,Debug,Clone)]
pub struct CharacterSet {
    #[doc="<p>The description of the character set.</p>"]
    pub character_set_description: Option<String>,
    #[doc="<p>The name of the character set.</p>"]
    pub character_set_name: Option<String>,
}

struct CharacterSetDeserializer;
impl CharacterSetDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<CharacterSet, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = CharacterSet::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "CharacterSetDescription" => {
                            obj.character_set_description =
                                Some(try!(StringDeserializer::deserialize("CharacterSetDescription",
                                                                          stack)));
                        }
                        "CharacterSetName" => {
                            obj.character_set_name =
                                Some(try!(StringDeserializer::deserialize("CharacterSetName",
                                                                          stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct CopyDBClusterParameterGroupMessage {
    #[doc="<p>The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing\"> Constructing an RDS Amazon Resource Name (ARN)</a>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB cluster parameter group.</p> </li> <li> <p>If the source DB cluster parameter group is in the same AWS Region as the copy, specify a valid DB parameter group identifier, for example <code>my-db-cluster-param-group</code>, or a valid ARN.</p> </li> <li> <p>If the source DB parameter group is in a different AWS Region than the copy, specify a valid DB cluster parameter group ARN, for example <code>arn:aws:rds:us-east-1:123456789012:cluster-pg:custom-cluster-group1</code>.</p> </li> </ul>"]
    pub source_db_cluster_parameter_group_identifier: String,
    pub tags: Option<Vec<Tag>>,
    #[doc="<p>A description for the copied DB cluster parameter group.</p>"]
    pub target_db_cluster_parameter_group_description: String,
    #[doc="<p>The identifier for the copied DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 alphanumeric characters or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster-param-group1</code> </p>"]
    pub target_db_cluster_parameter_group_identifier: String,
}


/// Serialize `CopyDBClusterParameterGroupMessage` contents to a `SignedRequest`.
struct CopyDBClusterParameterGroupMessageSerializer;
impl CopyDBClusterParameterGroupMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CopyDBClusterParameterGroupMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "SourceDBClusterParameterGroupIdentifier"),
                   &obj.source_db_cluster_parameter_group_identifier
                        .replace("+", "%2B"));
        if let Some(ref field_value) = obj.tags {
            TagListSerializer::serialize(params, &format!("{}{}", prefix, "Tags"), field_value);
        }
        params.put(&format!("{}{}", prefix, "TargetDBClusterParameterGroupDescription"),
                   &obj.target_db_cluster_parameter_group_description
                        .replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "TargetDBClusterParameterGroupIdentifier"),
                   &obj.target_db_cluster_parameter_group_identifier
                        .replace("+", "%2B"));

    }
}

#[derive(Default,Debug,Clone)]
pub struct CopyDBClusterParameterGroupResult {
    pub db_cluster_parameter_group: Option<DBClusterParameterGroup>,
}

struct CopyDBClusterParameterGroupResultDeserializer;
impl CopyDBClusterParameterGroupResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>
        (tag_name: &str,
         stack: &mut T)
         -> Result<CopyDBClusterParameterGroupResult, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = CopyDBClusterParameterGroupResult::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "DBClusterParameterGroup" => {
                            obj.db_cluster_parameter_group =
                                Some(try!(DBClusterParameterGroupDeserializer::deserialize("DBClusterParameterGroup",
                                                                                           stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct CopyDBClusterSnapshotMessage {
    #[doc="<p>True to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot; otherwise false. The default is false.</p>"]
    pub copy_tags: Option<bool>,
    #[doc="<p>The AWS KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an unencrypted DB cluster snapshot and specify a value for the <code>KmsKeyId</code> parameter, Amazon RDS encrypts the target DB cluster snapshot using the specified KMS encryption key. </p> <p>If you copy an encrypted DB cluster snapshot from your AWS account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new KMS encryption key. If you don't specify a value for <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot. </p> <p>If you copy an encrypted DB cluster snapshot that is shared from another AWS account, then you must specify a value for <code>KmsKeyId</code>. </p> <p>To copy an encrypted DB cluster snapshot to another AWS Region, you must set <code>KmsKeyId</code> to the KMS key ID you want to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you cannot use encryption keys from one AWS Region in another AWS Region.</p>"]
    pub kms_key_id: Option<String>,
    #[doc="<p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> API action in the AWS Region that contains the source DB cluster snapshot to copy. The <code>PreSignedUrl</code> parameter must be used when copying an encrypted DB cluster snapshot from another AWS Region.</p> <p>The pre-signed URL must be a valid request for the <code>CopyDBSClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied. The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot will be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a href=\"http://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html\"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href=\"http://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\"> Signature Version 4 Signing Process</a>.</p>"]
    pub pre_signed_url: Option<String>,
    #[doc="<p>The identifier of the DB cluster snapshot to copy. This parameter is not case-sensitive.</p> <p>You cannot copy an encrypted, shared DB cluster snapshot from one AWS Region to another.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Must specify a valid system snapshot in the \"available\" state.</p> </li> <li> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier.</p> </li> <li> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB cluster snapshot ARN. For more information, go to <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html\"> Copying a DB Snapshot or DB Cluster Snapshot</a>.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot1</code> </p>"]
    pub source_db_cluster_snapshot_identifier: String,
    pub tags: Option<Vec<Tag>>,
    #[doc="<p>The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot2</code> </p>"]
    pub target_db_cluster_snapshot_identifier: String,
}


/// Serialize `CopyDBClusterSnapshotMessage` contents to a `SignedRequest`.
struct CopyDBClusterSnapshotMessageSerializer;
impl CopyDBClusterSnapshotMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CopyDBClusterSnapshotMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.copy_tags {
            params.put(&format!("{}{}", prefix, "CopyTags"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.kms_key_id {
            params.put(&format!("{}{}", prefix, "KmsKeyId"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.pre_signed_url {
            params.put(&format!("{}{}", prefix, "PreSignedUrl"),
                       &field_value.replace("+", "%2B"));
        }
        params.put(&format!("{}{}", prefix, "SourceDBClusterSnapshotIdentifier"),
                   &obj.source_db_cluster_snapshot_identifier
                        .replace("+", "%2B"));
        if let Some(ref field_value) = obj.tags {
            TagListSerializer::serialize(params, &format!("{}{}", prefix, "Tags"), field_value);
        }
        params.put(&format!("{}{}", prefix, "TargetDBClusterSnapshotIdentifier"),
                   &obj.target_db_cluster_snapshot_identifier
                        .replace("+", "%2B"));

    }
}

#[derive(Default,Debug,Clone)]
pub struct CopyDBClusterSnapshotResult {
    pub db_cluster_snapshot: Option<DBClusterSnapshot>,
}

struct CopyDBClusterSnapshotResultDeserializer;
impl CopyDBClusterSnapshotResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<CopyDBClusterSnapshotResult, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = CopyDBClusterSnapshotResult::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "DBClusterSnapshot" => {
                            obj.db_cluster_snapshot =
                                Some(try!(DBClusterSnapshotDeserializer::deserialize("DBClusterSnapshot",
                                                                                     stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct CopyDBParameterGroupMessage {
    #[doc="<p> The identifier or ARN for the source DB parameter group. For information about creating an ARN, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing\"> Constructing an RDS Amazon Resource Name (ARN)</a>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB parameter group.</p> </li> <li> <p> Must specify a valid DB parameter group identifier, for example <code>my-db-param-group</code>, or a valid ARN.</p> </li> </ul>"]
    pub source_db_parameter_group_identifier: String,
    pub tags: Option<Vec<Tag>>,
    #[doc="<p>A description for the copied DB parameter group.</p>"]
    pub target_db_parameter_group_description: String,
    #[doc="<p>The identifier for the copied DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 alphanumeric characters or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-parameter-group</code> </p>"]
    pub target_db_parameter_group_identifier: String,
}


/// Serialize `CopyDBParameterGroupMessage` contents to a `SignedRequest`.
struct CopyDBParameterGroupMessageSerializer;
impl CopyDBParameterGroupMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CopyDBParameterGroupMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "SourceDBParameterGroupIdentifier"),
                   &obj.source_db_parameter_group_identifier.replace("+", "%2B"));
        if let Some(ref field_value) = obj.tags {
            TagListSerializer::serialize(params, &format!("{}{}", prefix, "Tags"), field_value);
        }
        params.put(&format!("{}{}", prefix, "TargetDBParameterGroupDescription"),
                   &obj.target_db_parameter_group_description
                        .replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "TargetDBParameterGroupIdentifier"),
                   &obj.target_db_parameter_group_identifier.replace("+", "%2B"));

    }
}

#[derive(Default,Debug,Clone)]
pub struct CopyDBParameterGroupResult {
    pub db_parameter_group: Option<DBParameterGroup>,
}

struct CopyDBParameterGroupResultDeserializer;
impl CopyDBParameterGroupResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<CopyDBParameterGroupResult, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = CopyDBParameterGroupResult::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "DBParameterGroup" => {
                            obj.db_parameter_group =
                                Some(try!(DBParameterGroupDeserializer::deserialize("DBParameterGroup",
                                                                                    stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct CopyDBSnapshotMessage {
    #[doc="<p>True to copy all tags from the source DB snapshot to the target DB snapshot; otherwise false. The default is false.</p>"]
    pub copy_tags: Option<bool>,
    #[doc="<p>The AWS KMS key ID for an encrypted DB snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB snapshot from your AWS account, you can specify a value for this parameter to encrypt the copy with a new KMS encryption key. If you don't specify a value for this parameter, then the copy of the DB snapshot is encrypted with the same KMS key as the source DB snapshot. </p> <p>If you copy an encrypted DB snapshot that is shared from another AWS account, then you must specify a value for this parameter. </p> <p>If you specify this parameter when you copy an unencrypted snapshot, the copy is encrypted. </p> <p>If you copy an encrypted snapshot to a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you cannot use encryption keys from one AWS Region in another AWS Region. </p>"]
    pub kms_key_id: Option<String>,
    #[doc="<p>The name of an option group to associate with the copy of the snapshot.</p> <p>Specify this option if you are copying a snapshot from one AWS Region to another, and your DB instance uses a nondefault option group. If your source DB instance uses Transparent Data Encryption for Oracle or Microsoft SQL Server, you must specify this option when copying across regions. For more information, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopySnapshot.Options\">Option Group Considerations</a>. </p>"]
    pub option_group_name: Option<String>,
    #[doc="<p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBSnapshot</code> API action in the source AWS Region that contains the source DB snapshot to copy. </p> <p>You must specify this parameter when you copy an encrypted DB snapshot from another AWS Region by using the Amazon RDS API. You can specify the source region option instead of this parameter when you copy an encrypted DB snapshot from another AWS Region by using the AWS CLI. </p> <p>The presigned URL must be a valid request for the <code>CopyDBSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB snapshot to be copied. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted DB snapshot will be copied to. This AWS Region is the same one where the <code>CopyDBSnapshot</code> action is called that contains this presigned URL. </p> <p>For example, if you copy an encrypted DB snapshot from the us-west-2 region to the us-east-1 region, then you call the <code>CopyDBSnapshot</code> action in the us-east-1 region and provide a presigned URL that contains a call to the <code>CopyDBSnapshot</code> action in the us-west-2 region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 region. </p> </li> <li> <p> <code>KmsKeyId</code> - The KMS key identifier for the key to use to encrypt the copy of the DB snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBSnapshot</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBSnapshotIdentifier</code> - The DB snapshot identifier for the encrypted snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB snapshot from the us-west-2 region, then your <code>SourceDBSnapshotIdentifier</code> looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a href=\"http://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html\">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href=\"http://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\">Signature Version 4 Signing Process</a>. </p>"]
    pub pre_signed_url: Option<String>,
    #[doc="<p>The identifier for the source DB snapshot.</p> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier. For example, you might specify <code>rds:mysql-instance1-snapshot-20130805</code>. </p> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB snapshot ARN. For example, you might specify <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code>. </p> <p>If you are copying from a shared manual DB snapshot, this parameter must be the Amazon Resource Name (ARN) of the shared DB snapshot. </p> <p>If you are copying an encrypted snapshot this parameter must be in the ARN format for the source AWS Region, and must match the <code>SourceDBSnapshotIdentifier</code> in the <code>PreSignedUrl</code> parameter. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the \"available\" state.</p> </li> </ul> <p>Example: <code>rds:mydb-2012-04-02-00-01</code> </p> <p>Example: <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code> </p>"]
    pub source_db_snapshot_identifier: String,
    pub tags: Option<Vec<Tag>>,
    #[doc="<p>The identifier for the copy of the snapshot. </p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 alphanumeric characters or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-snapshot</code> </p>"]
    pub target_db_snapshot_identifier: String,
}


/// Serialize `CopyDBSnapshotMessage` contents to a `SignedRequest`.
struct CopyDBSnapshotMessageSerializer;
impl CopyDBSnapshotMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CopyDBSnapshotMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.copy_tags {
            params.put(&format!("{}{}", prefix, "CopyTags"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.kms_key_id {
            params.put(&format!("{}{}", prefix, "KmsKeyId"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.option_group_name {
            params.put(&format!("{}{}", prefix, "OptionGroupName"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.pre_signed_url {
            params.put(&format!("{}{}", prefix, "PreSignedUrl"),
                       &field_value.replace("+", "%2B"));
        }
        params.put(&format!("{}{}", prefix, "SourceDBSnapshotIdentifier"),
                   &obj.source_db_snapshot_identifier.replace("+", "%2B"));
        if let Some(ref field_value) = obj.tags {
            TagListSerializer::serialize(params, &format!("{}{}", prefix, "Tags"), field_value);
        }
        params.put(&format!("{}{}", prefix, "TargetDBSnapshotIdentifier"),
                   &obj.target_db_snapshot_identifier.replace("+", "%2B"));

    }
}

#[derive(Default,Debug,Clone)]
pub struct CopyDBSnapshotResult {
    pub db_snapshot: Option<DBSnapshot>,
}

struct CopyDBSnapshotResultDeserializer;
impl CopyDBSnapshotResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<CopyDBSnapshotResult, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = CopyDBSnapshotResult::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "DBSnapshot" => {
                            obj.db_snapshot =
                                Some(try!(DBSnapshotDeserializer::deserialize("DBSnapshot",
                                                                              stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct CopyOptionGroupMessage {
    #[doc="<p>The identifier or ARN for the source option group. For information about creating an ARN, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing\"> Constructing an RDS Amazon Resource Name (ARN)</a>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid option group.</p> </li> <li> <p>If the source option group is in the same AWS Region as the copy, specify a valid option group identifier, for example <code>my-option-group</code>, or a valid ARN.</p> </li> <li> <p>If the source option group is in a different AWS Region than the copy, specify a valid option group ARN, for example <code>arn:aws:rds:us-west-2:123456789012:og:special-options</code>.</p> </li> </ul>"]
    pub source_option_group_identifier: String,
    pub tags: Option<Vec<Tag>>,
    #[doc="<p>The description for the copied option group.</p>"]
    pub target_option_group_description: String,
    #[doc="<p>The identifier for the copied option group.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 alphanumeric characters or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-option-group</code> </p>"]
    pub target_option_group_identifier: String,
}


/// Serialize `CopyOptionGroupMessage` contents to a `SignedRequest`.
struct CopyOptionGroupMessageSerializer;
impl CopyOptionGroupMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CopyOptionGroupMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "SourceOptionGroupIdentifier"),
                   &obj.source_option_group_identifier.replace("+", "%2B"));
        if let Some(ref field_value) = obj.tags {
            TagListSerializer::serialize(params, &format!("{}{}", prefix, "Tags"), field_value);
        }
        params.put(&format!("{}{}", prefix, "TargetOptionGroupDescription"),
                   &obj.target_option_group_description.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "TargetOptionGroupIdentifier"),
                   &obj.target_option_group_identifier.replace("+", "%2B"));

    }
}

#[derive(Default,Debug,Clone)]
pub struct CopyOptionGroupResult {
    pub option_group: Option<OptionGroup>,
}

struct CopyOptionGroupResultDeserializer;
impl CopyOptionGroupResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<CopyOptionGroupResult, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = CopyOptionGroupResult::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "OptionGroup" => {
                            obj.option_group =
                                Some(try!(OptionGroupDeserializer::deserialize("OptionGroup",
                                                                               stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct CreateDBClusterMessage {
    #[doc="<p>A list of EC2 Availability Zones that instances in the DB cluster can be created in. For information on regions and Availability Zones, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html\">Regions and Availability Zones</a>. </p>"]
    pub availability_zones: Option<Vec<String>>,
    #[doc="<p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>"]
    pub backup_retention_period: Option<i64>,
    #[doc="<p>A value that indicates that the DB cluster should be associated with the specified CharacterSet.</p>"]
    pub character_set_name: Option<String>,
    #[doc="<p>The DB cluster identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>"]
    pub db_cluster_identifier: String,
    #[doc="<p> The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, <code>default.aurora5.6</code> will be used. </p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>"]
    pub db_cluster_parameter_group_name: Option<String>,
    #[doc="<p>A DB subnet group to associate with this DB cluster.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>"]
    pub db_subnet_group_name: Option<String>,
    #[doc="<p>The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon RDS will not create a database in the DB cluster you are creating.</p>"]
    pub database_name: Option<String>,
    #[doc="<p>A Boolean value that is true to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>"]
    pub enable_iam_database_authentication: Option<bool>,
    #[doc="<p>The name of the database engine to be used for this DB cluster.</p> <p>Valid Values: <code>aurora</code> </p>"]
    pub engine: String,
    #[doc="<p>The version number of the database engine to use.</p> <p> <b>Aurora</b> </p> <p>Example: <code>5.6.10a</code> </p>"]
    pub engine_version: Option<String>,
    #[doc="<p>The KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If the <code>StorageEncrypted</code> parameter is true, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p> <p>If you create a Read Replica of an encrypted DB cluster in another AWS Region, you must set <code>KmsKeyId</code> to a KMS key ID that is valid in the destination AWS Region. This key is used to encrypt the Read Replica in that AWS Region.</p>"]
    pub kms_key_id: Option<String>,
    #[doc="<p>The password for the master database user. This password can contain any printable ASCII character except \"/\", \"\"\", or \"@\".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>"]
    pub master_user_password: Option<String>,
    #[doc="<p>The name of the master user for the DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 alphanumeric characters.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot be a reserved word for the chosen database engine.</p> </li> </ul>"]
    pub master_username: Option<String>,
    #[doc="<p>A value that indicates that the DB cluster should be associated with the specified option group.</p> <p>Permanent options cannot be removed from an option group. The option group cannot be removed from a DB cluster once it is associated with a DB cluster.</p>"]
    pub option_group_name: Option<String>,
    #[doc="<p>The port number on which the instances in the DB cluster accept connections.</p> <p> Default: <code>3306</code> </p>"]
    pub port: Option<i64>,
    #[doc="<p>A URL that contains a Signature Version 4 signed request for the <code>CreateDBCluster</code> action to be called in the source AWS Region where the DB cluster will be replicated from. You only need to specify <code>PreSignedUrl</code> when you are performing cross-region replication from an encrypted DB cluster.</p> <p>The pre-signed URL must be a valid request for the <code>CreateDBCluster</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The KMS key identifier for the key to use to encrypt the copy of the DB cluster in the destination AWS Region. This should refer to the same KMS key for both the <code>CreateDBCluster</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that Aurora Read Replica will be created in.</p> </li> <li> <p> <code>ReplicationSourceIdentifier</code> - The DB cluster identifier for the encrypted DB cluster to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster from the us-west-2 region, then your <code>ReplicationSourceIdentifier</code> would look like Example: <code>arn:aws:rds:us-west-2:123456789012:cluster:aurora-cluster1</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a href=\"http://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html\"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href=\"http://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\"> Signature Version 4 Signing Process</a>.</p>"]
    pub pre_signed_url: Option<String>,
    #[doc="<p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>Default: A 30-minute window selected at random from an 8-hour block of time per AWS Region. To see the time blocks available, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html\"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Times should be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>"]
    pub preferred_backup_window: Option<String>,
    #[doc="<p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>Default: A 30-minute window selected at random from an 8-hour block of time per AWS Region, occurring on a random day of the week. To see the time blocks available, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html\"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun</p> <p>Constraints: Minimum 30-minute window.</p>"]
    pub preferred_maintenance_window: Option<String>,
    #[doc="<p>The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read Replica.</p>"]
    pub replication_source_identifier: Option<String>,
    #[doc="<p>Specifies whether the DB cluster is encrypted.</p>"]
    pub storage_encrypted: Option<bool>,
    pub tags: Option<Vec<Tag>>,
    #[doc="<p>A list of EC2 VPC security groups to associate with this DB cluster.</p>"]
    pub vpc_security_group_ids: Option<Vec<String>>,
}


/// Serialize `CreateDBClusterMessage` contents to a `SignedRequest`.
struct CreateDBClusterMessageSerializer;
impl CreateDBClusterMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateDBClusterMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.availability_zones {
            AvailabilityZonesSerializer::serialize(params,
                                                   &format!("{}{}", prefix, "AvailabilityZones"),
                                                   field_value);
        }
        if let Some(ref field_value) = obj.backup_retention_period {
            params.put(&format!("{}{}", prefix, "BackupRetentionPeriod"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.character_set_name {
            params.put(&format!("{}{}", prefix, "CharacterSetName"),
                       &field_value.replace("+", "%2B"));
        }
        params.put(&format!("{}{}", prefix, "DBClusterIdentifier"),
                   &obj.db_cluster_identifier.replace("+", "%2B"));
        if let Some(ref field_value) = obj.db_cluster_parameter_group_name {
            params.put(&format!("{}{}", prefix, "DBClusterParameterGroupName"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.db_subnet_group_name {
            params.put(&format!("{}{}", prefix, "DBSubnetGroupName"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.database_name {
            params.put(&format!("{}{}", prefix, "DatabaseName"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.enable_iam_database_authentication {
            params.put(&format!("{}{}", prefix, "EnableIAMDatabaseAuthentication"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        params.put(&format!("{}{}", prefix, "Engine"),
                   &obj.engine.replace("+", "%2B"));
        if let Some(ref field_value) = obj.engine_version {
            params.put(&format!("{}{}", prefix, "EngineVersion"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.kms_key_id {
            params.put(&format!("{}{}", prefix, "KmsKeyId"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.master_user_password {
            params.put(&format!("{}{}", prefix, "MasterUserPassword"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.master_username {
            params.put(&format!("{}{}", prefix, "MasterUsername"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.option_group_name {
            params.put(&format!("{}{}", prefix, "OptionGroupName"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.port {
            params.put(&format!("{}{}", prefix, "Port"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.pre_signed_url {
            params.put(&format!("{}{}", prefix, "PreSignedUrl"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.preferred_backup_window {
            params.put(&format!("{}{}", prefix, "PreferredBackupWindow"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.preferred_maintenance_window {
            params.put(&format!("{}{}", prefix, "PreferredMaintenanceWindow"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.replication_source_identifier {
            params.put(&format!("{}{}", prefix, "ReplicationSourceIdentifier"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.storage_encrypted {
            params.put(&format!("{}{}", prefix, "StorageEncrypted"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.tags {
            TagListSerializer::serialize(params, &format!("{}{}", prefix, "Tags"), field_value);
        }
        if let Some(ref field_value) = obj.vpc_security_group_ids {
            VpcSecurityGroupIdListSerializer::serialize(params,
                                                        &format!("{}{}",
                                                                prefix,
                                                                "VpcSecurityGroupIds"),
                                                        field_value);
        }

    }
}

#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct CreateDBClusterParameterGroupMessage {
    #[doc="<p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>"]
    pub db_cluster_parameter_group_name: String,
    #[doc="<p>The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.</p>"]
    pub db_parameter_group_family: String,
    #[doc="<p>The description for the DB cluster parameter group.</p>"]
    pub description: String,
    pub tags: Option<Vec<Tag>>,
}


/// Serialize `CreateDBClusterParameterGroupMessage` contents to a `SignedRequest`.
struct CreateDBClusterParameterGroupMessageSerializer;
impl CreateDBClusterParameterGroupMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateDBClusterParameterGroupMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "DBClusterParameterGroupName"),
                   &obj.db_cluster_parameter_group_name.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "DBParameterGroupFamily"),
                   &obj.db_parameter_group_family.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "Description"),
                   &obj.description.replace("+", "%2B"));
        if let Some(ref field_value) = obj.tags {
            TagListSerializer::serialize(params, &format!("{}{}", prefix, "Tags"), field_value);
        }

    }
}

#[derive(Default,Debug,Clone)]
pub struct CreateDBClusterParameterGroupResult {
    pub db_cluster_parameter_group: Option<DBClusterParameterGroup>,
}

struct CreateDBClusterParameterGroupResultDeserializer;
impl CreateDBClusterParameterGroupResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>
        (tag_name: &str,
         stack: &mut T)
         -> Result<CreateDBClusterParameterGroupResult, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = CreateDBClusterParameterGroupResult::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "DBClusterParameterGroup" => {
                            obj.db_cluster_parameter_group =
                                Some(try!(DBClusterParameterGroupDeserializer::deserialize("DBClusterParameterGroup",
                                                                                           stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct CreateDBClusterResult {
    pub db_cluster: Option<DBCluster>,
}

struct CreateDBClusterResultDeserializer;
impl CreateDBClusterResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<CreateDBClusterResult, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = CreateDBClusterResult::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "DBCluster" => {
                            obj.db_cluster = Some(try!(DBClusterDeserializer::deserialize("DBCluster",
                                                                                          stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct CreateDBClusterSnapshotMessage {
    #[doc="<p>The identifier of the DB cluster to create a snapshot for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>"]
    pub db_cluster_identifier: String,
    #[doc="<p>The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1-snapshot1</code> </p>"]
    pub db_cluster_snapshot_identifier: String,
    #[doc="<p>The tags to be assigned to the DB cluster snapshot.</p>"]
    pub tags: Option<Vec<Tag>>,
}


/// Serialize `CreateDBClusterSnapshotMessage` contents to a `SignedRequest`.
struct CreateDBClusterSnapshotMessageSerializer;
impl CreateDBClusterSnapshotMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateDBClusterSnapshotMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "DBClusterIdentifier"),
                   &obj.db_cluster_identifier.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "DBClusterSnapshotIdentifier"),
                   &obj.db_cluster_snapshot_identifier.replace("+", "%2B"));
        if let Some(ref field_value) = obj.tags {
            TagListSerializer::serialize(params, &format!("{}{}", prefix, "Tags"), field_value);
        }

    }
}

#[derive(Default,Debug,Clone)]
pub struct CreateDBClusterSnapshotResult {
    pub db_cluster_snapshot: Option<DBClusterSnapshot>,
}

struct CreateDBClusterSnapshotResultDeserializer;
impl CreateDBClusterSnapshotResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<CreateDBClusterSnapshotResult, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = CreateDBClusterSnapshotResult::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "DBClusterSnapshot" => {
                            obj.db_cluster_snapshot =
                                Some(try!(DBClusterSnapshotDeserializer::deserialize("DBClusterSnapshot",
                                                                                     stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct CreateDBInstanceMessage {
    #[doc="<p>The amount of storage (in gigabytes) to be initially allocated for the database instance.</p> <p>Type: Integer</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Aurora cluster volumes automatically grow as the amount of data in your database increases, though you are only charged for the space that you use in an Aurora cluster volume.</p> <p> <b>MySQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 5 to 6144.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 6144.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 5 to 6144.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 6144.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 5 to 6144.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 6144.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 10 to 6144.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 6144.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 10 to 3072.</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 16384.</p> </li> </ul> </li> <li> <p>Provisioned IOPS storage (io1):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 100 to 16384.</p> </li> </ul> </li> <li> <p>Magnetic storage (standard):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 1024.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 1024.</p> </li> </ul> </li> </ul>"]
    pub allocated_storage: Option<i64>,
    #[doc="<p>Indicates that minor engine upgrades will be applied automatically to the DB instance during the maintenance window.</p> <p>Default: <code>true</code> </p>"]
    pub auto_minor_version_upgrade: Option<bool>,
    #[doc="<p> The EC2 Availability Zone that the database instance will be created in. For information on regions and Availability Zones, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html\">Regions and Availability Zones</a>. </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p> <p> Constraint: The AvailabilityZone parameter cannot be specified if the MultiAZ parameter is set to <code>true</code>. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p>"]
    pub availability_zone: Option<String>,
    #[doc="<p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Cannot be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>"]
    pub backup_retention_period: Option<i64>,
    #[doc="<p>For supported engines, indicates that the DB instance should be associated with the specified CharacterSet.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The character set is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p>"]
    pub character_set_name: Option<String>,
    #[doc="<p>True to copy all tags from the DB instance to snapshots of the DB instance; otherwise false. The default is false.</p>"]
    pub copy_tags_to_snapshot: Option<bool>,
    #[doc="<p>The identifier of the DB cluster that the instance will belong to.</p> <p>For information on creating a DB cluster, see <a>CreateDBCluster</a>.</p> <p>Type: String</p>"]
    pub db_cluster_identifier: Option<String>,
    #[doc="<p>The compute and memory capacity of the DB instance. Note that not all instance classes are available in all regions for all DB engines.</p> <p> Valid Values: <code>db.t1.micro | db.m1.small | db.m1.medium | db.m1.large | db.m1.xlarge | db.m2.xlarge |db.m2.2xlarge | db.m2.4xlarge | db.m3.medium | db.m3.large | db.m3.xlarge | db.m3.2xlarge | db.m4.large | db.m4.xlarge | db.m4.2xlarge | db.m4.4xlarge | db.m4.10xlarge | db.r3.large | db.r3.xlarge | db.r3.2xlarge | db.r3.4xlarge | db.r3.8xlarge | db.t2.micro | db.t2.small | db.t2.medium | db.t2.large</code> </p>"]
    pub db_instance_class: String,
    #[doc="<p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>"]
    pub db_instance_identifier: String,
    #[doc="<p>The meaning of this parameter differs according to the database engine you use.</p> <p>Type: String</p> <p> <b>MySQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter is not specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 alphanumeric characters</p> </li> <li> <p>Cannot be a word reserved by the specified database engine</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter is not specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 alphanumeric characters</p> </li> <li> <p>Cannot be a word reserved by the specified database engine</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter is not specified, the default \"postgres\" database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 63 alphanumeric characters</p> </li> <li> <p>Must begin with a letter or an underscore. Subsequent characters can be letters, underscores, or digits (0-9).</p> </li> <li> <p>Cannot be a word reserved by the specified database engine</p> </li> </ul> <p> <b>Oracle</b> </p> <p>The Oracle System ID (SID) of the created DB instance. If you specify <code>null</code>, the default value <code>ORCL</code> is used. You can't specify the string NULL, or any other reserved word, for <code>DBName</code>. </p> <p>Default: <code>ORCL</code> </p> <p>Constraints:</p> <ul> <li> <p>Cannot be longer than 8 characters</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Not applicable. Must be null.</p> <p> <b>Amazon Aurora</b> </p> <p>The name of the database to create when the primary instance of the DB cluster is created. If this parameter is not specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 alphanumeric characters</p> </li> <li> <p>Cannot be a word reserved by the specified database engine</p> </li> </ul>"]
    pub db_name: Option<String>,
    #[doc="<p>The name of the DB parameter group to associate with this DB instance. If this argument is omitted, the default DBParameterGroup for the specified engine will be used.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>"]
    pub db_parameter_group_name: Option<String>,
    #[doc="<p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>"]
    pub db_security_groups: Option<Vec<String>>,
    #[doc="<p>A DB subnet group to associate with this DB instance.</p> <p>If there is no DB subnet group, then it is a non-VPC DB instance.</p>"]
    pub db_subnet_group_name: Option<String>,
    #[doc="<p>Specify the Active Directory Domain to create the instance in.</p>"]
    pub domain: Option<String>,
    #[doc="<p>Specify the name of the IAM role to be used when making API calls to the Directory Service.</p>"]
    pub domain_iam_role_name: Option<String>,
    #[doc="<p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts; otherwise false. </p> <p> You can enable IAM database authentication for the following database engines:</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Mapping AWS IAM accounts to database accounts is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p> <b>MySQL</b> </p> <ul> <li> <p>For MySQL 5.6, minor version 5.6.34 or higher</p> </li> <li> <p>For MySQL 5.7, minor version 5.7.16 or higher</p> </li> </ul> <p>Default: <code>false</code> </p>"]
    pub enable_iam_database_authentication: Option<bool>,
    #[doc="<p>The name of the database engine to be used for this instance. </p> <p>Not every database engine is available for every AWS Region. </p> <p>Valid Values: </p> <ul> <li> <p> <code>aurora</code> </p> </li> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>"]
    pub engine: String,
    #[doc="<p>The version number of the database engine to use.</p> <p>The following are the database engines and major and minor versions that are available with Amazon RDS. Not every database engine is available for every AWS Region.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The version number of the database engine to be used by the DB instance is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p> <b>MariaDB</b> </p> <ul> <li> <p> <code>10.1.23</code> (supported in all AWS regions)</p> </li> <li> <p> <code>10.1.19</code> (supported in all AWS regions)</p> </li> <li> <p> <code>10.1.14</code> (supported in all regions except us-east-2)</p> </li> </ul> <p/> <ul> <li> <p> <code>10.0.31</code> (supported in all AWS regions)</p> </li> <li> <p> <code>10.0.28</code> (supported in all AWS regions)</p> </li> <li> <p> <code>10.0.24</code> (supported in all AWS regions)</p> </li> <li> <p> <code>10.0.17</code> (supported in all regions except us-east-2, ca-central-1, eu-west-2)</p> </li> </ul> <p> <b>Microsoft SQL Server 2016</b> </p> <ul> <li> <p> <code>13.00.4422.0.v1</code> (supported for all editions, and all AWS regions)</p> </li> <li> <p> <code>13.00.2164.0.v1</code> (supported for all editions, and all AWS regions)</p> </li> </ul> <p> <b>Microsoft SQL Server 2014</b> </p> <ul> <li> <p> <code>12.00.5546.0.v1</code> (supported for all editions, and all AWS regions)</p> </li> <li> <p> <code>12.00.5000.0.v1</code> (supported for all editions, and all AWS regions)</p> </li> <li> <p> <code>12.00.4422.0.v1</code> (supported for all editions except Enterprise Edition, and all AWS regions except ca-central-1 and eu-west-2)</p> </li> </ul> <p> <b>Microsoft SQL Server 2012</b> </p> <ul> <li> <p> <code>11.00.6594.0.v1</code> (supported for all editions, and all AWS regions)</p> </li> <li> <p> <code>11.00.6020.0.v1</code> (supported for all editions, and all AWS regions)</p> </li> <li> <p> <code>11.00.5058.0.v1</code> (supported for all editions, and all AWS regions except us-east-2, ca-central-1, and eu-west-2)</p> </li> <li> <p> <code>11.00.2100.60.v1</code> (supported for all editions, and all AWS regions except us-east-2, ca-central-1, and eu-west-2)</p> </li> </ul> <p> <b>Microsoft SQL Server 2008 R2</b> </p> <ul> <li> <p> <code>10.50.6529.0.v1</code> (supported for all editions, and all AWS regions except us-east-2, ca-central-1, and eu-west-2)</p> </li> <li> <p> <code>10.50.6000.34.v1</code> (supported for all editions, and all AWS regions except us-east-2, ca-central-1, and eu-west-2)</p> </li> <li> <p> <code>10.50.2789.0.v1</code> (supported for all editions, and all AWS regions except us-east-2, ca-central-1, and eu-west-2)</p> </li> </ul> <p> <b>MySQL</b> </p> <ul> <li> <p> <code>5.7.17</code> (supported in all AWS regions)</p> </li> <li> <p> <code>5.7.16</code> (supported in all AWS regions)</p> </li> <li> <p> <code>5.7.11</code> (supported in all AWS regions)</p> </li> </ul> <p/> <ul> <li> <p> <code>5.6.35</code> (supported in all AWS regions)</p> </li> <li> <p> <code>5.6.34</code> (supported in all AWS regions)</p> </li> <li> <p> <code>5.6.29</code> (supported in all AWS regions)</p> </li> <li> <p> <code>5.6.27</code> (supported in all regions except us-east-2, ca-central-1, eu-west-2)</p> </li> </ul> <p/> <ul> <li> <p> <code>5.5.54</code> (supported in all AWS regions)</p> </li> <li> <p> <code>5.5.53</code> (supported in all AWS regions)</p> </li> <li> <p> <code>5.5.46</code> (supported in all AWS regions)</p> </li> </ul> <p> <b>Oracle 12c</b> </p> <ul> <li> <p> <code>12.1.0.2.v8</code> (supported for EE in all AWS regions, and SE2 in all AWS regions except us-gov-west-1)</p> </li> <li> <p> <code>12.1.0.2.v7</code> (supported for EE in all AWS regions, and SE2 in all AWS regions except us-gov-west-1)</p> </li> <li> <p> <code>12.1.0.2.v6</code> (supported for EE in all AWS regions, and SE2 in all AWS regions except us-gov-west-1)</p> </li> <li> <p> <code>12.1.0.2.v5</code> (supported for EE in all AWS regions, and SE2 in all AWS regions except us-gov-west-1)</p> </li> <li> <p> <code>12.1.0.2.v4</code> (supported for EE in all AWS regions, and SE2 in all AWS regions except us-gov-west-1)</p> </li> <li> <p> <code>12.1.0.2.v3</code> (supported for EE in all AWS regions, and SE2 in all AWS regions except us-gov-west-1)</p> </li> <li> <p> <code>12.1.0.2.v2</code> (supported for EE in all AWS regions, and SE2 in all AWS regions except us-gov-west-1)</p> </li> <li> <p> <code>12.1.0.2.v1</code> (supported for EE in all AWS regions, and SE2 in all AWS regions except us-gov-west-1)</p> </li> </ul> <p> <b>Oracle 11g</b> </p> <ul> <li> <p> <code>11.2.0.4.v12</code> (supported for EE, SE1, and SE, in all AWS regions)</p> </li> <li> <p> <code>11.2.0.4.v11</code> (supported for EE, SE1, and SE, in all AWS regions)</p> </li> <li> <p> <code>11.2.0.4.v10</code> (supported for EE, SE1, and SE, in all AWS regions)</p> </li> <li> <p> <code>11.2.0.4.v9</code> (supported for EE, SE1, and SE, in all AWS regions)</p> </li> <li> <p> <code>11.2.0.4.v8</code> (supported for EE, SE1, and SE, in all AWS regions)</p> </li> <li> <p> <code>11.2.0.4.v7</code> (supported for EE, SE1, and SE, in all AWS regions)</p> </li> <li> <p> <code>11.2.0.4.v6</code> (supported for EE, SE1, and SE, in all AWS regions)</p> </li> <li> <p> <code>11.2.0.4.v5</code> (supported for EE, SE1, and SE, in all AWS regions)</p> </li> <li> <p> <code>11.2.0.4.v4</code> (supported for EE, SE1, and SE, in all AWS regions)</p> </li> <li> <p> <code>11.2.0.4.v3</code> (supported for EE, SE1, and SE, in all AWS regions)</p> </li> <li> <p> <code>11.2.0.4.v1</code> (supported for EE, SE1, and SE, in all AWS regions)</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <ul> <li> <p> <b>Version 9.6.x:</b> <code> 9.6.1 | 9.6.2</code> </p> </li> <li> <p> <b>Version 9.5.x:</b> <code>9.5.6 | 9.5.4 | 9.5.2</code> </p> </li> <li> <p> <b>Version 9.4.x:</b> <code>9.4.11 | 9.4.9 | 9.4.7</code> </p> </li> <li> <p> <b>Version 9.3.x:</b> <code>9.3.16 | 9.3.14 | 9.3.12</code> </p> </li> </ul>"]
    pub engine_version: Option<String>,
    #[doc="<p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.</p> <p>Constraints: Must be a multiple between 3 and 10 of the storage amount for the DB instance. Must also be an integer multiple of 1000. For example, if the size of your DB instance is 500 GB, then your <code>Iops</code> value can be 2000, 3000, 4000, or 5000. </p>"]
    pub iops: Option<i64>,
    #[doc="<p>The KMS key identifier for an encrypted DB instance.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>If the <code>StorageEncrypted</code> parameter is true, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>"]
    pub kms_key_id: Option<String>,
    #[doc="<p>License model information for this DB instance.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>"]
    pub license_model: Option<String>,
    #[doc="<p>The password for the master user. Can be any printable ASCII character except \"/\", \"\"\", or \"@\".</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p>"]
    pub master_user_password: Option<String>,
    #[doc="<p>The name for the master user.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The name for the master user is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p> <b>MariaDB</b> </p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 alphanumeric characters.</p> </li> <li> <p>Cannot be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 128 alphanumeric characters.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>MySQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 alphanumeric characters.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 30 alphanumeric characters.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 63 alphanumeric characters.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot be a reserved word for the chosen database engine.</p> </li> </ul>"]
    pub master_username: Option<String>,
    #[doc="<p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>"]
    pub monitoring_interval: Option<i64>,
    #[doc="<p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling\">Setting Up and Enabling Enhanced Monitoring</a>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>"]
    pub monitoring_role_arn: Option<String>,
    #[doc="<p>Specifies if the DB instance is a Multi-AZ deployment. You cannot set the AvailabilityZone parameter if the MultiAZ parameter is set to true.</p>"]
    pub multi_az: Option<bool>,
    #[doc="<p>Indicates that the DB instance should be associated with the specified option group.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, cannot be removed from an option group, and that option group cannot be removed from a DB instance once it is associated with a DB instance</p>"]
    pub option_group_name: Option<String>,
    #[doc="<p>The port number on which the database accepts connections.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p>"]
    pub port: Option<i64>,
    #[doc="<p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. For more information, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.BackingUpAndRestoringAmazonRDSInstances.html\">DB Instance Backups</a>. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p> Default: A 30-minute window selected at random from an 8-hour block of time per AWS Region. To see the time blocks available, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow\"> Adjusting the Preferred DB Instance Maintenance Window</a>. </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Times should be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>"]
    pub preferred_backup_window: Option<String>,
    #[doc="<p> The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBMaintenance.html\">DB Instance Maintenance</a>. </p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p> Default: A 30-minute window selected at random from an 8-hour block of time per AWS Region, occurring on a random day of the week. To see the time blocks available, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html\"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun</p> <p>Constraints: Minimum 30-minute window.</p>"]
    pub preferred_maintenance_window: Option<String>,
    #[doc="<p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Aurora.Managing.html#Aurora.Managing.FaultTolerance\"> Fault Tolerance for an Aurora DB Cluster</a>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>"]
    pub promotion_tier: Option<i64>,
    #[doc="<p>Specifies the accessibility options for the DB instance. A value of true specifies an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. A value of false specifies an internal instance with a DNS name that resolves to a private IP address.</p> <p>Default: The default behavior varies depending on whether a VPC has been requested or not. The following list shows the default behavior in each case.</p> <ul> <li> <p> <b>Default VPC:</b> true</p> </li> <li> <p> <b>VPC:</b> false</p> </li> </ul> <p>If no DB subnet group has been specified as part of the request and the PubliclyAccessible value has not been set, the DB instance will be publicly accessible. If a specific DB subnet group has been specified as part of the request and the PubliclyAccessible value has not been set, the DB instance will be private.</p>"]
    pub publicly_accessible: Option<bool>,
    #[doc="<p>Specifies whether the DB instance is encrypted.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The encryption for DB instances is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: false</p>"]
    pub storage_encrypted: Option<bool>,
    #[doc="<p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified; otherwise <code>standard</code> </p>"]
    pub storage_type: Option<String>,
    pub tags: Option<Vec<Tag>>,
    #[doc="<p>The ARN from the Key Store with which to associate the instance for TDE encryption.</p>"]
    pub tde_credential_arn: Option<String>,
    #[doc="<p>The password for the given ARN from the Key Store in order to access the device.</p>"]
    pub tde_credential_password: Option<String>,
    #[doc="<p>The time zone of the DB instance. The time zone parameter is currently supported only by <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.TimeZone\">Microsoft SQL Server</a>. </p>"]
    pub timezone: Option<String>,
    #[doc="<p>A list of EC2 VPC security groups to associate with this DB instance.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>"]
    pub vpc_security_group_ids: Option<Vec<String>>,
}


/// Serialize `CreateDBInstanceMessage` contents to a `SignedRequest`.
struct CreateDBInstanceMessageSerializer;
impl CreateDBInstanceMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateDBInstanceMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.allocated_storage {
            params.put(&format!("{}{}", prefix, "AllocatedStorage"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.auto_minor_version_upgrade {
            params.put(&format!("{}{}", prefix, "AutoMinorVersionUpgrade"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.availability_zone {
            params.put(&format!("{}{}", prefix, "AvailabilityZone"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.backup_retention_period {
            params.put(&format!("{}{}", prefix, "BackupRetentionPeriod"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.character_set_name {
            params.put(&format!("{}{}", prefix, "CharacterSetName"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.copy_tags_to_snapshot {
            params.put(&format!("{}{}", prefix, "CopyTagsToSnapshot"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.db_cluster_identifier {
            params.put(&format!("{}{}", prefix, "DBClusterIdentifier"),
                       &field_value.replace("+", "%2B"));
        }
        params.put(&format!("{}{}", prefix, "DBInstanceClass"),
                   &obj.db_instance_class.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "DBInstanceIdentifier"),
                   &obj.db_instance_identifier.replace("+", "%2B"));
        if let Some(ref field_value) = obj.db_name {
            params.put(&format!("{}{}", prefix, "DBName"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.db_parameter_group_name {
            params.put(&format!("{}{}", prefix, "DBParameterGroupName"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.db_security_groups {
            DBSecurityGroupNameListSerializer::serialize(params,
                                                         &format!("{}{}",
                                                                 prefix,
                                                                 "DBSecurityGroups"),
                                                         field_value);
        }
        if let Some(ref field_value) = obj.db_subnet_group_name {
            params.put(&format!("{}{}", prefix, "DBSubnetGroupName"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.domain {
            params.put(&format!("{}{}", prefix, "Domain"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.domain_iam_role_name {
            params.put(&format!("{}{}", prefix, "DomainIAMRoleName"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.enable_iam_database_authentication {
            params.put(&format!("{}{}", prefix, "EnableIAMDatabaseAuthentication"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        params.put(&format!("{}{}", prefix, "Engine"),
                   &obj.engine.replace("+", "%2B"));
        if let Some(ref field_value) = obj.engine_version {
            params.put(&format!("{}{}", prefix, "EngineVersion"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.iops {
            params.put(&format!("{}{}", prefix, "Iops"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.kms_key_id {
            params.put(&format!("{}{}", prefix, "KmsKeyId"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.license_model {
            params.put(&format!("{}{}", prefix, "LicenseModel"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.master_user_password {
            params.put(&format!("{}{}", prefix, "MasterUserPassword"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.master_username {
            params.put(&format!("{}{}", prefix, "MasterUsername"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.monitoring_interval {
            params.put(&format!("{}{}", prefix, "MonitoringInterval"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.monitoring_role_arn {
            params.put(&format!("{}{}", prefix, "MonitoringRoleArn"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.multi_az {
            params.put(&format!("{}{}", prefix, "MultiAZ"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.option_group_name {
            params.put(&format!("{}{}", prefix, "OptionGroupName"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.port {
            params.put(&format!("{}{}", prefix, "Port"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.preferred_backup_window {
            params.put(&format!("{}{}", prefix, "PreferredBackupWindow"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.preferred_maintenance_window {
            params.put(&format!("{}{}", prefix, "PreferredMaintenanceWindow"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.promotion_tier {
            params.put(&format!("{}{}", prefix, "PromotionTier"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.publicly_accessible {
            params.put(&format!("{}{}", prefix, "PubliclyAccessible"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.storage_encrypted {
            params.put(&format!("{}{}", prefix, "StorageEncrypted"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.storage_type {
            params.put(&format!("{}{}", prefix, "StorageType"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.tags {
            TagListSerializer::serialize(params, &format!("{}{}", prefix, "Tags"), field_value);
        }
        if let Some(ref field_value) = obj.tde_credential_arn {
            params.put(&format!("{}{}", prefix, "TdeCredentialArn"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.tde_credential_password {
            params.put(&format!("{}{}", prefix, "TdeCredentialPassword"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.timezone {
            params.put(&format!("{}{}", prefix, "Timezone"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.vpc_security_group_ids {
            VpcSecurityGroupIdListSerializer::serialize(params,
                                                        &format!("{}{}",
                                                                prefix,
                                                                "VpcSecurityGroupIds"),
                                                        field_value);
        }

    }
}

#[derive(Default,Debug,Clone)]
pub struct CreateDBInstanceReadReplicaMessage {
    #[doc="<p>Indicates that minor engine upgrades will be applied automatically to the Read Replica during the maintenance window.</p> <p>Default: Inherits from the source DB instance</p>"]
    pub auto_minor_version_upgrade: Option<bool>,
    #[doc="<p>The Amazon EC2 Availability Zone that the Read Replica will be created in.</p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p>"]
    pub availability_zone: Option<String>,
    #[doc="<p>True to copy all tags from the Read Replica to snapshots of the Read Replica; otherwise false. The default is false.</p>"]
    pub copy_tags_to_snapshot: Option<bool>,
    #[doc="<p>The compute and memory capacity of the Read Replica. Note that not all instance classes are available in all regions for all DB engines.</p> <p> Valid Values: <code>db.m1.small | db.m1.medium | db.m1.large | db.m1.xlarge | db.m2.xlarge |db.m2.2xlarge | db.m2.4xlarge | db.m3.medium | db.m3.large | db.m3.xlarge | db.m3.2xlarge | db.m4.large | db.m4.xlarge | db.m4.2xlarge | db.m4.4xlarge | db.m4.10xlarge | db.r3.large | db.r3.xlarge | db.r3.2xlarge | db.r3.4xlarge | db.r3.8xlarge | db.t2.micro | db.t2.small | db.t2.medium | db.t2.large</code> </p> <p>Default: Inherits from the source DB instance.</p>"]
    pub db_instance_class: Option<String>,
    #[doc="<p>The DB instance identifier of the Read Replica. This identifier is the unique key that identifies a DB instance. This parameter is stored as a lowercase string.</p>"]
    pub db_instance_identifier: String,
    #[doc="<p>Specifies a DB subnet group for the DB instance. The new DB instance will be created in the VPC associated with the DB subnet group. If no DB subnet group is specified, then the new DB instance is not created in a VPC.</p> <p>Constraints:</p> <ul> <li> <p>Can only be specified if the source DB instance identifier specifies a DB instance in another AWS Region.</p> </li> <li> <p>The specified DB subnet group must be in the same AWS Region in which the operation is running.</p> </li> <li> <p>All Read Replicas in one AWS Region that are created from the same source DB instance must either:&gt;</p> <ul> <li> <p>Specify DB subnet groups from the same VPC. All these Read Replicas will be created in the same VPC.</p> </li> <li> <p>Not specify a DB subnet group. All these Read Replicas will be created outside of any VPC.</p> </li> </ul> </li> </ul> <p>Constraints: Must contain no more than 255 alphanumeric characters, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>"]
    pub db_subnet_group_name: Option<String>,
    #[doc="<p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts; otherwise false.</p> <p>You can enable IAM database authentication for the following database engines</p> <ul> <li> <p>For MySQL 5.6, minor version 5.6.34 or higher</p> </li> <li> <p>For MySQL 5.7, minor version 5.7.16 or higher</p> </li> <li> <p>Aurora 5.6 or higher.</p> </li> </ul> <p>Default: <code>false</code> </p>"]
    pub enable_iam_database_authentication: Option<bool>,
    #[doc="<p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.</p>"]
    pub iops: Option<i64>,
    #[doc="<p>The AWS KMS key ID for an encrypted Read Replica. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you specify this parameter when you create a Read Replica from an unencrypted DB instance, the Read Replica is encrypted. </p> <p>If you create an encrypted Read Replica in the same AWS Region as the source DB instance, then you do not have to specify a value for this parameter. The Read Replica is encrypted with the same KMS key as the source DB instance. </p> <p>If you create an encrypted Read Replica in a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you cannot use encryption keys from one AWS Region in another AWS Region. </p>"]
    pub kms_key_id: Option<String>,
    #[doc="<p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the Read Replica. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>"]
    pub monitoring_interval: Option<i64>,
    #[doc="<p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole\">To create an IAM role for Amazon RDS Enhanced Monitoring</a>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>"]
    pub monitoring_role_arn: Option<String>,
    #[doc="<p>The option group the DB instance will be associated with. If omitted, the default option group for the engine specified will be used.</p>"]
    pub option_group_name: Option<String>,
    #[doc="<p>The port number that the DB instance uses for connections.</p> <p>Default: Inherits from the source DB instance</p> <p>Valid Values: <code>1150-65535</code> </p>"]
    pub port: Option<i64>,
    #[doc="<p>The URL that contains a Signature Version 4 signed request for the <code>CreateDBInstanceReadReplica</code> API action in the source AWS Region that contains the source DB instance. </p> <p>You must specify this parameter when you create an encrypted Read Replica from another AWS Region by using the Amazon RDS API. You can specify the source region option instead of this parameter when you create an encrypted Read Replica from another AWS Region by using the AWS CLI. </p> <p>The presigned URL must be a valid request for the <code>CreateDBInstanceReadReplica</code> API action that can be executed in the source AWS Region that contains the encrypted source DB instance. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted Read Replica will be created in. This AWS Region is the same one where the <code>CreateDBInstanceReadReplica</code> action is called that contains this presigned URL. </p> <p>For example, if you create an encrypted DB instance in the us-west-1 region, from a source DB instance in the us-east-2 region, then you call the <code>CreateDBInstanceReadReplica</code> action in the us-east-1 region and provide a presigned URL that contains a call to the <code>CreateDBInstanceReadReplica</code> action in the us-west-2 region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 region. </p> </li> <li> <p> <code>KmsKeyId</code> - The KMS key identifier for the key to use to encrypt the Read Replica in the destination AWS Region. This is the same identifier for both the <code>CreateDBInstanceReadReplica</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBInstanceIdentifier</code> - The DB instance identifier for the encrypted DB instance to be replicated. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are creating an encrypted Read Replica from a DB instance in the us-west-2 region, then your <code>SourceDBInstanceIdentifier</code> looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:instance:mysql-instance1-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a href=\"http://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html\">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href=\"http://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\">Signature Version 4 Signing Process</a>. </p>"]
    pub pre_signed_url: Option<String>,
    #[doc="<p>Specifies the accessibility options for the DB instance. A value of true specifies an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. A value of false specifies an internal instance with a DNS name that resolves to a private IP address.</p> <p>Default: The default behavior varies depending on whether a VPC has been requested or not. The following list shows the default behavior in each case.</p> <ul> <li> <p> <b>Default VPC:</b>true</p> </li> <li> <p> <b>VPC:</b>false</p> </li> </ul> <p>If no DB subnet group has been specified as part of the request and the PubliclyAccessible value has not been set, the DB instance will be publicly accessible. If a specific DB subnet group has been specified as part of the request and the PubliclyAccessible value has not been set, the DB instance will be private.</p>"]
    pub publicly_accessible: Option<bool>,
    #[doc="<p>The identifier of the DB instance that will act as the source for the Read Replica. Each DB instance can have up to five Read Replicas.</p> <p>Constraints:</p> <ul> <li> <p>Must be the identifier of an existing MySQL, MariaDB, or PostgreSQL DB instance.</p> </li> <li> <p>Can specify a DB instance that is a MySQL Read Replica only if the source is running MySQL 5.6.</p> </li> <li> <p>Can specify a DB instance that is a PostgreSQL DB instance only if the source is running PostgreSQL 9.3.5 or later (9.4.7 and higher for cross region replication).</p> </li> <li> <p>The specified DB instance must have automatic backups enabled, its backup retention period must be greater than 0.</p> </li> <li> <p>If the source DB instance is in the same AWS Region as the Read Replica, specify a valid DB instance identifier.</p> </li> <li> <p>If the source DB instance is in a different AWS Region than the Read Replica, specify a valid DB instance ARN. For more information, go to <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing\"> Constructing a Amazon RDS Amazon Resource Name (ARN)</a>.</p> </li> </ul>"]
    pub source_db_instance_identifier: String,
    #[doc="<p>Specifies the storage type to be associated with the Read Replica.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified; otherwise <code>standard</code> </p>"]
    pub storage_type: Option<String>,
    pub tags: Option<Vec<Tag>>,
}


/// Serialize `CreateDBInstanceReadReplicaMessage` contents to a `SignedRequest`.
struct CreateDBInstanceReadReplicaMessageSerializer;
impl CreateDBInstanceReadReplicaMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateDBInstanceReadReplicaMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.auto_minor_version_upgrade {
            params.put(&format!("{}{}", prefix, "AutoMinorVersionUpgrade"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.availability_zone {
            params.put(&format!("{}{}", prefix, "AvailabilityZone"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.copy_tags_to_snapshot {
            params.put(&format!("{}{}", prefix, "CopyTagsToSnapshot"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.db_instance_class {
            params.put(&format!("{}{}", prefix, "DBInstanceClass"),
                       &field_value.replace("+", "%2B"));
        }
        params.put(&format!("{}{}", prefix, "DBInstanceIdentifier"),
                   &obj.db_instance_identifier.replace("+", "%2B"));
        if let Some(ref field_value) = obj.db_subnet_group_name {
            params.put(&format!("{}{}", prefix, "DBSubnetGroupName"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.enable_iam_database_authentication {
            params.put(&format!("{}{}", prefix, "EnableIAMDatabaseAuthentication"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.iops {
            params.put(&format!("{}{}", prefix, "Iops"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.kms_key_id {
            params.put(&format!("{}{}", prefix, "KmsKeyId"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.monitoring_interval {
            params.put(&format!("{}{}", prefix, "MonitoringInterval"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.monitoring_role_arn {
            params.put(&format!("{}{}", prefix, "MonitoringRoleArn"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.option_group_name {
            params.put(&format!("{}{}", prefix, "OptionGroupName"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.port {
            params.put(&format!("{}{}", prefix, "Port"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.pre_signed_url {
            params.put(&format!("{}{}", prefix, "PreSignedUrl"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.publicly_accessible {
            params.put(&format!("{}{}", prefix, "PubliclyAccessible"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        params.put(&format!("{}{}", prefix, "SourceDBInstanceIdentifier"),
                   &obj.source_db_instance_identifier.replace("+", "%2B"));
        if let Some(ref field_value) = obj.storage_type {
            params.put(&format!("{}{}", prefix, "StorageType"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.tags {
            TagListSerializer::serialize(params, &format!("{}{}", prefix, "Tags"), field_value);
        }

    }
}

#[derive(Default,Debug,Clone)]
pub struct CreateDBInstanceReadReplicaResult {
    pub db_instance: Option<DBInstance>,
}

struct CreateDBInstanceReadReplicaResultDeserializer;
impl CreateDBInstanceReadReplicaResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>
        (tag_name: &str,
         stack: &mut T)
         -> Result<CreateDBInstanceReadReplicaResult, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = CreateDBInstanceReadReplicaResult::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "DBInstance" => {
                            obj.db_instance =
                                Some(try!(DBInstanceDeserializer::deserialize("DBInstance",
                                                                              stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct CreateDBInstanceResult {
    pub db_instance: Option<DBInstance>,
}

struct CreateDBInstanceResultDeserializer;
impl CreateDBInstanceResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<CreateDBInstanceResult, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = CreateDBInstanceResult::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "DBInstance" => {
                            obj.db_instance =
                                Some(try!(DBInstanceDeserializer::deserialize("DBInstance",
                                                                              stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct CreateDBParameterGroupMessage {
    #[doc="<p>The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family.</p>"]
    pub db_parameter_group_family: String,
    #[doc="<p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>"]
    pub db_parameter_group_name: String,
    #[doc="<p>The description for the DB parameter group.</p>"]
    pub description: String,
    pub tags: Option<Vec<Tag>>,
}


/// Serialize `CreateDBParameterGroupMessage` contents to a `SignedRequest`.
struct CreateDBParameterGroupMessageSerializer;
impl CreateDBParameterGroupMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateDBParameterGroupMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "DBParameterGroupFamily"),
                   &obj.db_parameter_group_family.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "DBParameterGroupName"),
                   &obj.db_parameter_group_name.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "Description"),
                   &obj.description.replace("+", "%2B"));
        if let Some(ref field_value) = obj.tags {
            TagListSerializer::serialize(params, &format!("{}{}", prefix, "Tags"), field_value);
        }

    }
}

#[derive(Default,Debug,Clone)]
pub struct CreateDBParameterGroupResult {
    pub db_parameter_group: Option<DBParameterGroup>,
}

struct CreateDBParameterGroupResultDeserializer;
impl CreateDBParameterGroupResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<CreateDBParameterGroupResult, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = CreateDBParameterGroupResult::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "DBParameterGroup" => {
                            obj.db_parameter_group =
                                Some(try!(DBParameterGroupDeserializer::deserialize("DBParameterGroup",
                                                                                    stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct CreateDBSecurityGroupMessage {
    #[doc="<p>The description for the DB security group.</p>"]
    pub db_security_group_description: String,
    #[doc="<p>The name for the DB security group. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be \"Default\"</p> </li> </ul> <p>Example: <code>mysecuritygroup</code> </p>"]
    pub db_security_group_name: String,
    pub tags: Option<Vec<Tag>>,
}


/// Serialize `CreateDBSecurityGroupMessage` contents to a `SignedRequest`.
struct CreateDBSecurityGroupMessageSerializer;
impl CreateDBSecurityGroupMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateDBSecurityGroupMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "DBSecurityGroupDescription"),
                   &obj.db_security_group_description.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "DBSecurityGroupName"),
                   &obj.db_security_group_name.replace("+", "%2B"));
        if let Some(ref field_value) = obj.tags {
            TagListSerializer::serialize(params, &format!("{}{}", prefix, "Tags"), field_value);
        }

    }
}

#[derive(Default,Debug,Clone)]
pub struct CreateDBSecurityGroupResult {
    pub db_security_group: Option<DBSecurityGroup>,
}

struct CreateDBSecurityGroupResultDeserializer;
impl CreateDBSecurityGroupResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<CreateDBSecurityGroupResult, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = CreateDBSecurityGroupResult::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "DBSecurityGroup" => {
                            obj.db_security_group =
                                Some(try!(DBSecurityGroupDeserializer::deserialize("DBSecurityGroup",
                                                                                   stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct CreateDBSnapshotMessage {
    #[doc="<p>The DB instance identifier. This is the unique key that identifies a DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>"]
    pub db_instance_identifier: String,
    #[doc="<p>The identifier for the DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 alphanumeric characters or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>"]
    pub db_snapshot_identifier: String,
    pub tags: Option<Vec<Tag>>,
}


/// Serialize `CreateDBSnapshotMessage` contents to a `SignedRequest`.
struct CreateDBSnapshotMessageSerializer;
impl CreateDBSnapshotMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateDBSnapshotMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "DBInstanceIdentifier"),
                   &obj.db_instance_identifier.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "DBSnapshotIdentifier"),
                   &obj.db_snapshot_identifier.replace("+", "%2B"));
        if let Some(ref field_value) = obj.tags {
            TagListSerializer::serialize(params, &format!("{}{}", prefix, "Tags"), field_value);
        }

    }
}

#[derive(Default,Debug,Clone)]
pub struct CreateDBSnapshotResult {
    pub db_snapshot: Option<DBSnapshot>,
}

struct CreateDBSnapshotResultDeserializer;
impl CreateDBSnapshotResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<CreateDBSnapshotResult, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = CreateDBSnapshotResult::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "DBSnapshot" => {
                            obj.db_snapshot =
                                Some(try!(DBSnapshotDeserializer::deserialize("DBSnapshot",
                                                                              stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct CreateDBSubnetGroupMessage {
    #[doc="<p>The description for the DB subnet group.</p>"]
    pub db_subnet_group_description: String,
    #[doc="<p>The name for the DB subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>"]
    pub db_subnet_group_name: String,
    #[doc="<p>The EC2 Subnet IDs for the DB subnet group.</p>"]
    pub subnet_ids: Vec<String>,
    pub tags: Option<Vec<Tag>>,
}


/// Serialize `CreateDBSubnetGroupMessage` contents to a `SignedRequest`.
struct CreateDBSubnetGroupMessageSerializer;
impl CreateDBSubnetGroupMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateDBSubnetGroupMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "DBSubnetGroupDescription"),
                   &obj.db_subnet_group_description.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "DBSubnetGroupName"),
                   &obj.db_subnet_group_name.replace("+", "%2B"));
        SubnetIdentifierListSerializer::serialize(params,
                                                  &format!("{}{}", prefix, "SubnetIds"),
                                                  &obj.subnet_ids);
        if let Some(ref field_value) = obj.tags {
            TagListSerializer::serialize(params, &format!("{}{}", prefix, "Tags"), field_value);
        }

    }
}

#[derive(Default,Debug,Clone)]
pub struct CreateDBSubnetGroupResult {
    pub db_subnet_group: Option<DBSubnetGroup>,
}

struct CreateDBSubnetGroupResultDeserializer;
impl CreateDBSubnetGroupResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<CreateDBSubnetGroupResult, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = CreateDBSubnetGroupResult::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "DBSubnetGroup" => {
                            obj.db_subnet_group =
                                Some(try!(DBSubnetGroupDeserializer::deserialize("DBSubnetGroup",
                                                                                 stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct CreateEventSubscriptionMessage {
    #[doc="<p> A Boolean value; set to <b>true</b> to activate the subscription, set to <b>false</b> to create the subscription but not active it. </p>"]
    pub enabled: Option<bool>,
    #[doc="<p> A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html\">Events</a> topic in the Amazon RDS User Guide or by using the <b>DescribeEventCategories</b> action. </p>"]
    pub event_categories: Option<Vec<String>>,
    #[doc="<p>The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.</p>"]
    pub sns_topic_arn: String,
    #[doc="<p>The list of identifiers of the event sources for which events will be returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it cannot end with a hyphen or contain two consecutive hyphens.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIds are supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>"]
    pub source_ids: Option<Vec<String>>,
    #[doc="<p>The type of source that will be generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code> </p>"]
    pub source_type: Option<String>,
    #[doc="<p>The name of the subscription.</p> <p>Constraints: The name must be less than 255 characters.</p>"]
    pub subscription_name: String,
    pub tags: Option<Vec<Tag>>,
}


/// Serialize `CreateEventSubscriptionMessage` contents to a `SignedRequest`.
struct CreateEventSubscriptionMessageSerializer;
impl CreateEventSubscriptionMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateEventSubscriptionMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.enabled {
            params.put(&format!("{}{}", prefix, "Enabled"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.event_categories {
            EventCategoriesListSerializer::serialize(params,
                                                     &format!("{}{}", prefix, "EventCategories"),
                                                     field_value);
        }
        params.put(&format!("{}{}", prefix, "SnsTopicArn"),
                   &obj.sns_topic_arn.replace("+", "%2B"));
        if let Some(ref field_value) = obj.source_ids {
            SourceIdsListSerializer::serialize(params,
                                               &format!("{}{}", prefix, "SourceIds"),
                                               field_value);
        }
        if let Some(ref field_value) = obj.source_type {
            params.put(&format!("{}{}", prefix, "SourceType"),
                       &field_value.replace("+", "%2B"));
        }
        params.put(&format!("{}{}", prefix, "SubscriptionName"),
                   &obj.subscription_name.replace("+", "%2B"));
        if let Some(ref field_value) = obj.tags {
            TagListSerializer::serialize(params, &format!("{}{}", prefix, "Tags"), field_value);
        }

    }
}

#[derive(Default,Debug,Clone)]
pub struct CreateEventSubscriptionResult {
    pub event_subscription: Option<EventSubscription>,
}

struct CreateEventSubscriptionResultDeserializer;
impl CreateEventSubscriptionResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<CreateEventSubscriptionResult, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = CreateEventSubscriptionResult::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "EventSubscription" => {
                            obj.event_subscription =
                                Some(try!(EventSubscriptionDeserializer::deserialize("EventSubscription",
                                                                                     stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct CreateOptionGroupMessage {
    #[doc="<p>Specifies the name of the engine that this option group should be associated with.</p>"]
    pub engine_name: String,
    #[doc="<p>Specifies the major version of the engine that this option group should be associated with.</p>"]
    pub major_engine_version: String,
    #[doc="<p>The description of the option group.</p>"]
    pub option_group_description: String,
    #[doc="<p>Specifies the name of the option group to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>myoptiongroup</code> </p>"]
    pub option_group_name: String,
    pub tags: Option<Vec<Tag>>,
}


/// Serialize `CreateOptionGroupMessage` contents to a `SignedRequest`.
struct CreateOptionGroupMessageSerializer;
impl CreateOptionGroupMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateOptionGroupMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "EngineName"),
                   &obj.engine_name.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "MajorEngineVersion"),
                   &obj.major_engine_version.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "OptionGroupDescription"),
                   &obj.option_group_description.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "OptionGroupName"),
                   &obj.option_group_name.replace("+", "%2B"));
        if let Some(ref field_value) = obj.tags {
            TagListSerializer::serialize(params, &format!("{}{}", prefix, "Tags"), field_value);
        }

    }
}

#[derive(Default,Debug,Clone)]
pub struct CreateOptionGroupResult {
    pub option_group: Option<OptionGroup>,
}

struct CreateOptionGroupResultDeserializer;
impl CreateOptionGroupResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<CreateOptionGroupResult, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = CreateOptionGroupResult::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "OptionGroup" => {
                            obj.option_group =
                                Some(try!(OptionGroupDeserializer::deserialize("OptionGroup",
                                                                               stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p>Contains the result of a successful invocation of the following actions:</p> <ul> <li> <p> <a>CreateDBCluster</a> </p> </li> <li> <p> <a>DeleteDBCluster</a> </p> </li> <li> <p> <a>FailoverDBCluster</a> </p> </li> <li> <p> <a>ModifyDBCluster</a> </p> </li> <li> <p> <a>RestoreDBClusterFromSnapshot</a> </p> </li> <li> <p> <a>RestoreDBClusterToPointInTime</a> </p> </li> </ul> <p>This data type is used as a response element in the <a>DescribeDBClusters</a> action.</p>"]
#[derive(Default,Debug,Clone)]
pub struct DBCluster {
    #[doc="<p>For all database engines except Amazon Aurora, <code>AllocatedStorage</code> specifies the allocated storage size in gigabytes (GB). For Aurora, <code>AllocatedStorage</code> always returns 1, because Aurora DB cluster storage size is not fixed, but instead automatically adjusts as needed.</p>"]
    pub allocated_storage: Option<i64>,
    #[doc="<p>Provides a list of the AWS Identity and Access Management (IAM) roles that are associated with the DB cluster. IAM roles that are associated with a DB cluster grant permission for the DB cluster to access other AWS services on your behalf.</p>"]
    pub associated_roles: Option<Vec<DBClusterRole>>,
    #[doc="<p>Provides the list of EC2 Availability Zones that instances in the DB cluster can be created in.</p>"]
    pub availability_zones: Option<Vec<String>>,
    #[doc="<p>Specifies the number of days for which automatic DB snapshots are retained.</p>"]
    pub backup_retention_period: Option<i64>,
    #[doc="<p>If present, specifies the name of the character set that this cluster is associated with.</p>"]
    pub character_set_name: Option<String>,
    #[doc="<p>Identifies the clone group to which the DB cluster is associated.</p>"]
    pub clone_group_id: Option<String>,
    #[doc="<p>Specifies the time when the DB cluster was created, in Universal Coordinated Time (UTC).</p>"]
    pub cluster_create_time: Option<String>,
    #[doc="<p>The Amazon Resource Name (ARN) for the DB cluster.</p>"]
    pub db_cluster_arn: Option<String>,
    #[doc="<p>Contains a user-supplied DB cluster identifier. This identifier is the unique key that identifies a DB cluster.</p>"]
    pub db_cluster_identifier: Option<String>,
    #[doc="<p>Provides the list of instances that make up the DB cluster.</p>"]
    pub db_cluster_members: Option<Vec<DBClusterMember>>,
    #[doc="<p>Provides the list of option group memberships for this DB cluster.</p>"]
    pub db_cluster_option_group_memberships: Option<Vec<DBClusterOptionGroupStatus>>,
    #[doc="<p>Specifies the name of the DB cluster parameter group for the DB cluster.</p>"]
    pub db_cluster_parameter_group: Option<String>,
    #[doc="<p>Specifies information on the subnet group associated with the DB cluster, including the name, description, and subnets in the subnet group.</p>"]
    pub db_subnet_group: Option<String>,
    #[doc="<p>Contains the name of the initial database of this DB cluster that was provided at create time, if one was specified when the DB cluster was created. This same name is returned for the life of the DB cluster.</p>"]
    pub database_name: Option<String>,
    #[doc="<p>The region-unique, immutable identifier for the DB cluster. This identifier is found in AWS CloudTrail log entries whenever the KMS key for the DB cluster is accessed.</p>"]
    pub db_cluster_resource_id: Option<String>,
    #[doc="<p>Specifies the earliest time to which a database can be restored with point-in-time restore.</p>"]
    pub earliest_restorable_time: Option<String>,
    #[doc="<p>Specifies the connection endpoint for the primary instance of the DB cluster.</p>"]
    pub endpoint: Option<String>,
    #[doc="<p>Provides the name of the database engine to be used for this DB cluster.</p>"]
    pub engine: Option<String>,
    #[doc="<p>Indicates the database engine version.</p>"]
    pub engine_version: Option<String>,
    #[doc="<p>Specifies the ID that Amazon Route 53 assigns when you create a hosted zone.</p>"]
    pub hosted_zone_id: Option<String>,
    #[doc="<p>True if mapping of AWS Identity and Access Management (IAM) accounts to database accounts is enabled; otherwise false.</p>"]
    pub iam_database_authentication_enabled: Option<bool>,
    #[doc="<p>If <code>StorageEncrypted</code> is true, the KMS key identifier for the encrypted DB cluster.</p>"]
    pub kms_key_id: Option<String>,
    #[doc="<p>Specifies the latest time to which a database can be restored with point-in-time restore.</p>"]
    pub latest_restorable_time: Option<String>,
    #[doc="<p>Contains the master username for the DB cluster.</p>"]
    pub master_username: Option<String>,
    #[doc="<p>Specifies whether the DB cluster has instances in multiple Availability Zones.</p>"]
    pub multi_az: Option<bool>,
    #[doc="<p>Specifies the progress of the operation as a percentage.</p>"]
    pub percent_progress: Option<String>,
    #[doc="<p>Specifies the port that the database engine is listening on.</p>"]
    pub port: Option<i64>,
    #[doc="<p>Specifies the daily time range during which automated backups are created if automated backups are enabled, as determined by the <code>BackupRetentionPeriod</code>. </p>"]
    pub preferred_backup_window: Option<String>,
    #[doc="<p>Specifies the weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p>"]
    pub preferred_maintenance_window: Option<String>,
    #[doc="<p>Contains one or more identifiers of the Read Replicas associated with this DB cluster.</p>"]
    pub read_replica_identifiers: Option<Vec<String>>,
    #[doc="<p>The reader endpoint for the DB cluster. The reader endpoint for a DB cluster load-balances connections across the Aurora Replicas that are available in a DB cluster. As clients request new connections to the reader endpoint, Aurora distributes the connection requests among the Aurora Replicas in the DB cluster. This functionality can help balance your read workload across multiple Aurora Replicas in your DB cluster. </p> <p>If a failover occurs, and the Aurora Replica that you are connected to is promoted to be the primary instance, your connection will be dropped. To continue sending your read workload to other Aurora Replicas in the cluster, you can then reconnect to the reader endpoint.</p>"]
    pub reader_endpoint: Option<String>,
    #[doc="<p>Contains the identifier of the source DB cluster if this DB cluster is a Read Replica.</p>"]
    pub replication_source_identifier: Option<String>,
    #[doc="<p>Specifies the current state of this DB cluster.</p>"]
    pub status: Option<String>,
    #[doc="<p>Specifies whether the DB cluster is encrypted.</p>"]
    pub storage_encrypted: Option<bool>,
    #[doc="<p>Provides a list of VPC security groups that the DB cluster belongs to.</p>"]
    pub vpc_security_groups: Option<Vec<VpcSecurityGroupMembership>>,
}

struct DBClusterDeserializer;
impl DBClusterDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<DBCluster, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = DBCluster::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "AllocatedStorage" => {
                            obj.allocated_storage =
                                Some(try!(IntegerOptionalDeserializer::deserialize("AllocatedStorage",
                                                                                   stack)));
                        }
                        "AssociatedRoles" => {
                            obj.associated_roles =
                                Some(try!(DBClusterRolesDeserializer::deserialize("AssociatedRoles",
                                                                                  stack)));
                        }
                        "AvailabilityZones" => {
                            obj.availability_zones =
                                Some(try!(AvailabilityZonesDeserializer::deserialize("AvailabilityZones",
                                                                                     stack)));
                        }
                        "BackupRetentionPeriod" => {
                            obj.backup_retention_period =
                                Some(try!(IntegerOptionalDeserializer::deserialize("BackupRetentionPeriod",
                                                                                   stack)));
                        }
                        "CharacterSetName" => {
                            obj.character_set_name =
                                Some(try!(StringDeserializer::deserialize("CharacterSetName",
                                                                          stack)));
                        }
                        "CloneGroupId" => {
                            obj.clone_group_id = Some(try!(StringDeserializer::deserialize("CloneGroupId",
                                                                                           stack)));
                        }
                        "ClusterCreateTime" => {
                            obj.cluster_create_time =
                                Some(try!(TStampDeserializer::deserialize("ClusterCreateTime",
                                                                          stack)));
                        }
                        "DBClusterArn" => {
                            obj.db_cluster_arn = Some(try!(StringDeserializer::deserialize("DBClusterArn",
                                                                                           stack)));
                        }
                        "DBClusterIdentifier" => {
                            obj.db_cluster_identifier =
                                Some(try!(StringDeserializer::deserialize("DBClusterIdentifier",
                                                                          stack)));
                        }
                        "DBClusterMembers" => {
                            obj.db_cluster_members =
                                Some(try!(DBClusterMemberListDeserializer::deserialize("DBClusterMembers",
                                                                                       stack)));
                        }
                        "DBClusterOptionGroupMemberships" => {
                            obj.db_cluster_option_group_memberships = Some(try!(DBClusterOptionGroupMembershipsDeserializer::deserialize("DBClusterOptionGroupMemberships", stack)));
                        }
                        "DBClusterParameterGroup" => {
                            obj.db_cluster_parameter_group =
                                Some(try!(StringDeserializer::deserialize("DBClusterParameterGroup",
                                                                          stack)));
                        }
                        "DBSubnetGroup" => {
                            obj.db_subnet_group =
                                Some(try!(StringDeserializer::deserialize("DBSubnetGroup", stack)));
                        }
                        "DatabaseName" => {
                            obj.database_name = Some(try!(StringDeserializer::deserialize("DatabaseName",
                                                                                          stack)));
                        }
                        "DbClusterResourceId" => {
                            obj.db_cluster_resource_id =
                                Some(try!(StringDeserializer::deserialize("DbClusterResourceId",
                                                                          stack)));
                        }
                        "EarliestRestorableTime" => {
                            obj.earliest_restorable_time =
                                Some(try!(TStampDeserializer::deserialize("EarliestRestorableTime",
                                                                          stack)));
                        }
                        "Endpoint" => {
                            obj.endpoint = Some(try!(StringDeserializer::deserialize("Endpoint",
                                                                                     stack)));
                        }
                        "Engine" => {
                            obj.engine = Some(try!(StringDeserializer::deserialize("Engine",
                                                                                   stack)));
                        }
                        "EngineVersion" => {
                            obj.engine_version = Some(try!(StringDeserializer::deserialize("EngineVersion",
                                                                                           stack)));
                        }
                        "HostedZoneId" => {
                            obj.hosted_zone_id = Some(try!(StringDeserializer::deserialize("HostedZoneId",
                                                                                           stack)));
                        }
                        "IAMDatabaseAuthenticationEnabled" => {
                            obj.iam_database_authentication_enabled =
                                Some(try!(BooleanDeserializer::deserialize("IAMDatabaseAuthenticationEnabled",
                                                                           stack)));
                        }
                        "KmsKeyId" => {
                            obj.kms_key_id = Some(try!(StringDeserializer::deserialize("KmsKeyId",
                                                                                       stack)));
                        }
                        "LatestRestorableTime" => {
                            obj.latest_restorable_time =
                                Some(try!(TStampDeserializer::deserialize("LatestRestorableTime",
                                                                          stack)));
                        }
                        "MasterUsername" => {
                            obj.master_username =
                                Some(try!(StringDeserializer::deserialize("MasterUsername",
                                                                          stack)));
                        }
                        "MultiAZ" => {
                            obj.multi_az = Some(try!(BooleanDeserializer::deserialize("MultiAZ",
                                                                                      stack)));
                        }
                        "PercentProgress" => {
                            obj.percent_progress =
                                Some(try!(StringDeserializer::deserialize("PercentProgress",
                                                                          stack)));
                        }
                        "Port" => {
                            obj.port = Some(try!(IntegerOptionalDeserializer::deserialize("Port",
                                                                                          stack)));
                        }
                        "PreferredBackupWindow" => {
                            obj.preferred_backup_window =
                                Some(try!(StringDeserializer::deserialize("PreferredBackupWindow",
                                                                          stack)));
                        }
                        "PreferredMaintenanceWindow" => {
                            obj.preferred_maintenance_window =
                                Some(try!(StringDeserializer::deserialize("PreferredMaintenanceWindow",
                                                                          stack)));
                        }
                        "ReadReplicaIdentifiers" => {
                            obj.read_replica_identifiers = Some(try!(ReadReplicaIdentifierListDeserializer::deserialize("ReadReplicaIdentifiers", stack)));
                        }
                        "ReaderEndpoint" => {
                            obj.reader_endpoint =
                                Some(try!(StringDeserializer::deserialize("ReaderEndpoint",
                                                                          stack)));
                        }
                        "ReplicationSourceIdentifier" => {
                            obj.replication_source_identifier =
                                Some(try!(StringDeserializer::deserialize("ReplicationSourceIdentifier",
                                                                          stack)));
                        }
                        "Status" => {
                            obj.status = Some(try!(StringDeserializer::deserialize("Status",
                                                                                   stack)));
                        }
                        "StorageEncrypted" => {
                            obj.storage_encrypted =
                                Some(try!(BooleanDeserializer::deserialize("StorageEncrypted",
                                                                           stack)));
                        }
                        "VpcSecurityGroups" => {
                            obj.vpc_security_groups = Some(try!(VpcSecurityGroupMembershipListDeserializer::deserialize("VpcSecurityGroups", stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct DBClusterListDeserializer;
impl DBClusterListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<DBCluster>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "DBCluster" {
                        obj.push(try!(DBClusterDeserializer::deserialize("DBCluster", stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
#[doc="<p>Contains information about an instance that is part of a DB cluster.</p>"]
#[derive(Default,Debug,Clone)]
pub struct DBClusterMember {
    #[doc="<p>Specifies the status of the DB cluster parameter group for this member of the DB cluster.</p>"]
    pub db_cluster_parameter_group_status: Option<String>,
    #[doc="<p>Specifies the instance identifier for this member of the DB cluster.</p>"]
    pub db_instance_identifier: Option<String>,
    #[doc="<p>Value that is <code>true</code> if the cluster member is the primary instance for the DB cluster and <code>false</code> otherwise.</p>"]
    pub is_cluster_writer: Option<bool>,
    #[doc="<p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Aurora.Managing.html#Aurora.Managing.FaultTolerance\"> Fault Tolerance for an Aurora DB Cluster</a>. </p>"]
    pub promotion_tier: Option<i64>,
}

struct DBClusterMemberDeserializer;
impl DBClusterMemberDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<DBClusterMember, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = DBClusterMember::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "DBClusterParameterGroupStatus" => {
                            obj.db_cluster_parameter_group_status =
                                Some(try!(StringDeserializer::deserialize("DBClusterParameterGroupStatus",
                                                                          stack)));
                        }
                        "DBInstanceIdentifier" => {
                            obj.db_instance_identifier =
                                Some(try!(StringDeserializer::deserialize("DBInstanceIdentifier",
                                                                          stack)));
                        }
                        "IsClusterWriter" => {
                            obj.is_cluster_writer =
                                Some(try!(BooleanDeserializer::deserialize("IsClusterWriter",
                                                                           stack)));
                        }
                        "PromotionTier" => {
                            obj.promotion_tier =
                                Some(try!(IntegerOptionalDeserializer::deserialize("PromotionTier",
                                                                                   stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct DBClusterMemberListDeserializer;
impl DBClusterMemberListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<DBClusterMember>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "DBClusterMember" {
                        obj.push(try!(DBClusterMemberDeserializer::deserialize("DBClusterMember",
                                                                               stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
#[doc="<p>Contains the result of a successful invocation of the <a>DescribeDBClusters</a> action.</p>"]
#[derive(Default,Debug,Clone)]
pub struct DBClusterMessage {
    #[doc="<p>Contains a list of DB clusters for the user.</p>"]
    pub db_clusters: Option<Vec<DBCluster>>,
    #[doc="<p>A pagination token that can be used in a subsequent DescribeDBClusters request.</p>"]
    pub marker: Option<String>,
}

struct DBClusterMessageDeserializer;
impl DBClusterMessageDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<DBClusterMessage, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = DBClusterMessage::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "DBClusters" => {
                            obj.db_clusters =
                                Some(try!(DBClusterListDeserializer::deserialize("DBClusters",
                                                                                 stack)));
                        }
                        "Marker" => {
                            obj.marker = Some(try!(StringDeserializer::deserialize("Marker",
                                                                                   stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct DBClusterOptionGroupMembershipsDeserializer;
impl DBClusterOptionGroupMembershipsDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>
        (tag_name: &str,
         stack: &mut T)
         -> Result<Vec<DBClusterOptionGroupStatus>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "DBClusterOptionGroup" {
                        obj.push(try!(DBClusterOptionGroupStatusDeserializer::deserialize("DBClusterOptionGroup", stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
#[doc="<p>Contains status information for a DB cluster option group.</p>"]
#[derive(Default,Debug,Clone)]
pub struct DBClusterOptionGroupStatus {
    #[doc="<p>Specifies the name of the DB cluster option group.</p>"]
    pub db_cluster_option_group_name: Option<String>,
    #[doc="<p>Specifies the status of the DB cluster option group.</p>"]
    pub status: Option<String>,
}

struct DBClusterOptionGroupStatusDeserializer;
impl DBClusterOptionGroupStatusDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<DBClusterOptionGroupStatus, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = DBClusterOptionGroupStatus::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "DBClusterOptionGroupName" => {
                            obj.db_cluster_option_group_name =
                                Some(try!(StringDeserializer::deserialize("DBClusterOptionGroupName",
                                                                          stack)));
                        }
                        "Status" => {
                            obj.status = Some(try!(StringDeserializer::deserialize("Status",
                                                                                   stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p>Contains the result of a successful invocation of the <a>CreateDBClusterParameterGroup</a> or <a>CopyDBClusterParameterGroup</a> action. </p> <p>This data type is used as a request parameter in the <a>DeleteDBClusterParameterGroup</a> action, and as a response element in the <a>DescribeDBClusterParameterGroups</a> action. </p>"]
#[derive(Default,Debug,Clone)]
pub struct DBClusterParameterGroup {
    #[doc="<p>The Amazon Resource Name (ARN) for the DB cluster parameter group.</p>"]
    pub db_cluster_parameter_group_arn: Option<String>,
    #[doc="<p>Provides the name of the DB cluster parameter group.</p>"]
    pub db_cluster_parameter_group_name: Option<String>,
    #[doc="<p>Provides the name of the DB parameter group family that this DB cluster parameter group is compatible with.</p>"]
    pub db_parameter_group_family: Option<String>,
    #[doc="<p>Provides the customer-specified description for this DB cluster parameter group.</p>"]
    pub description: Option<String>,
}

struct DBClusterParameterGroupDeserializer;
impl DBClusterParameterGroupDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<DBClusterParameterGroup, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = DBClusterParameterGroup::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "DBClusterParameterGroupArn" => {
                            obj.db_cluster_parameter_group_arn =
                                Some(try!(StringDeserializer::deserialize("DBClusterParameterGroupArn",
                                                                          stack)));
                        }
                        "DBClusterParameterGroupName" => {
                            obj.db_cluster_parameter_group_name =
                                Some(try!(StringDeserializer::deserialize("DBClusterParameterGroupName",
                                                                          stack)));
                        }
                        "DBParameterGroupFamily" => {
                            obj.db_parameter_group_family =
                                Some(try!(StringDeserializer::deserialize("DBParameterGroupFamily",
                                                                          stack)));
                        }
                        "Description" => {
                            obj.description = Some(try!(StringDeserializer::deserialize("Description",
                                                                                        stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p>Provides details about a DB cluster parameter group including the parameters in the DB cluster parameter group.</p>"]
#[derive(Default,Debug,Clone)]
pub struct DBClusterParameterGroupDetails {
    #[doc="<p> An optional pagination token provided by a previous DescribeDBClusterParameters request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . </p>"]
    pub marker: Option<String>,
    #[doc="<p>Provides a list of parameters for the DB cluster parameter group.</p>"]
    pub parameters: Option<Vec<Parameter>>,
}

struct DBClusterParameterGroupDetailsDeserializer;
impl DBClusterParameterGroupDetailsDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<DBClusterParameterGroupDetails, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = DBClusterParameterGroupDetails::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "Marker" => {
                            obj.marker = Some(try!(StringDeserializer::deserialize("Marker",
                                                                                   stack)));
                        }
                        "Parameters" => {
                            obj.parameters =
                                Some(try!(ParametersListDeserializer::deserialize("Parameters",
                                                                                  stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct DBClusterParameterGroupListDeserializer;
impl DBClusterParameterGroupListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<DBClusterParameterGroup>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "DBClusterParameterGroup" {
                        obj.push(try!(DBClusterParameterGroupDeserializer::deserialize("DBClusterParameterGroup", stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct DBClusterParameterGroupNameMessage {
    #[doc="<p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>"]
    pub db_cluster_parameter_group_name: Option<String>,
}

struct DBClusterParameterGroupNameMessageDeserializer;
impl DBClusterParameterGroupNameMessageDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>
        (tag_name: &str,
         stack: &mut T)
         -> Result<DBClusterParameterGroupNameMessage, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = DBClusterParameterGroupNameMessage::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "DBClusterParameterGroupName" => {
                            obj.db_cluster_parameter_group_name =
                                Some(try!(StringDeserializer::deserialize("DBClusterParameterGroupName",
                                                                          stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct DBClusterParameterGroupsMessage {
    #[doc="<p>A list of DB cluster parameter groups.</p>"]
    pub db_cluster_parameter_groups: Option<Vec<DBClusterParameterGroup>>,
    #[doc="<p> An optional pagination token provided by a previous <code>DescribeDBClusterParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>"]
    pub marker: Option<String>,
}

struct DBClusterParameterGroupsMessageDeserializer;
impl DBClusterParameterGroupsMessageDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>
        (tag_name: &str,
         stack: &mut T)
         -> Result<DBClusterParameterGroupsMessage, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = DBClusterParameterGroupsMessage::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "DBClusterParameterGroups" => {
                            obj.db_cluster_parameter_groups = Some(try!(DBClusterParameterGroupListDeserializer::deserialize("DBClusterParameterGroups", stack)));
                        }
                        "Marker" => {
                            obj.marker = Some(try!(StringDeserializer::deserialize("Marker",
                                                                                   stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p>Describes an AWS Identity and Access Management (IAM) role that is associated with a DB cluster.</p>"]
#[derive(Default,Debug,Clone)]
pub struct DBClusterRole {
    #[doc="<p>The Amazon Resource Name (ARN) of the IAM role that is associated with the DB cluster.</p>"]
    pub role_arn: Option<String>,
    #[doc="<p>Describes the state of association between the IAM role and the DB cluster. The Status property returns one of the following values:</p> <ul> <li> <p> <code>ACTIVE</code> - the IAM role ARN is associated with the DB cluster and can be used to access other AWS services on your behalf.</p> </li> <li> <p> <code>PENDING</code> - the IAM role ARN is being associated with the DB cluster.</p> </li> <li> <p> <code>INVALID</code> - the IAM role ARN is associated with the DB cluster, but the DB cluster is unable to assume the IAM role in order to access other AWS services on your behalf.</p> </li> </ul>"]
    pub status: Option<String>,
}

struct DBClusterRoleDeserializer;
impl DBClusterRoleDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<DBClusterRole, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = DBClusterRole::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "RoleArn" => {
                            obj.role_arn = Some(try!(StringDeserializer::deserialize("RoleArn",
                                                                                     stack)));
                        }
                        "Status" => {
                            obj.status = Some(try!(StringDeserializer::deserialize("Status",
                                                                                   stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct DBClusterRolesDeserializer;
impl DBClusterRolesDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<DBClusterRole>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "DBClusterRole" {
                        obj.push(try!(DBClusterRoleDeserializer::deserialize("DBClusterRole",
                                                                             stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
#[doc="<p>Contains the result of a successful invocation of the following actions:</p> <ul> <li> <p> <a>CreateDBClusterSnapshot</a> </p> </li> <li> <p> <a>DeleteDBClusterSnapshot</a> </p> </li> </ul> <p>This data type is used as a response element in the <a>DescribeDBClusterSnapshots</a> action.</p>"]
#[derive(Default,Debug,Clone)]
pub struct DBClusterSnapshot {
    #[doc="<p>Specifies the allocated storage size in gigabytes (GB).</p>"]
    pub allocated_storage: Option<i64>,
    #[doc="<p>Provides the list of EC2 Availability Zones that instances in the DB cluster snapshot can be restored in.</p>"]
    pub availability_zones: Option<Vec<String>>,
    #[doc="<p>Specifies the time when the DB cluster was created, in Universal Coordinated Time (UTC).</p>"]
    pub cluster_create_time: Option<String>,
    #[doc="<p>Specifies the DB cluster identifier of the DB cluster that this DB cluster snapshot was created from.</p>"]
    pub db_cluster_identifier: Option<String>,
    #[doc="<p>The Amazon Resource Name (ARN) for the DB cluster snapshot.</p>"]
    pub db_cluster_snapshot_arn: Option<String>,
    #[doc="<p>Specifies the identifier for the DB cluster snapshot.</p>"]
    pub db_cluster_snapshot_identifier: Option<String>,
    #[doc="<p>Specifies the name of the database engine.</p>"]
    pub engine: Option<String>,
    #[doc="<p>Provides the version of the database engine for this DB cluster snapshot.</p>"]
    pub engine_version: Option<String>,
    #[doc="<p>True if mapping of AWS Identity and Access Management (IAM) accounts to database accounts is enabled; otherwise false.</p>"]
    pub iam_database_authentication_enabled: Option<bool>,
    #[doc="<p>If <code>StorageEncrypted</code> is true, the KMS key identifier for the encrypted DB cluster snapshot.</p>"]
    pub kms_key_id: Option<String>,
    #[doc="<p>Provides the license model information for this DB cluster snapshot.</p>"]
    pub license_model: Option<String>,
    #[doc="<p>Provides the master username for the DB cluster snapshot.</p>"]
    pub master_username: Option<String>,
    #[doc="<p>Specifies the percentage of the estimated data that has been transferred.</p>"]
    pub percent_progress: Option<i64>,
    #[doc="<p>Specifies the port that the DB cluster was listening on at the time of the snapshot.</p>"]
    pub port: Option<i64>,
    #[doc="<p>Provides the time when the snapshot was taken, in Universal Coordinated Time (UTC).</p>"]
    pub snapshot_create_time: Option<String>,
    #[doc="<p>Provides the type of the DB cluster snapshot.</p>"]
    pub snapshot_type: Option<String>,
    #[doc="<p>If the DB cluster snapshot was copied from a source DB cluster snapshot, the Amazon Resource Name (ARN) for the source DB cluster snapshot; otherwise, a null value.</p>"]
    pub source_db_cluster_snapshot_arn: Option<String>,
    #[doc="<p>Specifies the status of this DB cluster snapshot.</p>"]
    pub status: Option<String>,
    #[doc="<p>Specifies whether the DB cluster snapshot is encrypted.</p>"]
    pub storage_encrypted: Option<bool>,
    #[doc="<p>Provides the VPC ID associated with the DB cluster snapshot.</p>"]
    pub vpc_id: Option<String>,
}

struct DBClusterSnapshotDeserializer;
impl DBClusterSnapshotDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<DBClusterSnapshot, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = DBClusterSnapshot::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "AllocatedStorage" => {
                            obj.allocated_storage =
                                Some(try!(IntegerDeserializer::deserialize("AllocatedStorage",
                                                                           stack)));
                        }
                        "AvailabilityZones" => {
                            obj.availability_zones =
                                Some(try!(AvailabilityZonesDeserializer::deserialize("AvailabilityZones",
                                                                                     stack)));
                        }
                        "ClusterCreateTime" => {
                            obj.cluster_create_time =
                                Some(try!(TStampDeserializer::deserialize("ClusterCreateTime",
                                                                          stack)));
                        }
                        "DBClusterIdentifier" => {
                            obj.db_cluster_identifier =
                                Some(try!(StringDeserializer::deserialize("DBClusterIdentifier",
                                                                          stack)));
                        }
                        "DBClusterSnapshotArn" => {
                            obj.db_cluster_snapshot_arn =
                                Some(try!(StringDeserializer::deserialize("DBClusterSnapshotArn",
                                                                          stack)));
                        }
                        "DBClusterSnapshotIdentifier" => {
                            obj.db_cluster_snapshot_identifier =
                                Some(try!(StringDeserializer::deserialize("DBClusterSnapshotIdentifier",
                                                                          stack)));
                        }
                        "Engine" => {
                            obj.engine = Some(try!(StringDeserializer::deserialize("Engine",
                                                                                   stack)));
                        }
                        "EngineVersion" => {
                            obj.engine_version = Some(try!(StringDeserializer::deserialize("EngineVersion",
                                                                                           stack)));
                        }
                        "IAMDatabaseAuthenticationEnabled" => {
                            obj.iam_database_authentication_enabled =
                                Some(try!(BooleanDeserializer::deserialize("IAMDatabaseAuthenticationEnabled",
                                                                           stack)));
                        }
                        "KmsKeyId" => {
                            obj.kms_key_id = Some(try!(StringDeserializer::deserialize("KmsKeyId",
                                                                                       stack)));
                        }
                        "LicenseModel" => {
                            obj.license_model = Some(try!(StringDeserializer::deserialize("LicenseModel",
                                                                                          stack)));
                        }
                        "MasterUsername" => {
                            obj.master_username =
                                Some(try!(StringDeserializer::deserialize("MasterUsername",
                                                                          stack)));
                        }
                        "PercentProgress" => {
                            obj.percent_progress =
                                Some(try!(IntegerDeserializer::deserialize("PercentProgress",
                                                                           stack)));
                        }
                        "Port" => {
                            obj.port = Some(try!(IntegerDeserializer::deserialize("Port", stack)));
                        }
                        "SnapshotCreateTime" => {
                            obj.snapshot_create_time =
                                Some(try!(TStampDeserializer::deserialize("SnapshotCreateTime",
                                                                          stack)));
                        }
                        "SnapshotType" => {
                            obj.snapshot_type = Some(try!(StringDeserializer::deserialize("SnapshotType",
                                                                                          stack)));
                        }
                        "SourceDBClusterSnapshotArn" => {
                            obj.source_db_cluster_snapshot_arn =
                                Some(try!(StringDeserializer::deserialize("SourceDBClusterSnapshotArn",
                                                                          stack)));
                        }
                        "Status" => {
                            obj.status = Some(try!(StringDeserializer::deserialize("Status",
                                                                                   stack)));
                        }
                        "StorageEncrypted" => {
                            obj.storage_encrypted =
                                Some(try!(BooleanDeserializer::deserialize("StorageEncrypted",
                                                                           stack)));
                        }
                        "VpcId" => {
                            obj.vpc_id = Some(try!(StringDeserializer::deserialize("VpcId",
                                                                                   stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p>Contains the name and values of a manual DB cluster snapshot attribute.</p> <p>Manual DB cluster snapshot attributes are used to authorize other AWS accounts to restore a manual DB cluster snapshot. For more information, see the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>"]
#[derive(Default,Debug,Clone)]
pub struct DBClusterSnapshotAttribute {
    #[doc="<p>The name of the manual DB cluster snapshot attribute.</p> <p>The attribute named <code>restore</code> refers to the list of AWS accounts that have permission to copy or restore the manual DB cluster snapshot. For more information, see the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>"]
    pub attribute_name: Option<String>,
    #[doc="<p>The value(s) for the manual DB cluster snapshot attribute.</p> <p>If the <code>AttributeName</code> field is set to <code>restore</code>, then this element returns a list of IDs of the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If a value of <code>all</code> is in the list, then the manual DB cluster snapshot is public and available for any AWS account to copy or restore.</p>"]
    pub attribute_values: Option<Vec<String>>,
}

struct DBClusterSnapshotAttributeDeserializer;
impl DBClusterSnapshotAttributeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<DBClusterSnapshotAttribute, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = DBClusterSnapshotAttribute::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "AttributeName" => {
                            obj.attribute_name = Some(try!(StringDeserializer::deserialize("AttributeName",
                                                                                           stack)));
                        }
                        "AttributeValues" => {
                            obj.attribute_values =
                                Some(try!(AttributeValueListDeserializer::deserialize("AttributeValues",
                                                                                      stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct DBClusterSnapshotAttributeListDeserializer;
impl DBClusterSnapshotAttributeListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>
        (tag_name: &str,
         stack: &mut T)
         -> Result<Vec<DBClusterSnapshotAttribute>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "DBClusterSnapshotAttribute" {
                        obj.push(try!(DBClusterSnapshotAttributeDeserializer::deserialize("DBClusterSnapshotAttribute", stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
#[doc="<p>Contains the results of a successful call to the <a>DescribeDBClusterSnapshotAttributes</a> API action.</p> <p>Manual DB cluster snapshot attributes are used to authorize other AWS accounts to copy or restore a manual DB cluster snapshot. For more information, see the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>"]
#[derive(Default,Debug,Clone)]
pub struct DBClusterSnapshotAttributesResult {
    #[doc="<p>The list of attributes and values for the manual DB cluster snapshot.</p>"]
    pub db_cluster_snapshot_attributes: Option<Vec<DBClusterSnapshotAttribute>>,
    #[doc="<p>The identifier of the manual DB cluster snapshot that the attributes apply to.</p>"]
    pub db_cluster_snapshot_identifier: Option<String>,
}

struct DBClusterSnapshotAttributesResultDeserializer;
impl DBClusterSnapshotAttributesResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>
        (tag_name: &str,
         stack: &mut T)
         -> Result<DBClusterSnapshotAttributesResult, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = DBClusterSnapshotAttributesResult::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "DBClusterSnapshotAttributes" => {
                            obj.db_cluster_snapshot_attributes = Some(try!(DBClusterSnapshotAttributeListDeserializer::deserialize("DBClusterSnapshotAttributes", stack)));
                        }
                        "DBClusterSnapshotIdentifier" => {
                            obj.db_cluster_snapshot_identifier =
                                Some(try!(StringDeserializer::deserialize("DBClusterSnapshotIdentifier",
                                                                          stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct DBClusterSnapshotListDeserializer;
impl DBClusterSnapshotListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<DBClusterSnapshot>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "DBClusterSnapshot" {
                        obj.push(try!(DBClusterSnapshotDeserializer::deserialize("DBClusterSnapshot", stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
#[doc="<p> Provides a list of DB cluster snapshots for the user as the result of a call to the <a>DescribeDBClusterSnapshots</a> action. </p>"]
#[derive(Default,Debug,Clone)]
pub struct DBClusterSnapshotMessage {
    #[doc="<p>Provides a list of DB cluster snapshots for the user.</p>"]
    pub db_cluster_snapshots: Option<Vec<DBClusterSnapshot>>,
    #[doc="<p> An optional pagination token provided by a previous <a>DescribeDBClusterSnapshots</a> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>"]
    pub marker: Option<String>,
}

struct DBClusterSnapshotMessageDeserializer;
impl DBClusterSnapshotMessageDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<DBClusterSnapshotMessage, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = DBClusterSnapshotMessage::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "DBClusterSnapshots" => {
                            obj.db_cluster_snapshots =
                                Some(try!(DBClusterSnapshotListDeserializer::deserialize("DBClusterSnapshots",
                                                                                         stack)));
                        }
                        "Marker" => {
                            obj.marker = Some(try!(StringDeserializer::deserialize("Marker",
                                                                                   stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p> This data type is used as a response element in the action <a>DescribeDBEngineVersions</a>. </p>"]
#[derive(Default,Debug,Clone)]
pub struct DBEngineVersion {
    #[doc="<p>The description of the database engine.</p>"]
    pub db_engine_description: Option<String>,
    #[doc="<p>The description of the database engine version.</p>"]
    pub db_engine_version_description: Option<String>,
    #[doc="<p>The name of the DB parameter group family for the database engine.</p>"]
    pub db_parameter_group_family: Option<String>,
    #[doc="<p> The default character set for new instances of this engine version, if the <code>CharacterSetName</code> parameter of the CreateDBInstance API is not specified. </p>"]
    pub default_character_set: Option<CharacterSet>,
    #[doc="<p>The name of the database engine.</p>"]
    pub engine: Option<String>,
    #[doc="<p>The version number of the database engine.</p>"]
    pub engine_version: Option<String>,
    #[doc="<p> A list of the character sets supported by this engine for the <code>CharacterSetName</code> parameter of the <code>CreateDBInstance</code> action. </p>"]
    pub supported_character_sets: Option<Vec<CharacterSet>>,
    #[doc="<p>A list of the time zones supported by this engine for the <code>Timezone</code> parameter of the <code>CreateDBInstance</code> action. </p>"]
    pub supported_timezones: Option<Vec<Timezone>>,
    #[doc="<p>A list of engine versions that this database engine version can be upgraded to.</p>"]
    pub valid_upgrade_target: Option<Vec<UpgradeTarget>>,
}

struct DBEngineVersionDeserializer;
impl DBEngineVersionDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<DBEngineVersion, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = DBEngineVersion::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "DBEngineDescription" => {
                            obj.db_engine_description =
                                Some(try!(StringDeserializer::deserialize("DBEngineDescription",
                                                                          stack)));
                        }
                        "DBEngineVersionDescription" => {
                            obj.db_engine_version_description =
                                Some(try!(StringDeserializer::deserialize("DBEngineVersionDescription",
                                                                          stack)));
                        }
                        "DBParameterGroupFamily" => {
                            obj.db_parameter_group_family =
                                Some(try!(StringDeserializer::deserialize("DBParameterGroupFamily",
                                                                          stack)));
                        }
                        "DefaultCharacterSet" => {
                            obj.default_character_set =
                                Some(try!(CharacterSetDeserializer::deserialize("DefaultCharacterSet",
                                                                                stack)));
                        }
                        "Engine" => {
                            obj.engine = Some(try!(StringDeserializer::deserialize("Engine",
                                                                                   stack)));
                        }
                        "EngineVersion" => {
                            obj.engine_version = Some(try!(StringDeserializer::deserialize("EngineVersion",
                                                                                           stack)));
                        }
                        "SupportedCharacterSets" => {
                            obj.supported_character_sets = Some(try!(SupportedCharacterSetsListDeserializer::deserialize("SupportedCharacterSets", stack)));
                        }
                        "SupportedTimezones" => {
                            obj.supported_timezones =
                                Some(try!(SupportedTimezonesListDeserializer::deserialize("SupportedTimezones",
                                                                                          stack)));
                        }
                        "ValidUpgradeTarget" => {
                            obj.valid_upgrade_target =
                                Some(try!(ValidUpgradeTargetListDeserializer::deserialize("ValidUpgradeTarget",
                                                                                          stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct DBEngineVersionListDeserializer;
impl DBEngineVersionListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<DBEngineVersion>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "DBEngineVersion" {
                        obj.push(try!(DBEngineVersionDeserializer::deserialize("DBEngineVersion",
                                                                               stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
#[doc="<p> Contains the result of a successful invocation of the <a>DescribeDBEngineVersions</a> action. </p>"]
#[derive(Default,Debug,Clone)]
pub struct DBEngineVersionMessage {
    #[doc="<p> A list of <code>DBEngineVersion</code> elements. </p>"]
    pub db_engine_versions: Option<Vec<DBEngineVersion>>,
    #[doc="<p> An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>"]
    pub marker: Option<String>,
}

struct DBEngineVersionMessageDeserializer;
impl DBEngineVersionMessageDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<DBEngineVersionMessage, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = DBEngineVersionMessage::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "DBEngineVersions" => {
                            obj.db_engine_versions =
                                Some(try!(DBEngineVersionListDeserializer::deserialize("DBEngineVersions",
                                                                                       stack)));
                        }
                        "Marker" => {
                            obj.marker = Some(try!(StringDeserializer::deserialize("Marker",
                                                                                   stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p>Contains the result of a successful invocation of the following actions:</p> <ul> <li> <p> <a>CreateDBInstance</a> </p> </li> <li> <p> <a>DeleteDBInstance</a> </p> </li> <li> <p> <a>ModifyDBInstance</a> </p> </li> <li> <p> <a>StopDBInstance</a> </p> </li> <li> <p> <a>StartDBInstance</a> </p> </li> </ul> <p>This data type is used as a response element in the <a>DescribeDBInstances</a> action.</p>"]
#[derive(Default,Debug,Clone)]
pub struct DBInstance {
    #[doc="<p>Specifies the allocated storage size specified in gigabytes.</p>"]
    pub allocated_storage: Option<i64>,
    #[doc="<p>Indicates that minor version patches are applied automatically.</p>"]
    pub auto_minor_version_upgrade: Option<bool>,
    #[doc="<p>Specifies the name of the Availability Zone the DB instance is located in.</p>"]
    pub availability_zone: Option<String>,
    #[doc="<p>Specifies the number of days for which automatic DB snapshots are retained.</p>"]
    pub backup_retention_period: Option<i64>,
    #[doc="<p>The identifier of the CA certificate for this DB instance.</p>"]
    pub ca_certificate_identifier: Option<String>,
    #[doc="<p>If present, specifies the name of the character set that this instance is associated with.</p>"]
    pub character_set_name: Option<String>,
    #[doc="<p>Specifies whether tags are copied from the DB instance to snapshots of the DB instance.</p>"]
    pub copy_tags_to_snapshot: Option<bool>,
    #[doc="<p>If the DB instance is a member of a DB cluster, contains the name of the DB cluster that the DB instance is a member of.</p>"]
    pub db_cluster_identifier: Option<String>,
    #[doc="<p>The Amazon Resource Name (ARN) for the DB instance.</p>"]
    pub db_instance_arn: Option<String>,
    #[doc="<p>Contains the name of the compute and memory capacity class of the DB instance.</p>"]
    pub db_instance_class: Option<String>,
    #[doc="<p>Contains a user-supplied database identifier. This identifier is the unique key that identifies a DB instance.</p>"]
    pub db_instance_identifier: Option<String>,
    #[doc="<p>Specifies the current state of this database.</p>"]
    pub db_instance_status: Option<String>,
    #[doc="<p>The meaning of this parameter differs according to the database engine you use. For example, this value returns MySQL, MariaDB, or PostgreSQL information when returning values from CreateDBInstanceReadReplica since Read Replicas are only supported for these engines.</p> <p> <b>MySQL, MariaDB, SQL Server, PostgreSQL</b> </p> <p>Contains the name of the initial database of this instance that was provided at create time, if one was specified when the DB instance was created. This same name is returned for the life of the DB instance.</p> <p>Type: String</p> <p> <b>Oracle</b> </p> <p>Contains the Oracle System ID (SID) of the created DB instance. Not shown when the returned parameters do not apply to an Oracle DB instance.</p>"]
    pub db_name: Option<String>,
    #[doc="<p>Provides the list of DB parameter groups applied to this DB instance.</p>"]
    pub db_parameter_groups: Option<Vec<DBParameterGroupStatus>>,
    #[doc="<p> Provides List of DB security group elements containing only <code>DBSecurityGroup.Name</code> and <code>DBSecurityGroup.Status</code> subelements. </p>"]
    pub db_security_groups: Option<Vec<DBSecurityGroupMembership>>,
    #[doc="<p>Specifies information on the subnet group associated with the DB instance, including the name, description, and subnets in the subnet group.</p>"]
    pub db_subnet_group: Option<DBSubnetGroup>,
    #[doc="<p>Specifies the port that the DB instance listens on. If the DB instance is part of a DB cluster, this can be a different port than the DB cluster port.</p>"]
    pub db_instance_port: Option<i64>,
    #[doc="<p>The region-unique, immutable identifier for the DB instance. This identifier is found in AWS CloudTrail log entries whenever the KMS key for the DB instance is accessed.</p>"]
    pub dbi_resource_id: Option<String>,
    #[doc="<p>The Active Directory Domain membership records associated with the DB instance.</p>"]
    pub domain_memberships: Option<Vec<DomainMembership>>,
    #[doc="<p>Specifies the connection endpoint.</p>"]
    pub endpoint: Option<Endpoint>,
    #[doc="<p>Provides the name of the database engine to be used for this DB instance.</p>"]
    pub engine: Option<String>,
    #[doc="<p>Indicates the database engine version.</p>"]
    pub engine_version: Option<String>,
    #[doc="<p>The Amazon Resource Name (ARN) of the Amazon CloudWatch Logs log stream that receives the Enhanced Monitoring metrics data for the DB instance.</p>"]
    pub enhanced_monitoring_resource_arn: Option<String>,
    #[doc="<p>True if mapping of AWS Identity and Access Management (IAM) accounts to database accounts is enabled; otherwise false.</p> <p>IAM database authentication can be enabled for the following database engines</p> <ul> <li> <p>For MySQL 5.6, minor version 5.6.34 or higher</p> </li> <li> <p>For MySQL 5.7, minor version 5.7.16 or higher</p> </li> <li> <p>Aurora 5.6 or higher. To enable IAM database authentication for Aurora, see DBCluster Type.</p> </li> </ul>"]
    pub iam_database_authentication_enabled: Option<bool>,
    #[doc="<p>Provides the date and time the DB instance was created.</p>"]
    pub instance_create_time: Option<String>,
    #[doc="<p>Specifies the Provisioned IOPS (I/O operations per second) value.</p>"]
    pub iops: Option<i64>,
    #[doc="<p> If <code>StorageEncrypted</code> is true, the KMS key identifier for the encrypted DB instance. </p>"]
    pub kms_key_id: Option<String>,
    #[doc="<p>Specifies the latest time to which a database can be restored with point-in-time restore.</p>"]
    pub latest_restorable_time: Option<String>,
    #[doc="<p>License model information for this DB instance.</p>"]
    pub license_model: Option<String>,
    #[doc="<p>Contains the master username for the DB instance.</p>"]
    pub master_username: Option<String>,
    #[doc="<p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance.</p>"]
    pub monitoring_interval: Option<i64>,
    #[doc="<p>The ARN for the IAM role that permits RDS to send Enhanced Monitoring metrics to CloudWatch Logs.</p>"]
    pub monitoring_role_arn: Option<String>,
    #[doc="<p>Specifies if the DB instance is a Multi-AZ deployment.</p>"]
    pub multi_az: Option<bool>,
    #[doc="<p>Provides the list of option group memberships for this DB instance.</p>"]
    pub option_group_memberships: Option<Vec<OptionGroupMembership>>,
    #[doc="<p>Specifies that changes to the DB instance are pending. This element is only included when changes are pending. Specific changes are identified by subelements.</p>"]
    pub pending_modified_values: Option<PendingModifiedValues>,
    #[doc="<p> Specifies the daily time range during which automated backups are created if automated backups are enabled, as determined by the <code>BackupRetentionPeriod</code>. </p>"]
    pub preferred_backup_window: Option<String>,
    #[doc="<p>Specifies the weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p>"]
    pub preferred_maintenance_window: Option<String>,
    #[doc="<p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Aurora.Managing.html#Aurora.Managing.FaultTolerance\"> Fault Tolerance for an Aurora DB Cluster</a>. </p>"]
    pub promotion_tier: Option<i64>,
    #[doc="<p>Specifies the accessibility options for the DB instance. A value of true specifies an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. A value of false specifies an internal instance with a DNS name that resolves to a private IP address.</p> <p>Default: The default behavior varies depending on whether a VPC has been requested or not. The following list shows the default behavior in each case.</p> <ul> <li> <p> <b>Default VPC:</b>true</p> </li> <li> <p> <b>VPC:</b>false</p> </li> </ul> <p>If no DB subnet group has been specified as part of the request and the PubliclyAccessible value has not been set, the DB instance will be publicly accessible. If a specific DB subnet group has been specified as part of the request and the PubliclyAccessible value has not been set, the DB instance will be private.</p>"]
    pub publicly_accessible: Option<bool>,
    #[doc="<p>Contains one or more identifiers of Aurora DB clusters that are Read Replicas of this DB instance.</p>"]
    pub read_replica_db_cluster_identifiers: Option<Vec<String>>,
    #[doc="<p>Contains one or more identifiers of the Read Replicas associated with this DB instance.</p>"]
    pub read_replica_db_instance_identifiers: Option<Vec<String>>,
    #[doc="<p>Contains the identifier of the source DB instance if this DB instance is a Read Replica.</p>"]
    pub read_replica_source_db_instance_identifier: Option<String>,
    #[doc="<p>If present, specifies the name of the secondary Availability Zone for a DB instance with multi-AZ support.</p>"]
    pub secondary_availability_zone: Option<String>,
    #[doc="<p>The status of a Read Replica. If the instance is not a Read Replica, this will be blank.</p>"]
    pub status_infos: Option<Vec<DBInstanceStatusInfo>>,
    #[doc="<p>Specifies whether the DB instance is encrypted.</p>"]
    pub storage_encrypted: Option<bool>,
    #[doc="<p>Specifies the storage type associated with DB instance.</p>"]
    pub storage_type: Option<String>,
    #[doc="<p>The ARN from the key store with which the instance is associated for TDE encryption.</p>"]
    pub tde_credential_arn: Option<String>,
    #[doc="<p>The time zone of the DB instance. In most cases, the <code>Timezone</code> element is empty. <code>Timezone</code> content appears only for Microsoft SQL Server DB instances that were created with a time zone specified. </p>"]
    pub timezone: Option<String>,
    #[doc="<p>Provides a list of VPC security group elements that the DB instance belongs to.</p>"]
    pub vpc_security_groups: Option<Vec<VpcSecurityGroupMembership>>,
}

struct DBInstanceDeserializer;
impl DBInstanceDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<DBInstance, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = DBInstance::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "AllocatedStorage" => {
                            obj.allocated_storage =
                                Some(try!(IntegerDeserializer::deserialize("AllocatedStorage",
                                                                           stack)));
                        }
                        "AutoMinorVersionUpgrade" => {
                            obj.auto_minor_version_upgrade =
                                Some(try!(BooleanDeserializer::deserialize("AutoMinorVersionUpgrade",
                                                                           stack)));
                        }
                        "AvailabilityZone" => {
                            obj.availability_zone =
                                Some(try!(StringDeserializer::deserialize("AvailabilityZone",
                                                                          stack)));
                        }
                        "BackupRetentionPeriod" => {
                            obj.backup_retention_period =
                                Some(try!(IntegerDeserializer::deserialize("BackupRetentionPeriod",
                                                                           stack)));
                        }
                        "CACertificateIdentifier" => {
                            obj.ca_certificate_identifier =
                                Some(try!(StringDeserializer::deserialize("CACertificateIdentifier",
                                                                          stack)));
                        }
                        "CharacterSetName" => {
                            obj.character_set_name =
                                Some(try!(StringDeserializer::deserialize("CharacterSetName",
                                                                          stack)));
                        }
                        "CopyTagsToSnapshot" => {
                            obj.copy_tags_to_snapshot =
                                Some(try!(BooleanDeserializer::deserialize("CopyTagsToSnapshot",
                                                                           stack)));
                        }
                        "DBClusterIdentifier" => {
                            obj.db_cluster_identifier =
                                Some(try!(StringDeserializer::deserialize("DBClusterIdentifier",
                                                                          stack)));
                        }
                        "DBInstanceArn" => {
                            obj.db_instance_arn =
                                Some(try!(StringDeserializer::deserialize("DBInstanceArn", stack)));
                        }
                        "DBInstanceClass" => {
                            obj.db_instance_class =
                                Some(try!(StringDeserializer::deserialize("DBInstanceClass",
                                                                          stack)));
                        }
                        "DBInstanceIdentifier" => {
                            obj.db_instance_identifier =
                                Some(try!(StringDeserializer::deserialize("DBInstanceIdentifier",
                                                                          stack)));
                        }
                        "DBInstanceStatus" => {
                            obj.db_instance_status =
                                Some(try!(StringDeserializer::deserialize("DBInstanceStatus",
                                                                          stack)));
                        }
                        "DBName" => {
                            obj.db_name = Some(try!(StringDeserializer::deserialize("DBName",
                                                                                    stack)));
                        }
                        "DBParameterGroups" => {
                            obj.db_parameter_groups = Some(try!(DBParameterGroupStatusListDeserializer::deserialize("DBParameterGroups", stack)));
                        }
                        "DBSecurityGroups" => {
                            obj.db_security_groups = Some(try!(DBSecurityGroupMembershipListDeserializer::deserialize("DBSecurityGroups", stack)));
                        }
                        "DBSubnetGroup" => {
                            obj.db_subnet_group =
                                Some(try!(DBSubnetGroupDeserializer::deserialize("DBSubnetGroup",
                                                                                 stack)));
                        }
                        "DbInstancePort" => {
                            obj.db_instance_port =
                                Some(try!(IntegerDeserializer::deserialize("DbInstancePort",
                                                                           stack)));
                        }
                        "DbiResourceId" => {
                            obj.dbi_resource_id =
                                Some(try!(StringDeserializer::deserialize("DbiResourceId", stack)));
                        }
                        "DomainMemberships" => {
                            obj.domain_memberships =
                                Some(try!(DomainMembershipListDeserializer::deserialize("DomainMemberships",
                                                                                        stack)));
                        }
                        "Endpoint" => {
                            obj.endpoint = Some(try!(EndpointDeserializer::deserialize("Endpoint",
                                                                                       stack)));
                        }
                        "Engine" => {
                            obj.engine = Some(try!(StringDeserializer::deserialize("Engine",
                                                                                   stack)));
                        }
                        "EngineVersion" => {
                            obj.engine_version = Some(try!(StringDeserializer::deserialize("EngineVersion",
                                                                                           stack)));
                        }
                        "EnhancedMonitoringResourceArn" => {
                            obj.enhanced_monitoring_resource_arn =
                                Some(try!(StringDeserializer::deserialize("EnhancedMonitoringResourceArn",
                                                                          stack)));
                        }
                        "IAMDatabaseAuthenticationEnabled" => {
                            obj.iam_database_authentication_enabled =
                                Some(try!(BooleanDeserializer::deserialize("IAMDatabaseAuthenticationEnabled",
                                                                           stack)));
                        }
                        "InstanceCreateTime" => {
                            obj.instance_create_time =
                                Some(try!(TStampDeserializer::deserialize("InstanceCreateTime",
                                                                          stack)));
                        }
                        "Iops" => {
                            obj.iops = Some(try!(IntegerOptionalDeserializer::deserialize("Iops",
                                                                                          stack)));
                        }
                        "KmsKeyId" => {
                            obj.kms_key_id = Some(try!(StringDeserializer::deserialize("KmsKeyId",
                                                                                       stack)));
                        }
                        "LatestRestorableTime" => {
                            obj.latest_restorable_time =
                                Some(try!(TStampDeserializer::deserialize("LatestRestorableTime",
                                                                          stack)));
                        }
                        "LicenseModel" => {
                            obj.license_model = Some(try!(StringDeserializer::deserialize("LicenseModel",
                                                                                          stack)));
                        }
                        "MasterUsername" => {
                            obj.master_username =
                                Some(try!(StringDeserializer::deserialize("MasterUsername",
                                                                          stack)));
                        }
                        "MonitoringInterval" => {
                            obj.monitoring_interval =
                                Some(try!(IntegerOptionalDeserializer::deserialize("MonitoringInterval",
                                                                                   stack)));
                        }
                        "MonitoringRoleArn" => {
                            obj.monitoring_role_arn =
                                Some(try!(StringDeserializer::deserialize("MonitoringRoleArn",
                                                                          stack)));
                        }
                        "MultiAZ" => {
                            obj.multi_az = Some(try!(BooleanDeserializer::deserialize("MultiAZ",
                                                                                      stack)));
                        }
                        "OptionGroupMemberships" => {
                            obj.option_group_memberships = Some(try!(OptionGroupMembershipListDeserializer::deserialize("OptionGroupMemberships", stack)));
                        }
                        "PendingModifiedValues" => {
                            obj.pending_modified_values =
                                Some(try!(PendingModifiedValuesDeserializer::deserialize("PendingModifiedValues",
                                                                                         stack)));
                        }
                        "PreferredBackupWindow" => {
                            obj.preferred_backup_window =
                                Some(try!(StringDeserializer::deserialize("PreferredBackupWindow",
                                                                          stack)));
                        }
                        "PreferredMaintenanceWindow" => {
                            obj.preferred_maintenance_window =
                                Some(try!(StringDeserializer::deserialize("PreferredMaintenanceWindow",
                                                                          stack)));
                        }
                        "PromotionTier" => {
                            obj.promotion_tier =
                                Some(try!(IntegerOptionalDeserializer::deserialize("PromotionTier",
                                                                                   stack)));
                        }
                        "PubliclyAccessible" => {
                            obj.publicly_accessible =
                                Some(try!(BooleanDeserializer::deserialize("PubliclyAccessible",
                                                                           stack)));
                        }
                        "ReadReplicaDBClusterIdentifiers" => {
                            obj.read_replica_db_cluster_identifiers = Some(try!(ReadReplicaDBClusterIdentifierListDeserializer::deserialize("ReadReplicaDBClusterIdentifiers", stack)));
                        }
                        "ReadReplicaDBInstanceIdentifiers" => {
                            obj.read_replica_db_instance_identifiers = Some(try!(ReadReplicaDBInstanceIdentifierListDeserializer::deserialize("ReadReplicaDBInstanceIdentifiers", stack)));
                        }
                        "ReadReplicaSourceDBInstanceIdentifier" => {
                            obj.read_replica_source_db_instance_identifier =
                                Some(try!(StringDeserializer::deserialize("ReadReplicaSourceDBInstanceIdentifier",
                                                                          stack)));
                        }
                        "SecondaryAvailabilityZone" => {
                            obj.secondary_availability_zone =
                                Some(try!(StringDeserializer::deserialize("SecondaryAvailabilityZone",
                                                                          stack)));
                        }
                        "StatusInfos" => {
                            obj.status_infos = Some(try!(DBInstanceStatusInfoListDeserializer::deserialize("StatusInfos", stack)));
                        }
                        "StorageEncrypted" => {
                            obj.storage_encrypted =
                                Some(try!(BooleanDeserializer::deserialize("StorageEncrypted",
                                                                           stack)));
                        }
                        "StorageType" => {
                            obj.storage_type = Some(try!(StringDeserializer::deserialize("StorageType",
                                                                                         stack)));
                        }
                        "TdeCredentialArn" => {
                            obj.tde_credential_arn =
                                Some(try!(StringDeserializer::deserialize("TdeCredentialArn",
                                                                          stack)));
                        }
                        "Timezone" => {
                            obj.timezone = Some(try!(StringDeserializer::deserialize("Timezone",
                                                                                     stack)));
                        }
                        "VpcSecurityGroups" => {
                            obj.vpc_security_groups = Some(try!(VpcSecurityGroupMembershipListDeserializer::deserialize("VpcSecurityGroups", stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct DBInstanceListDeserializer;
impl DBInstanceListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<DBInstance>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "DBInstance" {
                        obj.push(try!(DBInstanceDeserializer::deserialize("DBInstance", stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
#[doc="<p> Contains the result of a successful invocation of the <a>DescribeDBInstances</a> action. </p>"]
#[derive(Default,Debug,Clone)]
pub struct DBInstanceMessage {
    #[doc="<p> A list of <a>DBInstance</a> instances. </p>"]
    pub db_instances: Option<Vec<DBInstance>>,
    #[doc="<p> An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . </p>"]
    pub marker: Option<String>,
}

struct DBInstanceMessageDeserializer;
impl DBInstanceMessageDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<DBInstanceMessage, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = DBInstanceMessage::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "DBInstances" => {
                            obj.db_instances =
                                Some(try!(DBInstanceListDeserializer::deserialize("DBInstances",
                                                                                  stack)));
                        }
                        "Marker" => {
                            obj.marker = Some(try!(StringDeserializer::deserialize("Marker",
                                                                                   stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p>Provides a list of status information for a DB instance.</p>"]
#[derive(Default,Debug,Clone)]
pub struct DBInstanceStatusInfo {
    #[doc="<p>Details of the error if there is an error for the instance. If the instance is not in an error state, this value is blank.</p>"]
    pub message: Option<String>,
    #[doc="<p>Boolean value that is true if the instance is operating normally, or false if the instance is in an error state.</p>"]
    pub normal: Option<bool>,
    #[doc="<p>Status of the DB instance. For a StatusType of read replica, the values can be replicating, error, stopped, or terminated.</p>"]
    pub status: Option<String>,
    #[doc="<p>This value is currently \"read replication.\"</p>"]
    pub status_type: Option<String>,
}

struct DBInstanceStatusInfoDeserializer;
impl DBInstanceStatusInfoDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<DBInstanceStatusInfo, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = DBInstanceStatusInfo::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "Message" => {
                            obj.message = Some(try!(StringDeserializer::deserialize("Message",
                                                                                    stack)));
                        }
                        "Normal" => {
                            obj.normal = Some(try!(BooleanDeserializer::deserialize("Normal",
                                                                                    stack)));
                        }
                        "Status" => {
                            obj.status = Some(try!(StringDeserializer::deserialize("Status",
                                                                                   stack)));
                        }
                        "StatusType" => {
                            obj.status_type = Some(try!(StringDeserializer::deserialize("StatusType",
                                                                                        stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct DBInstanceStatusInfoListDeserializer;
impl DBInstanceStatusInfoListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<DBInstanceStatusInfo>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "DBInstanceStatusInfo" {
                        obj.push(try!(DBInstanceStatusInfoDeserializer::deserialize("DBInstanceStatusInfo", stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
#[doc="<p>Contains the result of a successful invocation of the <a>CreateDBParameterGroup</a> action. </p> <p>This data type is used as a request parameter in the <a>DeleteDBParameterGroup</a> action, and as a response element in the <a>DescribeDBParameterGroups</a> action. </p>"]
#[derive(Default,Debug,Clone)]
pub struct DBParameterGroup {
    #[doc="<p>The Amazon Resource Name (ARN) for the DB parameter group.</p>"]
    pub db_parameter_group_arn: Option<String>,
    #[doc="<p>Provides the name of the DB parameter group family that this DB parameter group is compatible with.</p>"]
    pub db_parameter_group_family: Option<String>,
    #[doc="<p>Provides the name of the DB parameter group.</p>"]
    pub db_parameter_group_name: Option<String>,
    #[doc="<p>Provides the customer-specified description for this DB parameter group.</p>"]
    pub description: Option<String>,
}

struct DBParameterGroupDeserializer;
impl DBParameterGroupDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<DBParameterGroup, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = DBParameterGroup::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "DBParameterGroupArn" => {
                            obj.db_parameter_group_arn =
                                Some(try!(StringDeserializer::deserialize("DBParameterGroupArn",
                                                                          stack)));
                        }
                        "DBParameterGroupFamily" => {
                            obj.db_parameter_group_family =
                                Some(try!(StringDeserializer::deserialize("DBParameterGroupFamily",
                                                                          stack)));
                        }
                        "DBParameterGroupName" => {
                            obj.db_parameter_group_name =
                                Some(try!(StringDeserializer::deserialize("DBParameterGroupName",
                                                                          stack)));
                        }
                        "Description" => {
                            obj.description = Some(try!(StringDeserializer::deserialize("Description",
                                                                                        stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p> Contains the result of a successful invocation of the <a>DescribeDBParameters</a> action. </p>"]
#[derive(Default,Debug,Clone)]
pub struct DBParameterGroupDetails {
    #[doc="<p> An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>"]
    pub marker: Option<String>,
    #[doc="<p> A list of <a>Parameter</a> values. </p>"]
    pub parameters: Option<Vec<Parameter>>,
}

struct DBParameterGroupDetailsDeserializer;
impl DBParameterGroupDetailsDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<DBParameterGroupDetails, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = DBParameterGroupDetails::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "Marker" => {
                            obj.marker = Some(try!(StringDeserializer::deserialize("Marker",
                                                                                   stack)));
                        }
                        "Parameters" => {
                            obj.parameters =
                                Some(try!(ParametersListDeserializer::deserialize("Parameters",
                                                                                  stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct DBParameterGroupListDeserializer;
impl DBParameterGroupListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<DBParameterGroup>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "DBParameterGroup" {
                        obj.push(try!(DBParameterGroupDeserializer::deserialize("DBParameterGroup",
                                                                                stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
#[doc="<p> Contains the result of a successful invocation of the <a>ModifyDBParameterGroup</a> or <a>ResetDBParameterGroup</a> action. </p>"]
#[derive(Default,Debug,Clone)]
pub struct DBParameterGroupNameMessage {
    #[doc="<p>Provides the name of the DB parameter group.</p>"]
    pub db_parameter_group_name: Option<String>,
}

struct DBParameterGroupNameMessageDeserializer;
impl DBParameterGroupNameMessageDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<DBParameterGroupNameMessage, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = DBParameterGroupNameMessage::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "DBParameterGroupName" => {
                            obj.db_parameter_group_name =
                                Some(try!(StringDeserializer::deserialize("DBParameterGroupName",
                                                                          stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p>The status of the DB parameter group.</p> <p>This data type is used as a response element in the following actions:</p> <ul> <li> <p> <a>CreateDBInstance</a> </p> </li> <li> <p> <a>CreateDBInstanceReadReplica</a> </p> </li> <li> <p> <a>DeleteDBInstance</a> </p> </li> <li> <p> <a>ModifyDBInstance</a> </p> </li> <li> <p> <a>RebootDBInstance</a> </p> </li> <li> <p> <a>RestoreDBInstanceFromDBSnapshot</a> </p> </li> </ul>"]
#[derive(Default,Debug,Clone)]
pub struct DBParameterGroupStatus {
    #[doc="<p>The name of the DP parameter group.</p>"]
    pub db_parameter_group_name: Option<String>,
    #[doc="<p>The status of parameter updates.</p>"]
    pub parameter_apply_status: Option<String>,
}

struct DBParameterGroupStatusDeserializer;
impl DBParameterGroupStatusDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<DBParameterGroupStatus, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = DBParameterGroupStatus::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "DBParameterGroupName" => {
                            obj.db_parameter_group_name =
                                Some(try!(StringDeserializer::deserialize("DBParameterGroupName",
                                                                          stack)));
                        }
                        "ParameterApplyStatus" => {
                            obj.parameter_apply_status =
                                Some(try!(StringDeserializer::deserialize("ParameterApplyStatus",
                                                                          stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct DBParameterGroupStatusListDeserializer;
impl DBParameterGroupStatusListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<DBParameterGroupStatus>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "DBParameterGroup" {
                        obj.push(try!(DBParameterGroupStatusDeserializer::deserialize("DBParameterGroup", stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
#[doc="<p> Contains the result of a successful invocation of the <a>DescribeDBParameterGroups</a> action. </p>"]
#[derive(Default,Debug,Clone)]
pub struct DBParameterGroupsMessage {
    #[doc="<p> A list of <a>DBParameterGroup</a> instances. </p>"]
    pub db_parameter_groups: Option<Vec<DBParameterGroup>>,
    #[doc="<p> An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>"]
    pub marker: Option<String>,
}

struct DBParameterGroupsMessageDeserializer;
impl DBParameterGroupsMessageDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<DBParameterGroupsMessage, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = DBParameterGroupsMessage::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "DBParameterGroups" => {
                            obj.db_parameter_groups =
                                Some(try!(DBParameterGroupListDeserializer::deserialize("DBParameterGroups",
                                                                                        stack)));
                        }
                        "Marker" => {
                            obj.marker = Some(try!(StringDeserializer::deserialize("Marker",
                                                                                   stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p>Contains the result of a successful invocation of the following actions:</p> <ul> <li> <p> <a>DescribeDBSecurityGroups</a> </p> </li> <li> <p> <a>AuthorizeDBSecurityGroupIngress</a> </p> </li> <li> <p> <a>CreateDBSecurityGroup</a> </p> </li> <li> <p> <a>RevokeDBSecurityGroupIngress</a> </p> </li> </ul> <p>This data type is used as a response element in the <a>DescribeDBSecurityGroups</a> action.</p>"]
#[derive(Default,Debug,Clone)]
pub struct DBSecurityGroup {
    #[doc="<p>The Amazon Resource Name (ARN) for the DB security group.</p>"]
    pub db_security_group_arn: Option<String>,
    #[doc="<p>Provides the description of the DB security group.</p>"]
    pub db_security_group_description: Option<String>,
    #[doc="<p>Specifies the name of the DB security group.</p>"]
    pub db_security_group_name: Option<String>,
    #[doc="<p> Contains a list of <a>EC2SecurityGroup</a> elements. </p>"]
    pub ec2_security_groups: Option<Vec<EC2SecurityGroup>>,
    #[doc="<p> Contains a list of <a>IPRange</a> elements. </p>"]
    pub ip_ranges: Option<Vec<IPRange>>,
    #[doc="<p>Provides the AWS ID of the owner of a specific DB security group.</p>"]
    pub owner_id: Option<String>,
    #[doc="<p>Provides the VpcId of the DB security group.</p>"]
    pub vpc_id: Option<String>,
}

struct DBSecurityGroupDeserializer;
impl DBSecurityGroupDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<DBSecurityGroup, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = DBSecurityGroup::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "DBSecurityGroupArn" => {
                            obj.db_security_group_arn =
                                Some(try!(StringDeserializer::deserialize("DBSecurityGroupArn",
                                                                          stack)));
                        }
                        "DBSecurityGroupDescription" => {
                            obj.db_security_group_description =
                                Some(try!(StringDeserializer::deserialize("DBSecurityGroupDescription",
                                                                          stack)));
                        }
                        "DBSecurityGroupName" => {
                            obj.db_security_group_name =
                                Some(try!(StringDeserializer::deserialize("DBSecurityGroupName",
                                                                          stack)));
                        }
                        "EC2SecurityGroups" => {
                            obj.ec2_security_groups =
                                Some(try!(EC2SecurityGroupListDeserializer::deserialize("EC2SecurityGroups",
                                                                                        stack)));
                        }
                        "IPRanges" => {
                            obj.ip_ranges = Some(try!(IPRangeListDeserializer::deserialize("IPRanges",
                                                                                           stack)));
                        }
                        "OwnerId" => {
                            obj.owner_id = Some(try!(StringDeserializer::deserialize("OwnerId",
                                                                                     stack)));
                        }
                        "VpcId" => {
                            obj.vpc_id = Some(try!(StringDeserializer::deserialize("VpcId",
                                                                                   stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p>This data type is used as a response element in the following actions:</p> <ul> <li> <p> <a>ModifyDBInstance</a> </p> </li> <li> <p> <a>RebootDBInstance</a> </p> </li> <li> <p> <a>RestoreDBInstanceFromDBSnapshot</a> </p> </li> <li> <p> <a>RestoreDBInstanceToPointInTime</a> </p> </li> </ul>"]
#[derive(Default,Debug,Clone)]
pub struct DBSecurityGroupMembership {
    #[doc="<p>The name of the DB security group.</p>"]
    pub db_security_group_name: Option<String>,
    #[doc="<p>The status of the DB security group.</p>"]
    pub status: Option<String>,
}

struct DBSecurityGroupMembershipDeserializer;
impl DBSecurityGroupMembershipDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<DBSecurityGroupMembership, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = DBSecurityGroupMembership::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "DBSecurityGroupName" => {
                            obj.db_security_group_name =
                                Some(try!(StringDeserializer::deserialize("DBSecurityGroupName",
                                                                          stack)));
                        }
                        "Status" => {
                            obj.status = Some(try!(StringDeserializer::deserialize("Status",
                                                                                   stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct DBSecurityGroupMembershipListDeserializer;
impl DBSecurityGroupMembershipListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<DBSecurityGroupMembership>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "DBSecurityGroup" {
                        obj.push(try!(DBSecurityGroupMembershipDeserializer::deserialize("DBSecurityGroup", stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
#[doc="<p> Contains the result of a successful invocation of the <a>DescribeDBSecurityGroups</a> action. </p>"]
#[derive(Default,Debug,Clone)]
pub struct DBSecurityGroupMessage {
    #[doc="<p> A list of <a>DBSecurityGroup</a> instances. </p>"]
    pub db_security_groups: Option<Vec<DBSecurityGroup>>,
    #[doc="<p> An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>"]
    pub marker: Option<String>,
}

struct DBSecurityGroupMessageDeserializer;
impl DBSecurityGroupMessageDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<DBSecurityGroupMessage, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = DBSecurityGroupMessage::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "DBSecurityGroups" => {
                            obj.db_security_groups =
                                Some(try!(DBSecurityGroupsDeserializer::deserialize("DBSecurityGroups",
                                                                                    stack)));
                        }
                        "Marker" => {
                            obj.marker = Some(try!(StringDeserializer::deserialize("Marker",
                                                                                   stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}

/// Serialize `DBSecurityGroupNameList` contents to a `SignedRequest`.
struct DBSecurityGroupNameListSerializer;
impl DBSecurityGroupNameListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.member.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

struct DBSecurityGroupsDeserializer;
impl DBSecurityGroupsDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<DBSecurityGroup>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "DBSecurityGroup" {
                        obj.push(try!(DBSecurityGroupDeserializer::deserialize("DBSecurityGroup",
                                                                               stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
#[doc="<p>Contains the result of a successful invocation of the following actions:</p> <ul> <li> <p> <a>CreateDBSnapshot</a> </p> </li> <li> <p> <a>DeleteDBSnapshot</a> </p> </li> </ul> <p>This data type is used as a response element in the <a>DescribeDBSnapshots</a> action.</p>"]
#[derive(Default,Debug,Clone)]
pub struct DBSnapshot {
    #[doc="<p>Specifies the allocated storage size in gigabytes (GB).</p>"]
    pub allocated_storage: Option<i64>,
    #[doc="<p>Specifies the name of the Availability Zone the DB instance was located in at the time of the DB snapshot.</p>"]
    pub availability_zone: Option<String>,
    #[doc="<p>Specifies the DB instance identifier of the DB instance this DB snapshot was created from.</p>"]
    pub db_instance_identifier: Option<String>,
    #[doc="<p>The Amazon Resource Name (ARN) for the DB snapshot.</p>"]
    pub db_snapshot_arn: Option<String>,
    #[doc="<p>Specifies the identifier for the DB snapshot.</p>"]
    pub db_snapshot_identifier: Option<String>,
    #[doc="<p>Specifies whether the DB snapshot is encrypted.</p>"]
    pub encrypted: Option<bool>,
    #[doc="<p>Specifies the name of the database engine.</p>"]
    pub engine: Option<String>,
    #[doc="<p>Specifies the version of the database engine.</p>"]
    pub engine_version: Option<String>,
    #[doc="<p>True if mapping of AWS Identity and Access Management (IAM) accounts to database accounts is enabled; otherwise false.</p>"]
    pub iam_database_authentication_enabled: Option<bool>,
    #[doc="<p>Specifies the time when the snapshot was taken, in Universal Coordinated Time (UTC).</p>"]
    pub instance_create_time: Option<String>,
    #[doc="<p>Specifies the Provisioned IOPS (I/O operations per second) value of the DB instance at the time of the snapshot.</p>"]
    pub iops: Option<i64>,
    #[doc="<p> If <code>Encrypted</code> is true, the KMS key identifier for the encrypted DB snapshot. </p>"]
    pub kms_key_id: Option<String>,
    #[doc="<p>License model information for the restored DB instance.</p>"]
    pub license_model: Option<String>,
    #[doc="<p>Provides the master username for the DB snapshot.</p>"]
    pub master_username: Option<String>,
    #[doc="<p>Provides the option group name for the DB snapshot.</p>"]
    pub option_group_name: Option<String>,
    #[doc="<p>The percentage of the estimated data that has been transferred.</p>"]
    pub percent_progress: Option<i64>,
    #[doc="<p>Specifies the port that the database engine was listening on at the time of the snapshot.</p>"]
    pub port: Option<i64>,
    #[doc="<p>Provides the time when the snapshot was taken, in Universal Coordinated Time (UTC).</p>"]
    pub snapshot_create_time: Option<String>,
    #[doc="<p>Provides the type of the DB snapshot.</p>"]
    pub snapshot_type: Option<String>,
    #[doc="<p>The DB snapshot Amazon Resource Name (ARN) that the DB snapshot was copied from. It only has value in case of cross-customer or cross-region copy.</p>"]
    pub source_db_snapshot_identifier: Option<String>,
    #[doc="<p>The AWS Region that the DB snapshot was created in or copied from.</p>"]
    pub source_region: Option<String>,
    #[doc="<p>Specifies the status of this DB snapshot.</p>"]
    pub status: Option<String>,
    #[doc="<p>Specifies the storage type associated with DB snapshot.</p>"]
    pub storage_type: Option<String>,
    #[doc="<p>The ARN from the key store with which to associate the instance for TDE encryption.</p>"]
    pub tde_credential_arn: Option<String>,
    #[doc="<p>The time zone of the DB snapshot. In most cases, the <code>Timezone</code> element is empty. <code>Timezone</code> content appears only for snapshots taken from Microsoft SQL Server DB instances that were created with a time zone specified. </p>"]
    pub timezone: Option<String>,
    #[doc="<p>Provides the VPC ID associated with the DB snapshot.</p>"]
    pub vpc_id: Option<String>,
}

struct DBSnapshotDeserializer;
impl DBSnapshotDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<DBSnapshot, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = DBSnapshot::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "AllocatedStorage" => {
                            obj.allocated_storage =
                                Some(try!(IntegerDeserializer::deserialize("AllocatedStorage",
                                                                           stack)));
                        }
                        "AvailabilityZone" => {
                            obj.availability_zone =
                                Some(try!(StringDeserializer::deserialize("AvailabilityZone",
                                                                          stack)));
                        }
                        "DBInstanceIdentifier" => {
                            obj.db_instance_identifier =
                                Some(try!(StringDeserializer::deserialize("DBInstanceIdentifier",
                                                                          stack)));
                        }
                        "DBSnapshotArn" => {
                            obj.db_snapshot_arn =
                                Some(try!(StringDeserializer::deserialize("DBSnapshotArn", stack)));
                        }
                        "DBSnapshotIdentifier" => {
                            obj.db_snapshot_identifier =
                                Some(try!(StringDeserializer::deserialize("DBSnapshotIdentifier",
                                                                          stack)));
                        }
                        "Encrypted" => {
                            obj.encrypted = Some(try!(BooleanDeserializer::deserialize("Encrypted",
                                                                                       stack)));
                        }
                        "Engine" => {
                            obj.engine = Some(try!(StringDeserializer::deserialize("Engine",
                                                                                   stack)));
                        }
                        "EngineVersion" => {
                            obj.engine_version = Some(try!(StringDeserializer::deserialize("EngineVersion",
                                                                                           stack)));
                        }
                        "IAMDatabaseAuthenticationEnabled" => {
                            obj.iam_database_authentication_enabled =
                                Some(try!(BooleanDeserializer::deserialize("IAMDatabaseAuthenticationEnabled",
                                                                           stack)));
                        }
                        "InstanceCreateTime" => {
                            obj.instance_create_time =
                                Some(try!(TStampDeserializer::deserialize("InstanceCreateTime",
                                                                          stack)));
                        }
                        "Iops" => {
                            obj.iops = Some(try!(IntegerOptionalDeserializer::deserialize("Iops",
                                                                                          stack)));
                        }
                        "KmsKeyId" => {
                            obj.kms_key_id = Some(try!(StringDeserializer::deserialize("KmsKeyId",
                                                                                       stack)));
                        }
                        "LicenseModel" => {
                            obj.license_model = Some(try!(StringDeserializer::deserialize("LicenseModel",
                                                                                          stack)));
                        }
                        "MasterUsername" => {
                            obj.master_username =
                                Some(try!(StringDeserializer::deserialize("MasterUsername",
                                                                          stack)));
                        }
                        "OptionGroupName" => {
                            obj.option_group_name =
                                Some(try!(StringDeserializer::deserialize("OptionGroupName",
                                                                          stack)));
                        }
                        "PercentProgress" => {
                            obj.percent_progress =
                                Some(try!(IntegerDeserializer::deserialize("PercentProgress",
                                                                           stack)));
                        }
                        "Port" => {
                            obj.port = Some(try!(IntegerDeserializer::deserialize("Port", stack)));
                        }
                        "SnapshotCreateTime" => {
                            obj.snapshot_create_time =
                                Some(try!(TStampDeserializer::deserialize("SnapshotCreateTime",
                                                                          stack)));
                        }
                        "SnapshotType" => {
                            obj.snapshot_type = Some(try!(StringDeserializer::deserialize("SnapshotType",
                                                                                          stack)));
                        }
                        "SourceDBSnapshotIdentifier" => {
                            obj.source_db_snapshot_identifier =
                                Some(try!(StringDeserializer::deserialize("SourceDBSnapshotIdentifier",
                                                                          stack)));
                        }
                        "SourceRegion" => {
                            obj.source_region = Some(try!(StringDeserializer::deserialize("SourceRegion",
                                                                                          stack)));
                        }
                        "Status" => {
                            obj.status = Some(try!(StringDeserializer::deserialize("Status",
                                                                                   stack)));
                        }
                        "StorageType" => {
                            obj.storage_type = Some(try!(StringDeserializer::deserialize("StorageType",
                                                                                         stack)));
                        }
                        "TdeCredentialArn" => {
                            obj.tde_credential_arn =
                                Some(try!(StringDeserializer::deserialize("TdeCredentialArn",
                                                                          stack)));
                        }
                        "Timezone" => {
                            obj.timezone = Some(try!(StringDeserializer::deserialize("Timezone",
                                                                                     stack)));
                        }
                        "VpcId" => {
                            obj.vpc_id = Some(try!(StringDeserializer::deserialize("VpcId",
                                                                                   stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p>Contains the name and values of a manual DB snapshot attribute</p> <p>Manual DB snapshot attributes are used to authorize other AWS accounts to restore a manual DB snapshot. For more information, see the <a>ModifyDBSnapshotAttribute</a> API.</p>"]
#[derive(Default,Debug,Clone)]
pub struct DBSnapshotAttribute {
    #[doc="<p>The name of the manual DB snapshot attribute.</p> <p>The attribute named <code>restore</code> refers to the list of AWS accounts that have permission to copy or restore the manual DB cluster snapshot. For more information, see the <a>ModifyDBSnapshotAttribute</a> API action.</p>"]
    pub attribute_name: Option<String>,
    #[doc="<p>The value or values for the manual DB snapshot attribute.</p> <p>If the <code>AttributeName</code> field is set to <code>restore</code>, then this element returns a list of IDs of the AWS accounts that are authorized to copy or restore the manual DB snapshot. If a value of <code>all</code> is in the list, then the manual DB snapshot is public and available for any AWS account to copy or restore.</p>"]
    pub attribute_values: Option<Vec<String>>,
}

struct DBSnapshotAttributeDeserializer;
impl DBSnapshotAttributeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<DBSnapshotAttribute, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = DBSnapshotAttribute::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "AttributeName" => {
                            obj.attribute_name = Some(try!(StringDeserializer::deserialize("AttributeName",
                                                                                           stack)));
                        }
                        "AttributeValues" => {
                            obj.attribute_values =
                                Some(try!(AttributeValueListDeserializer::deserialize("AttributeValues",
                                                                                      stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct DBSnapshotAttributeListDeserializer;
impl DBSnapshotAttributeListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<DBSnapshotAttribute>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "DBSnapshotAttribute" {
                        obj.push(try!(DBSnapshotAttributeDeserializer::deserialize("DBSnapshotAttribute", stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
#[doc="<p>Contains the results of a successful call to the <a>DescribeDBSnapshotAttributes</a> API action.</p> <p>Manual DB snapshot attributes are used to authorize other AWS accounts to copy or restore a manual DB snapshot. For more information, see the <a>ModifyDBSnapshotAttribute</a> API action.</p>"]
#[derive(Default,Debug,Clone)]
pub struct DBSnapshotAttributesResult {
    #[doc="<p>The list of attributes and values for the manual DB snapshot.</p>"]
    pub db_snapshot_attributes: Option<Vec<DBSnapshotAttribute>>,
    #[doc="<p>The identifier of the manual DB snapshot that the attributes apply to.</p>"]
    pub db_snapshot_identifier: Option<String>,
}

struct DBSnapshotAttributesResultDeserializer;
impl DBSnapshotAttributesResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<DBSnapshotAttributesResult, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = DBSnapshotAttributesResult::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "DBSnapshotAttributes" => {
                            obj.db_snapshot_attributes =
                                Some(try!(DBSnapshotAttributeListDeserializer::deserialize("DBSnapshotAttributes",
                                                                                           stack)));
                        }
                        "DBSnapshotIdentifier" => {
                            obj.db_snapshot_identifier =
                                Some(try!(StringDeserializer::deserialize("DBSnapshotIdentifier",
                                                                          stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct DBSnapshotListDeserializer;
impl DBSnapshotListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<DBSnapshot>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "DBSnapshot" {
                        obj.push(try!(DBSnapshotDeserializer::deserialize("DBSnapshot", stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
#[doc="<p> Contains the result of a successful invocation of the <a>DescribeDBSnapshots</a> action. </p>"]
#[derive(Default,Debug,Clone)]
pub struct DBSnapshotMessage {
    #[doc="<p> A list of <a>DBSnapshot</a> instances. </p>"]
    pub db_snapshots: Option<Vec<DBSnapshot>>,
    #[doc="<p> An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>"]
    pub marker: Option<String>,
}

struct DBSnapshotMessageDeserializer;
impl DBSnapshotMessageDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<DBSnapshotMessage, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = DBSnapshotMessage::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "DBSnapshots" => {
                            obj.db_snapshots =
                                Some(try!(DBSnapshotListDeserializer::deserialize("DBSnapshots",
                                                                                  stack)));
                        }
                        "Marker" => {
                            obj.marker = Some(try!(StringDeserializer::deserialize("Marker",
                                                                                   stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p>Contains the result of a successful invocation of the following actions:</p> <ul> <li> <p> <a>CreateDBSubnetGroup</a> </p> </li> <li> <p> <a>ModifyDBSubnetGroup</a> </p> </li> <li> <p> <a>DescribeDBSubnetGroups</a> </p> </li> <li> <p> <a>DeleteDBSubnetGroup</a> </p> </li> </ul> <p>This data type is used as a response element in the <a>DescribeDBSubnetGroups</a> action.</p>"]
#[derive(Default,Debug,Clone)]
pub struct DBSubnetGroup {
    #[doc="<p>The Amazon Resource Name (ARN) for the DB subnet group.</p>"]
    pub db_subnet_group_arn: Option<String>,
    #[doc="<p>Provides the description of the DB subnet group.</p>"]
    pub db_subnet_group_description: Option<String>,
    #[doc="<p>The name of the DB subnet group.</p>"]
    pub db_subnet_group_name: Option<String>,
    #[doc="<p>Provides the status of the DB subnet group.</p>"]
    pub subnet_group_status: Option<String>,
    #[doc="<p> Contains a list of <a>Subnet</a> elements. </p>"]
    pub subnets: Option<Vec<Subnet>>,
    #[doc="<p>Provides the VpcId of the DB subnet group.</p>"]
    pub vpc_id: Option<String>,
}

struct DBSubnetGroupDeserializer;
impl DBSubnetGroupDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<DBSubnetGroup, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = DBSubnetGroup::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "DBSubnetGroupArn" => {
                            obj.db_subnet_group_arn =
                                Some(try!(StringDeserializer::deserialize("DBSubnetGroupArn",
                                                                          stack)));
                        }
                        "DBSubnetGroupDescription" => {
                            obj.db_subnet_group_description =
                                Some(try!(StringDeserializer::deserialize("DBSubnetGroupDescription",
                                                                          stack)));
                        }
                        "DBSubnetGroupName" => {
                            obj.db_subnet_group_name =
                                Some(try!(StringDeserializer::deserialize("DBSubnetGroupName",
                                                                          stack)));
                        }
                        "SubnetGroupStatus" => {
                            obj.subnet_group_status =
                                Some(try!(StringDeserializer::deserialize("SubnetGroupStatus",
                                                                          stack)));
                        }
                        "Subnets" => {
                            obj.subnets = Some(try!(SubnetListDeserializer::deserialize("Subnets",
                                                                                        stack)));
                        }
                        "VpcId" => {
                            obj.vpc_id = Some(try!(StringDeserializer::deserialize("VpcId",
                                                                                   stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p> Contains the result of a successful invocation of the <a>DescribeDBSubnetGroups</a> action. </p>"]
#[derive(Default,Debug,Clone)]
pub struct DBSubnetGroupMessage {
    #[doc="<p> A list of <a>DBSubnetGroup</a> instances. </p>"]
    pub db_subnet_groups: Option<Vec<DBSubnetGroup>>,
    #[doc="<p> An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>"]
    pub marker: Option<String>,
}

struct DBSubnetGroupMessageDeserializer;
impl DBSubnetGroupMessageDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<DBSubnetGroupMessage, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = DBSubnetGroupMessage::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "DBSubnetGroups" => {
                            obj.db_subnet_groups =
                                Some(try!(DBSubnetGroupsDeserializer::deserialize("DBSubnetGroups",
                                                                                  stack)));
                        }
                        "Marker" => {
                            obj.marker = Some(try!(StringDeserializer::deserialize("Marker",
                                                                                   stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct DBSubnetGroupsDeserializer;
impl DBSubnetGroupsDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<DBSubnetGroup>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "DBSubnetGroup" {
                        obj.push(try!(DBSubnetGroupDeserializer::deserialize("DBSubnetGroup",
                                                                             stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct DeleteDBClusterMessage {
    #[doc="<p>The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>"]
    pub db_cluster_identifier: String,
    #[doc="<p> The DB cluster snapshot identifier of the new DB cluster snapshot created when <code>SkipFinalSnapshot</code> is set to <code>false</code>. </p> <note> <p> Specifying this parameter and also setting the <code>SkipFinalShapshot</code> parameter to true results in an error. </p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>"]
    pub final_db_snapshot_identifier: Option<String>,
    #[doc="<p> Determines whether a final DB cluster snapshot is created before the DB cluster is deleted. If <code>true</code> is specified, no DB cluster snapshot is created. If <code>false</code> is specified, a DB cluster snapshot is created before the DB cluster is deleted. </p> <note> <p>You must specify a <code>FinalDBSnapshotIdentifier</code> parameter if <code>SkipFinalSnapshot</code> is <code>false</code>.</p> </note> <p>Default: <code>false</code> </p>"]
    pub skip_final_snapshot: Option<bool>,
}


/// Serialize `DeleteDBClusterMessage` contents to a `SignedRequest`.
struct DeleteDBClusterMessageSerializer;
impl DeleteDBClusterMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteDBClusterMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "DBClusterIdentifier"),
                   &obj.db_cluster_identifier.replace("+", "%2B"));
        if let Some(ref field_value) = obj.final_db_snapshot_identifier {
            params.put(&format!("{}{}", prefix, "FinalDBSnapshotIdentifier"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.skip_final_snapshot {
            params.put(&format!("{}{}", prefix, "SkipFinalSnapshot"),
                       &field_value.to_string().replace("+", "%2B"));
        }

    }
}

#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct DeleteDBClusterParameterGroupMessage {
    #[doc="<p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB cluster parameter group.</p> </li> <li> <p>You cannot delete a default DB cluster parameter group.</p> </li> <li> <p>Cannot be associated with any DB clusters.</p> </li> </ul>"]
    pub db_cluster_parameter_group_name: String,
}


/// Serialize `DeleteDBClusterParameterGroupMessage` contents to a `SignedRequest`.
struct DeleteDBClusterParameterGroupMessageSerializer;
impl DeleteDBClusterParameterGroupMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteDBClusterParameterGroupMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "DBClusterParameterGroupName"),
                   &obj.db_cluster_parameter_group_name.replace("+", "%2B"));

    }
}

#[derive(Default,Debug,Clone)]
pub struct DeleteDBClusterResult {
    pub db_cluster: Option<DBCluster>,
}

struct DeleteDBClusterResultDeserializer;
impl DeleteDBClusterResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<DeleteDBClusterResult, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = DeleteDBClusterResult::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "DBCluster" => {
                            obj.db_cluster = Some(try!(DBClusterDeserializer::deserialize("DBCluster",
                                                                                          stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct DeleteDBClusterSnapshotMessage {
    #[doc="<p>The identifier of the DB cluster snapshot to delete.</p> <p>Constraints: Must be the name of an existing DB cluster snapshot in the <code>available</code> state.</p>"]
    pub db_cluster_snapshot_identifier: String,
}


/// Serialize `DeleteDBClusterSnapshotMessage` contents to a `SignedRequest`.
struct DeleteDBClusterSnapshotMessageSerializer;
impl DeleteDBClusterSnapshotMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteDBClusterSnapshotMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "DBClusterSnapshotIdentifier"),
                   &obj.db_cluster_snapshot_identifier.replace("+", "%2B"));

    }
}

#[derive(Default,Debug,Clone)]
pub struct DeleteDBClusterSnapshotResult {
    pub db_cluster_snapshot: Option<DBClusterSnapshot>,
}

struct DeleteDBClusterSnapshotResultDeserializer;
impl DeleteDBClusterSnapshotResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<DeleteDBClusterSnapshotResult, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = DeleteDBClusterSnapshotResult::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "DBClusterSnapshot" => {
                            obj.db_cluster_snapshot =
                                Some(try!(DBClusterSnapshotDeserializer::deserialize("DBClusterSnapshot",
                                                                                     stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct DeleteDBInstanceMessage {
    #[doc="<p>The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>"]
    pub db_instance_identifier: String,
    #[doc="<p> The DBSnapshotIdentifier of the new DBSnapshot created when SkipFinalSnapshot is set to <code>false</code>. </p> <note> <p>Specifying this parameter and also setting the SkipFinalShapshot parameter to true results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Cannot be specified when deleting a Read Replica.</p> </li> </ul>"]
    pub final_db_snapshot_identifier: Option<String>,
    #[doc="<p> Determines whether a final DB snapshot is created before the DB instance is deleted. If <code>true</code> is specified, no DBSnapshot is created. If <code>false</code> is specified, a DB snapshot is created before the DB instance is deleted. </p> <p>Note that when a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when the SkipFinalSnapshot parameter is set to \"true\".</p> <p>Specify <code>true</code> when deleting a Read Replica.</p> <note> <p>The FinalDBSnapshotIdentifier parameter must be specified if SkipFinalSnapshot is <code>false</code>.</p> </note> <p>Default: <code>false</code> </p>"]
    pub skip_final_snapshot: Option<bool>,
}


/// Serialize `DeleteDBInstanceMessage` contents to a `SignedRequest`.
struct DeleteDBInstanceMessageSerializer;
impl DeleteDBInstanceMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteDBInstanceMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "DBInstanceIdentifier"),
                   &obj.db_instance_identifier.replace("+", "%2B"));
        if let Some(ref field_value) = obj.final_db_snapshot_identifier {
            params.put(&format!("{}{}", prefix, "FinalDBSnapshotIdentifier"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.skip_final_snapshot {
            params.put(&format!("{}{}", prefix, "SkipFinalSnapshot"),
                       &field_value.to_string().replace("+", "%2B"));
        }

    }
}

#[derive(Default,Debug,Clone)]
pub struct DeleteDBInstanceResult {
    pub db_instance: Option<DBInstance>,
}

struct DeleteDBInstanceResultDeserializer;
impl DeleteDBInstanceResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<DeleteDBInstanceResult, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = DeleteDBInstanceResult::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "DBInstance" => {
                            obj.db_instance =
                                Some(try!(DBInstanceDeserializer::deserialize("DBInstance",
                                                                              stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct DeleteDBParameterGroupMessage {
    #[doc="<p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB parameter group</p> </li> <li> <p>You cannot delete a default DB parameter group</p> </li> <li> <p>Cannot be associated with any DB instances</p> </li> </ul>"]
    pub db_parameter_group_name: String,
}


/// Serialize `DeleteDBParameterGroupMessage` contents to a `SignedRequest`.
struct DeleteDBParameterGroupMessageSerializer;
impl DeleteDBParameterGroupMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteDBParameterGroupMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "DBParameterGroupName"),
                   &obj.db_parameter_group_name.replace("+", "%2B"));

    }
}

#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct DeleteDBSecurityGroupMessage {
    #[doc="<p>The name of the DB security group to delete.</p> <note> <p>You cannot delete the default DB security group.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be \"Default\"</p> </li> </ul>"]
    pub db_security_group_name: String,
}


/// Serialize `DeleteDBSecurityGroupMessage` contents to a `SignedRequest`.
struct DeleteDBSecurityGroupMessageSerializer;
impl DeleteDBSecurityGroupMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteDBSecurityGroupMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "DBSecurityGroupName"),
                   &obj.db_security_group_name.replace("+", "%2B"));

    }
}

#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct DeleteDBSnapshotMessage {
    #[doc="<p>The DBSnapshot identifier.</p> <p>Constraints: Must be the name of an existing DB snapshot in the <code>available</code> state.</p>"]
    pub db_snapshot_identifier: String,
}


/// Serialize `DeleteDBSnapshotMessage` contents to a `SignedRequest`.
struct DeleteDBSnapshotMessageSerializer;
impl DeleteDBSnapshotMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteDBSnapshotMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "DBSnapshotIdentifier"),
                   &obj.db_snapshot_identifier.replace("+", "%2B"));

    }
}

#[derive(Default,Debug,Clone)]
pub struct DeleteDBSnapshotResult {
    pub db_snapshot: Option<DBSnapshot>,
}

struct DeleteDBSnapshotResultDeserializer;
impl DeleteDBSnapshotResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<DeleteDBSnapshotResult, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = DeleteDBSnapshotResult::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "DBSnapshot" => {
                            obj.db_snapshot =
                                Some(try!(DBSnapshotDeserializer::deserialize("DBSnapshot",
                                                                              stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct DeleteDBSubnetGroupMessage {
    #[doc="<p>The name of the database subnet group to delete.</p> <note> <p>You cannot delete the default subnet group.</p> </note> <p>Constraints:</p> <p>Constraints: Must contain no more than 255 alphanumeric characters, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>"]
    pub db_subnet_group_name: String,
}


/// Serialize `DeleteDBSubnetGroupMessage` contents to a `SignedRequest`.
struct DeleteDBSubnetGroupMessageSerializer;
impl DeleteDBSubnetGroupMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteDBSubnetGroupMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "DBSubnetGroupName"),
                   &obj.db_subnet_group_name.replace("+", "%2B"));

    }
}

#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct DeleteEventSubscriptionMessage {
    #[doc="<p>The name of the RDS event notification subscription you want to delete.</p>"]
    pub subscription_name: String,
}


/// Serialize `DeleteEventSubscriptionMessage` contents to a `SignedRequest`.
struct DeleteEventSubscriptionMessageSerializer;
impl DeleteEventSubscriptionMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteEventSubscriptionMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "SubscriptionName"),
                   &obj.subscription_name.replace("+", "%2B"));

    }
}

#[derive(Default,Debug,Clone)]
pub struct DeleteEventSubscriptionResult {
    pub event_subscription: Option<EventSubscription>,
}

struct DeleteEventSubscriptionResultDeserializer;
impl DeleteEventSubscriptionResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<DeleteEventSubscriptionResult, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = DeleteEventSubscriptionResult::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "EventSubscription" => {
                            obj.event_subscription =
                                Some(try!(EventSubscriptionDeserializer::deserialize("EventSubscription",
                                                                                     stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct DeleteOptionGroupMessage {
    #[doc="<p>The name of the option group to be deleted.</p> <note> <p>You cannot delete default option groups.</p> </note>"]
    pub option_group_name: String,
}


/// Serialize `DeleteOptionGroupMessage` contents to a `SignedRequest`.
struct DeleteOptionGroupMessageSerializer;
impl DeleteOptionGroupMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteOptionGroupMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "OptionGroupName"),
                   &obj.option_group_name.replace("+", "%2B"));

    }
}

#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct DescribeAccountAttributesMessage;


/// Serialize `DescribeAccountAttributesMessage` contents to a `SignedRequest`.
struct DescribeAccountAttributesMessageSerializer;
impl DescribeAccountAttributesMessageSerializer {
    fn serialize(_params: &mut Params, name: &str, _obj: &DescribeAccountAttributesMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }



    }
}

#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct DescribeCertificatesMessage {
    #[doc="<p>The user-supplied certificate identifier. If this parameter is specified, information for only the identified certificate is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>"]
    pub certificate_identifier: Option<String>,
    #[doc="<p>This parameter is not currently supported.</p>"]
    pub filters: Option<Vec<Filter>>,
    #[doc="<p> An optional pagination token provided by a previous <a>DescribeCertificates</a> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>"]
    pub marker: Option<String>,
    #[doc="<p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>"]
    pub max_records: Option<i64>,
}


/// Serialize `DescribeCertificatesMessage` contents to a `SignedRequest`.
struct DescribeCertificatesMessageSerializer;
impl DescribeCertificatesMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeCertificatesMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.certificate_identifier {
            params.put(&format!("{}{}", prefix, "CertificateIdentifier"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(params,
                                            &format!("{}{}", prefix, "Filters"),
                                            field_value);
        }
        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.max_records {
            params.put(&format!("{}{}", prefix, "MaxRecords"),
                       &field_value.to_string().replace("+", "%2B"));
        }

    }
}

#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct DescribeDBClusterParameterGroupsMessage {
    #[doc="<p>The name of a specific DB cluster parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>"]
    pub db_cluster_parameter_group_name: Option<String>,
    #[doc="<p>This parameter is not currently supported.</p>"]
    pub filters: Option<Vec<Filter>>,
    #[doc="<p> An optional pagination token provided by a previous <code>DescribeDBClusterParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>"]
    pub marker: Option<String>,
    #[doc="<p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>"]
    pub max_records: Option<i64>,
}


/// Serialize `DescribeDBClusterParameterGroupsMessage` contents to a `SignedRequest`.
struct DescribeDBClusterParameterGroupsMessageSerializer;
impl DescribeDBClusterParameterGroupsMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeDBClusterParameterGroupsMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.db_cluster_parameter_group_name {
            params.put(&format!("{}{}", prefix, "DBClusterParameterGroupName"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(params,
                                            &format!("{}{}", prefix, "Filters"),
                                            field_value);
        }
        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.max_records {
            params.put(&format!("{}{}", prefix, "MaxRecords"),
                       &field_value.to_string().replace("+", "%2B"));
        }

    }
}

#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct DescribeDBClusterParametersMessage {
    #[doc="<p>The name of a specific DB cluster parameter group to return parameter details for.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>"]
    pub db_cluster_parameter_group_name: String,
    #[doc="<p>This parameter is not currently supported.</p>"]
    pub filters: Option<Vec<Filter>>,
    #[doc="<p> An optional pagination token provided by a previous <code>DescribeDBClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>"]
    pub marker: Option<String>,
    #[doc="<p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>"]
    pub max_records: Option<i64>,
    #[doc="<p> A value that indicates to return only parameters for a specific source. Parameter sources can be <code>engine</code>, <code>service</code>, or <code>customer</code>. </p>"]
    pub source: Option<String>,
}


/// Serialize `DescribeDBClusterParametersMessage` contents to a `SignedRequest`.
struct DescribeDBClusterParametersMessageSerializer;
impl DescribeDBClusterParametersMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeDBClusterParametersMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "DBClusterParameterGroupName"),
                   &obj.db_cluster_parameter_group_name.replace("+", "%2B"));
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(params,
                                            &format!("{}{}", prefix, "Filters"),
                                            field_value);
        }
        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.max_records {
            params.put(&format!("{}{}", prefix, "MaxRecords"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.source {
            params.put(&format!("{}{}", prefix, "Source"),
                       &field_value.replace("+", "%2B"));
        }

    }
}

#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct DescribeDBClusterSnapshotAttributesMessage {
    #[doc="<p>The identifier for the DB cluster snapshot to describe the attributes for.</p>"]
    pub db_cluster_snapshot_identifier: String,
}


/// Serialize `DescribeDBClusterSnapshotAttributesMessage` contents to a `SignedRequest`.
struct DescribeDBClusterSnapshotAttributesMessageSerializer;
impl DescribeDBClusterSnapshotAttributesMessageSerializer {
    fn serialize(params: &mut Params,
                 name: &str,
                 obj: &DescribeDBClusterSnapshotAttributesMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "DBClusterSnapshotIdentifier"),
                   &obj.db_cluster_snapshot_identifier.replace("+", "%2B"));

    }
}

#[derive(Default,Debug,Clone)]
pub struct DescribeDBClusterSnapshotAttributesResult {
    pub db_cluster_snapshot_attributes_result: Option<DBClusterSnapshotAttributesResult>,
}

struct DescribeDBClusterSnapshotAttributesResultDeserializer;
impl DescribeDBClusterSnapshotAttributesResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>
        (tag_name: &str,
         stack: &mut T)
         -> Result<DescribeDBClusterSnapshotAttributesResult, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = DescribeDBClusterSnapshotAttributesResult::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "DBClusterSnapshotAttributesResult" => {
                            obj.db_cluster_snapshot_attributes_result = Some(try!(DBClusterSnapshotAttributesResultDeserializer::deserialize("DBClusterSnapshotAttributesResult", stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct DescribeDBClusterSnapshotsMessage {
    #[doc="<p>The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter cannot be used in conjunction with the <code>DBClusterSnapshotIdentifier</code> parameter. This parameter is not case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>"]
    pub db_cluster_identifier: Option<String>,
    #[doc="<p>A specific DB cluster snapshot identifier to describe. This parameter cannot be used in conjunction with the <code>DBClusterIdentifier</code> parameter. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>"]
    pub db_cluster_snapshot_identifier: Option<String>,
    #[doc="<p>This parameter is not currently supported.</p>"]
    pub filters: Option<Vec<Filter>>,
    #[doc="<p>Set this value to <code>true</code> to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account, otherwise set this value to <code>false</code>. The default is <code>false</code>. The default is false.</p> <p>You can share a manual DB cluster snapshot as public by using the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>"]
    pub include_public: Option<bool>,
    #[doc="<p>Set this value to <code>true</code> to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore, otherwise set this value to <code>false</code>. The default is <code>false</code>.</p> <p>You can give an AWS account permission to restore a manual DB cluster snapshot from another AWS account by the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>"]
    pub include_shared: Option<bool>,
    #[doc="<p>An optional pagination token provided by a previous <code>DescribeDBClusterSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>"]
    pub marker: Option<String>,
    #[doc="<p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>"]
    pub max_records: Option<i64>,
    #[doc="<p>The type of DB cluster snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB cluster snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB cluster snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB cluster snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB cluster snapshots that have been marked as public.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by setting the <code>IncludeShared</code> parameter to <code>true</code>. You can include public DB cluster snapshots with these results by setting the <code>IncludePublic</code> parameter to <code>true</code>.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>"]
    pub snapshot_type: Option<String>,
}


/// Serialize `DescribeDBClusterSnapshotsMessage` contents to a `SignedRequest`.
struct DescribeDBClusterSnapshotsMessageSerializer;
impl DescribeDBClusterSnapshotsMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeDBClusterSnapshotsMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.db_cluster_identifier {
            params.put(&format!("{}{}", prefix, "DBClusterIdentifier"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.db_cluster_snapshot_identifier {
            params.put(&format!("{}{}", prefix, "DBClusterSnapshotIdentifier"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(params,
                                            &format!("{}{}", prefix, "Filters"),
                                            field_value);
        }
        if let Some(ref field_value) = obj.include_public {
            params.put(&format!("{}{}", prefix, "IncludePublic"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.include_shared {
            params.put(&format!("{}{}", prefix, "IncludeShared"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.max_records {
            params.put(&format!("{}{}", prefix, "MaxRecords"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.snapshot_type {
            params.put(&format!("{}{}", prefix, "SnapshotType"),
                       &field_value.replace("+", "%2B"));
        }

    }
}

#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct DescribeDBClustersMessage {
    #[doc="<p>The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>"]
    pub db_cluster_identifier: Option<String>,
    #[doc="<p>A filter that specifies one or more DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>"]
    pub filters: Option<Vec<Filter>>,
    #[doc="<p> An optional pagination token provided by a previous <a>DescribeDBClusters</a> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>"]
    pub marker: Option<String>,
    #[doc="<p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>"]
    pub max_records: Option<i64>,
}


/// Serialize `DescribeDBClustersMessage` contents to a `SignedRequest`.
struct DescribeDBClustersMessageSerializer;
impl DescribeDBClustersMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeDBClustersMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.db_cluster_identifier {
            params.put(&format!("{}{}", prefix, "DBClusterIdentifier"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(params,
                                            &format!("{}{}", prefix, "Filters"),
                                            field_value);
        }
        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.max_records {
            params.put(&format!("{}{}", prefix, "MaxRecords"),
                       &field_value.to_string().replace("+", "%2B"));
        }

    }
}

#[derive(Default,Debug,Clone)]
pub struct DescribeDBEngineVersionsMessage {
    #[doc="<p>The name of a specific DB parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>"]
    pub db_parameter_group_family: Option<String>,
    #[doc="<p>Indicates that only the default version of the specified engine or engine and major version combination is returned.</p>"]
    pub default_only: Option<bool>,
    #[doc="<p>The database engine to return.</p>"]
    pub engine: Option<String>,
    #[doc="<p>The database engine version to return.</p> <p>Example: <code>5.1.49</code> </p>"]
    pub engine_version: Option<String>,
    #[doc="<p>Not currently supported.</p>"]
    pub filters: Option<Vec<Filter>>,
    #[doc="<p>If this parameter is specified and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version. </p>"]
    pub list_supported_character_sets: Option<bool>,
    #[doc="<p>If this parameter is specified and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version. </p>"]
    pub list_supported_timezones: Option<bool>,
    #[doc="<p> An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>"]
    pub marker: Option<String>,
    #[doc="<p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that the following results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>"]
    pub max_records: Option<i64>,
}


/// Serialize `DescribeDBEngineVersionsMessage` contents to a `SignedRequest`.
struct DescribeDBEngineVersionsMessageSerializer;
impl DescribeDBEngineVersionsMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeDBEngineVersionsMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.db_parameter_group_family {
            params.put(&format!("{}{}", prefix, "DBParameterGroupFamily"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.default_only {
            params.put(&format!("{}{}", prefix, "DefaultOnly"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.engine {
            params.put(&format!("{}{}", prefix, "Engine"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.engine_version {
            params.put(&format!("{}{}", prefix, "EngineVersion"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(params,
                                            &format!("{}{}", prefix, "Filters"),
                                            field_value);
        }
        if let Some(ref field_value) = obj.list_supported_character_sets {
            params.put(&format!("{}{}", prefix, "ListSupportedCharacterSets"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.list_supported_timezones {
            params.put(&format!("{}{}", prefix, "ListSupportedTimezones"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.max_records {
            params.put(&format!("{}{}", prefix, "MaxRecords"),
                       &field_value.to_string().replace("+", "%2B"));
        }

    }
}

#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct DescribeDBInstancesMessage {
    #[doc="<p>The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>"]
    pub db_instance_identifier: Option<String>,
    #[doc="<p>A filter that specifies one or more DB instances to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB Clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs). The results list will only include information about the DB instances identified by these ARNs.</p> </li> </ul>"]
    pub filters: Option<Vec<Filter>>,
    #[doc="<p> An optional pagination token provided by a previous <code>DescribeDBInstances</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>"]
    pub marker: Option<String>,
    #[doc="<p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>"]
    pub max_records: Option<i64>,
}


/// Serialize `DescribeDBInstancesMessage` contents to a `SignedRequest`.
struct DescribeDBInstancesMessageSerializer;
impl DescribeDBInstancesMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeDBInstancesMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.db_instance_identifier {
            params.put(&format!("{}{}", prefix, "DBInstanceIdentifier"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(params,
                                            &format!("{}{}", prefix, "Filters"),
                                            field_value);
        }
        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.max_records {
            params.put(&format!("{}{}", prefix, "MaxRecords"),
                       &field_value.to_string().replace("+", "%2B"));
        }

    }
}

#[doc="<p>This data type is used as a response element to <a>DescribeDBLogFiles</a>.</p>"]
#[derive(Default,Debug,Clone)]
pub struct DescribeDBLogFilesDetails {
    #[doc="<p>A POSIX timestamp when the last log entry was written.</p>"]
    pub last_written: Option<i64>,
    #[doc="<p>The name of the log file for the specified DB instance.</p>"]
    pub log_file_name: Option<String>,
    #[doc="<p>The size, in bytes, of the log file for the specified DB instance.</p>"]
    pub size: Option<i64>,
}

struct DescribeDBLogFilesDetailsDeserializer;
impl DescribeDBLogFilesDetailsDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<DescribeDBLogFilesDetails, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = DescribeDBLogFilesDetails::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "LastWritten" => {
                            obj.last_written = Some(try!(LongDeserializer::deserialize("LastWritten",
                                                                                       stack)));
                        }
                        "LogFileName" => {
                            obj.log_file_name = Some(try!(StringDeserializer::deserialize("LogFileName",
                                                                                          stack)));
                        }
                        "Size" => {
                            obj.size = Some(try!(LongDeserializer::deserialize("Size", stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct DescribeDBLogFilesListDeserializer;
impl DescribeDBLogFilesListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<DescribeDBLogFilesDetails>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "DescribeDBLogFilesDetails" {
                        obj.push(try!(DescribeDBLogFilesDetailsDeserializer::deserialize("DescribeDBLogFilesDetails", stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct DescribeDBLogFilesMessage {
    #[doc="<p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>"]
    pub db_instance_identifier: String,
    #[doc="<p>Filters the available log files for files written since the specified date, in POSIX timestamp format with milliseconds.</p>"]
    pub file_last_written: Option<i64>,
    #[doc="<p>Filters the available log files for files larger than the specified size.</p>"]
    pub file_size: Option<i64>,
    #[doc="<p>Filters the available log files for log file names that contain the specified string.</p>"]
    pub filename_contains: Option<String>,
    #[doc="<p>This parameter is not currently supported.</p>"]
    pub filters: Option<Vec<Filter>>,
    #[doc="<p>The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to MaxRecords.</p>"]
    pub marker: Option<String>,
    #[doc="<p>The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p>"]
    pub max_records: Option<i64>,
}


/// Serialize `DescribeDBLogFilesMessage` contents to a `SignedRequest`.
struct DescribeDBLogFilesMessageSerializer;
impl DescribeDBLogFilesMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeDBLogFilesMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "DBInstanceIdentifier"),
                   &obj.db_instance_identifier.replace("+", "%2B"));
        if let Some(ref field_value) = obj.file_last_written {
            params.put(&format!("{}{}", prefix, "FileLastWritten"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.file_size {
            params.put(&format!("{}{}", prefix, "FileSize"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.filename_contains {
            params.put(&format!("{}{}", prefix, "FilenameContains"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(params,
                                            &format!("{}{}", prefix, "Filters"),
                                            field_value);
        }
        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.max_records {
            params.put(&format!("{}{}", prefix, "MaxRecords"),
                       &field_value.to_string().replace("+", "%2B"));
        }

    }
}

#[doc="<p> The response from a call to <a>DescribeDBLogFiles</a>. </p>"]
#[derive(Default,Debug,Clone)]
pub struct DescribeDBLogFilesResponse {
    #[doc="<p>The DB log files returned.</p>"]
    pub describe_db_log_files: Option<Vec<DescribeDBLogFilesDetails>>,
    #[doc="<p>A pagination token that can be used in a subsequent DescribeDBLogFiles request.</p>"]
    pub marker: Option<String>,
}

struct DescribeDBLogFilesResponseDeserializer;
impl DescribeDBLogFilesResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<DescribeDBLogFilesResponse, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = DescribeDBLogFilesResponse::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "DescribeDBLogFiles" => {
                            obj.describe_db_log_files =
                                Some(try!(DescribeDBLogFilesListDeserializer::deserialize("DescribeDBLogFiles",
                                                                                          stack)));
                        }
                        "Marker" => {
                            obj.marker = Some(try!(StringDeserializer::deserialize("Marker",
                                                                                   stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct DescribeDBParameterGroupsMessage {
    #[doc="<p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>"]
    pub db_parameter_group_name: Option<String>,
    #[doc="<p>This parameter is not currently supported.</p>"]
    pub filters: Option<Vec<Filter>>,
    #[doc="<p> An optional pagination token provided by a previous <code>DescribeDBParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>"]
    pub marker: Option<String>,
    #[doc="<p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>"]
    pub max_records: Option<i64>,
}


/// Serialize `DescribeDBParameterGroupsMessage` contents to a `SignedRequest`.
struct DescribeDBParameterGroupsMessageSerializer;
impl DescribeDBParameterGroupsMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeDBParameterGroupsMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.db_parameter_group_name {
            params.put(&format!("{}{}", prefix, "DBParameterGroupName"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(params,
                                            &format!("{}{}", prefix, "Filters"),
                                            field_value);
        }
        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.max_records {
            params.put(&format!("{}{}", prefix, "MaxRecords"),
                       &field_value.to_string().replace("+", "%2B"));
        }

    }
}

#[derive(Default,Debug,Clone)]
pub struct DescribeDBParametersMessage {
    #[doc="<p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>"]
    pub db_parameter_group_name: String,
    #[doc="<p>This parameter is not currently supported.</p>"]
    pub filters: Option<Vec<Filter>>,
    #[doc="<p> An optional pagination token provided by a previous <code>DescribeDBParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>"]
    pub marker: Option<String>,
    #[doc="<p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>"]
    pub max_records: Option<i64>,
    #[doc="<p>The parameter types to return.</p> <p>Default: All parameter types returned</p> <p>Valid Values: <code>user | system | engine-default</code> </p>"]
    pub source: Option<String>,
}


/// Serialize `DescribeDBParametersMessage` contents to a `SignedRequest`.
struct DescribeDBParametersMessageSerializer;
impl DescribeDBParametersMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeDBParametersMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "DBParameterGroupName"),
                   &obj.db_parameter_group_name.replace("+", "%2B"));
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(params,
                                            &format!("{}{}", prefix, "Filters"),
                                            field_value);
        }
        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.max_records {
            params.put(&format!("{}{}", prefix, "MaxRecords"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.source {
            params.put(&format!("{}{}", prefix, "Source"),
                       &field_value.replace("+", "%2B"));
        }

    }
}

#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct DescribeDBSecurityGroupsMessage {
    #[doc="<p>The name of the DB security group to return details for.</p>"]
    pub db_security_group_name: Option<String>,
    #[doc="<p>This parameter is not currently supported.</p>"]
    pub filters: Option<Vec<Filter>>,
    #[doc="<p> An optional pagination token provided by a previous <code>DescribeDBSecurityGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>"]
    pub marker: Option<String>,
    #[doc="<p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>"]
    pub max_records: Option<i64>,
}


/// Serialize `DescribeDBSecurityGroupsMessage` contents to a `SignedRequest`.
struct DescribeDBSecurityGroupsMessageSerializer;
impl DescribeDBSecurityGroupsMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeDBSecurityGroupsMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.db_security_group_name {
            params.put(&format!("{}{}", prefix, "DBSecurityGroupName"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(params,
                                            &format!("{}{}", prefix, "Filters"),
                                            field_value);
        }
        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.max_records {
            params.put(&format!("{}{}", prefix, "MaxRecords"),
                       &field_value.to_string().replace("+", "%2B"));
        }

    }
}

#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct DescribeDBSnapshotAttributesMessage {
    #[doc="<p>The identifier for the DB snapshot to describe the attributes for.</p>"]
    pub db_snapshot_identifier: String,
}


/// Serialize `DescribeDBSnapshotAttributesMessage` contents to a `SignedRequest`.
struct DescribeDBSnapshotAttributesMessageSerializer;
impl DescribeDBSnapshotAttributesMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeDBSnapshotAttributesMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "DBSnapshotIdentifier"),
                   &obj.db_snapshot_identifier.replace("+", "%2B"));

    }
}

#[derive(Default,Debug,Clone)]
pub struct DescribeDBSnapshotAttributesResult {
    pub db_snapshot_attributes_result: Option<DBSnapshotAttributesResult>,
}

struct DescribeDBSnapshotAttributesResultDeserializer;
impl DescribeDBSnapshotAttributesResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>
        (tag_name: &str,
         stack: &mut T)
         -> Result<DescribeDBSnapshotAttributesResult, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = DescribeDBSnapshotAttributesResult::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "DBSnapshotAttributesResult" => {
                            obj.db_snapshot_attributes_result = Some(try!(DBSnapshotAttributesResultDeserializer::deserialize("DBSnapshotAttributesResult", stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct DescribeDBSnapshotsMessage {
    #[doc="<p>The ID of the DB instance to retrieve the list of DB snapshots for. This parameter cannot be used in conjunction with <code>DBSnapshotIdentifier</code>. This parameter is not case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>"]
    pub db_instance_identifier: Option<String>,
    #[doc="<p> A specific DB snapshot identifier to describe. This parameter cannot be used in conjunction with <code>DBInstanceIdentifier</code>. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>"]
    pub db_snapshot_identifier: Option<String>,
    #[doc="<p>This parameter is not currently supported.</p>"]
    pub filters: Option<Vec<Filter>>,
    #[doc="<p>Set this value to <code>true</code> to include manual DB snapshots that are public and can be copied or restored by any AWS account, otherwise set this value to <code>false</code>. The default is <code>false</code>.</p> <p>You can share a manual DB snapshot as public by using the <a>ModifyDBSnapshotAttribute</a> API.</p>"]
    pub include_public: Option<bool>,
    #[doc="<p>Set this value to <code>true</code> to include shared manual DB snapshots from other AWS accounts that this AWS account has been given permission to copy or restore, otherwise set this value to <code>false</code>. The default is <code>false</code>.</p> <p>You can give an AWS account permission to restore a manual DB snapshot from another AWS account by using the <a>ModifyDBSnapshotAttribute</a> API action.</p>"]
    pub include_shared: Option<bool>,
    #[doc="<p> An optional pagination token provided by a previous <code>DescribeDBSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>"]
    pub marker: Option<String>,
    #[doc="<p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>"]
    pub max_records: Option<i64>,
    #[doc="<p>The type of snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB snapshots that have been marked as public.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual snapshots are returned. Shared and public DB snapshots are not included in the returned results by default. You can include shared snapshots with these results by setting the <code>IncludeShared</code> parameter to <code>true</code>. You can include public snapshots with these results by setting the <code>IncludePublic</code> parameter to <code>true</code>.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>"]
    pub snapshot_type: Option<String>,
}


/// Serialize `DescribeDBSnapshotsMessage` contents to a `SignedRequest`.
struct DescribeDBSnapshotsMessageSerializer;
impl DescribeDBSnapshotsMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeDBSnapshotsMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.db_instance_identifier {
            params.put(&format!("{}{}", prefix, "DBInstanceIdentifier"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.db_snapshot_identifier {
            params.put(&format!("{}{}", prefix, "DBSnapshotIdentifier"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(params,
                                            &format!("{}{}", prefix, "Filters"),
                                            field_value);
        }
        if let Some(ref field_value) = obj.include_public {
            params.put(&format!("{}{}", prefix, "IncludePublic"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.include_shared {
            params.put(&format!("{}{}", prefix, "IncludeShared"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.max_records {
            params.put(&format!("{}{}", prefix, "MaxRecords"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.snapshot_type {
            params.put(&format!("{}{}", prefix, "SnapshotType"),
                       &field_value.replace("+", "%2B"));
        }

    }
}

#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct DescribeDBSubnetGroupsMessage {
    #[doc="<p>The name of the DB subnet group to return details for.</p>"]
    pub db_subnet_group_name: Option<String>,
    #[doc="<p>This parameter is not currently supported.</p>"]
    pub filters: Option<Vec<Filter>>,
    #[doc="<p> An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>"]
    pub marker: Option<String>,
    #[doc="<p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>"]
    pub max_records: Option<i64>,
}


/// Serialize `DescribeDBSubnetGroupsMessage` contents to a `SignedRequest`.
struct DescribeDBSubnetGroupsMessageSerializer;
impl DescribeDBSubnetGroupsMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeDBSubnetGroupsMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.db_subnet_group_name {
            params.put(&format!("{}{}", prefix, "DBSubnetGroupName"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(params,
                                            &format!("{}{}", prefix, "Filters"),
                                            field_value);
        }
        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.max_records {
            params.put(&format!("{}{}", prefix, "MaxRecords"),
                       &field_value.to_string().replace("+", "%2B"));
        }

    }
}

#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct DescribeEngineDefaultClusterParametersMessage {
    #[doc="<p>The name of the DB cluster parameter group family to return engine parameter information for.</p>"]
    pub db_parameter_group_family: String,
    #[doc="<p>This parameter is not currently supported.</p>"]
    pub filters: Option<Vec<Filter>>,
    #[doc="<p> An optional pagination token provided by a previous <code>DescribeEngineDefaultClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>"]
    pub marker: Option<String>,
    #[doc="<p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>"]
    pub max_records: Option<i64>,
}


/// Serialize `DescribeEngineDefaultClusterParametersMessage` contents to a `SignedRequest`.
struct DescribeEngineDefaultClusterParametersMessageSerializer;
impl DescribeEngineDefaultClusterParametersMessageSerializer {
    fn serialize(params: &mut Params,
                 name: &str,
                 obj: &DescribeEngineDefaultClusterParametersMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "DBParameterGroupFamily"),
                   &obj.db_parameter_group_family.replace("+", "%2B"));
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(params,
                                            &format!("{}{}", prefix, "Filters"),
                                            field_value);
        }
        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.max_records {
            params.put(&format!("{}{}", prefix, "MaxRecords"),
                       &field_value.to_string().replace("+", "%2B"));
        }

    }
}

#[derive(Default,Debug,Clone)]
pub struct DescribeEngineDefaultClusterParametersResult {
    pub engine_defaults: Option<EngineDefaults>,
}

struct DescribeEngineDefaultClusterParametersResultDeserializer;
impl DescribeEngineDefaultClusterParametersResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>
        (tag_name: &str,
         stack: &mut T)
         -> Result<DescribeEngineDefaultClusterParametersResult, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = DescribeEngineDefaultClusterParametersResult::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "EngineDefaults" => {
                            obj.engine_defaults =
                                Some(try!(EngineDefaultsDeserializer::deserialize("EngineDefaults",
                                                                                  stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct DescribeEngineDefaultParametersMessage {
    #[doc="<p>The name of the DB parameter group family.</p>"]
    pub db_parameter_group_family: String,
    #[doc="<p>Not currently supported.</p>"]
    pub filters: Option<Vec<Filter>>,
    #[doc="<p> An optional pagination token provided by a previous <code>DescribeEngineDefaultParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>"]
    pub marker: Option<String>,
    #[doc="<p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>"]
    pub max_records: Option<i64>,
}


/// Serialize `DescribeEngineDefaultParametersMessage` contents to a `SignedRequest`.
struct DescribeEngineDefaultParametersMessageSerializer;
impl DescribeEngineDefaultParametersMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeEngineDefaultParametersMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "DBParameterGroupFamily"),
                   &obj.db_parameter_group_family.replace("+", "%2B"));
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(params,
                                            &format!("{}{}", prefix, "Filters"),
                                            field_value);
        }
        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.max_records {
            params.put(&format!("{}{}", prefix, "MaxRecords"),
                       &field_value.to_string().replace("+", "%2B"));
        }

    }
}

#[derive(Default,Debug,Clone)]
pub struct DescribeEngineDefaultParametersResult {
    pub engine_defaults: Option<EngineDefaults>,
}

struct DescribeEngineDefaultParametersResultDeserializer;
impl DescribeEngineDefaultParametersResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>
        (tag_name: &str,
         stack: &mut T)
         -> Result<DescribeEngineDefaultParametersResult, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = DescribeEngineDefaultParametersResult::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "EngineDefaults" => {
                            obj.engine_defaults =
                                Some(try!(EngineDefaultsDeserializer::deserialize("EngineDefaults",
                                                                                  stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct DescribeEventCategoriesMessage {
    #[doc="<p>This parameter is not currently supported.</p>"]
    pub filters: Option<Vec<Filter>>,
    #[doc="<p>The type of source that will be generating the events.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>"]
    pub source_type: Option<String>,
}


/// Serialize `DescribeEventCategoriesMessage` contents to a `SignedRequest`.
struct DescribeEventCategoriesMessageSerializer;
impl DescribeEventCategoriesMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeEventCategoriesMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(params,
                                            &format!("{}{}", prefix, "Filters"),
                                            field_value);
        }
        if let Some(ref field_value) = obj.source_type {
            params.put(&format!("{}{}", prefix, "SourceType"),
                       &field_value.replace("+", "%2B"));
        }

    }
}

#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct DescribeEventSubscriptionsMessage {
    #[doc="<p>This parameter is not currently supported.</p>"]
    pub filters: Option<Vec<Filter>>,
    #[doc="<p> An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . </p>"]
    pub marker: Option<String>,
    #[doc="<p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>"]
    pub max_records: Option<i64>,
    #[doc="<p>The name of the RDS event notification subscription you want to describe.</p>"]
    pub subscription_name: Option<String>,
}


/// Serialize `DescribeEventSubscriptionsMessage` contents to a `SignedRequest`.
struct DescribeEventSubscriptionsMessageSerializer;
impl DescribeEventSubscriptionsMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeEventSubscriptionsMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(params,
                                            &format!("{}{}", prefix, "Filters"),
                                            field_value);
        }
        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.max_records {
            params.put(&format!("{}{}", prefix, "MaxRecords"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.subscription_name {
            params.put(&format!("{}{}", prefix, "SubscriptionName"),
                       &field_value.replace("+", "%2B"));
        }

    }
}

#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct DescribeEventsMessage {
    #[doc="<p>The number of minutes to retrieve events for.</p> <p>Default: 60</p>"]
    pub duration: Option<i64>,
    #[doc="<p> The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href=\"http://en.wikipedia.org/wiki/ISO_8601\">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>"]
    pub end_time: Option<String>,
    #[doc="<p>A list of event categories that trigger notifications for a event notification subscription.</p>"]
    pub event_categories: Option<Vec<String>>,
    #[doc="<p>This parameter is not currently supported.</p>"]
    pub filters: Option<Vec<Filter>>,
    #[doc="<p> An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>"]
    pub marker: Option<String>,
    #[doc="<p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>"]
    pub max_records: Option<i64>,
    #[doc="<p>The identifier of the event source for which events will be returned. If not specified, then all sources are included in the response.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIdentifier is supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is <code>DBInstance</code>, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSecurityGroup</code>, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBParameterGroup</code>, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSnapshot</code>, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>"]
    pub source_identifier: Option<String>,
    #[doc="<p>The event source to retrieve events for. If no value is specified, all events are returned.</p>"]
    pub source_type: Option<String>,
    #[doc="<p> The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href=\"http://en.wikipedia.org/wiki/ISO_8601\">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>"]
    pub start_time: Option<String>,
}


/// Serialize `DescribeEventsMessage` contents to a `SignedRequest`.
struct DescribeEventsMessageSerializer;
impl DescribeEventsMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeEventsMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.duration {
            params.put(&format!("{}{}", prefix, "Duration"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.end_time {
            params.put(&format!("{}{}", prefix, "EndTime"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.event_categories {
            EventCategoriesListSerializer::serialize(params,
                                                     &format!("{}{}", prefix, "EventCategories"),
                                                     field_value);
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(params,
                                            &format!("{}{}", prefix, "Filters"),
                                            field_value);
        }
        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.max_records {
            params.put(&format!("{}{}", prefix, "MaxRecords"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.source_identifier {
            params.put(&format!("{}{}", prefix, "SourceIdentifier"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.source_type {
            params.put(&format!("{}{}", prefix, "SourceType"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.start_time {
            params.put(&format!("{}{}", prefix, "StartTime"),
                       &field_value.replace("+", "%2B"));
        }

    }
}

#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct DescribeOptionGroupOptionsMessage {
    #[doc="<p>A required parameter. Options available for the given engine name will be described.</p>"]
    pub engine_name: String,
    #[doc="<p>This parameter is not currently supported.</p>"]
    pub filters: Option<Vec<Filter>>,
    #[doc="<p>If specified, filters the results to include only options for the specified major engine version.</p>"]
    pub major_engine_version: Option<String>,
    #[doc="<p>An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>"]
    pub marker: Option<String>,
    #[doc="<p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>"]
    pub max_records: Option<i64>,
}


/// Serialize `DescribeOptionGroupOptionsMessage` contents to a `SignedRequest`.
struct DescribeOptionGroupOptionsMessageSerializer;
impl DescribeOptionGroupOptionsMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeOptionGroupOptionsMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "EngineName"),
                   &obj.engine_name.replace("+", "%2B"));
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(params,
                                            &format!("{}{}", prefix, "Filters"),
                                            field_value);
        }
        if let Some(ref field_value) = obj.major_engine_version {
            params.put(&format!("{}{}", prefix, "MajorEngineVersion"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.max_records {
            params.put(&format!("{}{}", prefix, "MaxRecords"),
                       &field_value.to_string().replace("+", "%2B"));
        }

    }
}

#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct DescribeOptionGroupsMessage {
    #[doc="<p>Filters the list of option groups to only include groups associated with a specific database engine.</p>"]
    pub engine_name: Option<String>,
    #[doc="<p>This parameter is not currently supported.</p>"]
    pub filters: Option<Vec<Filter>>,
    #[doc="<p>Filters the list of option groups to only include groups associated with a specific database engine version. If specified, then EngineName must also be specified.</p>"]
    pub major_engine_version: Option<String>,
    #[doc="<p> An optional pagination token provided by a previous DescribeOptionGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>"]
    pub marker: Option<String>,
    #[doc="<p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>"]
    pub max_records: Option<i64>,
    #[doc="<p>The name of the option group to describe. Cannot be supplied together with EngineName or MajorEngineVersion.</p>"]
    pub option_group_name: Option<String>,
}


/// Serialize `DescribeOptionGroupsMessage` contents to a `SignedRequest`.
struct DescribeOptionGroupsMessageSerializer;
impl DescribeOptionGroupsMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeOptionGroupsMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.engine_name {
            params.put(&format!("{}{}", prefix, "EngineName"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(params,
                                            &format!("{}{}", prefix, "Filters"),
                                            field_value);
        }
        if let Some(ref field_value) = obj.major_engine_version {
            params.put(&format!("{}{}", prefix, "MajorEngineVersion"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.max_records {
            params.put(&format!("{}{}", prefix, "MaxRecords"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.option_group_name {
            params.put(&format!("{}{}", prefix, "OptionGroupName"),
                       &field_value.replace("+", "%2B"));
        }

    }
}

#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct DescribeOrderableDBInstanceOptionsMessage {
    #[doc="<p>The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.</p>"]
    pub db_instance_class: Option<String>,
    #[doc="<p>The name of the engine to retrieve DB instance options for.</p>"]
    pub engine: String,
    #[doc="<p>The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version.</p>"]
    pub engine_version: Option<String>,
    #[doc="<p>This parameter is not currently supported.</p>"]
    pub filters: Option<Vec<Filter>>,
    #[doc="<p>The license model filter value. Specify this parameter to show only the available offerings matching the specified license model.</p>"]
    pub license_model: Option<String>,
    #[doc="<p> An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . </p>"]
    pub marker: Option<String>,
    #[doc="<p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>"]
    pub max_records: Option<i64>,
    #[doc="<p>The VPC filter value. Specify this parameter to show only the available VPC or non-VPC offerings.</p>"]
    pub vpc: Option<bool>,
}


/// Serialize `DescribeOrderableDBInstanceOptionsMessage` contents to a `SignedRequest`.
struct DescribeOrderableDBInstanceOptionsMessageSerializer;
impl DescribeOrderableDBInstanceOptionsMessageSerializer {
    fn serialize(params: &mut Params,
                 name: &str,
                 obj: &DescribeOrderableDBInstanceOptionsMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.db_instance_class {
            params.put(&format!("{}{}", prefix, "DBInstanceClass"),
                       &field_value.replace("+", "%2B"));
        }
        params.put(&format!("{}{}", prefix, "Engine"),
                   &obj.engine.replace("+", "%2B"));
        if let Some(ref field_value) = obj.engine_version {
            params.put(&format!("{}{}", prefix, "EngineVersion"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(params,
                                            &format!("{}{}", prefix, "Filters"),
                                            field_value);
        }
        if let Some(ref field_value) = obj.license_model {
            params.put(&format!("{}{}", prefix, "LicenseModel"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.max_records {
            params.put(&format!("{}{}", prefix, "MaxRecords"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.vpc {
            params.put(&format!("{}{}", prefix, "Vpc"),
                       &field_value.to_string().replace("+", "%2B"));
        }

    }
}

#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct DescribePendingMaintenanceActionsMessage {
    #[doc="<p>A filter that specifies one or more resources to return pending maintenance actions for.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance actions for the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance ARNs. The results list will only include pending maintenance actions for the DB instances identified by these ARNs.</p> </li> </ul>"]
    pub filters: Option<Vec<Filter>>,
    #[doc="<p> An optional pagination token provided by a previous <code>DescribePendingMaintenanceActions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by <code>MaxRecords</code>. </p>"]
    pub marker: Option<String>,
    #[doc="<p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>"]
    pub max_records: Option<i64>,
    #[doc="<p>The ARN of a resource to return pending maintenance actions for.</p>"]
    pub resource_identifier: Option<String>,
}


/// Serialize `DescribePendingMaintenanceActionsMessage` contents to a `SignedRequest`.
struct DescribePendingMaintenanceActionsMessageSerializer;
impl DescribePendingMaintenanceActionsMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribePendingMaintenanceActionsMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(params,
                                            &format!("{}{}", prefix, "Filters"),
                                            field_value);
        }
        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.max_records {
            params.put(&format!("{}{}", prefix, "MaxRecords"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.resource_identifier {
            params.put(&format!("{}{}", prefix, "ResourceIdentifier"),
                       &field_value.replace("+", "%2B"));
        }

    }
}

#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct DescribeReservedDBInstancesMessage {
    #[doc="<p>The DB instance class filter value. Specify this parameter to show only those reservations matching the specified DB instances class.</p>"]
    pub db_instance_class: Option<String>,
    #[doc="<p>The duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>"]
    pub duration: Option<String>,
    #[doc="<p>This parameter is not currently supported.</p>"]
    pub filters: Option<Vec<Filter>>,
    #[doc="<p> An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>"]
    pub marker: Option<String>,
    #[doc="<p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that the following results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>"]
    pub max_records: Option<i64>,
    #[doc="<p>The Multi-AZ filter value. Specify this parameter to show only those reservations matching the specified Multi-AZ parameter.</p>"]
    pub multi_az: Option<bool>,
    #[doc="<p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>\"Partial Upfront\" | \"All Upfront\" | \"No Upfront\" </code> </p>"]
    pub offering_type: Option<String>,
    #[doc="<p>The product description filter value. Specify this parameter to show only those reservations matching the specified product description.</p>"]
    pub product_description: Option<String>,
    #[doc="<p>The reserved DB instance identifier filter value. Specify this parameter to show only the reservation that matches the specified reservation ID.</p>"]
    pub reserved_db_instance_id: Option<String>,
    #[doc="<p>The offering identifier filter value. Specify this parameter to show only purchased reservations matching the specified offering identifier.</p>"]
    pub reserved_db_instances_offering_id: Option<String>,
}


/// Serialize `DescribeReservedDBInstancesMessage` contents to a `SignedRequest`.
struct DescribeReservedDBInstancesMessageSerializer;
impl DescribeReservedDBInstancesMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeReservedDBInstancesMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.db_instance_class {
            params.put(&format!("{}{}", prefix, "DBInstanceClass"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.duration {
            params.put(&format!("{}{}", prefix, "Duration"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(params,
                                            &format!("{}{}", prefix, "Filters"),
                                            field_value);
        }
        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.max_records {
            params.put(&format!("{}{}", prefix, "MaxRecords"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.multi_az {
            params.put(&format!("{}{}", prefix, "MultiAZ"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.offering_type {
            params.put(&format!("{}{}", prefix, "OfferingType"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.product_description {
            params.put(&format!("{}{}", prefix, "ProductDescription"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.reserved_db_instance_id {
            params.put(&format!("{}{}", prefix, "ReservedDBInstanceId"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.reserved_db_instances_offering_id {
            params.put(&format!("{}{}", prefix, "ReservedDBInstancesOfferingId"),
                       &field_value.replace("+", "%2B"));
        }

    }
}

#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct DescribeReservedDBInstancesOfferingsMessage {
    #[doc="<p>The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.</p>"]
    pub db_instance_class: Option<String>,
    #[doc="<p>Duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>"]
    pub duration: Option<String>,
    #[doc="<p>This parameter is not currently supported.</p>"]
    pub filters: Option<Vec<Filter>>,
    #[doc="<p> An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>"]
    pub marker: Option<String>,
    #[doc="<p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that the following results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>"]
    pub max_records: Option<i64>,
    #[doc="<p>The Multi-AZ filter value. Specify this parameter to show only the available offerings matching the specified Multi-AZ parameter.</p>"]
    pub multi_az: Option<bool>,
    #[doc="<p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>\"Partial Upfront\" | \"All Upfront\" | \"No Upfront\" </code> </p>"]
    pub offering_type: Option<String>,
    #[doc="<p>Product description filter value. Specify this parameter to show only the available offerings matching the specified product description.</p>"]
    pub product_description: Option<String>,
    #[doc="<p>The offering identifier filter value. Specify this parameter to show only the available offering that matches the specified reservation identifier.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>"]
    pub reserved_db_instances_offering_id: Option<String>,
}


/// Serialize `DescribeReservedDBInstancesOfferingsMessage` contents to a `SignedRequest`.
struct DescribeReservedDBInstancesOfferingsMessageSerializer;
impl DescribeReservedDBInstancesOfferingsMessageSerializer {
    fn serialize(params: &mut Params,
                 name: &str,
                 obj: &DescribeReservedDBInstancesOfferingsMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.db_instance_class {
            params.put(&format!("{}{}", prefix, "DBInstanceClass"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.duration {
            params.put(&format!("{}{}", prefix, "Duration"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(params,
                                            &format!("{}{}", prefix, "Filters"),
                                            field_value);
        }
        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.max_records {
            params.put(&format!("{}{}", prefix, "MaxRecords"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.multi_az {
            params.put(&format!("{}{}", prefix, "MultiAZ"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.offering_type {
            params.put(&format!("{}{}", prefix, "OfferingType"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.product_description {
            params.put(&format!("{}{}", prefix, "ProductDescription"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.reserved_db_instances_offering_id {
            params.put(&format!("{}{}", prefix, "ReservedDBInstancesOfferingId"),
                       &field_value.replace("+", "%2B"));
        }

    }
}

#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct DescribeSourceRegionsMessage {
    #[doc="<p>This parameter is not currently supported.</p>"]
    pub filters: Option<Vec<Filter>>,
    #[doc="<p> An optional pagination token provided by a previous <a>DescribeSourceRegions</a> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>"]
    pub marker: Option<String>,
    #[doc="<p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>"]
    pub max_records: Option<i64>,
    #[doc="<p>The source AWS Region name. For example, <code>us-east-1</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid AWS Region name.</p> </li> </ul>"]
    pub region_name: Option<String>,
}


/// Serialize `DescribeSourceRegionsMessage` contents to a `SignedRequest`.
struct DescribeSourceRegionsMessageSerializer;
impl DescribeSourceRegionsMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeSourceRegionsMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(params,
                                            &format!("{}{}", prefix, "Filters"),
                                            field_value);
        }
        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.max_records {
            params.put(&format!("{}{}", prefix, "MaxRecords"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.region_name {
            params.put(&format!("{}{}", prefix, "RegionName"),
                       &field_value.replace("+", "%2B"));
        }

    }
}

#[doc="<p>An Active Directory Domain membership record associated with the DB instance.</p>"]
#[derive(Default,Debug,Clone)]
pub struct DomainMembership {
    #[doc="<p>The identifier of the Active Directory Domain.</p>"]
    pub domain: Option<String>,
    #[doc="<p>The fully qualified domain name of the Active Directory Domain.</p>"]
    pub fqdn: Option<String>,
    #[doc="<p>The name of the IAM role to be used when making API calls to the Directory Service.</p>"]
    pub iam_role_name: Option<String>,
    #[doc="<p>The status of the DB instance's Active Directory Domain membership, such as joined, pending-join, failed etc).</p>"]
    pub status: Option<String>,
}

struct DomainMembershipDeserializer;
impl DomainMembershipDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<DomainMembership, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = DomainMembership::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "Domain" => {
                            obj.domain = Some(try!(StringDeserializer::deserialize("Domain",
                                                                                   stack)));
                        }
                        "FQDN" => {
                            obj.fqdn = Some(try!(StringDeserializer::deserialize("FQDN", stack)));
                        }
                        "IAMRoleName" => {
                            obj.iam_role_name = Some(try!(StringDeserializer::deserialize("IAMRoleName",
                                                                                          stack)));
                        }
                        "Status" => {
                            obj.status = Some(try!(StringDeserializer::deserialize("Status",
                                                                                   stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct DomainMembershipListDeserializer;
impl DomainMembershipListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<DomainMembership>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "DomainMembership" {
                        obj.push(try!(DomainMembershipDeserializer::deserialize("DomainMembership",
                                                                                stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
struct DoubleDeserializer;
impl DoubleDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<f64, XmlParseError> {
        try!(start_element(tag_name, stack));
        let obj = f64::from_str(try!(characters(stack)).as_ref()).unwrap();
        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p>This data type is used as a response element to <a>DownloadDBLogFilePortion</a>.</p>"]
#[derive(Default,Debug,Clone)]
pub struct DownloadDBLogFilePortionDetails {
    #[doc="<p>Boolean value that if true, indicates there is more data to be downloaded.</p>"]
    pub additional_data_pending: Option<bool>,
    #[doc="<p>Entries from the specified log file.</p>"]
    pub log_file_data: Option<String>,
    #[doc="<p>A pagination token that can be used in a subsequent DownloadDBLogFilePortion request.</p>"]
    pub marker: Option<String>,
}

struct DownloadDBLogFilePortionDetailsDeserializer;
impl DownloadDBLogFilePortionDetailsDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>
        (tag_name: &str,
         stack: &mut T)
         -> Result<DownloadDBLogFilePortionDetails, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = DownloadDBLogFilePortionDetails::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "AdditionalDataPending" => {
                            obj.additional_data_pending =
                                Some(try!(BooleanDeserializer::deserialize("AdditionalDataPending",
                                                                           stack)));
                        }
                        "LogFileData" => {
                            obj.log_file_data = Some(try!(StringDeserializer::deserialize("LogFileData",
                                                                                          stack)));
                        }
                        "Marker" => {
                            obj.marker = Some(try!(StringDeserializer::deserialize("Marker",
                                                                                   stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct DownloadDBLogFilePortionMessage {
    #[doc="<p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>"]
    pub db_instance_identifier: String,
    #[doc="<p>The name of the log file to be downloaded.</p>"]
    pub log_file_name: String,
    #[doc="<p>The pagination token provided in the previous request or \"0\". If the Marker parameter is specified the response includes only records beyond the marker until the end of the file or up to NumberOfLines.</p>"]
    pub marker: Option<String>,
    #[doc="<p>The number of lines to download. If the number of lines specified results in a file over 1 MB in size, the file will be truncated at 1 MB in size.</p> <p>If the NumberOfLines parameter is specified, then the block of lines returned can be from the beginning or the end of the log file, depending on the value of the Marker parameter.</p> <ul> <li> <p>If neither Marker or NumberOfLines are specified, the entire log file is returned up to a maximum of 10000 lines, starting with the most recent log entries first.</p> </li> <li> <p>If NumberOfLines is specified and Marker is not specified, then the most recent lines from the end of the log file are returned.</p> </li> <li> <p>If Marker is specified as \"0\", then the specified number of lines from the beginning of the log file are returned.</p> </li> <li> <p>You can download the log file in blocks of lines by specifying the size of the block using the NumberOfLines parameter, and by specifying a value of \"0\" for the Marker parameter in your first request. Include the Marker value returned in the response as the Marker value for the next request, continuing until the AdditionalDataPending response element returns false.</p> </li> </ul>"]
    pub number_of_lines: Option<i64>,
}


/// Serialize `DownloadDBLogFilePortionMessage` contents to a `SignedRequest`.
struct DownloadDBLogFilePortionMessageSerializer;
impl DownloadDBLogFilePortionMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DownloadDBLogFilePortionMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "DBInstanceIdentifier"),
                   &obj.db_instance_identifier.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "LogFileName"),
                   &obj.log_file_name.replace("+", "%2B"));
        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.number_of_lines {
            params.put(&format!("{}{}", prefix, "NumberOfLines"),
                       &field_value.to_string().replace("+", "%2B"));
        }

    }
}

#[doc="<p>This data type is used as a response element in the following actions:</p> <ul> <li> <p> <a>AuthorizeDBSecurityGroupIngress</a> </p> </li> <li> <p> <a>DescribeDBSecurityGroups</a> </p> </li> <li> <p> <a>RevokeDBSecurityGroupIngress</a> </p> </li> </ul>"]
#[derive(Default,Debug,Clone)]
pub struct EC2SecurityGroup {
    #[doc="<p>Specifies the id of the EC2 security group.</p>"]
    pub ec2_security_group_id: Option<String>,
    #[doc="<p>Specifies the name of the EC2 security group.</p>"]
    pub ec2_security_group_name: Option<String>,
    #[doc="<p> Specifies the AWS ID of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> field. </p>"]
    pub ec2_security_group_owner_id: Option<String>,
    #[doc="<p>Provides the status of the EC2 security group. Status can be \"authorizing\", \"authorized\", \"revoking\", and \"revoked\".</p>"]
    pub status: Option<String>,
}

struct EC2SecurityGroupDeserializer;
impl EC2SecurityGroupDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<EC2SecurityGroup, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = EC2SecurityGroup::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "EC2SecurityGroupId" => {
                            obj.ec2_security_group_id =
                                Some(try!(StringDeserializer::deserialize("EC2SecurityGroupId",
                                                                          stack)));
                        }
                        "EC2SecurityGroupName" => {
                            obj.ec2_security_group_name =
                                Some(try!(StringDeserializer::deserialize("EC2SecurityGroupName",
                                                                          stack)));
                        }
                        "EC2SecurityGroupOwnerId" => {
                            obj.ec2_security_group_owner_id =
                                Some(try!(StringDeserializer::deserialize("EC2SecurityGroupOwnerId",
                                                                          stack)));
                        }
                        "Status" => {
                            obj.status = Some(try!(StringDeserializer::deserialize("Status",
                                                                                   stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct EC2SecurityGroupListDeserializer;
impl EC2SecurityGroupListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<EC2SecurityGroup>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "EC2SecurityGroup" {
                        obj.push(try!(EC2SecurityGroupDeserializer::deserialize("EC2SecurityGroup",
                                                                                stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
#[doc="<p>This data type is used as a response element in the following actions:</p> <ul> <li> <p> <a>CreateDBInstance</a> </p> </li> <li> <p> <a>DescribeDBInstances</a> </p> </li> <li> <p> <a>DeleteDBInstance</a> </p> </li> </ul>"]
#[derive(Default,Debug,Clone)]
pub struct Endpoint {
    #[doc="<p>Specifies the DNS address of the DB instance.</p>"]
    pub address: Option<String>,
    #[doc="<p>Specifies the ID that Amazon Route 53 assigns when you create a hosted zone.</p>"]
    pub hosted_zone_id: Option<String>,
    #[doc="<p>Specifies the port that the database engine is listening on.</p>"]
    pub port: Option<i64>,
}

struct EndpointDeserializer;
impl EndpointDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Endpoint, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = Endpoint::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "Address" => {
                            obj.address = Some(try!(StringDeserializer::deserialize("Address",
                                                                                    stack)));
                        }
                        "HostedZoneId" => {
                            obj.hosted_zone_id = Some(try!(StringDeserializer::deserialize("HostedZoneId",
                                                                                           stack)));
                        }
                        "Port" => {
                            obj.port = Some(try!(IntegerDeserializer::deserialize("Port", stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p> Contains the result of a successful invocation of the <a>DescribeEngineDefaultParameters</a> action. </p>"]
#[derive(Default,Debug,Clone)]
pub struct EngineDefaults {
    #[doc="<p>Specifies the name of the DB parameter group family that the engine default parameters apply to.</p>"]
    pub db_parameter_group_family: Option<String>,
    #[doc="<p> An optional pagination token provided by a previous EngineDefaults request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . </p>"]
    pub marker: Option<String>,
    #[doc="<p>Contains a list of engine default parameters.</p>"]
    pub parameters: Option<Vec<Parameter>>,
}

struct EngineDefaultsDeserializer;
impl EngineDefaultsDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<EngineDefaults, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = EngineDefaults::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "DBParameterGroupFamily" => {
                            obj.db_parameter_group_family =
                                Some(try!(StringDeserializer::deserialize("DBParameterGroupFamily",
                                                                          stack)));
                        }
                        "Marker" => {
                            obj.marker = Some(try!(StringDeserializer::deserialize("Marker",
                                                                                   stack)));
                        }
                        "Parameters" => {
                            obj.parameters =
                                Some(try!(ParametersListDeserializer::deserialize("Parameters",
                                                                                  stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p> This data type is used as a response element in the <a>DescribeEvents</a> action. </p>"]
#[derive(Default,Debug,Clone)]
pub struct Event {
    #[doc="<p>Specifies the date and time of the event.</p>"]
    pub date: Option<String>,
    #[doc="<p>Specifies the category for the event.</p>"]
    pub event_categories: Option<Vec<String>>,
    #[doc="<p>Provides the text of this event.</p>"]
    pub message: Option<String>,
    #[doc="<p>The Amazon Resource Name (ARN) for the event.</p>"]
    pub source_arn: Option<String>,
    #[doc="<p>Provides the identifier for the source of the event.</p>"]
    pub source_identifier: Option<String>,
    #[doc="<p>Specifies the source type for this event.</p>"]
    pub source_type: Option<String>,
}

struct EventDeserializer;
impl EventDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Event, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = Event::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "Date" => {
                            obj.date = Some(try!(TStampDeserializer::deserialize("Date", stack)));
                        }
                        "EventCategories" => {
                            obj.event_categories =
                                Some(try!(EventCategoriesListDeserializer::deserialize("EventCategories",
                                                                                       stack)));
                        }
                        "Message" => {
                            obj.message = Some(try!(StringDeserializer::deserialize("Message",
                                                                                    stack)));
                        }
                        "SourceArn" => {
                            obj.source_arn = Some(try!(StringDeserializer::deserialize("SourceArn",
                                                                                       stack)));
                        }
                        "SourceIdentifier" => {
                            obj.source_identifier =
                                Some(try!(StringDeserializer::deserialize("SourceIdentifier",
                                                                          stack)));
                        }
                        "SourceType" => {
                            obj.source_type =
                                Some(try!(SourceTypeDeserializer::deserialize("SourceType",
                                                                              stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct EventCategoriesListDeserializer;
impl EventCategoriesListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<String>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "EventCategory" {
                        obj.push(try!(StringDeserializer::deserialize("EventCategory", stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}

/// Serialize `EventCategoriesList` contents to a `SignedRequest`.
struct EventCategoriesListSerializer;
impl EventCategoriesListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.member.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

#[doc="<p>Contains the results of a successful invocation of the <a>DescribeEventCategories</a> action.</p>"]
#[derive(Default,Debug,Clone)]
pub struct EventCategoriesMap {
    #[doc="<p>The event categories for the specified source type</p>"]
    pub event_categories: Option<Vec<String>>,
    #[doc="<p>The source type that the returned categories belong to</p>"]
    pub source_type: Option<String>,
}

struct EventCategoriesMapDeserializer;
impl EventCategoriesMapDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<EventCategoriesMap, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = EventCategoriesMap::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "EventCategories" => {
                            obj.event_categories =
                                Some(try!(EventCategoriesListDeserializer::deserialize("EventCategories",
                                                                                       stack)));
                        }
                        "SourceType" => {
                            obj.source_type = Some(try!(StringDeserializer::deserialize("SourceType",
                                                                                        stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct EventCategoriesMapListDeserializer;
impl EventCategoriesMapListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<EventCategoriesMap>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "EventCategoriesMap" {
                        obj.push(try!(EventCategoriesMapDeserializer::deserialize("EventCategoriesMap", stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
#[doc="<p>Data returned from the <b>DescribeEventCategories</b> action.</p>"]
#[derive(Default,Debug,Clone)]
pub struct EventCategoriesMessage {
    #[doc="<p>A list of EventCategoriesMap data types.</p>"]
    pub event_categories_map_list: Option<Vec<EventCategoriesMap>>,
}

struct EventCategoriesMessageDeserializer;
impl EventCategoriesMessageDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<EventCategoriesMessage, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = EventCategoriesMessage::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "EventCategoriesMapList" => {
                            obj.event_categories_map_list =
                                Some(try!(EventCategoriesMapListDeserializer::deserialize("EventCategoriesMapList",
                                                                                          stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct EventListDeserializer;
impl EventListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<Event>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "Event" {
                        obj.push(try!(EventDeserializer::deserialize("Event", stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
#[doc="<p>Contains the results of a successful invocation of the <a>DescribeEventSubscriptions</a> action.</p>"]
#[derive(Default,Debug,Clone)]
pub struct EventSubscription {
    #[doc="<p>The RDS event notification subscription Id.</p>"]
    pub cust_subscription_id: Option<String>,
    #[doc="<p>The AWS customer account associated with the RDS event notification subscription.</p>"]
    pub customer_aws_id: Option<String>,
    #[doc="<p>A Boolean value indicating if the subscription is enabled. True indicates the subscription is enabled.</p>"]
    pub enabled: Option<bool>,
    #[doc="<p>A list of event categories for the RDS event notification subscription.</p>"]
    pub event_categories_list: Option<Vec<String>>,
    #[doc="<p>The Amazon Resource Name (ARN) for the event subscription.</p>"]
    pub event_subscription_arn: Option<String>,
    #[doc="<p>The topic ARN of the RDS event notification subscription.</p>"]
    pub sns_topic_arn: Option<String>,
    #[doc="<p>A list of source IDs for the RDS event notification subscription.</p>"]
    pub source_ids_list: Option<Vec<String>>,
    #[doc="<p>The source type for the RDS event notification subscription.</p>"]
    pub source_type: Option<String>,
    #[doc="<p>The status of the RDS event notification subscription.</p> <p>Constraints:</p> <p>Can be one of the following: creating | modifying | deleting | active | no-permission | topic-not-exist</p> <p>The status \"no-permission\" indicates that RDS no longer has permission to post to the SNS topic. The status \"topic-not-exist\" indicates that the topic was deleted after the subscription was created.</p>"]
    pub status: Option<String>,
    #[doc="<p>The time the RDS event notification subscription was created.</p>"]
    pub subscription_creation_time: Option<String>,
}

struct EventSubscriptionDeserializer;
impl EventSubscriptionDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<EventSubscription, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = EventSubscription::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "CustSubscriptionId" => {
                            obj.cust_subscription_id =
                                Some(try!(StringDeserializer::deserialize("CustSubscriptionId",
                                                                          stack)));
                        }
                        "CustomerAwsId" => {
                            obj.customer_aws_id =
                                Some(try!(StringDeserializer::deserialize("CustomerAwsId", stack)));
                        }
                        "Enabled" => {
                            obj.enabled = Some(try!(BooleanDeserializer::deserialize("Enabled",
                                                                                     stack)));
                        }
                        "EventCategoriesList" => {
                            obj.event_categories_list =
                                Some(try!(EventCategoriesListDeserializer::deserialize("EventCategoriesList",
                                                                                       stack)));
                        }
                        "EventSubscriptionArn" => {
                            obj.event_subscription_arn =
                                Some(try!(StringDeserializer::deserialize("EventSubscriptionArn",
                                                                          stack)));
                        }
                        "SnsTopicArn" => {
                            obj.sns_topic_arn = Some(try!(StringDeserializer::deserialize("SnsTopicArn",
                                                                                          stack)));
                        }
                        "SourceIdsList" => {
                            obj.source_ids_list =
                                Some(try!(SourceIdsListDeserializer::deserialize("SourceIdsList",
                                                                                 stack)));
                        }
                        "SourceType" => {
                            obj.source_type = Some(try!(StringDeserializer::deserialize("SourceType",
                                                                                        stack)));
                        }
                        "Status" => {
                            obj.status = Some(try!(StringDeserializer::deserialize("Status",
                                                                                   stack)));
                        }
                        "SubscriptionCreationTime" => {
                            obj.subscription_creation_time =
                                Some(try!(StringDeserializer::deserialize("SubscriptionCreationTime",
                                                                          stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct EventSubscriptionsListDeserializer;
impl EventSubscriptionsListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<EventSubscription>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "EventSubscription" {
                        obj.push(try!(EventSubscriptionDeserializer::deserialize("EventSubscription", stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
#[doc="<p>Data returned by the <b>DescribeEventSubscriptions</b> action.</p>"]
#[derive(Default,Debug,Clone)]
pub struct EventSubscriptionsMessage {
    #[doc="<p>A list of EventSubscriptions data types.</p>"]
    pub event_subscriptions_list: Option<Vec<EventSubscription>>,
    #[doc="<p> An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>"]
    pub marker: Option<String>,
}

struct EventSubscriptionsMessageDeserializer;
impl EventSubscriptionsMessageDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<EventSubscriptionsMessage, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = EventSubscriptionsMessage::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "EventSubscriptionsList" => {
                            obj.event_subscriptions_list =
                                Some(try!(EventSubscriptionsListDeserializer::deserialize("EventSubscriptionsList",
                                                                                          stack)));
                        }
                        "Marker" => {
                            obj.marker = Some(try!(StringDeserializer::deserialize("Marker",
                                                                                   stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p> Contains the result of a successful invocation of the <a>DescribeEvents</a> action. </p>"]
#[derive(Default,Debug,Clone)]
pub struct EventsMessage {
    #[doc="<p> A list of <a>Event</a> instances. </p>"]
    pub events: Option<Vec<Event>>,
    #[doc="<p> An optional pagination token provided by a previous Events request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . </p>"]
    pub marker: Option<String>,
}

struct EventsMessageDeserializer;
impl EventsMessageDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<EventsMessage, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = EventsMessage::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "Events" => {
                            obj.events = Some(try!(EventListDeserializer::deserialize("Events",
                                                                                      stack)));
                        }
                        "Marker" => {
                            obj.marker = Some(try!(StringDeserializer::deserialize("Marker",
                                                                                   stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct FailoverDBClusterMessage {
    #[doc="<p>A DB cluster identifier to force a failover for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>"]
    pub db_cluster_identifier: Option<String>,
    #[doc="<p>The name of the instance to promote to the primary instance.</p> <p>You must specify the instance identifier for an Aurora Replica in the DB cluster. For example, <code>mydbcluster-replica1</code>.</p>"]
    pub target_db_instance_identifier: Option<String>,
}


/// Serialize `FailoverDBClusterMessage` contents to a `SignedRequest`.
struct FailoverDBClusterMessageSerializer;
impl FailoverDBClusterMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &FailoverDBClusterMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.db_cluster_identifier {
            params.put(&format!("{}{}", prefix, "DBClusterIdentifier"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.target_db_instance_identifier {
            params.put(&format!("{}{}", prefix, "TargetDBInstanceIdentifier"),
                       &field_value.replace("+", "%2B"));
        }

    }
}

#[derive(Default,Debug,Clone)]
pub struct FailoverDBClusterResult {
    pub db_cluster: Option<DBCluster>,
}

struct FailoverDBClusterResultDeserializer;
impl FailoverDBClusterResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<FailoverDBClusterResult, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = FailoverDBClusterResult::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "DBCluster" => {
                            obj.db_cluster = Some(try!(DBClusterDeserializer::deserialize("DBCluster",
                                                                                          stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p>This type is not currently supported.</p>"]
#[derive(Default,Debug,Clone)]
pub struct Filter {
    #[doc="<p>This parameter is not currently supported.</p>"]
    pub name: String,
    #[doc="<p>This parameter is not currently supported.</p>"]
    pub values: Vec<String>,
}


/// Serialize `Filter` contents to a `SignedRequest`.
struct FilterSerializer;
impl FilterSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Filter) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "Name"),
                   &obj.name.replace("+", "%2B"));
        FilterValueListSerializer::serialize(params,
                                             &format!("{}{}", prefix, "Values"),
                                             &obj.values);

    }
}


/// Serialize `FilterList` contents to a `SignedRequest`.
struct FilterListSerializer;
impl FilterListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<Filter>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.member.{}", name, index + 1);
            FilterSerializer::serialize(params, &key, obj);
        }
    }
}


/// Serialize `FilterValueList` contents to a `SignedRequest`.
struct FilterValueListSerializer;
impl FilterValueListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.member.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

#[doc="<p> This data type is used as a response element in the <a>DescribeDBSecurityGroups</a> action. </p>"]
#[derive(Default,Debug,Clone)]
pub struct IPRange {
    #[doc="<p>Specifies the IP range.</p>"]
    pub cidrip: Option<String>,
    #[doc="<p>Specifies the status of the IP range. Status can be \"authorizing\", \"authorized\", \"revoking\", and \"revoked\".</p>"]
    pub status: Option<String>,
}

struct IPRangeDeserializer;
impl IPRangeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<IPRange, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = IPRange::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "CIDRIP" => {
                            obj.cidrip = Some(try!(StringDeserializer::deserialize("CIDRIP",
                                                                                   stack)));
                        }
                        "Status" => {
                            obj.status = Some(try!(StringDeserializer::deserialize("Status",
                                                                                   stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct IPRangeListDeserializer;
impl IPRangeListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<IPRange>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "IPRange" {
                        obj.push(try!(IPRangeDeserializer::deserialize("IPRange", stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
struct IntegerDeserializer;
impl IntegerDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<i64, XmlParseError> {
        try!(start_element(tag_name, stack));
        let obj = i64::from_str(try!(characters(stack)).as_ref()).unwrap();
        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct IntegerOptionalDeserializer;
impl IntegerOptionalDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<i64, XmlParseError> {
        try!(start_element(tag_name, stack));
        let obj = i64::from_str(try!(characters(stack)).as_ref()).unwrap();
        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}

/// Serialize `KeyList` contents to a `SignedRequest`.
struct KeyListSerializer;
impl KeyListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.member.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct ListTagsForResourceMessage {
    #[doc="<p>This parameter is not currently supported.</p>"]
    pub filters: Option<Vec<Filter>>,
    #[doc="<p>The Amazon RDS resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing\"> Constructing an RDS Amazon Resource Name (ARN)</a>.</p>"]
    pub resource_name: String,
}


/// Serialize `ListTagsForResourceMessage` contents to a `SignedRequest`.
struct ListTagsForResourceMessageSerializer;
impl ListTagsForResourceMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ListTagsForResourceMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(params,
                                            &format!("{}{}", prefix, "Filters"),
                                            field_value);
        }
        params.put(&format!("{}{}", prefix, "ResourceName"),
                   &obj.resource_name.replace("+", "%2B"));

    }
}

struct LongDeserializer;
impl LongDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<i64, XmlParseError> {
        try!(start_element(tag_name, stack));
        let obj = i64::from_str(try!(characters(stack)).as_ref()).unwrap();
        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct ModifyDBClusterMessage {
    #[doc="<p>A value that specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB cluster. If this parameter is set to <code>false</code>, changes to the DB cluster are applied during the next maintenance window.</p> <p>The <code>ApplyImmediately</code> parameter only affects the <code>NewDBClusterIdentifier</code> and <code>MasterUserPassword</code> values. If you set the <code>ApplyImmediately</code> parameter value to false, then changes to the <code>NewDBClusterIdentifier</code> and <code>MasterUserPassword</code> values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p>Default: <code>false</code> </p>"]
    pub apply_immediately: Option<bool>,
    #[doc="<p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>"]
    pub backup_retention_period: Option<i64>,
    #[doc="<p>The DB cluster identifier for the cluster being modified. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must be the identifier for an existing DB cluster.</p> </li> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>"]
    pub db_cluster_identifier: String,
    #[doc="<p>The name of the DB cluster parameter group to use for the DB cluster.</p>"]
    pub db_cluster_parameter_group_name: Option<String>,
    #[doc="<p>A Boolean value that is true to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>"]
    pub enable_iam_database_authentication: Option<bool>,
    #[doc="<p>The new password for the master database user. This password can contain any printable ASCII character except \"/\", \"\"\", or \"@\".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>"]
    pub master_user_password: Option<String>,
    #[doc="<p>The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>"]
    pub new_db_cluster_identifier: Option<String>,
    #[doc="<p>A value that indicates that the DB cluster should be associated with the specified option group. Changing this parameter does not result in an outage except in the following case, and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options cannot be removed from an option group. The option group cannot be removed from a DB cluster once it is associated with a DB cluster.</p>"]
    pub option_group_name: Option<String>,
    #[doc="<p>The port number on which the DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>"]
    pub port: Option<i64>,
    #[doc="<p>The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p>Default: A 30-minute window selected at random from an 8-hour block of time per AWS Region. To see the time blocks available, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html\"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Times should be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>"]
    pub preferred_backup_window: Option<String>,
    #[doc="<p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>Default: A 30-minute window selected at random from an 8-hour block of time per AWS Region, occurring on a random day of the week. To see the time blocks available, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html\"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun</p> <p>Constraints: Minimum 30-minute window.</p>"]
    pub preferred_maintenance_window: Option<String>,
    #[doc="<p>A list of VPC security groups that the DB cluster will belong to.</p>"]
    pub vpc_security_group_ids: Option<Vec<String>>,
}


/// Serialize `ModifyDBClusterMessage` contents to a `SignedRequest`.
struct ModifyDBClusterMessageSerializer;
impl ModifyDBClusterMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ModifyDBClusterMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.apply_immediately {
            params.put(&format!("{}{}", prefix, "ApplyImmediately"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.backup_retention_period {
            params.put(&format!("{}{}", prefix, "BackupRetentionPeriod"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        params.put(&format!("{}{}", prefix, "DBClusterIdentifier"),
                   &obj.db_cluster_identifier.replace("+", "%2B"));
        if let Some(ref field_value) = obj.db_cluster_parameter_group_name {
            params.put(&format!("{}{}", prefix, "DBClusterParameterGroupName"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.enable_iam_database_authentication {
            params.put(&format!("{}{}", prefix, "EnableIAMDatabaseAuthentication"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.master_user_password {
            params.put(&format!("{}{}", prefix, "MasterUserPassword"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.new_db_cluster_identifier {
            params.put(&format!("{}{}", prefix, "NewDBClusterIdentifier"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.option_group_name {
            params.put(&format!("{}{}", prefix, "OptionGroupName"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.port {
            params.put(&format!("{}{}", prefix, "Port"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.preferred_backup_window {
            params.put(&format!("{}{}", prefix, "PreferredBackupWindow"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.preferred_maintenance_window {
            params.put(&format!("{}{}", prefix, "PreferredMaintenanceWindow"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.vpc_security_group_ids {
            VpcSecurityGroupIdListSerializer::serialize(params,
                                                        &format!("{}{}",
                                                                prefix,
                                                                "VpcSecurityGroupIds"),
                                                        field_value);
        }

    }
}

#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct ModifyDBClusterParameterGroupMessage {
    #[doc="<p>The name of the DB cluster parameter group to modify.</p>"]
    pub db_cluster_parameter_group_name: String,
    #[doc="<p>A list of parameters in the DB cluster parameter group to modify.</p>"]
    pub parameters: Vec<Parameter>,
}


/// Serialize `ModifyDBClusterParameterGroupMessage` contents to a `SignedRequest`.
struct ModifyDBClusterParameterGroupMessageSerializer;
impl ModifyDBClusterParameterGroupMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ModifyDBClusterParameterGroupMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "DBClusterParameterGroupName"),
                   &obj.db_cluster_parameter_group_name.replace("+", "%2B"));
        ParametersListSerializer::serialize(params,
                                            &format!("{}{}", prefix, "Parameters"),
                                            &obj.parameters);

    }
}

#[derive(Default,Debug,Clone)]
pub struct ModifyDBClusterResult {
    pub db_cluster: Option<DBCluster>,
}

struct ModifyDBClusterResultDeserializer;
impl ModifyDBClusterResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<ModifyDBClusterResult, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = ModifyDBClusterResult::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "DBCluster" => {
                            obj.db_cluster = Some(try!(DBClusterDeserializer::deserialize("DBCluster",
                                                                                          stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct ModifyDBClusterSnapshotAttributeMessage {
    #[doc="<p>The name of the DB cluster snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this value to <code>restore</code>.</p>"]
    pub attribute_name: String,
    #[doc="<p>The identifier for the DB cluster snapshot to modify the attributes for.</p>"]
    pub db_cluster_snapshot_identifier: String,
    #[doc="<p>A list of DB cluster snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB cluster snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts.</p>"]
    pub values_to_add: Option<Vec<String>>,
    #[doc="<p>A list of DB cluster snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB cluster snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore a manual DB cluster snapshot.</p>"]
    pub values_to_remove: Option<Vec<String>>,
}


/// Serialize `ModifyDBClusterSnapshotAttributeMessage` contents to a `SignedRequest`.
struct ModifyDBClusterSnapshotAttributeMessageSerializer;
impl ModifyDBClusterSnapshotAttributeMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ModifyDBClusterSnapshotAttributeMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "AttributeName"),
                   &obj.attribute_name.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "DBClusterSnapshotIdentifier"),
                   &obj.db_cluster_snapshot_identifier.replace("+", "%2B"));
        if let Some(ref field_value) = obj.values_to_add {
            AttributeValueListSerializer::serialize(params,
                                                    &format!("{}{}", prefix, "ValuesToAdd"),
                                                    field_value);
        }
        if let Some(ref field_value) = obj.values_to_remove {
            AttributeValueListSerializer::serialize(params,
                                                    &format!("{}{}", prefix, "ValuesToRemove"),
                                                    field_value);
        }

    }
}

#[derive(Default,Debug,Clone)]
pub struct ModifyDBClusterSnapshotAttributeResult {
    pub db_cluster_snapshot_attributes_result: Option<DBClusterSnapshotAttributesResult>,
}

struct ModifyDBClusterSnapshotAttributeResultDeserializer;
impl ModifyDBClusterSnapshotAttributeResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>
        (tag_name: &str,
         stack: &mut T)
         -> Result<ModifyDBClusterSnapshotAttributeResult, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = ModifyDBClusterSnapshotAttributeResult::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "DBClusterSnapshotAttributesResult" => {
                            obj.db_cluster_snapshot_attributes_result = Some(try!(DBClusterSnapshotAttributesResultDeserializer::deserialize("DBClusterSnapshotAttributesResult", stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct ModifyDBInstanceMessage {
    #[doc="<p> The new storage capacity of the RDS instance. Changing this setting does not result in an outage and the change is applied during the next maintenance window unless <code>ApplyImmediately</code> is set to <code>true</code> for this request. </p> <p> <b>MySQL</b> </p> <p>Default: Uses existing setting</p> <p>Valid Values: 5-6144</p> <p>Constraints: Value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value.</p> <p>Type: Integer</p> <p> <b>MariaDB</b> </p> <p>Default: Uses existing setting</p> <p>Valid Values: 5-6144</p> <p>Constraints: Value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value.</p> <p>Type: Integer</p> <p> <b>PostgreSQL</b> </p> <p>Default: Uses existing setting</p> <p>Valid Values: 5-6144</p> <p>Constraints: Value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value.</p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p>Default: Uses existing setting</p> <p>Valid Values: 10-6144</p> <p>Constraints: Value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value.</p> <p> <b>SQL Server</b> </p> <p>Cannot be modified.</p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance will be available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance will be suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance.</p>"]
    pub allocated_storage: Option<i64>,
    #[doc="<p>Indicates that major version upgrades are allowed. Changing this parameter does not result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints: This parameter must be set to true when specifying a value for the EngineVersion parameter that is a different major version than the DB instance's current version.</p>"]
    pub allow_major_version_upgrade: Option<bool>,
    #[doc="<p>Specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB instance. </p> <p> If this parameter is set to <code>false</code>, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and will be applied on the next call to <a>RebootDBInstance</a>, or the next failure reboot. Review the table of parameters in <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.DBInstance.Modifying.html\">Modifying a DB Instance and Using the Apply Immediately Parameter</a> to see the impact that setting <code>ApplyImmediately</code> to <code>true</code> or <code>false</code> has for each modified parameter and to determine when the changes will be applied. </p> <p>Default: <code>false</code> </p>"]
    pub apply_immediately: Option<bool>,
    #[doc="<p> Indicates that minor version upgrades will be applied automatically to the DB instance during the maintenance window. Changing this parameter does not result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage will result if this parameter is set to <code>true</code> during the maintenance window, and a newer minor version is available, and RDS has enabled auto patching for that engine version. </p>"]
    pub auto_minor_version_upgrade: Option<bool>,
    #[doc="<p>The number of days to retain automated backups. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Changing this parameter can result in an outage if you change from 0 to a non-zero value or from a non-zero value to 0. These changes are applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request. If you change the parameter from one non-zero value to another non-zero value, the change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Default: Uses existing setting</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can be specified for a MySQL Read Replica only if the source is running MySQL 5.6</p> </li> <li> <p>Can be specified for a PostgreSQL Read Replica only if the source is running PostgreSQL 9.3.5</p> </li> <li> <p>Cannot be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>"]
    pub backup_retention_period: Option<i64>,
    #[doc="<p>Indicates the certificate that needs to be associated with the instance.</p>"]
    pub ca_certificate_identifier: Option<String>,
    #[doc="<p>True to copy all tags from the DB instance to snapshots of the DB instance; otherwise false. The default is false.</p>"]
    pub copy_tags_to_snapshot: Option<bool>,
    #[doc="<p> The new compute and memory capacity of the DB instance. To determine the instance classes that are available for a particular DB engine, use the <a>DescribeOrderableDBInstanceOptions</a> action. Note that not all instance classes are available in all regions for all DB engines. </p> <p> Passing a value for this setting causes an outage during the change and is applied during the next maintenance window, unless <code>ApplyImmediately</code> is specified as <code>true</code> for this request. </p> <p>Default: Uses existing setting</p> <p>Valid Values: <code>db.t1.micro | db.m1.small | db.m1.medium | db.m1.large | db.m1.xlarge | db.m2.xlarge | db.m2.2xlarge | db.m2.4xlarge | db.m3.medium | db.m3.large | db.m3.xlarge | db.m3.2xlarge | db.m4.large | db.m4.xlarge | db.m4.2xlarge | db.m4.4xlarge | db.m4.10xlarge | db.r3.large | db.r3.xlarge | db.r3.2xlarge | db.r3.4xlarge | db.r3.8xlarge | db.t2.micro | db.t2.small | db.t2.medium | db.t2.large</code> </p>"]
    pub db_instance_class: Option<String>,
    #[doc="<p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must be the identifier for an existing DB instance</p> </li> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>"]
    pub db_instance_identifier: String,
    #[doc="<p>The name of the DB parameter group to apply to the DB instance. Changing this setting does not result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. The db instance will NOT be rebooted automatically and the parameter changes will NOT be applied during the next maintenance window.</p> <p>Default: Uses existing setting</p> <p>Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.</p>"]
    pub db_parameter_group_name: Option<String>,
    #[doc="<p>The port number on which the database accepts connections.</p> <p>The value of the <code>DBPortNumber</code> parameter must not match any of the port values specified for options in the option group for the DB instance.</p> <p>Your database will restart when you change the <code>DBPortNumber</code> value regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p>"]
    pub db_port_number: Option<i64>,
    #[doc="<p>A list of DB security groups to authorize on this DB instance. Changing this setting does not result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>"]
    pub db_security_groups: Option<Vec<String>>,
    #[doc="<p>The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC. If your DB instance is not in a VPC, you can also use this parameter to move your DB instance into a VPC. For more information, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html#USER_VPC.Non-VPC2VPC\">Updating the VPC for a DB Instance</a>. </p> <p>Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you specify <code>true</code> for the <code>ApplyImmediately</code> parameter. </p> <p>Constraints: Must contain no more than 255 alphanumeric characters, periods, underscores, spaces, or hyphens.</p> <p>Example: <code>mySubnetGroup</code> </p>"]
    pub db_subnet_group_name: Option<String>,
    #[doc="<p>The Active Directory Domain to move the instance to. Specify <code>none</code> to remove the instance from its current domain. The domain must be created prior to this operation. Currently only a Microsoft SQL Server instance can be created in a Active Directory Domain. </p>"]
    pub domain: Option<String>,
    #[doc="<p>The name of the IAM role to use when making API calls to the Directory Service.</p>"]
    pub domain_iam_role_name: Option<String>,
    #[doc="<p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts; otherwise false.</p> <p> You can enable IAM database authentication for the following database engines</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Mapping AWS IAM accounts to database accounts is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p> <b>MySQL</b> </p> <ul> <li> <p>For MySQL 5.6, minor version 5.6.34 or higher</p> </li> <li> <p>For MySQL 5.7, minor version 5.7.16 or higher</p> </li> </ul> <p>Default: <code>false</code> </p>"]
    pub enable_iam_database_authentication: Option<bool>,
    #[doc="<p> The version number of the database engine to upgrade to. Changing this parameter results in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request. </p> <p>For major version upgrades, if a nondefault DB parameter group is currently in use, a new DB parameter group in the DB parameter group family for the new engine version must be specified. The new DB parameter group can be the default for that DB parameter group family.</p> <p>For a list of valid engine versions, see <a>CreateDBInstance</a>.</p>"]
    pub engine_version: Option<String>,
    #[doc="<p> The new Provisioned IOPS (I/O operations per second) value for the RDS instance. Changing this setting does not result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request. </p> <p>Default: Uses existing setting</p> <p>Constraints: Value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. If you are migrating from Provisioned IOPS to standard storage, set this value to 0. The DB instance will require a reboot for the change in storage type to take effect.</p> <p> <b>SQL Server</b> </p> <p>Setting the IOPS value for the SQL Server database engine is not supported.</p> <p>Type: Integer</p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance will be available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance will be suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance.</p>"]
    pub iops: Option<i64>,
    #[doc="<p>The license model for the DB instance.</p> <p>Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>"]
    pub license_model: Option<String>,
    #[doc="<p>The new password for the master user. Can be any printable ASCII character except \"/\", \"\"\", or \"@\".</p> <p> Changing this parameter does not result in an outage and the change is asynchronously applied as soon as possible. Between the time of the request and the completion of the request, the <code>MasterUserPassword</code> element exists in the <code>PendingModifiedValues</code> element of the operation response. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Default: Uses existing setting</p> <p>Constraints: Must be 8 to 41 alphanumeric characters (MySQL, MariaDB, and Amazon Aurora), 8 to 30 alphanumeric characters (Oracle), or 8 to 128 alphanumeric characters (SQL Server).</p> <note> <p>Amazon RDS API actions never return the password, so this action provides a way to regain access to a primary instance user if the password is lost. This includes restoring privileges that might have been accidentally revoked.</p> </note>"]
    pub master_user_password: Option<String>,
    #[doc="<p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>"]
    pub monitoring_interval: Option<i64>,
    #[doc="<p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole\">To create an IAM role for Amazon RDS Enhanced Monitoring</a>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>"]
    pub monitoring_role_arn: Option<String>,
    #[doc="<p> Specifies if the DB instance is a Multi-AZ deployment. Changing this parameter does not result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request. </p> <p>Constraints: Cannot be specified if the DB instance is a Read Replica.</p>"]
    pub multi_az: Option<bool>,
    #[doc="<p> The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot will occur immediately if you set <code>Apply Immediately</code> to true, or will occur during the next maintenance window if <code>Apply Immediately</code> to false. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>"]
    pub new_db_instance_identifier: Option<String>,
    #[doc="<p> Indicates that the DB instance should be associated with the specified option group. Changing this parameter does not result in an outage except in the following case and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, cannot be removed from an option group, and that option group cannot be removed from a DB instance once it is associated with a DB instance</p>"]
    pub option_group_name: Option<String>,
    #[doc="<p> The daily time range during which automated backups are created if automated backups are enabled, as determined by the <code>BackupRetentionPeriod</code> parameter. Changing this parameter does not result in an outage and the change is asynchronously applied as soon as possible. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format hh24:mi-hh24:mi</p> </li> <li> <p>Times should be in Universal Time Coordinated (UTC)</p> </li> <li> <p>Must not conflict with the preferred maintenance window</p> </li> <li> <p>Must be at least 30 minutes</p> </li> </ul>"]
    pub preferred_backup_window: Option<String>,
    #[doc="<p>The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter does not result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter will cause a reboot of the DB instance. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied.</p> <p>Default: Uses existing setting</p> <p>Format: ddd:hh24:mi-ddd:hh24:mi</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Must be at least 30 minutes</p>"]
    pub preferred_maintenance_window: Option<String>,
    #[doc="<p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Aurora.Managing.html#Aurora.Managing.FaultTolerance\"> Fault Tolerance for an Aurora DB Cluster</a>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>"]
    pub promotion_tier: Option<i64>,
    #[doc="<p>Boolean value that indicates if the DB instance has a publicly resolvable DNS name. Set to <code>True</code> to make the DB instance Internet-facing with a publicly resolvable DNS name, which resolves to a public IP address. Set to <code>False</code> to make the DB instance internal with a DNS name that resolves to a private IP address. </p> <p> <code>PubliclyAccessible</code> only applies to DB instances in a VPC. The DB instance must be part of a public subnet and <code>PubliclyAccessible</code> must be true in order for it to be publicly accessible. </p> <p>Changes to the <code>PubliclyAccessible</code> parameter are applied immediately regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p>Default: false</p>"]
    pub publicly_accessible: Option<bool>,
    #[doc="<p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified; otherwise <code>standard</code> </p>"]
    pub storage_type: Option<String>,
    #[doc="<p>The ARN from the Key Store with which to associate the instance for TDE encryption.</p>"]
    pub tde_credential_arn: Option<String>,
    #[doc="<p>The password for the given ARN from the Key Store in order to access the device.</p>"]
    pub tde_credential_password: Option<String>,
    #[doc="<p>A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>"]
    pub vpc_security_group_ids: Option<Vec<String>>,
}


/// Serialize `ModifyDBInstanceMessage` contents to a `SignedRequest`.
struct ModifyDBInstanceMessageSerializer;
impl ModifyDBInstanceMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ModifyDBInstanceMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.allocated_storage {
            params.put(&format!("{}{}", prefix, "AllocatedStorage"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.allow_major_version_upgrade {
            params.put(&format!("{}{}", prefix, "AllowMajorVersionUpgrade"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.apply_immediately {
            params.put(&format!("{}{}", prefix, "ApplyImmediately"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.auto_minor_version_upgrade {
            params.put(&format!("{}{}", prefix, "AutoMinorVersionUpgrade"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.backup_retention_period {
            params.put(&format!("{}{}", prefix, "BackupRetentionPeriod"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.ca_certificate_identifier {
            params.put(&format!("{}{}", prefix, "CACertificateIdentifier"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.copy_tags_to_snapshot {
            params.put(&format!("{}{}", prefix, "CopyTagsToSnapshot"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.db_instance_class {
            params.put(&format!("{}{}", prefix, "DBInstanceClass"),
                       &field_value.replace("+", "%2B"));
        }
        params.put(&format!("{}{}", prefix, "DBInstanceIdentifier"),
                   &obj.db_instance_identifier.replace("+", "%2B"));
        if let Some(ref field_value) = obj.db_parameter_group_name {
            params.put(&format!("{}{}", prefix, "DBParameterGroupName"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.db_port_number {
            params.put(&format!("{}{}", prefix, "DBPortNumber"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.db_security_groups {
            DBSecurityGroupNameListSerializer::serialize(params,
                                                         &format!("{}{}",
                                                                 prefix,
                                                                 "DBSecurityGroups"),
                                                         field_value);
        }
        if let Some(ref field_value) = obj.db_subnet_group_name {
            params.put(&format!("{}{}", prefix, "DBSubnetGroupName"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.domain {
            params.put(&format!("{}{}", prefix, "Domain"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.domain_iam_role_name {
            params.put(&format!("{}{}", prefix, "DomainIAMRoleName"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.enable_iam_database_authentication {
            params.put(&format!("{}{}", prefix, "EnableIAMDatabaseAuthentication"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.engine_version {
            params.put(&format!("{}{}", prefix, "EngineVersion"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.iops {
            params.put(&format!("{}{}", prefix, "Iops"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.license_model {
            params.put(&format!("{}{}", prefix, "LicenseModel"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.master_user_password {
            params.put(&format!("{}{}", prefix, "MasterUserPassword"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.monitoring_interval {
            params.put(&format!("{}{}", prefix, "MonitoringInterval"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.monitoring_role_arn {
            params.put(&format!("{}{}", prefix, "MonitoringRoleArn"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.multi_az {
            params.put(&format!("{}{}", prefix, "MultiAZ"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.new_db_instance_identifier {
            params.put(&format!("{}{}", prefix, "NewDBInstanceIdentifier"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.option_group_name {
            params.put(&format!("{}{}", prefix, "OptionGroupName"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.preferred_backup_window {
            params.put(&format!("{}{}", prefix, "PreferredBackupWindow"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.preferred_maintenance_window {
            params.put(&format!("{}{}", prefix, "PreferredMaintenanceWindow"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.promotion_tier {
            params.put(&format!("{}{}", prefix, "PromotionTier"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.publicly_accessible {
            params.put(&format!("{}{}", prefix, "PubliclyAccessible"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.storage_type {
            params.put(&format!("{}{}", prefix, "StorageType"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.tde_credential_arn {
            params.put(&format!("{}{}", prefix, "TdeCredentialArn"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.tde_credential_password {
            params.put(&format!("{}{}", prefix, "TdeCredentialPassword"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.vpc_security_group_ids {
            VpcSecurityGroupIdListSerializer::serialize(params,
                                                        &format!("{}{}",
                                                                prefix,
                                                                "VpcSecurityGroupIds"),
                                                        field_value);
        }

    }
}

#[derive(Default,Debug,Clone)]
pub struct ModifyDBInstanceResult {
    pub db_instance: Option<DBInstance>,
}

struct ModifyDBInstanceResultDeserializer;
impl ModifyDBInstanceResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<ModifyDBInstanceResult, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = ModifyDBInstanceResult::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "DBInstance" => {
                            obj.db_instance =
                                Some(try!(DBInstanceDeserializer::deserialize("DBInstance",
                                                                              stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct ModifyDBParameterGroupMessage {
    #[doc="<p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB parameter group</p> </li> <li> <p>Must be 1 to 255 alphanumeric characters</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>"]
    pub db_parameter_group_name: String,
    #[doc="<p>An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; subsequent arguments are optional. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for the application method): <code>immediate | pending-reboot</code> </p> <note> <p>You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover.</p> </note>"]
    pub parameters: Vec<Parameter>,
}


/// Serialize `ModifyDBParameterGroupMessage` contents to a `SignedRequest`.
struct ModifyDBParameterGroupMessageSerializer;
impl ModifyDBParameterGroupMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ModifyDBParameterGroupMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "DBParameterGroupName"),
                   &obj.db_parameter_group_name.replace("+", "%2B"));
        ParametersListSerializer::serialize(params,
                                            &format!("{}{}", prefix, "Parameters"),
                                            &obj.parameters);

    }
}

#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct ModifyDBSnapshotAttributeMessage {
    #[doc="<p>The name of the DB snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB snapshot, set this value to <code>restore</code>.</p>"]
    pub attribute_name: String,
    #[doc="<p>The identifier for the DB snapshot to modify the attributes for.</p>"]
    pub db_snapshot_identifier: String,
    #[doc="<p>A list of DB snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts.</p>"]
    pub values_to_add: Option<Vec<String>>,
    #[doc="<p>A list of DB snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore the manual DB snapshot.</p>"]
    pub values_to_remove: Option<Vec<String>>,
}


/// Serialize `ModifyDBSnapshotAttributeMessage` contents to a `SignedRequest`.
struct ModifyDBSnapshotAttributeMessageSerializer;
impl ModifyDBSnapshotAttributeMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ModifyDBSnapshotAttributeMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "AttributeName"),
                   &obj.attribute_name.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "DBSnapshotIdentifier"),
                   &obj.db_snapshot_identifier.replace("+", "%2B"));
        if let Some(ref field_value) = obj.values_to_add {
            AttributeValueListSerializer::serialize(params,
                                                    &format!("{}{}", prefix, "ValuesToAdd"),
                                                    field_value);
        }
        if let Some(ref field_value) = obj.values_to_remove {
            AttributeValueListSerializer::serialize(params,
                                                    &format!("{}{}", prefix, "ValuesToRemove"),
                                                    field_value);
        }

    }
}

#[derive(Default,Debug,Clone)]
pub struct ModifyDBSnapshotAttributeResult {
    pub db_snapshot_attributes_result: Option<DBSnapshotAttributesResult>,
}

struct ModifyDBSnapshotAttributeResultDeserializer;
impl ModifyDBSnapshotAttributeResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>
        (tag_name: &str,
         stack: &mut T)
         -> Result<ModifyDBSnapshotAttributeResult, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = ModifyDBSnapshotAttributeResult::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "DBSnapshotAttributesResult" => {
                            obj.db_snapshot_attributes_result = Some(try!(DBSnapshotAttributesResultDeserializer::deserialize("DBSnapshotAttributesResult", stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct ModifyDBSnapshotMessage {
    #[doc="<p>The identifier of the DB snapshot to modify.</p>"]
    pub db_snapshot_identifier: String,
    #[doc="<p>The engine version to update the DB snapshot to. </p>"]
    pub engine_version: Option<String>,
}


/// Serialize `ModifyDBSnapshotMessage` contents to a `SignedRequest`.
struct ModifyDBSnapshotMessageSerializer;
impl ModifyDBSnapshotMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ModifyDBSnapshotMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "DBSnapshotIdentifier"),
                   &obj.db_snapshot_identifier.replace("+", "%2B"));
        if let Some(ref field_value) = obj.engine_version {
            params.put(&format!("{}{}", prefix, "EngineVersion"),
                       &field_value.replace("+", "%2B"));
        }

    }
}

#[derive(Default,Debug,Clone)]
pub struct ModifyDBSnapshotResult {
    pub db_snapshot: Option<DBSnapshot>,
}

struct ModifyDBSnapshotResultDeserializer;
impl ModifyDBSnapshotResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<ModifyDBSnapshotResult, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = ModifyDBSnapshotResult::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "DBSnapshot" => {
                            obj.db_snapshot =
                                Some(try!(DBSnapshotDeserializer::deserialize("DBSnapshot",
                                                                              stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct ModifyDBSubnetGroupMessage {
    #[doc="<p>The description for the DB subnet group.</p>"]
    pub db_subnet_group_description: Option<String>,
    #[doc="<p>The name for the DB subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>"]
    pub db_subnet_group_name: String,
    #[doc="<p>The EC2 subnet IDs for the DB subnet group.</p>"]
    pub subnet_ids: Vec<String>,
}


/// Serialize `ModifyDBSubnetGroupMessage` contents to a `SignedRequest`.
struct ModifyDBSubnetGroupMessageSerializer;
impl ModifyDBSubnetGroupMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ModifyDBSubnetGroupMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.db_subnet_group_description {
            params.put(&format!("{}{}", prefix, "DBSubnetGroupDescription"),
                       &field_value.replace("+", "%2B"));
        }
        params.put(&format!("{}{}", prefix, "DBSubnetGroupName"),
                   &obj.db_subnet_group_name.replace("+", "%2B"));
        SubnetIdentifierListSerializer::serialize(params,
                                                  &format!("{}{}", prefix, "SubnetIds"),
                                                  &obj.subnet_ids);

    }
}

#[derive(Default,Debug,Clone)]
pub struct ModifyDBSubnetGroupResult {
    pub db_subnet_group: Option<DBSubnetGroup>,
}

struct ModifyDBSubnetGroupResultDeserializer;
impl ModifyDBSubnetGroupResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<ModifyDBSubnetGroupResult, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = ModifyDBSubnetGroupResult::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "DBSubnetGroup" => {
                            obj.db_subnet_group =
                                Some(try!(DBSubnetGroupDeserializer::deserialize("DBSubnetGroup",
                                                                                 stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct ModifyEventSubscriptionMessage {
    #[doc="<p> A Boolean value; set to <b>true</b> to activate the subscription. </p>"]
    pub enabled: Option<bool>,
    #[doc="<p> A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html\">Events</a> topic in the Amazon RDS User Guide or by using the <b>DescribeEventCategories</b> action. </p>"]
    pub event_categories: Option<Vec<String>>,
    #[doc="<p>The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.</p>"]
    pub sns_topic_arn: Option<String>,
    #[doc="<p>The type of source that will be generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>"]
    pub source_type: Option<String>,
    #[doc="<p>The name of the RDS event notification subscription.</p>"]
    pub subscription_name: String,
}


/// Serialize `ModifyEventSubscriptionMessage` contents to a `SignedRequest`.
struct ModifyEventSubscriptionMessageSerializer;
impl ModifyEventSubscriptionMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ModifyEventSubscriptionMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.enabled {
            params.put(&format!("{}{}", prefix, "Enabled"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.event_categories {
            EventCategoriesListSerializer::serialize(params,
                                                     &format!("{}{}", prefix, "EventCategories"),
                                                     field_value);
        }
        if let Some(ref field_value) = obj.sns_topic_arn {
            params.put(&format!("{}{}", prefix, "SnsTopicArn"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.source_type {
            params.put(&format!("{}{}", prefix, "SourceType"),
                       &field_value.replace("+", "%2B"));
        }
        params.put(&format!("{}{}", prefix, "SubscriptionName"),
                   &obj.subscription_name.replace("+", "%2B"));

    }
}

#[derive(Default,Debug,Clone)]
pub struct ModifyEventSubscriptionResult {
    pub event_subscription: Option<EventSubscription>,
}

struct ModifyEventSubscriptionResultDeserializer;
impl ModifyEventSubscriptionResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<ModifyEventSubscriptionResult, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = ModifyEventSubscriptionResult::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "EventSubscription" => {
                            obj.event_subscription =
                                Some(try!(EventSubscriptionDeserializer::deserialize("EventSubscription",
                                                                                     stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct ModifyOptionGroupMessage {
    #[doc="<p>Indicates whether the changes should be applied immediately, or during the next maintenance window for each instance associated with the option group.</p>"]
    pub apply_immediately: Option<bool>,
    #[doc="<p>The name of the option group to be modified.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, cannot be removed from an option group, and that option group cannot be removed from a DB instance once it is associated with a DB instance</p>"]
    pub option_group_name: String,
    #[doc="<p>Options in this list are added to the option group or, if already present, the specified configuration is used to update the existing configuration.</p>"]
    pub options_to_include: Option<Vec<OptionConfiguration>>,
    #[doc="<p>Options in this list are removed from the option group.</p>"]
    pub options_to_remove: Option<Vec<String>>,
}


/// Serialize `ModifyOptionGroupMessage` contents to a `SignedRequest`.
struct ModifyOptionGroupMessageSerializer;
impl ModifyOptionGroupMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ModifyOptionGroupMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.apply_immediately {
            params.put(&format!("{}{}", prefix, "ApplyImmediately"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        params.put(&format!("{}{}", prefix, "OptionGroupName"),
                   &obj.option_group_name.replace("+", "%2B"));
        if let Some(ref field_value) = obj.options_to_include {
            OptionConfigurationListSerializer::serialize(params,
                                                         &format!("{}{}",
                                                                 prefix,
                                                                 "OptionsToInclude"),
                                                         field_value);
        }
        if let Some(ref field_value) = obj.options_to_remove {
            OptionNamesListSerializer::serialize(params,
                                                 &format!("{}{}", prefix, "OptionsToRemove"),
                                                 field_value);
        }

    }
}

#[derive(Default,Debug,Clone)]
pub struct ModifyOptionGroupResult {
    pub option_group: Option<OptionGroup>,
}

struct ModifyOptionGroupResultDeserializer;
impl ModifyOptionGroupResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<ModifyOptionGroupResult, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = ModifyOptionGroupResult::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "OptionGroup" => {
                            obj.option_group =
                                Some(try!(OptionGroupDeserializer::deserialize("OptionGroup",
                                                                               stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p>Option details.</p>"]
#[derive(Default,Debug,Clone)]
pub struct RDSOption {
    #[doc="<p>If the option requires access to a port, then this DB security group allows access to the port.</p>"]
    pub db_security_group_memberships: Option<Vec<DBSecurityGroupMembership>>,
    #[doc="<p>The description of the option.</p>"]
    pub option_description: Option<String>,
    #[doc="<p>The name of the option.</p>"]
    pub option_name: Option<String>,
    #[doc="<p>The option settings for this option.</p>"]
    pub option_settings: Option<Vec<OptionSetting>>,
    #[doc="<p>The version of the option.</p>"]
    pub option_version: Option<String>,
    #[doc="<p>Indicate if this option is permanent.</p>"]
    pub permanent: Option<bool>,
    #[doc="<p>Indicate if this option is persistent.</p>"]
    pub persistent: Option<bool>,
    #[doc="<p>If required, the port configured for this option to use.</p>"]
    pub port: Option<i64>,
    #[doc="<p>If the option requires access to a port, then this VPC security group allows access to the port.</p>"]
    pub vpc_security_group_memberships: Option<Vec<VpcSecurityGroupMembership>>,
}

struct RDSOptionDeserializer;
impl RDSOptionDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<RDSOption, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = RDSOption::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "DBSecurityGroupMemberships" => {
                            obj.db_security_group_memberships = Some(try!(DBSecurityGroupMembershipListDeserializer::deserialize("DBSecurityGroupMemberships", stack)));
                        }
                        "OptionDescription" => {
                            obj.option_description =
                                Some(try!(StringDeserializer::deserialize("OptionDescription",
                                                                          stack)));
                        }
                        "OptionName" => {
                            obj.option_name = Some(try!(StringDeserializer::deserialize("OptionName",
                                                                                        stack)));
                        }
                        "OptionSettings" => {
                            obj.option_settings = Some(try!(OptionSettingConfigurationListDeserializer::deserialize("OptionSettings", stack)));
                        }
                        "OptionVersion" => {
                            obj.option_version = Some(try!(StringDeserializer::deserialize("OptionVersion",
                                                                                           stack)));
                        }
                        "Permanent" => {
                            obj.permanent = Some(try!(BooleanDeserializer::deserialize("Permanent",
                                                                                       stack)));
                        }
                        "Persistent" => {
                            obj.persistent = Some(try!(BooleanDeserializer::deserialize("Persistent",
                                                                                        stack)));
                        }
                        "Port" => {
                            obj.port = Some(try!(IntegerOptionalDeserializer::deserialize("Port",
                                                                                          stack)));
                        }
                        "VpcSecurityGroupMemberships" => {
                            obj.vpc_security_group_memberships = Some(try!(VpcSecurityGroupMembershipListDeserializer::deserialize("VpcSecurityGroupMemberships", stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p>A list of all available options</p>"]
#[derive(Default,Debug,Clone)]
pub struct OptionConfiguration {
    #[doc="<p>A list of DBSecurityGroupMemebrship name strings used for this option.</p>"]
    pub db_security_group_memberships: Option<Vec<String>>,
    #[doc="<p>The configuration of options to include in a group.</p>"]
    pub option_name: String,
    #[doc="<p>The option settings to include in an option group.</p>"]
    pub option_settings: Option<Vec<OptionSetting>>,
    #[doc="<p>The version for the option.</p>"]
    pub option_version: Option<String>,
    #[doc="<p>The optional port for the option.</p>"]
    pub port: Option<i64>,
    #[doc="<p>A list of VpcSecurityGroupMemebrship name strings used for this option.</p>"]
    pub vpc_security_group_memberships: Option<Vec<String>>,
}


/// Serialize `OptionConfiguration` contents to a `SignedRequest`.
struct OptionConfigurationSerializer;
impl OptionConfigurationSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &OptionConfiguration) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.db_security_group_memberships {
            DBSecurityGroupNameListSerializer::serialize(params,
                                                         &format!("{}{}",
                                                                 prefix,
                                                                 "DBSecurityGroupMemberships"),
                                                         field_value);
        }
        params.put(&format!("{}{}", prefix, "OptionName"),
                   &obj.option_name.replace("+", "%2B"));
        if let Some(ref field_value) = obj.option_settings {
            OptionSettingsListSerializer::serialize(params,
                                                    &format!("{}{}", prefix, "OptionSettings"),
                                                    field_value);
        }
        if let Some(ref field_value) = obj.option_version {
            params.put(&format!("{}{}", prefix, "OptionVersion"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.port {
            params.put(&format!("{}{}", prefix, "Port"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.vpc_security_group_memberships {
            VpcSecurityGroupIdListSerializer::serialize(params,
                                                        &format!("{}{}",
                                                                prefix,
                                                                "VpcSecurityGroupMemberships"),
                                                        field_value);
        }

    }
}


/// Serialize `OptionConfigurationList` contents to a `SignedRequest`.
struct OptionConfigurationListSerializer;
impl OptionConfigurationListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<OptionConfiguration>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.member.{}", name, index + 1);
            OptionConfigurationSerializer::serialize(params, &key, obj);
        }
    }
}

#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct OptionGroup {
    #[doc="<p>Indicates whether this option group can be applied to both VPC and non-VPC instances. The value <code>true</code> indicates the option group can be applied to both VPC and non-VPC instances. </p>"]
    pub allows_vpc_and_non_vpc_instance_memberships: Option<bool>,
    #[doc="<p>Indicates the name of the engine that this option group can be applied to.</p>"]
    pub engine_name: Option<String>,
    #[doc="<p>Indicates the major engine version associated with this option group.</p>"]
    pub major_engine_version: Option<String>,
    #[doc="<p>The Amazon Resource Name (ARN) for the option group.</p>"]
    pub option_group_arn: Option<String>,
    #[doc="<p>Provides a description of the option group.</p>"]
    pub option_group_description: Option<String>,
    #[doc="<p>Specifies the name of the option group.</p>"]
    pub option_group_name: Option<String>,
    #[doc="<p>Indicates what options are available in the option group.</p>"]
    pub options: Option<Vec<RDSOption>>,
    #[doc="<p>If <b>AllowsVpcAndNonVpcInstanceMemberships</b> is <code>false</code>, this field is blank. If <b>AllowsVpcAndNonVpcInstanceMemberships</b> is <code>true</code> and this field is blank, then this option group can be applied to both VPC and non-VPC instances. If this field contains a value, then this option group can only be applied to instances that are in the VPC indicated by this field. </p>"]
    pub vpc_id: Option<String>,
}

struct OptionGroupDeserializer;
impl OptionGroupDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<OptionGroup, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = OptionGroup::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "AllowsVpcAndNonVpcInstanceMemberships" => {
                            obj.allows_vpc_and_non_vpc_instance_memberships =
                                Some(try!(BooleanDeserializer::deserialize("AllowsVpcAndNonVpcInstanceMemberships",
                                                                           stack)));
                        }
                        "EngineName" => {
                            obj.engine_name = Some(try!(StringDeserializer::deserialize("EngineName",
                                                                                        stack)));
                        }
                        "MajorEngineVersion" => {
                            obj.major_engine_version =
                                Some(try!(StringDeserializer::deserialize("MajorEngineVersion",
                                                                          stack)));
                        }
                        "OptionGroupArn" => {
                            obj.option_group_arn =
                                Some(try!(StringDeserializer::deserialize("OptionGroupArn",
                                                                          stack)));
                        }
                        "OptionGroupDescription" => {
                            obj.option_group_description =
                                Some(try!(StringDeserializer::deserialize("OptionGroupDescription",
                                                                          stack)));
                        }
                        "OptionGroupName" => {
                            obj.option_group_name =
                                Some(try!(StringDeserializer::deserialize("OptionGroupName",
                                                                          stack)));
                        }
                        "Options" => {
                            obj.options = Some(try!(OptionsListDeserializer::deserialize("Options",
                                                                                         stack)));
                        }
                        "VpcId" => {
                            obj.vpc_id = Some(try!(StringDeserializer::deserialize("VpcId",
                                                                                   stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p>Provides information on the option groups the DB instance is a member of.</p>"]
#[derive(Default,Debug,Clone)]
pub struct OptionGroupMembership {
    #[doc="<p>The name of the option group that the instance belongs to.</p>"]
    pub option_group_name: Option<String>,
    #[doc="<p>The status of the DB instance's option group membership. Valid values are: <code>in-sync</code>, <code>pending-apply</code>, <code>pending-removal</code>, <code>pending-maintenance-apply</code>, <code>pending-maintenance-removal</code>, <code>applying</code>, <code>removing</code>, and <code>failed</code>. </p>"]
    pub status: Option<String>,
}

struct OptionGroupMembershipDeserializer;
impl OptionGroupMembershipDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<OptionGroupMembership, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = OptionGroupMembership::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "OptionGroupName" => {
                            obj.option_group_name =
                                Some(try!(StringDeserializer::deserialize("OptionGroupName",
                                                                          stack)));
                        }
                        "Status" => {
                            obj.status = Some(try!(StringDeserializer::deserialize("Status",
                                                                                   stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct OptionGroupMembershipListDeserializer;
impl OptionGroupMembershipListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<OptionGroupMembership>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "OptionGroupMembership" {
                        obj.push(try!(OptionGroupMembershipDeserializer::deserialize("OptionGroupMembership", stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
#[doc="<p>Available option.</p>"]
#[derive(Default,Debug,Clone)]
pub struct OptionGroupOption {
    #[doc="<p>If the option requires a port, specifies the default port for the option.</p>"]
    pub default_port: Option<i64>,
    #[doc="<p>The description of the option.</p>"]
    pub description: Option<String>,
    #[doc="<p>The name of the engine that this option can be applied to.</p>"]
    pub engine_name: Option<String>,
    #[doc="<p>Indicates the major engine version that the option is available for.</p>"]
    pub major_engine_version: Option<String>,
    #[doc="<p>The minimum required engine version for the option to be applied.</p>"]
    pub minimum_required_minor_engine_version: Option<String>,
    #[doc="<p>The name of the option.</p>"]
    pub name: Option<String>,
    #[doc="<p>The option settings that are available (and the default value) for each option in an option group.</p>"]
    pub option_group_option_settings: Option<Vec<OptionGroupOptionSetting>>,
    #[doc="<p>The versions that are available for the option.</p>"]
    pub option_group_option_versions: Option<Vec<OptionVersion>>,
    #[doc="<p>The options that conflict with this option.</p>"]
    pub options_conflicts_with: Option<Vec<String>>,
    #[doc="<p>The options that are prerequisites for this option.</p>"]
    pub options_depended_on: Option<Vec<String>>,
    #[doc="<p>Permanent options can never be removed from an option group. An option group containing a permanent option can't be removed from a DB instance.</p>"]
    pub permanent: Option<bool>,
    #[doc="<p>Persistent options can't be removed from an option group while DB instances are associated with the option group. If you disassociate all DB instances from the option group, your can remove the persistent option from the option group.</p>"]
    pub persistent: Option<bool>,
    #[doc="<p>Specifies whether the option requires a port.</p>"]
    pub port_required: Option<bool>,
    #[doc="<p>If true, you must enable the Auto Minor Version Upgrade setting for your DB instance before you can use this option. You can enable Auto Minor Version Upgrade when you first create your DB instance, or by modifying your DB instance later. </p>"]
    pub requires_auto_minor_engine_version_upgrade: Option<bool>,
    #[doc="<p>If true, you can change the option to an earlier version of the option. This only applies to options that have different versions available. </p>"]
    pub supports_option_version_downgrade: Option<bool>,
    #[doc="<p>If true, you can only use this option with a DB instance that is in a VPC. </p>"]
    pub vpc_only: Option<bool>,
}

struct OptionGroupOptionDeserializer;
impl OptionGroupOptionDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<OptionGroupOption, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = OptionGroupOption::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "DefaultPort" => {
                            obj.default_port =
                                Some(try!(IntegerOptionalDeserializer::deserialize("DefaultPort",
                                                                                   stack)));
                        }
                        "Description" => {
                            obj.description = Some(try!(StringDeserializer::deserialize("Description",
                                                                                        stack)));
                        }
                        "EngineName" => {
                            obj.engine_name = Some(try!(StringDeserializer::deserialize("EngineName",
                                                                                        stack)));
                        }
                        "MajorEngineVersion" => {
                            obj.major_engine_version =
                                Some(try!(StringDeserializer::deserialize("MajorEngineVersion",
                                                                          stack)));
                        }
                        "MinimumRequiredMinorEngineVersion" => {
                            obj.minimum_required_minor_engine_version =
                                Some(try!(StringDeserializer::deserialize("MinimumRequiredMinorEngineVersion",
                                                                          stack)));
                        }
                        "Name" => {
                            obj.name = Some(try!(StringDeserializer::deserialize("Name", stack)));
                        }
                        "OptionGroupOptionSettings" => {
                            obj.option_group_option_settings = Some(try!(OptionGroupOptionSettingsListDeserializer::deserialize("OptionGroupOptionSettings", stack)));
                        }
                        "OptionGroupOptionVersions" => {
                            obj.option_group_option_versions = Some(try!(OptionGroupOptionVersionsListDeserializer::deserialize("OptionGroupOptionVersions", stack)));
                        }
                        "OptionsConflictsWith" => {
                            obj.options_conflicts_with =
                                Some(try!(OptionsConflictsWithDeserializer::deserialize("OptionsConflictsWith",
                                                                                        stack)));
                        }
                        "OptionsDependedOn" => {
                            obj.options_depended_on =
                                Some(try!(OptionsDependedOnDeserializer::deserialize("OptionsDependedOn",
                                                                                     stack)));
                        }
                        "Permanent" => {
                            obj.permanent = Some(try!(BooleanDeserializer::deserialize("Permanent",
                                                                                       stack)));
                        }
                        "Persistent" => {
                            obj.persistent = Some(try!(BooleanDeserializer::deserialize("Persistent",
                                                                                        stack)));
                        }
                        "PortRequired" => {
                            obj.port_required = Some(try!(BooleanDeserializer::deserialize("PortRequired",
                                                                                           stack)));
                        }
                        "RequiresAutoMinorEngineVersionUpgrade" => {
                            obj.requires_auto_minor_engine_version_upgrade =
                                Some(try!(BooleanDeserializer::deserialize("RequiresAutoMinorEngineVersionUpgrade",
                                                                           stack)));
                        }
                        "SupportsOptionVersionDowngrade" => {
                            obj.supports_option_version_downgrade =
                                Some(try!(BooleanOptionalDeserializer::deserialize("SupportsOptionVersionDowngrade",
                                                                                   stack)));
                        }
                        "VpcOnly" => {
                            obj.vpc_only = Some(try!(BooleanDeserializer::deserialize("VpcOnly",
                                                                                      stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p>Option group option settings are used to display settings available for each option with their default values and other information. These values are used with the DescribeOptionGroupOptions action.</p>"]
#[derive(Default,Debug,Clone)]
pub struct OptionGroupOptionSetting {
    #[doc="<p>Indicates the acceptable values for the option group option.</p>"]
    pub allowed_values: Option<String>,
    #[doc="<p>The DB engine specific parameter type for the option group option.</p>"]
    pub apply_type: Option<String>,
    #[doc="<p>The default value for the option group option.</p>"]
    pub default_value: Option<String>,
    #[doc="<p>Boolean value where true indicates that this option group option can be changed from the default value.</p>"]
    pub is_modifiable: Option<bool>,
    #[doc="<p>The description of the option group option.</p>"]
    pub setting_description: Option<String>,
    #[doc="<p>The name of the option group option.</p>"]
    pub setting_name: Option<String>,
}

struct OptionGroupOptionSettingDeserializer;
impl OptionGroupOptionSettingDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<OptionGroupOptionSetting, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = OptionGroupOptionSetting::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "AllowedValues" => {
                            obj.allowed_values = Some(try!(StringDeserializer::deserialize("AllowedValues",
                                                                                           stack)));
                        }
                        "ApplyType" => {
                            obj.apply_type = Some(try!(StringDeserializer::deserialize("ApplyType",
                                                                                       stack)));
                        }
                        "DefaultValue" => {
                            obj.default_value = Some(try!(StringDeserializer::deserialize("DefaultValue",
                                                                                          stack)));
                        }
                        "IsModifiable" => {
                            obj.is_modifiable = Some(try!(BooleanDeserializer::deserialize("IsModifiable",
                                                                                           stack)));
                        }
                        "SettingDescription" => {
                            obj.setting_description =
                                Some(try!(StringDeserializer::deserialize("SettingDescription",
                                                                          stack)));
                        }
                        "SettingName" => {
                            obj.setting_name = Some(try!(StringDeserializer::deserialize("SettingName",
                                                                                         stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct OptionGroupOptionSettingsListDeserializer;
impl OptionGroupOptionSettingsListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<OptionGroupOptionSetting>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "OptionGroupOptionSetting" {
                        obj.push(try!(OptionGroupOptionSettingDeserializer::deserialize("OptionGroupOptionSetting", stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
struct OptionGroupOptionVersionsListDeserializer;
impl OptionGroupOptionVersionsListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<OptionVersion>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "OptionVersion" {
                        obj.push(try!(OptionVersionDeserializer::deserialize("OptionVersion",
                                                                             stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
struct OptionGroupOptionsListDeserializer;
impl OptionGroupOptionsListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<OptionGroupOption>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "OptionGroupOption" {
                        obj.push(try!(OptionGroupOptionDeserializer::deserialize("OptionGroupOption", stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct OptionGroupOptionsMessage {
    #[doc="<p>An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>"]
    pub marker: Option<String>,
    pub option_group_options: Option<Vec<OptionGroupOption>>,
}

struct OptionGroupOptionsMessageDeserializer;
impl OptionGroupOptionsMessageDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<OptionGroupOptionsMessage, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = OptionGroupOptionsMessage::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "Marker" => {
                            obj.marker = Some(try!(StringDeserializer::deserialize("Marker",
                                                                                   stack)));
                        }
                        "OptionGroupOptions" => {
                            obj.option_group_options =
                                Some(try!(OptionGroupOptionsListDeserializer::deserialize("OptionGroupOptions",
                                                                                          stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p>List of option groups.</p>"]
#[derive(Default,Debug,Clone)]
pub struct OptionGroups {
    #[doc="<p>An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>"]
    pub marker: Option<String>,
    #[doc="<p>List of option groups.</p>"]
    pub option_groups_list: Option<Vec<OptionGroup>>,
}

struct OptionGroupsDeserializer;
impl OptionGroupsDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<OptionGroups, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = OptionGroups::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "Marker" => {
                            obj.marker = Some(try!(StringDeserializer::deserialize("Marker",
                                                                                   stack)));
                        }
                        "OptionGroupsList" => {
                            obj.option_groups_list =
                                Some(try!(OptionGroupsListDeserializer::deserialize("OptionGroupsList",
                                                                                    stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct OptionGroupsListDeserializer;
impl OptionGroupsListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<OptionGroup>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "OptionGroup" {
                        obj.push(try!(OptionGroupDeserializer::deserialize("OptionGroup", stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}

/// Serialize `OptionNamesList` contents to a `SignedRequest`.
struct OptionNamesListSerializer;
impl OptionNamesListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.member.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

#[doc="<p>Option settings are the actual settings being applied or configured for that option. It is used when you modify an option group or describe option groups. For example, the NATIVE_NETWORK_ENCRYPTION option has a setting called SQLNET.ENCRYPTION_SERVER that can have several different values.</p>"]
#[derive(Default,Debug,Clone)]
pub struct OptionSetting {
    #[doc="<p>The allowed values of the option setting.</p>"]
    pub allowed_values: Option<String>,
    #[doc="<p>The DB engine specific parameter type.</p>"]
    pub apply_type: Option<String>,
    #[doc="<p>The data type of the option setting.</p>"]
    pub data_type: Option<String>,
    #[doc="<p>The default value of the option setting.</p>"]
    pub default_value: Option<String>,
    #[doc="<p>The description of the option setting.</p>"]
    pub description: Option<String>,
    #[doc="<p>Indicates if the option setting is part of a collection.</p>"]
    pub is_collection: Option<bool>,
    #[doc="<p>A Boolean value that, when true, indicates the option setting can be modified from the default.</p>"]
    pub is_modifiable: Option<bool>,
    #[doc="<p>The name of the option that has settings that you can set.</p>"]
    pub name: Option<String>,
    #[doc="<p>The current value of the option setting.</p>"]
    pub value: Option<String>,
}

struct OptionSettingDeserializer;
impl OptionSettingDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<OptionSetting, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = OptionSetting::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "AllowedValues" => {
                            obj.allowed_values = Some(try!(StringDeserializer::deserialize("AllowedValues",
                                                                                           stack)));
                        }
                        "ApplyType" => {
                            obj.apply_type = Some(try!(StringDeserializer::deserialize("ApplyType",
                                                                                       stack)));
                        }
                        "DataType" => {
                            obj.data_type = Some(try!(StringDeserializer::deserialize("DataType",
                                                                                      stack)));
                        }
                        "DefaultValue" => {
                            obj.default_value = Some(try!(StringDeserializer::deserialize("DefaultValue",
                                                                                          stack)));
                        }
                        "Description" => {
                            obj.description = Some(try!(StringDeserializer::deserialize("Description",
                                                                                        stack)));
                        }
                        "IsCollection" => {
                            obj.is_collection = Some(try!(BooleanDeserializer::deserialize("IsCollection",
                                                                                           stack)));
                        }
                        "IsModifiable" => {
                            obj.is_modifiable = Some(try!(BooleanDeserializer::deserialize("IsModifiable",
                                                                                           stack)));
                        }
                        "Name" => {
                            obj.name = Some(try!(StringDeserializer::deserialize("Name", stack)));
                        }
                        "Value" => {
                            obj.value = Some(try!(StringDeserializer::deserialize("Value", stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}

/// Serialize `OptionSetting` contents to a `SignedRequest`.
struct OptionSettingSerializer;
impl OptionSettingSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &OptionSetting) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.allowed_values {
            params.put(&format!("{}{}", prefix, "AllowedValues"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.apply_type {
            params.put(&format!("{}{}", prefix, "ApplyType"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.data_type {
            params.put(&format!("{}{}", prefix, "DataType"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.default_value {
            params.put(&format!("{}{}", prefix, "DefaultValue"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.description {
            params.put(&format!("{}{}", prefix, "Description"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.is_collection {
            params.put(&format!("{}{}", prefix, "IsCollection"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.is_modifiable {
            params.put(&format!("{}{}", prefix, "IsModifiable"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.name {
            params.put(&format!("{}{}", prefix, "Name"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.value {
            params.put(&format!("{}{}", prefix, "Value"),
                       &field_value.replace("+", "%2B"));
        }

    }
}

struct OptionSettingConfigurationListDeserializer;
impl OptionSettingConfigurationListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<OptionSetting>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "OptionSetting" {
                        obj.push(try!(OptionSettingDeserializer::deserialize("OptionSetting",
                                                                             stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}

/// Serialize `OptionSettingsList` contents to a `SignedRequest`.
struct OptionSettingsListSerializer;
impl OptionSettingsListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<OptionSetting>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.member.{}", name, index + 1);
            OptionSettingSerializer::serialize(params, &key, obj);
        }
    }
}

#[doc="<p>The version for an option. Option group option versions are returned by the <a>DescribeOptionGroupOptions</a> action.</p>"]
#[derive(Default,Debug,Clone)]
pub struct OptionVersion {
    #[doc="<p>True if the version is the default version of the option; otherwise, false.</p>"]
    pub is_default: Option<bool>,
    #[doc="<p>The version of the option.</p>"]
    pub version: Option<String>,
}

struct OptionVersionDeserializer;
impl OptionVersionDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<OptionVersion, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = OptionVersion::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "IsDefault" => {
                            obj.is_default = Some(try!(BooleanDeserializer::deserialize("IsDefault",
                                                                                        stack)));
                        }
                        "Version" => {
                            obj.version = Some(try!(StringDeserializer::deserialize("Version",
                                                                                    stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct OptionsConflictsWithDeserializer;
impl OptionsConflictsWithDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<String>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "OptionConflictName" {
                        obj.push(try!(StringDeserializer::deserialize("OptionConflictName",
                                                                      stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
struct OptionsDependedOnDeserializer;
impl OptionsDependedOnDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<String>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "OptionName" {
                        obj.push(try!(StringDeserializer::deserialize("OptionName", stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
struct OptionsListDeserializer;
impl OptionsListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<RDSOption>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "Option" {
                        obj.push(try!(RDSOptionDeserializer::deserialize("Option", stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
#[doc="<p>Contains a list of available options for a DB instance</p> <p> This data type is used as a response element in the <a>DescribeOrderableDBInstanceOptions</a> action. </p>"]
#[derive(Default,Debug,Clone)]
pub struct OrderableDBInstanceOption {
    #[doc="<p>A list of Availability Zones for the orderable DB instance.</p>"]
    pub availability_zones: Option<Vec<AvailabilityZone>>,
    #[doc="<p>The DB instance class for the orderable DB instance.</p>"]
    pub db_instance_class: Option<String>,
    #[doc="<p>The engine type of the orderable DB instance.</p>"]
    pub engine: Option<String>,
    #[doc="<p>The engine version of the orderable DB instance.</p>"]
    pub engine_version: Option<String>,
    #[doc="<p>The license model for the orderable DB instance.</p>"]
    pub license_model: Option<String>,
    #[doc="<p>Indicates whether this orderable DB instance is multi-AZ capable.</p>"]
    pub multi_az_capable: Option<bool>,
    #[doc="<p>Indicates whether this orderable DB instance can have a Read Replica.</p>"]
    pub read_replica_capable: Option<bool>,
    #[doc="<p>Indicates the storage type for this orderable DB instance.</p>"]
    pub storage_type: Option<String>,
    #[doc="<p>Indicates whether the DB instance supports enhanced monitoring at intervals from 1 to 60 seconds.</p>"]
    pub supports_enhanced_monitoring: Option<bool>,
    #[doc="<p>Indicates whether this orderable DB instance supports IAM database authentication.</p>"]
    pub supports_iam_database_authentication: Option<bool>,
    #[doc="<p>Indicates whether this orderable DB instance supports provisioned IOPS.</p>"]
    pub supports_iops: Option<bool>,
    #[doc="<p>Indicates whether this orderable DB instance supports encrypted storage.</p>"]
    pub supports_storage_encryption: Option<bool>,
    #[doc="<p>Indicates whether this is a VPC orderable DB instance.</p>"]
    pub vpc: Option<bool>,
}

struct OrderableDBInstanceOptionDeserializer;
impl OrderableDBInstanceOptionDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<OrderableDBInstanceOption, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = OrderableDBInstanceOption::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "AvailabilityZones" => {
                            obj.availability_zones =
                                Some(try!(AvailabilityZoneListDeserializer::deserialize("AvailabilityZones",
                                                                                        stack)));
                        }
                        "DBInstanceClass" => {
                            obj.db_instance_class =
                                Some(try!(StringDeserializer::deserialize("DBInstanceClass",
                                                                          stack)));
                        }
                        "Engine" => {
                            obj.engine = Some(try!(StringDeserializer::deserialize("Engine",
                                                                                   stack)));
                        }
                        "EngineVersion" => {
                            obj.engine_version = Some(try!(StringDeserializer::deserialize("EngineVersion",
                                                                                           stack)));
                        }
                        "LicenseModel" => {
                            obj.license_model = Some(try!(StringDeserializer::deserialize("LicenseModel",
                                                                                          stack)));
                        }
                        "MultiAZCapable" => {
                            obj.multi_az_capable =
                                Some(try!(BooleanDeserializer::deserialize("MultiAZCapable",
                                                                           stack)));
                        }
                        "ReadReplicaCapable" => {
                            obj.read_replica_capable =
                                Some(try!(BooleanDeserializer::deserialize("ReadReplicaCapable",
                                                                           stack)));
                        }
                        "StorageType" => {
                            obj.storage_type = Some(try!(StringDeserializer::deserialize("StorageType",
                                                                                         stack)));
                        }
                        "SupportsEnhancedMonitoring" => {
                            obj.supports_enhanced_monitoring =
                                Some(try!(BooleanDeserializer::deserialize("SupportsEnhancedMonitoring",
                                                                           stack)));
                        }
                        "SupportsIAMDatabaseAuthentication" => {
                            obj.supports_iam_database_authentication =
                                Some(try!(BooleanDeserializer::deserialize("SupportsIAMDatabaseAuthentication",
                                                                           stack)));
                        }
                        "SupportsIops" => {
                            obj.supports_iops = Some(try!(BooleanDeserializer::deserialize("SupportsIops",
                                                                                           stack)));
                        }
                        "SupportsStorageEncryption" => {
                            obj.supports_storage_encryption =
                                Some(try!(BooleanDeserializer::deserialize("SupportsStorageEncryption",
                                                                           stack)));
                        }
                        "Vpc" => {
                            obj.vpc = Some(try!(BooleanDeserializer::deserialize("Vpc", stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct OrderableDBInstanceOptionsListDeserializer;
impl OrderableDBInstanceOptionsListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<OrderableDBInstanceOption>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "OrderableDBInstanceOption" {
                        obj.push(try!(OrderableDBInstanceOptionDeserializer::deserialize("OrderableDBInstanceOption", stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
#[doc="<p> Contains the result of a successful invocation of the <a>DescribeOrderableDBInstanceOptions</a> action. </p>"]
#[derive(Default,Debug,Clone)]
pub struct OrderableDBInstanceOptionsMessage {
    #[doc="<p> An optional pagination token provided by a previous OrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . </p>"]
    pub marker: Option<String>,
    #[doc="<p>An <a>OrderableDBInstanceOption</a> structure containing information about orderable options for the DB instance.</p>"]
    pub orderable_db_instance_options: Option<Vec<OrderableDBInstanceOption>>,
}

struct OrderableDBInstanceOptionsMessageDeserializer;
impl OrderableDBInstanceOptionsMessageDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>
        (tag_name: &str,
         stack: &mut T)
         -> Result<OrderableDBInstanceOptionsMessage, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = OrderableDBInstanceOptionsMessage::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "Marker" => {
                            obj.marker = Some(try!(StringDeserializer::deserialize("Marker",
                                                                                   stack)));
                        }
                        "OrderableDBInstanceOptions" => {
                            obj.orderable_db_instance_options = Some(try!(OrderableDBInstanceOptionsListDeserializer::deserialize("OrderableDBInstanceOptions", stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p> This data type is used as a request parameter in the <a>ModifyDBParameterGroup</a> and <a>ResetDBParameterGroup</a> actions. </p> <p>This data type is used as a response element in the <a>DescribeEngineDefaultParameters</a> and <a>DescribeDBParameters</a> actions.</p>"]
#[derive(Default,Debug,Clone)]
pub struct Parameter {
    #[doc="<p>Specifies the valid range of values for the parameter.</p>"]
    pub allowed_values: Option<String>,
    #[doc="<p>Indicates when to apply parameter updates.</p>"]
    pub apply_method: Option<String>,
    #[doc="<p>Specifies the engine specific parameters type.</p>"]
    pub apply_type: Option<String>,
    #[doc="<p>Specifies the valid data type for the parameter.</p>"]
    pub data_type: Option<String>,
    #[doc="<p>Provides a description of the parameter.</p>"]
    pub description: Option<String>,
    #[doc="<p> Indicates whether (<code>true</code>) or not (<code>false</code>) the parameter can be modified. Some parameters have security or operational implications that prevent them from being changed. </p>"]
    pub is_modifiable: Option<bool>,
    #[doc="<p>The earliest engine version to which the parameter can apply.</p>"]
    pub minimum_engine_version: Option<String>,
    #[doc="<p>Specifies the name of the parameter.</p>"]
    pub parameter_name: Option<String>,
    #[doc="<p>Specifies the value of the parameter.</p>"]
    pub parameter_value: Option<String>,
    #[doc="<p>Indicates the source of the parameter value.</p>"]
    pub source: Option<String>,
}

struct ParameterDeserializer;
impl ParameterDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Parameter, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = Parameter::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "AllowedValues" => {
                            obj.allowed_values = Some(try!(StringDeserializer::deserialize("AllowedValues",
                                                                                           stack)));
                        }
                        "ApplyMethod" => {
                            obj.apply_method =
                                Some(try!(ApplyMethodDeserializer::deserialize("ApplyMethod",
                                                                               stack)));
                        }
                        "ApplyType" => {
                            obj.apply_type = Some(try!(StringDeserializer::deserialize("ApplyType",
                                                                                       stack)));
                        }
                        "DataType" => {
                            obj.data_type = Some(try!(StringDeserializer::deserialize("DataType",
                                                                                      stack)));
                        }
                        "Description" => {
                            obj.description = Some(try!(StringDeserializer::deserialize("Description",
                                                                                        stack)));
                        }
                        "IsModifiable" => {
                            obj.is_modifiable = Some(try!(BooleanDeserializer::deserialize("IsModifiable",
                                                                                           stack)));
                        }
                        "MinimumEngineVersion" => {
                            obj.minimum_engine_version =
                                Some(try!(StringDeserializer::deserialize("MinimumEngineVersion",
                                                                          stack)));
                        }
                        "ParameterName" => {
                            obj.parameter_name = Some(try!(StringDeserializer::deserialize("ParameterName",
                                                                                           stack)));
                        }
                        "ParameterValue" => {
                            obj.parameter_value =
                                Some(try!(StringDeserializer::deserialize("ParameterValue",
                                                                          stack)));
                        }
                        "Source" => {
                            obj.source = Some(try!(StringDeserializer::deserialize("Source",
                                                                                   stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}

/// Serialize `Parameter` contents to a `SignedRequest`.
struct ParameterSerializer;
impl ParameterSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Parameter) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.allowed_values {
            params.put(&format!("{}{}", prefix, "AllowedValues"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.apply_method {
            params.put(&format!("{}{}", prefix, "ApplyMethod"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.apply_type {
            params.put(&format!("{}{}", prefix, "ApplyType"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.data_type {
            params.put(&format!("{}{}", prefix, "DataType"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.description {
            params.put(&format!("{}{}", prefix, "Description"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.is_modifiable {
            params.put(&format!("{}{}", prefix, "IsModifiable"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.minimum_engine_version {
            params.put(&format!("{}{}", prefix, "MinimumEngineVersion"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.parameter_name {
            params.put(&format!("{}{}", prefix, "ParameterName"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.parameter_value {
            params.put(&format!("{}{}", prefix, "ParameterValue"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.source {
            params.put(&format!("{}{}", prefix, "Source"),
                       &field_value.replace("+", "%2B"));
        }

    }
}

struct ParametersListDeserializer;
impl ParametersListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<Parameter>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "Parameter" {
                        obj.push(try!(ParameterDeserializer::deserialize("Parameter", stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}

/// Serialize `ParametersList` contents to a `SignedRequest`.
struct ParametersListSerializer;
impl ParametersListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<Parameter>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.member.{}", name, index + 1);
            ParameterSerializer::serialize(params, &key, obj);
        }
    }
}

#[doc="<p>Provides information about a pending maintenance action for a resource.</p>"]
#[derive(Default,Debug,Clone)]
pub struct PendingMaintenanceAction {
    #[doc="<p>The type of pending maintenance action that is available for the resource.</p>"]
    pub action: Option<String>,
    #[doc="<p>The date of the maintenance window when the action will be applied. The maintenance action will be applied to the resource during its first maintenance window after this date. If this date is specified, any <code>next-maintenance</code> opt-in requests are ignored.</p>"]
    pub auto_applied_after_date: Option<String>,
    #[doc="<p>The effective date when the pending maintenance action will be applied to the resource. This date takes into account opt-in requests received from the <a>ApplyPendingMaintenanceAction</a> API, the <code>AutoAppliedAfterDate</code>, and the <code>ForcedApplyDate</code>. This value is blank if an opt-in request has not been received and nothing has been specified as <code>AutoAppliedAfterDate</code> or <code>ForcedApplyDate</code>.</p>"]
    pub current_apply_date: Option<String>,
    #[doc="<p>A description providing more detail about the maintenance action.</p>"]
    pub description: Option<String>,
    #[doc="<p>The date when the maintenance action will be automatically applied. The maintenance action will be applied to the resource on this date regardless of the maintenance window for the resource. If this date is specified, any <code>immediate</code> opt-in requests are ignored.</p>"]
    pub forced_apply_date: Option<String>,
    #[doc="<p>Indicates the type of opt-in request that has been received for the resource.</p>"]
    pub opt_in_status: Option<String>,
}

struct PendingMaintenanceActionDeserializer;
impl PendingMaintenanceActionDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<PendingMaintenanceAction, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = PendingMaintenanceAction::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "Action" => {
                            obj.action = Some(try!(StringDeserializer::deserialize("Action",
                                                                                   stack)));
                        }
                        "AutoAppliedAfterDate" => {
                            obj.auto_applied_after_date =
                                Some(try!(TStampDeserializer::deserialize("AutoAppliedAfterDate",
                                                                          stack)));
                        }
                        "CurrentApplyDate" => {
                            obj.current_apply_date =
                                Some(try!(TStampDeserializer::deserialize("CurrentApplyDate",
                                                                          stack)));
                        }
                        "Description" => {
                            obj.description = Some(try!(StringDeserializer::deserialize("Description",
                                                                                        stack)));
                        }
                        "ForcedApplyDate" => {
                            obj.forced_apply_date =
                                Some(try!(TStampDeserializer::deserialize("ForcedApplyDate",
                                                                          stack)));
                        }
                        "OptInStatus" => {
                            obj.opt_in_status = Some(try!(StringDeserializer::deserialize("OptInStatus",
                                                                                          stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct PendingMaintenanceActionDetailsDeserializer;
impl PendingMaintenanceActionDetailsDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<PendingMaintenanceAction>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "PendingMaintenanceAction" {
                        obj.push(try!(PendingMaintenanceActionDeserializer::deserialize("PendingMaintenanceAction", stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
struct PendingMaintenanceActionsDeserializer;
impl PendingMaintenanceActionsDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>
        (tag_name: &str,
         stack: &mut T)
         -> Result<Vec<ResourcePendingMaintenanceActions>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "ResourcePendingMaintenanceActions" {
                        obj.push(try!(ResourcePendingMaintenanceActionsDeserializer::deserialize("ResourcePendingMaintenanceActions", stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
#[doc="<p>Data returned from the <b>DescribePendingMaintenanceActions</b> action.</p>"]
#[derive(Default,Debug,Clone)]
pub struct PendingMaintenanceActionsMessage {
    #[doc="<p> An optional pagination token provided by a previous <code>DescribePendingMaintenanceActions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by <code>MaxRecords</code>. </p>"]
    pub marker: Option<String>,
    #[doc="<p>A list of the pending maintenance actions for the resource.</p>"]
    pub pending_maintenance_actions: Option<Vec<ResourcePendingMaintenanceActions>>,
}

struct PendingMaintenanceActionsMessageDeserializer;
impl PendingMaintenanceActionsMessageDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>
        (tag_name: &str,
         stack: &mut T)
         -> Result<PendingMaintenanceActionsMessage, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = PendingMaintenanceActionsMessage::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "Marker" => {
                            obj.marker = Some(try!(StringDeserializer::deserialize("Marker",
                                                                                   stack)));
                        }
                        "PendingMaintenanceActions" => {
                            obj.pending_maintenance_actions = Some(try!(PendingMaintenanceActionsDeserializer::deserialize("PendingMaintenanceActions", stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p> This data type is used as a response element in the <a>ModifyDBInstance</a> action. </p>"]
#[derive(Default,Debug,Clone)]
pub struct PendingModifiedValues {
    #[doc="<p> Contains the new <code>AllocatedStorage</code> size for the DB instance that will be applied or is in progress. </p>"]
    pub allocated_storage: Option<i64>,
    #[doc="<p>Specifies the pending number of days for which automated backups are retained.</p>"]
    pub backup_retention_period: Option<i64>,
    #[doc="<p>Specifies the identifier of the CA certificate for the DB instance.</p>"]
    pub ca_certificate_identifier: Option<String>,
    #[doc="<p> Contains the new <code>DBInstanceClass</code> for the DB instance that will be applied or is in progress. </p>"]
    pub db_instance_class: Option<String>,
    #[doc="<p> Contains the new <code>DBInstanceIdentifier</code> for the DB instance that will be applied or is in progress. </p>"]
    pub db_instance_identifier: Option<String>,
    #[doc="<p>The new DB subnet group for the DB instance. </p>"]
    pub db_subnet_group_name: Option<String>,
    #[doc="<p>Indicates the database engine version.</p>"]
    pub engine_version: Option<String>,
    #[doc="<p>Specifies the new Provisioned IOPS value for the DB instance that will be applied or is being applied.</p>"]
    pub iops: Option<i64>,
    #[doc="<p>The license model for the DB instance.</p> <p>Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>"]
    pub license_model: Option<String>,
    #[doc="<p>Contains the pending or in-progress change of the master credentials for the DB instance.</p>"]
    pub master_user_password: Option<String>,
    #[doc="<p>Indicates that the Single-AZ DB instance is to change to a Multi-AZ deployment.</p>"]
    pub multi_az: Option<bool>,
    #[doc="<p>Specifies the pending port for the DB instance.</p>"]
    pub port: Option<i64>,
    #[doc="<p>Specifies the storage type to be associated with the DB instance.</p>"]
    pub storage_type: Option<String>,
}

struct PendingModifiedValuesDeserializer;
impl PendingModifiedValuesDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<PendingModifiedValues, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = PendingModifiedValues::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "AllocatedStorage" => {
                            obj.allocated_storage =
                                Some(try!(IntegerOptionalDeserializer::deserialize("AllocatedStorage",
                                                                                   stack)));
                        }
                        "BackupRetentionPeriod" => {
                            obj.backup_retention_period =
                                Some(try!(IntegerOptionalDeserializer::deserialize("BackupRetentionPeriod",
                                                                                   stack)));
                        }
                        "CACertificateIdentifier" => {
                            obj.ca_certificate_identifier =
                                Some(try!(StringDeserializer::deserialize("CACertificateIdentifier",
                                                                          stack)));
                        }
                        "DBInstanceClass" => {
                            obj.db_instance_class =
                                Some(try!(StringDeserializer::deserialize("DBInstanceClass",
                                                                          stack)));
                        }
                        "DBInstanceIdentifier" => {
                            obj.db_instance_identifier =
                                Some(try!(StringDeserializer::deserialize("DBInstanceIdentifier",
                                                                          stack)));
                        }
                        "DBSubnetGroupName" => {
                            obj.db_subnet_group_name =
                                Some(try!(StringDeserializer::deserialize("DBSubnetGroupName",
                                                                          stack)));
                        }
                        "EngineVersion" => {
                            obj.engine_version = Some(try!(StringDeserializer::deserialize("EngineVersion",
                                                                                           stack)));
                        }
                        "Iops" => {
                            obj.iops = Some(try!(IntegerOptionalDeserializer::deserialize("Iops",
                                                                                          stack)));
                        }
                        "LicenseModel" => {
                            obj.license_model = Some(try!(StringDeserializer::deserialize("LicenseModel",
                                                                                          stack)));
                        }
                        "MasterUserPassword" => {
                            obj.master_user_password =
                                Some(try!(StringDeserializer::deserialize("MasterUserPassword",
                                                                          stack)));
                        }
                        "MultiAZ" => {
                            obj.multi_az =
                                Some(try!(BooleanOptionalDeserializer::deserialize("MultiAZ",
                                                                                   stack)));
                        }
                        "Port" => {
                            obj.port = Some(try!(IntegerOptionalDeserializer::deserialize("Port",
                                                                                          stack)));
                        }
                        "StorageType" => {
                            obj.storage_type = Some(try!(StringDeserializer::deserialize("StorageType",
                                                                                         stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct PromoteReadReplicaDBClusterMessage {
    #[doc="<p>The identifier of the DB cluster Read Replica to promote. This parameter is not case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster-replica1</code> </p>"]
    pub db_cluster_identifier: String,
}


/// Serialize `PromoteReadReplicaDBClusterMessage` contents to a `SignedRequest`.
struct PromoteReadReplicaDBClusterMessageSerializer;
impl PromoteReadReplicaDBClusterMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &PromoteReadReplicaDBClusterMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "DBClusterIdentifier"),
                   &obj.db_cluster_identifier.replace("+", "%2B"));

    }
}

#[derive(Default,Debug,Clone)]
pub struct PromoteReadReplicaDBClusterResult {
    pub db_cluster: Option<DBCluster>,
}

struct PromoteReadReplicaDBClusterResultDeserializer;
impl PromoteReadReplicaDBClusterResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>
        (tag_name: &str,
         stack: &mut T)
         -> Result<PromoteReadReplicaDBClusterResult, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = PromoteReadReplicaDBClusterResult::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "DBCluster" => {
                            obj.db_cluster = Some(try!(DBClusterDeserializer::deserialize("DBCluster",
                                                                                          stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct PromoteReadReplicaMessage {
    #[doc="<p>The number of days to retain automated backups. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 8</p> </li> </ul>"]
    pub backup_retention_period: Option<i64>,
    #[doc="<p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must be the identifier for an existing Read Replica DB instance</p> </li> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>"]
    pub db_instance_identifier: String,
    #[doc="<p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p> Default: A 30-minute window selected at random from an 8-hour block of time per AWS Region. To see the time blocks available, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html\"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Times should be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>"]
    pub preferred_backup_window: Option<String>,
}


/// Serialize `PromoteReadReplicaMessage` contents to a `SignedRequest`.
struct PromoteReadReplicaMessageSerializer;
impl PromoteReadReplicaMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &PromoteReadReplicaMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.backup_retention_period {
            params.put(&format!("{}{}", prefix, "BackupRetentionPeriod"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        params.put(&format!("{}{}", prefix, "DBInstanceIdentifier"),
                   &obj.db_instance_identifier.replace("+", "%2B"));
        if let Some(ref field_value) = obj.preferred_backup_window {
            params.put(&format!("{}{}", prefix, "PreferredBackupWindow"),
                       &field_value.replace("+", "%2B"));
        }

    }
}

#[derive(Default,Debug,Clone)]
pub struct PromoteReadReplicaResult {
    pub db_instance: Option<DBInstance>,
}

struct PromoteReadReplicaResultDeserializer;
impl PromoteReadReplicaResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<PromoteReadReplicaResult, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = PromoteReadReplicaResult::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "DBInstance" => {
                            obj.db_instance =
                                Some(try!(DBInstanceDeserializer::deserialize("DBInstance",
                                                                              stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct PurchaseReservedDBInstancesOfferingMessage {
    #[doc="<p>The number of instances to reserve.</p> <p>Default: <code>1</code> </p>"]
    pub db_instance_count: Option<i64>,
    #[doc="<p>Customer-specified identifier to track this reservation.</p> <p>Example: myreservationID</p>"]
    pub reserved_db_instance_id: Option<String>,
    #[doc="<p>The ID of the Reserved DB instance offering to purchase.</p> <p>Example: 438012d3-4052-4cc7-b2e3-8d3372e0e706</p>"]
    pub reserved_db_instances_offering_id: String,
    pub tags: Option<Vec<Tag>>,
}


/// Serialize `PurchaseReservedDBInstancesOfferingMessage` contents to a `SignedRequest`.
struct PurchaseReservedDBInstancesOfferingMessageSerializer;
impl PurchaseReservedDBInstancesOfferingMessageSerializer {
    fn serialize(params: &mut Params,
                 name: &str,
                 obj: &PurchaseReservedDBInstancesOfferingMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.db_instance_count {
            params.put(&format!("{}{}", prefix, "DBInstanceCount"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.reserved_db_instance_id {
            params.put(&format!("{}{}", prefix, "ReservedDBInstanceId"),
                       &field_value.replace("+", "%2B"));
        }
        params.put(&format!("{}{}", prefix, "ReservedDBInstancesOfferingId"),
                   &obj.reserved_db_instances_offering_id.replace("+", "%2B"));
        if let Some(ref field_value) = obj.tags {
            TagListSerializer::serialize(params, &format!("{}{}", prefix, "Tags"), field_value);
        }

    }
}

#[derive(Default,Debug,Clone)]
pub struct PurchaseReservedDBInstancesOfferingResult {
    pub reserved_db_instance: Option<ReservedDBInstance>,
}

struct PurchaseReservedDBInstancesOfferingResultDeserializer;
impl PurchaseReservedDBInstancesOfferingResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>
        (tag_name: &str,
         stack: &mut T)
         -> Result<PurchaseReservedDBInstancesOfferingResult, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = PurchaseReservedDBInstancesOfferingResult::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "ReservedDBInstance" => {
                            obj.reserved_db_instance =
                                Some(try!(ReservedDBInstanceDeserializer::deserialize("ReservedDBInstance",
                                                                                      stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct ReadReplicaDBClusterIdentifierListDeserializer;
impl ReadReplicaDBClusterIdentifierListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<String>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "ReadReplicaDBClusterIdentifier" {
                        obj.push(try!(StringDeserializer::deserialize("ReadReplicaDBClusterIdentifier", stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
struct ReadReplicaDBInstanceIdentifierListDeserializer;
impl ReadReplicaDBInstanceIdentifierListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<String>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "ReadReplicaDBInstanceIdentifier" {
                        obj.push(try!(StringDeserializer::deserialize("ReadReplicaDBInstanceIdentifier", stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
struct ReadReplicaIdentifierListDeserializer;
impl ReadReplicaIdentifierListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<String>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "ReadReplicaIdentifier" {
                        obj.push(try!(StringDeserializer::deserialize("ReadReplicaIdentifier",
                                                                      stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct RebootDBInstanceMessage {
    #[doc="<p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>"]
    pub db_instance_identifier: String,
    #[doc="<p> When <code>true</code>, the reboot will be conducted through a MultiAZ failover. </p> <p>Constraint: You cannot specify <code>true</code> if the instance is not configured for MultiAZ.</p>"]
    pub force_failover: Option<bool>,
}


/// Serialize `RebootDBInstanceMessage` contents to a `SignedRequest`.
struct RebootDBInstanceMessageSerializer;
impl RebootDBInstanceMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &RebootDBInstanceMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "DBInstanceIdentifier"),
                   &obj.db_instance_identifier.replace("+", "%2B"));
        if let Some(ref field_value) = obj.force_failover {
            params.put(&format!("{}{}", prefix, "ForceFailover"),
                       &field_value.to_string().replace("+", "%2B"));
        }

    }
}

#[derive(Default,Debug,Clone)]
pub struct RebootDBInstanceResult {
    pub db_instance: Option<DBInstance>,
}

struct RebootDBInstanceResultDeserializer;
impl RebootDBInstanceResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<RebootDBInstanceResult, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = RebootDBInstanceResult::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "DBInstance" => {
                            obj.db_instance =
                                Some(try!(DBInstanceDeserializer::deserialize("DBInstance",
                                                                              stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p> This data type is used as a response element in the <a>DescribeReservedDBInstances</a> and <a>DescribeReservedDBInstancesOfferings</a> actions. </p>"]
#[derive(Default,Debug,Clone)]
pub struct RecurringCharge {
    #[doc="<p>The amount of the recurring charge.</p>"]
    pub recurring_charge_amount: Option<f64>,
    #[doc="<p>The frequency of the recurring charge.</p>"]
    pub recurring_charge_frequency: Option<String>,
}

struct RecurringChargeDeserializer;
impl RecurringChargeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<RecurringCharge, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = RecurringCharge::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "RecurringChargeAmount" => {
                            obj.recurring_charge_amount =
                                Some(try!(DoubleDeserializer::deserialize("RecurringChargeAmount",
                                                                          stack)));
                        }
                        "RecurringChargeFrequency" => {
                            obj.recurring_charge_frequency =
                                Some(try!(StringDeserializer::deserialize("RecurringChargeFrequency",
                                                                          stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct RecurringChargeListDeserializer;
impl RecurringChargeListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<RecurringCharge>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "RecurringCharge" {
                        obj.push(try!(RecurringChargeDeserializer::deserialize("RecurringCharge",
                                                                               stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct RemoveRoleFromDBClusterMessage {
    #[doc="<p>The name of the DB cluster to disassociate the IAM role from.</p>"]
    pub db_cluster_identifier: String,
    #[doc="<p>The Amazon Resource Name (ARN) of the IAM role to disassociate from the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.</p>"]
    pub role_arn: String,
}


/// Serialize `RemoveRoleFromDBClusterMessage` contents to a `SignedRequest`.
struct RemoveRoleFromDBClusterMessageSerializer;
impl RemoveRoleFromDBClusterMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &RemoveRoleFromDBClusterMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "DBClusterIdentifier"),
                   &obj.db_cluster_identifier.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "RoleArn"),
                   &obj.role_arn.replace("+", "%2B"));

    }
}

#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct RemoveSourceIdentifierFromSubscriptionMessage {
    #[doc="<p> The source identifier to be removed from the subscription, such as the <b>DB instance identifier</b> for a DB instance or the name of a security group. </p>"]
    pub source_identifier: String,
    #[doc="<p>The name of the RDS event notification subscription you want to remove a source identifier from.</p>"]
    pub subscription_name: String,
}


/// Serialize `RemoveSourceIdentifierFromSubscriptionMessage` contents to a `SignedRequest`.
struct RemoveSourceIdentifierFromSubscriptionMessageSerializer;
impl RemoveSourceIdentifierFromSubscriptionMessageSerializer {
    fn serialize(params: &mut Params,
                 name: &str,
                 obj: &RemoveSourceIdentifierFromSubscriptionMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "SourceIdentifier"),
                   &obj.source_identifier.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "SubscriptionName"),
                   &obj.subscription_name.replace("+", "%2B"));

    }
}

#[derive(Default,Debug,Clone)]
pub struct RemoveSourceIdentifierFromSubscriptionResult {
    pub event_subscription: Option<EventSubscription>,
}

struct RemoveSourceIdentifierFromSubscriptionResultDeserializer;
impl RemoveSourceIdentifierFromSubscriptionResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>
        (tag_name: &str,
         stack: &mut T)
         -> Result<RemoveSourceIdentifierFromSubscriptionResult, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = RemoveSourceIdentifierFromSubscriptionResult::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "EventSubscription" => {
                            obj.event_subscription =
                                Some(try!(EventSubscriptionDeserializer::deserialize("EventSubscription",
                                                                                     stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct RemoveTagsFromResourceMessage {
    #[doc="<p>The Amazon RDS resource the tags will be removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing\"> Constructing an RDS Amazon Resource Name (ARN)</a>.</p>"]
    pub resource_name: String,
    #[doc="<p>The tag key (name) of the tag to be removed.</p>"]
    pub tag_keys: Vec<String>,
}


/// Serialize `RemoveTagsFromResourceMessage` contents to a `SignedRequest`.
struct RemoveTagsFromResourceMessageSerializer;
impl RemoveTagsFromResourceMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &RemoveTagsFromResourceMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "ResourceName"),
                   &obj.resource_name.replace("+", "%2B"));
        KeyListSerializer::serialize(params, &format!("{}{}", prefix, "TagKeys"), &obj.tag_keys);

    }
}

#[doc="<p> This data type is used as a response element in the <a>DescribeReservedDBInstances</a> and <a>PurchaseReservedDBInstancesOffering</a> actions. </p>"]
#[derive(Default,Debug,Clone)]
pub struct ReservedDBInstance {
    #[doc="<p>The currency code for the reserved DB instance.</p>"]
    pub currency_code: Option<String>,
    #[doc="<p>The DB instance class for the reserved DB instance.</p>"]
    pub db_instance_class: Option<String>,
    #[doc="<p>The number of reserved DB instances.</p>"]
    pub db_instance_count: Option<i64>,
    #[doc="<p>The duration of the reservation in seconds.</p>"]
    pub duration: Option<i64>,
    #[doc="<p>The fixed price charged for this reserved DB instance.</p>"]
    pub fixed_price: Option<f64>,
    #[doc="<p>Indicates if the reservation applies to Multi-AZ deployments.</p>"]
    pub multi_az: Option<bool>,
    #[doc="<p>The offering type of this reserved DB instance.</p>"]
    pub offering_type: Option<String>,
    #[doc="<p>The description of the reserved DB instance.</p>"]
    pub product_description: Option<String>,
    #[doc="<p>The recurring price charged to run this reserved DB instance.</p>"]
    pub recurring_charges: Option<Vec<RecurringCharge>>,
    #[doc="<p>The Amazon Resource Name (ARN) for the reserved DB instance.</p>"]
    pub reserved_db_instance_arn: Option<String>,
    #[doc="<p>The unique identifier for the reservation.</p>"]
    pub reserved_db_instance_id: Option<String>,
    #[doc="<p>The offering identifier.</p>"]
    pub reserved_db_instances_offering_id: Option<String>,
    #[doc="<p>The time the reservation started.</p>"]
    pub start_time: Option<String>,
    #[doc="<p>The state of the reserved DB instance.</p>"]
    pub state: Option<String>,
    #[doc="<p>The hourly price charged for this reserved DB instance.</p>"]
    pub usage_price: Option<f64>,
}

struct ReservedDBInstanceDeserializer;
impl ReservedDBInstanceDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<ReservedDBInstance, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = ReservedDBInstance::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "CurrencyCode" => {
                            obj.currency_code = Some(try!(StringDeserializer::deserialize("CurrencyCode",
                                                                                          stack)));
                        }
                        "DBInstanceClass" => {
                            obj.db_instance_class =
                                Some(try!(StringDeserializer::deserialize("DBInstanceClass",
                                                                          stack)));
                        }
                        "DBInstanceCount" => {
                            obj.db_instance_count =
                                Some(try!(IntegerDeserializer::deserialize("DBInstanceCount",
                                                                           stack)));
                        }
                        "Duration" => {
                            obj.duration = Some(try!(IntegerDeserializer::deserialize("Duration",
                                                                                      stack)));
                        }
                        "FixedPrice" => {
                            obj.fixed_price = Some(try!(DoubleDeserializer::deserialize("FixedPrice",
                                                                                        stack)));
                        }
                        "MultiAZ" => {
                            obj.multi_az = Some(try!(BooleanDeserializer::deserialize("MultiAZ",
                                                                                      stack)));
                        }
                        "OfferingType" => {
                            obj.offering_type = Some(try!(StringDeserializer::deserialize("OfferingType",
                                                                                          stack)));
                        }
                        "ProductDescription" => {
                            obj.product_description =
                                Some(try!(StringDeserializer::deserialize("ProductDescription",
                                                                          stack)));
                        }
                        "RecurringCharges" => {
                            obj.recurring_charges =
                                Some(try!(RecurringChargeListDeserializer::deserialize("RecurringCharges",
                                                                                       stack)));
                        }
                        "ReservedDBInstanceArn" => {
                            obj.reserved_db_instance_arn =
                                Some(try!(StringDeserializer::deserialize("ReservedDBInstanceArn",
                                                                          stack)));
                        }
                        "ReservedDBInstanceId" => {
                            obj.reserved_db_instance_id =
                                Some(try!(StringDeserializer::deserialize("ReservedDBInstanceId",
                                                                          stack)));
                        }
                        "ReservedDBInstancesOfferingId" => {
                            obj.reserved_db_instances_offering_id =
                                Some(try!(StringDeserializer::deserialize("ReservedDBInstancesOfferingId",
                                                                          stack)));
                        }
                        "StartTime" => {
                            obj.start_time = Some(try!(TStampDeserializer::deserialize("StartTime",
                                                                                       stack)));
                        }
                        "State" => {
                            obj.state = Some(try!(StringDeserializer::deserialize("State", stack)));
                        }
                        "UsagePrice" => {
                            obj.usage_price = Some(try!(DoubleDeserializer::deserialize("UsagePrice",
                                                                                        stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct ReservedDBInstanceListDeserializer;
impl ReservedDBInstanceListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<ReservedDBInstance>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "ReservedDBInstance" {
                        obj.push(try!(ReservedDBInstanceDeserializer::deserialize("ReservedDBInstance", stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
#[doc="<p> Contains the result of a successful invocation of the <a>DescribeReservedDBInstances</a> action. </p>"]
#[derive(Default,Debug,Clone)]
pub struct ReservedDBInstanceMessage {
    #[doc="<p> An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>"]
    pub marker: Option<String>,
    #[doc="<p>A list of reserved DB instances.</p>"]
    pub reserved_db_instances: Option<Vec<ReservedDBInstance>>,
}

struct ReservedDBInstanceMessageDeserializer;
impl ReservedDBInstanceMessageDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<ReservedDBInstanceMessage, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = ReservedDBInstanceMessage::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "Marker" => {
                            obj.marker = Some(try!(StringDeserializer::deserialize("Marker",
                                                                                   stack)));
                        }
                        "ReservedDBInstances" => {
                            obj.reserved_db_instances =
                                Some(try!(ReservedDBInstanceListDeserializer::deserialize("ReservedDBInstances",
                                                                                          stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p> This data type is used as a response element in the <a>DescribeReservedDBInstancesOfferings</a> action. </p>"]
#[derive(Default,Debug,Clone)]
pub struct ReservedDBInstancesOffering {
    #[doc="<p>The currency code for the reserved DB instance offering.</p>"]
    pub currency_code: Option<String>,
    #[doc="<p>The DB instance class for the reserved DB instance.</p>"]
    pub db_instance_class: Option<String>,
    #[doc="<p>The duration of the offering in seconds.</p>"]
    pub duration: Option<i64>,
    #[doc="<p>The fixed price charged for this offering.</p>"]
    pub fixed_price: Option<f64>,
    #[doc="<p>Indicates if the offering applies to Multi-AZ deployments.</p>"]
    pub multi_az: Option<bool>,
    #[doc="<p>The offering type.</p>"]
    pub offering_type: Option<String>,
    #[doc="<p>The database engine used by the offering.</p>"]
    pub product_description: Option<String>,
    #[doc="<p>The recurring price charged to run this reserved DB instance.</p>"]
    pub recurring_charges: Option<Vec<RecurringCharge>>,
    #[doc="<p>The offering identifier.</p>"]
    pub reserved_db_instances_offering_id: Option<String>,
    #[doc="<p>The hourly price charged for this offering.</p>"]
    pub usage_price: Option<f64>,
}

struct ReservedDBInstancesOfferingDeserializer;
impl ReservedDBInstancesOfferingDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<ReservedDBInstancesOffering, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = ReservedDBInstancesOffering::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "CurrencyCode" => {
                            obj.currency_code = Some(try!(StringDeserializer::deserialize("CurrencyCode",
                                                                                          stack)));
                        }
                        "DBInstanceClass" => {
                            obj.db_instance_class =
                                Some(try!(StringDeserializer::deserialize("DBInstanceClass",
                                                                          stack)));
                        }
                        "Duration" => {
                            obj.duration = Some(try!(IntegerDeserializer::deserialize("Duration",
                                                                                      stack)));
                        }
                        "FixedPrice" => {
                            obj.fixed_price = Some(try!(DoubleDeserializer::deserialize("FixedPrice",
                                                                                        stack)));
                        }
                        "MultiAZ" => {
                            obj.multi_az = Some(try!(BooleanDeserializer::deserialize("MultiAZ",
                                                                                      stack)));
                        }
                        "OfferingType" => {
                            obj.offering_type = Some(try!(StringDeserializer::deserialize("OfferingType",
                                                                                          stack)));
                        }
                        "ProductDescription" => {
                            obj.product_description =
                                Some(try!(StringDeserializer::deserialize("ProductDescription",
                                                                          stack)));
                        }
                        "RecurringCharges" => {
                            obj.recurring_charges =
                                Some(try!(RecurringChargeListDeserializer::deserialize("RecurringCharges",
                                                                                       stack)));
                        }
                        "ReservedDBInstancesOfferingId" => {
                            obj.reserved_db_instances_offering_id =
                                Some(try!(StringDeserializer::deserialize("ReservedDBInstancesOfferingId",
                                                                          stack)));
                        }
                        "UsagePrice" => {
                            obj.usage_price = Some(try!(DoubleDeserializer::deserialize("UsagePrice",
                                                                                        stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct ReservedDBInstancesOfferingListDeserializer;
impl ReservedDBInstancesOfferingListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>
        (tag_name: &str,
         stack: &mut T)
         -> Result<Vec<ReservedDBInstancesOffering>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "ReservedDBInstancesOffering" {
                        obj.push(try!(ReservedDBInstancesOfferingDeserializer::deserialize("ReservedDBInstancesOffering", stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
#[doc="<p> Contains the result of a successful invocation of the <a>DescribeReservedDBInstancesOfferings</a> action. </p>"]
#[derive(Default,Debug,Clone)]
pub struct ReservedDBInstancesOfferingMessage {
    #[doc="<p> An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>"]
    pub marker: Option<String>,
    #[doc="<p>A list of reserved DB instance offerings.</p>"]
    pub reserved_db_instances_offerings: Option<Vec<ReservedDBInstancesOffering>>,
}

struct ReservedDBInstancesOfferingMessageDeserializer;
impl ReservedDBInstancesOfferingMessageDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>
        (tag_name: &str,
         stack: &mut T)
         -> Result<ReservedDBInstancesOfferingMessage, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = ReservedDBInstancesOfferingMessage::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "Marker" => {
                            obj.marker = Some(try!(StringDeserializer::deserialize("Marker",
                                                                                   stack)));
                        }
                        "ReservedDBInstancesOfferings" => {
                            obj.reserved_db_instances_offerings = Some(try!(ReservedDBInstancesOfferingListDeserializer::deserialize("ReservedDBInstancesOfferings", stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct ResetDBClusterParameterGroupMessage {
    #[doc="<p>The name of the DB cluster parameter group to reset.</p>"]
    pub db_cluster_parameter_group_name: String,
    #[doc="<p>A list of parameter names in the DB cluster parameter group to reset to the default values. You cannot use this parameter if the <code>ResetAllParameters</code> parameter is set to <code>true</code>.</p>"]
    pub parameters: Option<Vec<Parameter>>,
    #[doc="<p>A value that is set to <code>true</code> to reset all parameters in the DB cluster parameter group to their default values, and <code>false</code> otherwise. You cannot use this parameter if there is a list of parameter names specified for the <code>Parameters</code> parameter.</p>"]
    pub reset_all_parameters: Option<bool>,
}


/// Serialize `ResetDBClusterParameterGroupMessage` contents to a `SignedRequest`.
struct ResetDBClusterParameterGroupMessageSerializer;
impl ResetDBClusterParameterGroupMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ResetDBClusterParameterGroupMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "DBClusterParameterGroupName"),
                   &obj.db_cluster_parameter_group_name.replace("+", "%2B"));
        if let Some(ref field_value) = obj.parameters {
            ParametersListSerializer::serialize(params,
                                                &format!("{}{}", prefix, "Parameters"),
                                                field_value);
        }
        if let Some(ref field_value) = obj.reset_all_parameters {
            params.put(&format!("{}{}", prefix, "ResetAllParameters"),
                       &field_value.to_string().replace("+", "%2B"));
        }

    }
}

#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct ResetDBParameterGroupMessage {
    #[doc="<p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>"]
    pub db_parameter_group_name: String,
    #[doc="<p>To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <p> <b>MySQL</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>MariaDB</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>Oracle</b> </p> <p>Valid Values (for Apply method): <code>pending-reboot</code> </p>"]
    pub parameters: Option<Vec<Parameter>>,
    #[doc="<p> Specifies whether (<code>true</code>) or not (<code>false</code>) to reset all parameters in the DB parameter group to default values. </p> <p>Default: <code>true</code> </p>"]
    pub reset_all_parameters: Option<bool>,
}


/// Serialize `ResetDBParameterGroupMessage` contents to a `SignedRequest`.
struct ResetDBParameterGroupMessageSerializer;
impl ResetDBParameterGroupMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ResetDBParameterGroupMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "DBParameterGroupName"),
                   &obj.db_parameter_group_name.replace("+", "%2B"));
        if let Some(ref field_value) = obj.parameters {
            ParametersListSerializer::serialize(params,
                                                &format!("{}{}", prefix, "Parameters"),
                                                field_value);
        }
        if let Some(ref field_value) = obj.reset_all_parameters {
            params.put(&format!("{}{}", prefix, "ResetAllParameters"),
                       &field_value.to_string().replace("+", "%2B"));
        }

    }
}

#[doc="<p>Describes the pending maintenance actions for a resource.</p>"]
#[derive(Default,Debug,Clone)]
pub struct ResourcePendingMaintenanceActions {
    #[doc="<p>A list that provides details about the pending maintenance actions for the resource.</p>"]
    pub pending_maintenance_action_details: Option<Vec<PendingMaintenanceAction>>,
    #[doc="<p>The ARN of the resource that has pending maintenance actions.</p>"]
    pub resource_identifier: Option<String>,
}

struct ResourcePendingMaintenanceActionsDeserializer;
impl ResourcePendingMaintenanceActionsDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>
        (tag_name: &str,
         stack: &mut T)
         -> Result<ResourcePendingMaintenanceActions, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = ResourcePendingMaintenanceActions::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "PendingMaintenanceActionDetails" => {
                            obj.pending_maintenance_action_details = Some(try!(PendingMaintenanceActionDetailsDeserializer::deserialize("PendingMaintenanceActionDetails", stack)));
                        }
                        "ResourceIdentifier" => {
                            obj.resource_identifier =
                                Some(try!(StringDeserializer::deserialize("ResourceIdentifier",
                                                                          stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct RestoreDBClusterFromS3Message {
    #[doc="<p>A list of EC2 Availability Zones that instances in the restored DB cluster can be created in.</p>"]
    pub availability_zones: Option<Vec<String>>,
    #[doc="<p>The number of days for which automated backups of the restored DB cluster are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>"]
    pub backup_retention_period: Option<i64>,
    #[doc="<p>A value that indicates that the restored DB cluster should be associated with the specified CharacterSet.</p>"]
    pub character_set_name: Option<String>,
    #[doc="<p>The name of the DB cluster to create from the source data in the S3 bucket. This parameter is isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>"]
    pub db_cluster_identifier: String,
    #[doc="<p>The name of the DB cluster parameter group to associate with the restored DB cluster. If this argument is omitted, <code>default.aurora5.6</code> will be used. </p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>"]
    pub db_cluster_parameter_group_name: Option<String>,
    #[doc="<p>A DB subnet group to associate with the restored DB cluster.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>"]
    pub db_subnet_group_name: Option<String>,
    #[doc="<p>The database name for the restored DB cluster.</p>"]
    pub database_name: Option<String>,
    #[doc="<p>A Boolean value that is true to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>"]
    pub enable_iam_database_authentication: Option<bool>,
    #[doc="<p>The name of the database engine to be used for the restored DB cluster.</p> <p>Valid Values: <code>aurora</code> </p>"]
    pub engine: String,
    #[doc="<p>The version number of the database engine to use.</p> <p> <b>Aurora</b> </p> <p>Example: <code>5.6.10a</code> </p>"]
    pub engine_version: Option<String>,
    #[doc="<p>The KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p>If the <code>StorageEncrypted</code> parameter is true, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>"]
    pub kms_key_id: Option<String>,
    #[doc="<p>The password for the master database user. This password can contain any printable ASCII character except \"/\", \"\"\", or \"@\".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>"]
    pub master_user_password: String,
    #[doc="<p>The name of the master user for the restored DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 alphanumeric characters.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot be a reserved word for the chosen database engine.</p> </li> </ul>"]
    pub master_username: String,
    #[doc="<p>A value that indicates that the restored DB cluster should be associated with the specified option group.</p> <p>Permanent options cannot be removed from an option group. An option group cannot be removed from a DB cluster once it is associated with a DB cluster.</p>"]
    pub option_group_name: Option<String>,
    #[doc="<p>The port number on which the instances in the restored DB cluster accept connections.</p> <p> Default: <code>3306</code> </p>"]
    pub port: Option<i64>,
    #[doc="<p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>Default: A 30-minute window selected at random from an 8-hour block of time per AWS Region. To see the time blocks available, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html\"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Times should be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>"]
    pub preferred_backup_window: Option<String>,
    #[doc="<p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>Default: A 30-minute window selected at random from an 8-hour block of time per AWS Region, occurring on a random day of the week. To see the time blocks available, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html\"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun</p> <p>Constraints: Minimum 30-minute window.</p>"]
    pub preferred_maintenance_window: Option<String>,
    #[doc="<p>The name of the Amazon S3 bucket that contains the data used to create the Amazon Aurora DB cluster.</p>"]
    pub s3_bucket_name: String,
    #[doc="<p>The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that authorizes Amazon RDS to access the Amazon S3 bucket on your behalf.</p>"]
    pub s3_ingestion_role_arn: String,
    #[doc="<p>The prefix for all of the file names that contain the data used to create the Amazon Aurora DB cluster. If you do not specify a <b>SourceS3Prefix</b> value, then the Amazon Aurora DB cluster is created by using all of the files in the Amazon S3 bucket.</p>"]
    pub s3_prefix: Option<String>,
    #[doc="<p>The identifier for the database engine that was backed up to create the files stored in the Amazon S3 bucket. </p> <p>Valid values: <code>mysql</code> </p>"]
    pub source_engine: String,
    #[doc="<p>The version of the database that the backup files were created from.</p> <p>MySQL version 5.5 and 5.6 are supported. </p> <p>Example: <code>5.6.22</code> </p>"]
    pub source_engine_version: String,
    #[doc="<p>Specifies whether the restored DB cluster is encrypted.</p>"]
    pub storage_encrypted: Option<bool>,
    pub tags: Option<Vec<Tag>>,
    #[doc="<p>A list of EC2 VPC security groups to associate with the restored DB cluster.</p>"]
    pub vpc_security_group_ids: Option<Vec<String>>,
}


/// Serialize `RestoreDBClusterFromS3Message` contents to a `SignedRequest`.
struct RestoreDBClusterFromS3MessageSerializer;
impl RestoreDBClusterFromS3MessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &RestoreDBClusterFromS3Message) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.availability_zones {
            AvailabilityZonesSerializer::serialize(params,
                                                   &format!("{}{}", prefix, "AvailabilityZones"),
                                                   field_value);
        }
        if let Some(ref field_value) = obj.backup_retention_period {
            params.put(&format!("{}{}", prefix, "BackupRetentionPeriod"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.character_set_name {
            params.put(&format!("{}{}", prefix, "CharacterSetName"),
                       &field_value.replace("+", "%2B"));
        }
        params.put(&format!("{}{}", prefix, "DBClusterIdentifier"),
                   &obj.db_cluster_identifier.replace("+", "%2B"));
        if let Some(ref field_value) = obj.db_cluster_parameter_group_name {
            params.put(&format!("{}{}", prefix, "DBClusterParameterGroupName"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.db_subnet_group_name {
            params.put(&format!("{}{}", prefix, "DBSubnetGroupName"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.database_name {
            params.put(&format!("{}{}", prefix, "DatabaseName"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.enable_iam_database_authentication {
            params.put(&format!("{}{}", prefix, "EnableIAMDatabaseAuthentication"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        params.put(&format!("{}{}", prefix, "Engine"),
                   &obj.engine.replace("+", "%2B"));
        if let Some(ref field_value) = obj.engine_version {
            params.put(&format!("{}{}", prefix, "EngineVersion"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.kms_key_id {
            params.put(&format!("{}{}", prefix, "KmsKeyId"),
                       &field_value.replace("+", "%2B"));
        }
        params.put(&format!("{}{}", prefix, "MasterUserPassword"),
                   &obj.master_user_password.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "MasterUsername"),
                   &obj.master_username.replace("+", "%2B"));
        if let Some(ref field_value) = obj.option_group_name {
            params.put(&format!("{}{}", prefix, "OptionGroupName"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.port {
            params.put(&format!("{}{}", prefix, "Port"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.preferred_backup_window {
            params.put(&format!("{}{}", prefix, "PreferredBackupWindow"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.preferred_maintenance_window {
            params.put(&format!("{}{}", prefix, "PreferredMaintenanceWindow"),
                       &field_value.replace("+", "%2B"));
        }
        params.put(&format!("{}{}", prefix, "S3BucketName"),
                   &obj.s3_bucket_name.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "S3IngestionRoleArn"),
                   &obj.s3_ingestion_role_arn.replace("+", "%2B"));
        if let Some(ref field_value) = obj.s3_prefix {
            params.put(&format!("{}{}", prefix, "S3Prefix"),
                       &field_value.replace("+", "%2B"));
        }
        params.put(&format!("{}{}", prefix, "SourceEngine"),
                   &obj.source_engine.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "SourceEngineVersion"),
                   &obj.source_engine_version.replace("+", "%2B"));
        if let Some(ref field_value) = obj.storage_encrypted {
            params.put(&format!("{}{}", prefix, "StorageEncrypted"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.tags {
            TagListSerializer::serialize(params, &format!("{}{}", prefix, "Tags"), field_value);
        }
        if let Some(ref field_value) = obj.vpc_security_group_ids {
            VpcSecurityGroupIdListSerializer::serialize(params,
                                                        &format!("{}{}",
                                                                prefix,
                                                                "VpcSecurityGroupIds"),
                                                        field_value);
        }

    }
}

#[derive(Default,Debug,Clone)]
pub struct RestoreDBClusterFromS3Result {
    pub db_cluster: Option<DBCluster>,
}

struct RestoreDBClusterFromS3ResultDeserializer;
impl RestoreDBClusterFromS3ResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<RestoreDBClusterFromS3Result, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = RestoreDBClusterFromS3Result::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "DBCluster" => {
                            obj.db_cluster = Some(try!(DBClusterDeserializer::deserialize("DBCluster",
                                                                                          stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct RestoreDBClusterFromSnapshotMessage {
    #[doc="<p>Provides the list of EC2 Availability Zones that instances in the restored DB cluster can be created in.</p>"]
    pub availability_zones: Option<Vec<String>>,
    #[doc="<p>The name of the DB cluster to create from the DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 255 alphanumeric characters or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>"]
    pub db_cluster_identifier: String,
    #[doc="<p>The name of the DB subnet group to use for the new DB cluster.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>"]
    pub db_subnet_group_name: Option<String>,
    #[doc="<p>The database name for the restored DB cluster.</p>"]
    pub database_name: Option<String>,
    #[doc="<p>A Boolean value that is true to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>"]
    pub enable_iam_database_authentication: Option<bool>,
    #[doc="<p>The database engine to use for the new DB cluster.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p>"]
    pub engine: String,
    #[doc="<p>The version of the database engine to use for the new DB cluster.</p>"]
    pub engine_version: Option<String>,
    #[doc="<p>The KMS key identifier to use when restoring an encrypted DB cluster from a DB cluster snapshot.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If you do not specify a value for the <code>KmsKeyId</code> parameter, then the following will occur:</p> <ul> <li> <p>If the DB cluster snapshot is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB cluster snapshot.</p> </li> <li> <p>If the DB cluster snapshot is not encrypted, then the restored DB cluster is encrypted using the specified encryption key.</p> </li> </ul>"]
    pub kms_key_id: Option<String>,
    #[doc="<p>The name of the option group to use for the restored DB cluster.</p>"]
    pub option_group_name: Option<String>,
    #[doc="<p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>"]
    pub port: Option<i64>,
    #[doc="<p>The identifier for the DB cluster snapshot to restore from.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>"]
    pub snapshot_identifier: String,
    #[doc="<p>The tags to be assigned to the restored DB cluster.</p>"]
    pub tags: Option<Vec<Tag>>,
    #[doc="<p>A list of VPC security groups that the new DB cluster will belong to.</p>"]
    pub vpc_security_group_ids: Option<Vec<String>>,
}


/// Serialize `RestoreDBClusterFromSnapshotMessage` contents to a `SignedRequest`.
struct RestoreDBClusterFromSnapshotMessageSerializer;
impl RestoreDBClusterFromSnapshotMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &RestoreDBClusterFromSnapshotMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.availability_zones {
            AvailabilityZonesSerializer::serialize(params,
                                                   &format!("{}{}", prefix, "AvailabilityZones"),
                                                   field_value);
        }
        params.put(&format!("{}{}", prefix, "DBClusterIdentifier"),
                   &obj.db_cluster_identifier.replace("+", "%2B"));
        if let Some(ref field_value) = obj.db_subnet_group_name {
            params.put(&format!("{}{}", prefix, "DBSubnetGroupName"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.database_name {
            params.put(&format!("{}{}", prefix, "DatabaseName"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.enable_iam_database_authentication {
            params.put(&format!("{}{}", prefix, "EnableIAMDatabaseAuthentication"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        params.put(&format!("{}{}", prefix, "Engine"),
                   &obj.engine.replace("+", "%2B"));
        if let Some(ref field_value) = obj.engine_version {
            params.put(&format!("{}{}", prefix, "EngineVersion"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.kms_key_id {
            params.put(&format!("{}{}", prefix, "KmsKeyId"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.option_group_name {
            params.put(&format!("{}{}", prefix, "OptionGroupName"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.port {
            params.put(&format!("{}{}", prefix, "Port"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        params.put(&format!("{}{}", prefix, "SnapshotIdentifier"),
                   &obj.snapshot_identifier.replace("+", "%2B"));
        if let Some(ref field_value) = obj.tags {
            TagListSerializer::serialize(params, &format!("{}{}", prefix, "Tags"), field_value);
        }
        if let Some(ref field_value) = obj.vpc_security_group_ids {
            VpcSecurityGroupIdListSerializer::serialize(params,
                                                        &format!("{}{}",
                                                                prefix,
                                                                "VpcSecurityGroupIds"),
                                                        field_value);
        }

    }
}

#[derive(Default,Debug,Clone)]
pub struct RestoreDBClusterFromSnapshotResult {
    pub db_cluster: Option<DBCluster>,
}

struct RestoreDBClusterFromSnapshotResultDeserializer;
impl RestoreDBClusterFromSnapshotResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>
        (tag_name: &str,
         stack: &mut T)
         -> Result<RestoreDBClusterFromSnapshotResult, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = RestoreDBClusterFromSnapshotResult::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "DBCluster" => {
                            obj.db_cluster = Some(try!(DBClusterDeserializer::deserialize("DBCluster",
                                                                                          stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct RestoreDBClusterToPointInTimeMessage {
    #[doc="<p>The name of the new DB cluster to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>"]
    pub db_cluster_identifier: String,
    #[doc="<p>The DB subnet group name to use for the new DB cluster.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>"]
    pub db_subnet_group_name: Option<String>,
    #[doc="<p>A Boolean value that is true to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>"]
    pub enable_iam_database_authentication: Option<bool>,
    #[doc="<p>The KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different than the KMS key used to encrypt the source DB cluster. The new DB cluster will be encrypted with the KMS key identified by the <code>KmsKeyId</code> parameter.</p> <p>If you do not specify a value for the <code>KmsKeyId</code> parameter, then the following will occur:</p> <ul> <li> <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.</p> </li> <li> <p>If the DB cluster is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul> <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that is not encrypted, then the restore request is rejected.</p>"]
    pub kms_key_id: Option<String>,
    #[doc="<p>The name of the option group for the new DB cluster.</p>"]
    pub option_group_name: Option<String>,
    #[doc="<p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>"]
    pub port: Option<i64>,
    #[doc="<p>The date and time to restore the DB cluster to.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Must be specified if <code>UseLatestRestorableTime</code> parameter is not provided</p> </li> <li> <p>Cannot be specified if <code>UseLatestRestorableTime</code> parameter is true</p> </li> <li> <p>Cannot be specified if <code>RestoreType</code> parameter is <code>copy-on-write</code> </p> </li> </ul> <p>Example: <code>2015-03-07T23:45:00Z</code> </p>"]
    pub restore_to_time: Option<String>,
    #[doc="<p>The type of restore to be performed. You can specify one of the following values:</p> <ul> <li> <p> <code>full-copy</code> - The new DB cluster is restored as a full copy of the source DB cluster.</p> </li> <li> <p> <code>copy-on-write</code> - The new DB cluster is restored as a clone of the source DB cluster.</p> </li> </ul> <p>Constraints: You cannot specify <code>copy-on-write</code> if the engine version of the source DB cluster is earlier than 1.11.</p> <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is restored as a full copy of the source DB cluster.</p>"]
    pub restore_type: Option<String>,
    #[doc="<p>The identifier of the source DB cluster from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must be the identifier of an existing database instance</p> </li> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>"]
    pub source_db_cluster_identifier: String,
    pub tags: Option<Vec<Tag>>,
    #[doc="<p>A value that is set to <code>true</code> to restore the DB cluster to the latest restorable backup time, and <code>false</code> otherwise. </p> <p>Default: <code>false</code> </p> <p>Constraints: Cannot be specified if <code>RestoreToTime</code> parameter is provided.</p>"]
    pub use_latest_restorable_time: Option<bool>,
    #[doc="<p>A list of VPC security groups that the new DB cluster belongs to.</p>"]
    pub vpc_security_group_ids: Option<Vec<String>>,
}


/// Serialize `RestoreDBClusterToPointInTimeMessage` contents to a `SignedRequest`.
struct RestoreDBClusterToPointInTimeMessageSerializer;
impl RestoreDBClusterToPointInTimeMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &RestoreDBClusterToPointInTimeMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "DBClusterIdentifier"),
                   &obj.db_cluster_identifier.replace("+", "%2B"));
        if let Some(ref field_value) = obj.db_subnet_group_name {
            params.put(&format!("{}{}", prefix, "DBSubnetGroupName"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.enable_iam_database_authentication {
            params.put(&format!("{}{}", prefix, "EnableIAMDatabaseAuthentication"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.kms_key_id {
            params.put(&format!("{}{}", prefix, "KmsKeyId"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.option_group_name {
            params.put(&format!("{}{}", prefix, "OptionGroupName"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.port {
            params.put(&format!("{}{}", prefix, "Port"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.restore_to_time {
            params.put(&format!("{}{}", prefix, "RestoreToTime"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.restore_type {
            params.put(&format!("{}{}", prefix, "RestoreType"),
                       &field_value.replace("+", "%2B"));
        }
        params.put(&format!("{}{}", prefix, "SourceDBClusterIdentifier"),
                   &obj.source_db_cluster_identifier.replace("+", "%2B"));
        if let Some(ref field_value) = obj.tags {
            TagListSerializer::serialize(params, &format!("{}{}", prefix, "Tags"), field_value);
        }
        if let Some(ref field_value) = obj.use_latest_restorable_time {
            params.put(&format!("{}{}", prefix, "UseLatestRestorableTime"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.vpc_security_group_ids {
            VpcSecurityGroupIdListSerializer::serialize(params,
                                                        &format!("{}{}",
                                                                prefix,
                                                                "VpcSecurityGroupIds"),
                                                        field_value);
        }

    }
}

#[derive(Default,Debug,Clone)]
pub struct RestoreDBClusterToPointInTimeResult {
    pub db_cluster: Option<DBCluster>,
}

struct RestoreDBClusterToPointInTimeResultDeserializer;
impl RestoreDBClusterToPointInTimeResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>
        (tag_name: &str,
         stack: &mut T)
         -> Result<RestoreDBClusterToPointInTimeResult, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = RestoreDBClusterToPointInTimeResult::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "DBCluster" => {
                            obj.db_cluster = Some(try!(DBClusterDeserializer::deserialize("DBCluster",
                                                                                          stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct RestoreDBInstanceFromDBSnapshotMessage {
    #[doc="<p>Indicates that minor version upgrades will be applied automatically to the DB instance during the maintenance window.</p>"]
    pub auto_minor_version_upgrade: Option<bool>,
    #[doc="<p>The EC2 Availability Zone that the database instance will be created in.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You cannot specify the AvailabilityZone parameter if the MultiAZ parameter is set to <code>true</code>.</p> <p>Example: <code>us-east-1a</code> </p>"]
    pub availability_zone: Option<String>,
    #[doc="<p>True to copy all tags from the restored DB instance to snapshots of the DB instance; otherwise false. The default is false.</p>"]
    pub copy_tags_to_snapshot: Option<bool>,
    #[doc="<p>The compute and memory capacity of the Amazon RDS DB instance.</p> <p>Valid Values: <code>db.t1.micro | db.m1.small | db.m1.medium | db.m1.large | db.m1.xlarge | db.m2.2xlarge | db.m2.4xlarge | db.m3.medium | db.m3.large | db.m3.xlarge | db.m3.2xlarge | db.m4.large | db.m4.xlarge | db.m4.2xlarge | db.m4.4xlarge | db.m4.10xlarge | db.r3.large | db.r3.xlarge | db.r3.2xlarge | db.r3.4xlarge | db.r3.8xlarge | db.t2.micro | db.t2.small | db.t2.medium | db.t2.large</code> </p>"]
    pub db_instance_class: Option<String>,
    #[doc="<p>Name of the DB instance to create from the DB snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>"]
    pub db_instance_identifier: String,
    #[doc="<p>The database name for the restored DB instance.</p> <note> <p>This parameter doesn't apply to the MySQL, PostgreSQL, or MariaDB engines.</p> </note>"]
    pub db_name: Option<String>,
    #[doc="<p>The identifier for the DB snapshot to restore from.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 255 alphanumeric characters or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p>"]
    pub db_snapshot_identifier: String,
    #[doc="<p>The DB subnet group name to use for the new instance.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>"]
    pub db_subnet_group_name: Option<String>,
    #[doc="<p>Specify the Active Directory Domain to restore the instance in.</p>"]
    pub domain: Option<String>,
    #[doc="<p>Specify the name of the IAM role to be used when making API calls to the Directory Service.</p>"]
    pub domain_iam_role_name: Option<String>,
    #[doc="<p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts; otherwise false.</p> <p>You can enable IAM database authentication for the following database engines</p> <ul> <li> <p>For MySQL 5.6, minor version 5.6.34 or higher</p> </li> <li> <p>For MySQL 5.7, minor version 5.7.16 or higher</p> </li> <li> <p>Aurora 5.6 or higher.</p> </li> </ul> <p>Default: <code>false</code> </p>"]
    pub enable_iam_database_authentication: Option<bool>,
    #[doc="<p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source. You can restore a MariaDB 10.1 DB instance from a MySQL 5.6 snapshot.</p> <p> Valid Values: <code>MySQL</code> | <code>mariadb</code> | <code>oracle-se1</code> | <code>oracle-se</code> | <code>oracle-ee</code> | <code>sqlserver-ee</code> | <code>sqlserver-se</code> | <code>sqlserver-ex</code> | <code>sqlserver-web</code> | <code>postgres</code> | <code>aurora</code> </p>"]
    pub engine: Option<String>,
    #[doc="<p>Specifies the amount of provisioned IOPS for the DB instance, expressed in I/O operations per second. If this parameter is not specified, the IOPS value will be taken from the backup. If this parameter is set to 0, the new instance will be converted to a non-PIOPS instance, which will take additional time, though your DB instance will be available for connections before the conversion starts.</p> <p>Constraints: Must be an integer greater than 1000.</p> <p> <b>SQL Server</b> </p> <p>Setting the IOPS value for the SQL Server database engine is not supported.</p>"]
    pub iops: Option<i64>,
    #[doc="<p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>"]
    pub license_model: Option<String>,
    #[doc="<p>Specifies if the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You cannot specify the AvailabilityZone parameter if the MultiAZ parameter is set to <code>true</code>.</p>"]
    pub multi_az: Option<bool>,
    #[doc="<p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, cannot be removed from an option group, and that option group cannot be removed from a DB instance once it is associated with a DB instance</p>"]
    pub option_group_name: Option<String>,
    #[doc="<p>The port number on which the database accepts connections.</p> <p>Default: The same port as the original DB instance</p> <p>Constraints: Value must be <code>1150-65535</code> </p>"]
    pub port: Option<i64>,
    #[doc="<p>Specifies the accessibility options for the DB instance. A value of true specifies an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. A value of false specifies an internal instance with a DNS name that resolves to a private IP address.</p> <p>Default: The default behavior varies depending on whether a VPC has been requested or not. The following list shows the default behavior in each case.</p> <ul> <li> <p> <b>Default VPC:</b> true</p> </li> <li> <p> <b>VPC:</b> false</p> </li> </ul> <p>If no DB subnet group has been specified as part of the request and the PubliclyAccessible value has not been set, the DB instance will be publicly accessible. If a specific DB subnet group has been specified as part of the request and the PubliclyAccessible value has not been set, the DB instance will be private.</p>"]
    pub publicly_accessible: Option<bool>,
    #[doc="<p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified; otherwise <code>standard</code> </p>"]
    pub storage_type: Option<String>,
    pub tags: Option<Vec<Tag>>,
    #[doc="<p>The ARN from the Key Store with which to associate the instance for TDE encryption.</p>"]
    pub tde_credential_arn: Option<String>,
    #[doc="<p>The password for the given ARN from the Key Store in order to access the device.</p>"]
    pub tde_credential_password: Option<String>,
}


/// Serialize `RestoreDBInstanceFromDBSnapshotMessage` contents to a `SignedRequest`.
struct RestoreDBInstanceFromDBSnapshotMessageSerializer;
impl RestoreDBInstanceFromDBSnapshotMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &RestoreDBInstanceFromDBSnapshotMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.auto_minor_version_upgrade {
            params.put(&format!("{}{}", prefix, "AutoMinorVersionUpgrade"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.availability_zone {
            params.put(&format!("{}{}", prefix, "AvailabilityZone"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.copy_tags_to_snapshot {
            params.put(&format!("{}{}", prefix, "CopyTagsToSnapshot"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.db_instance_class {
            params.put(&format!("{}{}", prefix, "DBInstanceClass"),
                       &field_value.replace("+", "%2B"));
        }
        params.put(&format!("{}{}", prefix, "DBInstanceIdentifier"),
                   &obj.db_instance_identifier.replace("+", "%2B"));
        if let Some(ref field_value) = obj.db_name {
            params.put(&format!("{}{}", prefix, "DBName"),
                       &field_value.replace("+", "%2B"));
        }
        params.put(&format!("{}{}", prefix, "DBSnapshotIdentifier"),
                   &obj.db_snapshot_identifier.replace("+", "%2B"));
        if let Some(ref field_value) = obj.db_subnet_group_name {
            params.put(&format!("{}{}", prefix, "DBSubnetGroupName"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.domain {
            params.put(&format!("{}{}", prefix, "Domain"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.domain_iam_role_name {
            params.put(&format!("{}{}", prefix, "DomainIAMRoleName"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.enable_iam_database_authentication {
            params.put(&format!("{}{}", prefix, "EnableIAMDatabaseAuthentication"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.engine {
            params.put(&format!("{}{}", prefix, "Engine"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.iops {
            params.put(&format!("{}{}", prefix, "Iops"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.license_model {
            params.put(&format!("{}{}", prefix, "LicenseModel"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.multi_az {
            params.put(&format!("{}{}", prefix, "MultiAZ"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.option_group_name {
            params.put(&format!("{}{}", prefix, "OptionGroupName"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.port {
            params.put(&format!("{}{}", prefix, "Port"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.publicly_accessible {
            params.put(&format!("{}{}", prefix, "PubliclyAccessible"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.storage_type {
            params.put(&format!("{}{}", prefix, "StorageType"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.tags {
            TagListSerializer::serialize(params, &format!("{}{}", prefix, "Tags"), field_value);
        }
        if let Some(ref field_value) = obj.tde_credential_arn {
            params.put(&format!("{}{}", prefix, "TdeCredentialArn"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.tde_credential_password {
            params.put(&format!("{}{}", prefix, "TdeCredentialPassword"),
                       &field_value.replace("+", "%2B"));
        }

    }
}

#[derive(Default,Debug,Clone)]
pub struct RestoreDBInstanceFromDBSnapshotResult {
    pub db_instance: Option<DBInstance>,
}

struct RestoreDBInstanceFromDBSnapshotResultDeserializer;
impl RestoreDBInstanceFromDBSnapshotResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>
        (tag_name: &str,
         stack: &mut T)
         -> Result<RestoreDBInstanceFromDBSnapshotResult, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = RestoreDBInstanceFromDBSnapshotResult::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "DBInstance" => {
                            obj.db_instance =
                                Some(try!(DBInstanceDeserializer::deserialize("DBInstance",
                                                                              stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct RestoreDBInstanceToPointInTimeMessage {
    #[doc="<p>Indicates that minor version upgrades will be applied automatically to the DB instance during the maintenance window.</p>"]
    pub auto_minor_version_upgrade: Option<bool>,
    #[doc="<p>The EC2 Availability Zone that the database instance will be created in.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You cannot specify the AvailabilityZone parameter if the MultiAZ parameter is set to true.</p> <p>Example: <code>us-east-1a</code> </p>"]
    pub availability_zone: Option<String>,
    #[doc="<p>True to copy all tags from the restored DB instance to snapshots of the DB instance; otherwise false. The default is false.</p>"]
    pub copy_tags_to_snapshot: Option<bool>,
    #[doc="<p>The compute and memory capacity of the Amazon RDS DB instance.</p> <p>Valid Values: <code>db.t1.micro | db.m1.small | db.m1.medium | db.m1.large | db.m1.xlarge | db.m2.2xlarge | db.m2.4xlarge | db.m3.medium | db.m3.large | db.m3.xlarge | db.m3.2xlarge | db.m4.large | db.m4.xlarge | db.m4.2xlarge | db.m4.4xlarge | db.m4.10xlarge | db.r3.large | db.r3.xlarge | db.r3.2xlarge | db.r3.4xlarge | db.r3.8xlarge | db.t2.micro | db.t2.small | db.t2.medium | db.t2.large</code> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>"]
    pub db_instance_class: Option<String>,
    #[doc="<p>The database name for the restored DB instance.</p> <note> <p>This parameter is not used for the MySQL or MariaDB engines.</p> </note>"]
    pub db_name: Option<String>,
    #[doc="<p>The DB subnet group name to use for the new instance.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>"]
    pub db_subnet_group_name: Option<String>,
    #[doc="<p>Specify the Active Directory Domain to restore the instance in.</p>"]
    pub domain: Option<String>,
    #[doc="<p>Specify the name of the IAM role to be used when making API calls to the Directory Service.</p>"]
    pub domain_iam_role_name: Option<String>,
    #[doc="<p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts; otherwise false.</p> <p> You can enable IAM database authentication for the following database engines</p> <ul> <li> <p>For MySQL 5.6, minor version 5.6.34 or higher</p> </li> <li> <p>For MySQL 5.7, minor version 5.7.16 or higher</p> </li> <li> <p>Aurora 5.6 or higher.</p> </li> </ul> <p>Default: <code>false</code> </p>"]
    pub enable_iam_database_authentication: Option<bool>,
    #[doc="<p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p> <p> Valid Values: <code>MySQL</code> | <code>mariadb</code> | <code>oracle-se1</code> | <code>oracle-se</code> | <code>oracle-ee</code> | <code>sqlserver-ee</code> | <code>sqlserver-se</code> | <code>sqlserver-ex</code> | <code>sqlserver-web</code> | <code>postgres</code> | <code>aurora</code> </p>"]
    pub engine: Option<String>,
    #[doc="<p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.</p> <p>Constraints: Must be an integer greater than 1000.</p> <p> <b>SQL Server</b> </p> <p>Setting the IOPS value for the SQL Server database engine is not supported.</p>"]
    pub iops: Option<i64>,
    #[doc="<p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>"]
    pub license_model: Option<String>,
    #[doc="<p>Specifies if the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You cannot specify the AvailabilityZone parameter if the MultiAZ parameter is set to <code>true</code>.</p>"]
    pub multi_az: Option<bool>,
    #[doc="<p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, cannot be removed from an option group, and that option group cannot be removed from a DB instance once it is associated with a DB instance</p>"]
    pub option_group_name: Option<String>,
    #[doc="<p>The port number on which the database accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB instance.</p>"]
    pub port: Option<i64>,
    #[doc="<p>Specifies the accessibility options for the DB instance. A value of true specifies an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. A value of false specifies an internal instance with a DNS name that resolves to a private IP address.</p> <p>Default: The default behavior varies depending on whether a VPC has been requested or not. The following list shows the default behavior in each case.</p> <ul> <li> <p> <b>Default VPC:</b>true</p> </li> <li> <p> <b>VPC:</b>false</p> </li> </ul> <p>If no DB subnet group has been specified as part of the request and the PubliclyAccessible value has not been set, the DB instance will be publicly accessible. If a specific DB subnet group has been specified as part of the request and the PubliclyAccessible value has not been set, the DB instance will be private.</p>"]
    pub publicly_accessible: Option<bool>,
    #[doc="<p>The date and time to restore from.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Cannot be specified if UseLatestRestorableTime parameter is true</p> </li> </ul> <p>Example: <code>2009-09-07T23:45:00Z</code> </p>"]
    pub restore_time: Option<String>,
    #[doc="<p>The identifier of the source DB instance from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must be the identifier of an existing database instance</p> </li> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>"]
    pub source_db_instance_identifier: String,
    #[doc="<p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified; otherwise <code>standard</code> </p>"]
    pub storage_type: Option<String>,
    pub tags: Option<Vec<Tag>>,
    #[doc="<p>The name of the new database instance to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>"]
    pub target_db_instance_identifier: String,
    #[doc="<p>The ARN from the Key Store with which to associate the instance for TDE encryption.</p>"]
    pub tde_credential_arn: Option<String>,
    #[doc="<p>The password for the given ARN from the Key Store in order to access the device.</p>"]
    pub tde_credential_password: Option<String>,
    #[doc="<p> Specifies whether (<code>true</code>) or not (<code>false</code>) the DB instance is restored from the latest backup time. </p> <p>Default: <code>false</code> </p> <p>Constraints: Cannot be specified if RestoreTime parameter is provided.</p>"]
    pub use_latest_restorable_time: Option<bool>,
}


/// Serialize `RestoreDBInstanceToPointInTimeMessage` contents to a `SignedRequest`.
struct RestoreDBInstanceToPointInTimeMessageSerializer;
impl RestoreDBInstanceToPointInTimeMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &RestoreDBInstanceToPointInTimeMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.auto_minor_version_upgrade {
            params.put(&format!("{}{}", prefix, "AutoMinorVersionUpgrade"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.availability_zone {
            params.put(&format!("{}{}", prefix, "AvailabilityZone"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.copy_tags_to_snapshot {
            params.put(&format!("{}{}", prefix, "CopyTagsToSnapshot"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.db_instance_class {
            params.put(&format!("{}{}", prefix, "DBInstanceClass"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.db_name {
            params.put(&format!("{}{}", prefix, "DBName"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.db_subnet_group_name {
            params.put(&format!("{}{}", prefix, "DBSubnetGroupName"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.domain {
            params.put(&format!("{}{}", prefix, "Domain"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.domain_iam_role_name {
            params.put(&format!("{}{}", prefix, "DomainIAMRoleName"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.enable_iam_database_authentication {
            params.put(&format!("{}{}", prefix, "EnableIAMDatabaseAuthentication"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.engine {
            params.put(&format!("{}{}", prefix, "Engine"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.iops {
            params.put(&format!("{}{}", prefix, "Iops"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.license_model {
            params.put(&format!("{}{}", prefix, "LicenseModel"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.multi_az {
            params.put(&format!("{}{}", prefix, "MultiAZ"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.option_group_name {
            params.put(&format!("{}{}", prefix, "OptionGroupName"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.port {
            params.put(&format!("{}{}", prefix, "Port"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.publicly_accessible {
            params.put(&format!("{}{}", prefix, "PubliclyAccessible"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.restore_time {
            params.put(&format!("{}{}", prefix, "RestoreTime"),
                       &field_value.replace("+", "%2B"));
        }
        params.put(&format!("{}{}", prefix, "SourceDBInstanceIdentifier"),
                   &obj.source_db_instance_identifier.replace("+", "%2B"));
        if let Some(ref field_value) = obj.storage_type {
            params.put(&format!("{}{}", prefix, "StorageType"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.tags {
            TagListSerializer::serialize(params, &format!("{}{}", prefix, "Tags"), field_value);
        }
        params.put(&format!("{}{}", prefix, "TargetDBInstanceIdentifier"),
                   &obj.target_db_instance_identifier.replace("+", "%2B"));
        if let Some(ref field_value) = obj.tde_credential_arn {
            params.put(&format!("{}{}", prefix, "TdeCredentialArn"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.tde_credential_password {
            params.put(&format!("{}{}", prefix, "TdeCredentialPassword"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.use_latest_restorable_time {
            params.put(&format!("{}{}", prefix, "UseLatestRestorableTime"),
                       &field_value.to_string().replace("+", "%2B"));
        }

    }
}

#[derive(Default,Debug,Clone)]
pub struct RestoreDBInstanceToPointInTimeResult {
    pub db_instance: Option<DBInstance>,
}

struct RestoreDBInstanceToPointInTimeResultDeserializer;
impl RestoreDBInstanceToPointInTimeResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>
        (tag_name: &str,
         stack: &mut T)
         -> Result<RestoreDBInstanceToPointInTimeResult, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = RestoreDBInstanceToPointInTimeResult::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "DBInstance" => {
                            obj.db_instance =
                                Some(try!(DBInstanceDeserializer::deserialize("DBInstance",
                                                                              stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct RevokeDBSecurityGroupIngressMessage {
    #[doc="<p> The IP range to revoke access from. Must be a valid CIDR range. If <code>CIDRIP</code> is specified, <code>EC2SecurityGroupName</code>, <code>EC2SecurityGroupId</code> and <code>EC2SecurityGroupOwnerId</code> cannot be provided. </p>"]
    pub cidrip: Option<String>,
    #[doc="<p>The name of the DB security group to revoke ingress from.</p>"]
    pub db_security_group_name: String,
    #[doc="<p> The id of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. </p>"]
    pub ec2_security_group_id: Option<String>,
    #[doc="<p> The name of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. </p>"]
    pub ec2_security_group_name: Option<String>,
    #[doc="<p> The AWS Account Number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS Access Key ID is not an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. </p>"]
    pub ec2_security_group_owner_id: Option<String>,
}


/// Serialize `RevokeDBSecurityGroupIngressMessage` contents to a `SignedRequest`.
struct RevokeDBSecurityGroupIngressMessageSerializer;
impl RevokeDBSecurityGroupIngressMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &RevokeDBSecurityGroupIngressMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.cidrip {
            params.put(&format!("{}{}", prefix, "CIDRIP"),
                       &field_value.replace("+", "%2B"));
        }
        params.put(&format!("{}{}", prefix, "DBSecurityGroupName"),
                   &obj.db_security_group_name.replace("+", "%2B"));
        if let Some(ref field_value) = obj.ec2_security_group_id {
            params.put(&format!("{}{}", prefix, "EC2SecurityGroupId"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.ec2_security_group_name {
            params.put(&format!("{}{}", prefix, "EC2SecurityGroupName"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.ec2_security_group_owner_id {
            params.put(&format!("{}{}", prefix, "EC2SecurityGroupOwnerId"),
                       &field_value.replace("+", "%2B"));
        }

    }
}

#[derive(Default,Debug,Clone)]
pub struct RevokeDBSecurityGroupIngressResult {
    pub db_security_group: Option<DBSecurityGroup>,
}

struct RevokeDBSecurityGroupIngressResultDeserializer;
impl RevokeDBSecurityGroupIngressResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>
        (tag_name: &str,
         stack: &mut T)
         -> Result<RevokeDBSecurityGroupIngressResult, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = RevokeDBSecurityGroupIngressResult::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "DBSecurityGroup" => {
                            obj.db_security_group =
                                Some(try!(DBSecurityGroupDeserializer::deserialize("DBSecurityGroup",
                                                                                   stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct SourceIdsListDeserializer;
impl SourceIdsListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<String>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "SourceId" {
                        obj.push(try!(StringDeserializer::deserialize("SourceId", stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}

/// Serialize `SourceIdsList` contents to a `SignedRequest`.
struct SourceIdsListSerializer;
impl SourceIdsListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.member.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

#[doc="<p>Contains an AWS Region name as the result of a successful call to the <a>DescribeSourceRegions</a> action.</p>"]
#[derive(Default,Debug,Clone)]
pub struct SourceRegion {
    #[doc="<p>The endpoint for the source AWS Region endpoint.</p>"]
    pub endpoint: Option<String>,
    #[doc="<p>The name of the source AWS Region.</p>"]
    pub region_name: Option<String>,
    #[doc="<p>The status of the source AWS Region.</p>"]
    pub status: Option<String>,
}

struct SourceRegionDeserializer;
impl SourceRegionDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<SourceRegion, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = SourceRegion::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "Endpoint" => {
                            obj.endpoint = Some(try!(StringDeserializer::deserialize("Endpoint",
                                                                                     stack)));
                        }
                        "RegionName" => {
                            obj.region_name = Some(try!(StringDeserializer::deserialize("RegionName",
                                                                                        stack)));
                        }
                        "Status" => {
                            obj.status = Some(try!(StringDeserializer::deserialize("Status",
                                                                                   stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct SourceRegionListDeserializer;
impl SourceRegionListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<SourceRegion>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "SourceRegion" {
                        obj.push(try!(SourceRegionDeserializer::deserialize("SourceRegion",
                                                                            stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
#[doc="<p>Contains the result of a successful invocation of the <a>DescribeSourceRegions</a> action.</p>"]
#[derive(Default,Debug,Clone)]
pub struct SourceRegionMessage {
    #[doc="<p> An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </p>"]
    pub marker: Option<String>,
    #[doc="<p>A list of SourceRegion instances that contains each source AWS Region that the current AWS Region can get a Read Replica or a DB snapshot from.</p>"]
    pub source_regions: Option<Vec<SourceRegion>>,
}

struct SourceRegionMessageDeserializer;
impl SourceRegionMessageDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<SourceRegionMessage, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = SourceRegionMessage::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "Marker" => {
                            obj.marker = Some(try!(StringDeserializer::deserialize("Marker",
                                                                                   stack)));
                        }
                        "SourceRegions" => {
                            obj.source_regions =
                                Some(try!(SourceRegionListDeserializer::deserialize("SourceRegions",
                                                                                    stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct SourceTypeDeserializer;
impl SourceTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<String, XmlParseError> {
        try!(start_element(tag_name, stack));
        let obj = try!(characters(stack));
        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct StartDBInstanceMessage {
    #[doc="<p> The user-supplied instance identifier. </p>"]
    pub db_instance_identifier: String,
}


/// Serialize `StartDBInstanceMessage` contents to a `SignedRequest`.
struct StartDBInstanceMessageSerializer;
impl StartDBInstanceMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &StartDBInstanceMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "DBInstanceIdentifier"),
                   &obj.db_instance_identifier.replace("+", "%2B"));

    }
}

#[derive(Default,Debug,Clone)]
pub struct StartDBInstanceResult {
    pub db_instance: Option<DBInstance>,
}

struct StartDBInstanceResultDeserializer;
impl StartDBInstanceResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<StartDBInstanceResult, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = StartDBInstanceResult::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "DBInstance" => {
                            obj.db_instance =
                                Some(try!(DBInstanceDeserializer::deserialize("DBInstance",
                                                                              stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct StopDBInstanceMessage {
    #[doc="<p> The user-supplied instance identifier. </p>"]
    pub db_instance_identifier: String,
    #[doc="<p> The user-supplied instance identifier of the DB Snapshot created immediately before the DB instance is stopped. </p>"]
    pub db_snapshot_identifier: Option<String>,
}


/// Serialize `StopDBInstanceMessage` contents to a `SignedRequest`.
struct StopDBInstanceMessageSerializer;
impl StopDBInstanceMessageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &StopDBInstanceMessage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "DBInstanceIdentifier"),
                   &obj.db_instance_identifier.replace("+", "%2B"));
        if let Some(ref field_value) = obj.db_snapshot_identifier {
            params.put(&format!("{}{}", prefix, "DBSnapshotIdentifier"),
                       &field_value.replace("+", "%2B"));
        }

    }
}

#[derive(Default,Debug,Clone)]
pub struct StopDBInstanceResult {
    pub db_instance: Option<DBInstance>,
}

struct StopDBInstanceResultDeserializer;
impl StopDBInstanceResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<StopDBInstanceResult, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = StopDBInstanceResult::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "DBInstance" => {
                            obj.db_instance =
                                Some(try!(DBInstanceDeserializer::deserialize("DBInstance",
                                                                              stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct StringDeserializer;
impl StringDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<String, XmlParseError> {
        try!(start_element(tag_name, stack));
        let obj = try!(characters(stack));
        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p> This data type is used as a response element in the <a>DescribeDBSubnetGroups</a> action. </p>"]
#[derive(Default,Debug,Clone)]
pub struct Subnet {
    pub subnet_availability_zone: Option<AvailabilityZone>,
    #[doc="<p>Specifies the identifier of the subnet.</p>"]
    pub subnet_identifier: Option<String>,
    #[doc="<p>Specifies the status of the subnet.</p>"]
    pub subnet_status: Option<String>,
}

struct SubnetDeserializer;
impl SubnetDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Subnet, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = Subnet::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "SubnetAvailabilityZone" => {
                            obj.subnet_availability_zone =
                                Some(try!(AvailabilityZoneDeserializer::deserialize("SubnetAvailabilityZone",
                                                                                    stack)));
                        }
                        "SubnetIdentifier" => {
                            obj.subnet_identifier =
                                Some(try!(StringDeserializer::deserialize("SubnetIdentifier",
                                                                          stack)));
                        }
                        "SubnetStatus" => {
                            obj.subnet_status = Some(try!(StringDeserializer::deserialize("SubnetStatus",
                                                                                          stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}

/// Serialize `SubnetIdentifierList` contents to a `SignedRequest`.
struct SubnetIdentifierListSerializer;
impl SubnetIdentifierListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.member.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

struct SubnetListDeserializer;
impl SubnetListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<Subnet>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "Subnet" {
                        obj.push(try!(SubnetDeserializer::deserialize("Subnet", stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
struct SupportedCharacterSetsListDeserializer;
impl SupportedCharacterSetsListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<CharacterSet>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "CharacterSet" {
                        obj.push(try!(CharacterSetDeserializer::deserialize("CharacterSet",
                                                                            stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
struct SupportedTimezonesListDeserializer;
impl SupportedTimezonesListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<Timezone>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "Timezone" {
                        obj.push(try!(TimezoneDeserializer::deserialize("Timezone", stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
struct TStampDeserializer;
impl TStampDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<String, XmlParseError> {
        try!(start_element(tag_name, stack));
        let obj = try!(characters(stack));
        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p>Metadata assigned to an Amazon RDS resource consisting of a key-value pair.</p>"]
#[derive(Default,Debug,Clone)]
pub struct Tag {
    #[doc="<p>A key is the required name of the tag. The string value can be from 1 to 128 Unicode characters in length and cannot be prefixed with \"aws:\" or \"rds:\". The string can only contain only the set of Unicode letters, digits, white-space, '_', '.', '/', '=', '+', '-' (Java regex: \"^([\\\\p{L}\\\\p{Z}\\\\p{N}_.:/=+\\\\-]*)$\").</p>"]
    pub key: Option<String>,
    #[doc="<p>A value is the optional value of the tag. The string value can be from 1 to 256 Unicode characters in length and cannot be prefixed with \"aws:\" or \"rds:\". The string can only contain only the set of Unicode letters, digits, white-space, '_', '.', '/', '=', '+', '-' (Java regex: \"^([\\\\p{L}\\\\p{Z}\\\\p{N}_.:/=+\\\\-]*)$\").</p>"]
    pub value: Option<String>,
}

struct TagDeserializer;
impl TagDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Tag, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = Tag::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "Key" => {
                            obj.key = Some(try!(StringDeserializer::deserialize("Key", stack)));
                        }
                        "Value" => {
                            obj.value = Some(try!(StringDeserializer::deserialize("Value", stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}

/// Serialize `Tag` contents to a `SignedRequest`.
struct TagSerializer;
impl TagSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Tag) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.key {
            params.put(&format!("{}{}", prefix, "Key"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.value {
            params.put(&format!("{}{}", prefix, "Value"),
                       &field_value.replace("+", "%2B"));
        }

    }
}

struct TagListDeserializer;
impl TagListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<Tag>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "Tag" {
                        obj.push(try!(TagDeserializer::deserialize("Tag", stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}

/// Serialize `TagList` contents to a `SignedRequest`.
struct TagListSerializer;
impl TagListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<Tag>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.member.{}", name, index + 1);
            TagSerializer::serialize(params, &key, obj);
        }
    }
}

#[doc="<p/>"]
#[derive(Default,Debug,Clone)]
pub struct TagListMessage {
    #[doc="<p>List of tags returned by the ListTagsForResource operation.</p>"]
    pub tag_list: Option<Vec<Tag>>,
}

struct TagListMessageDeserializer;
impl TagListMessageDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<TagListMessage, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = TagListMessage::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "TagList" => {
                            obj.tag_list = Some(try!(TagListDeserializer::deserialize("TagList",
                                                                                      stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p>A time zone associated with a <a>DBInstance</a> or a <a>DBSnapshot</a>. This data type is an element in the response to the <a>DescribeDBInstances</a>, the <a>DescribeDBSnapshots</a>, and the <a>DescribeDBEngineVersions</a> actions. </p>"]
#[derive(Default,Debug,Clone)]
pub struct Timezone {
    #[doc="<p>The name of the time zone.</p>"]
    pub timezone_name: Option<String>,
}

struct TimezoneDeserializer;
impl TimezoneDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Timezone, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = Timezone::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "TimezoneName" => {
                            obj.timezone_name = Some(try!(StringDeserializer::deserialize("TimezoneName",
                                                                                          stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p>The version of the database engine that a DB instance can be upgraded to.</p>"]
#[derive(Default,Debug,Clone)]
pub struct UpgradeTarget {
    #[doc="<p>A value that indicates whether the target version will be applied to any source DB instances that have AutoMinorVersionUpgrade set to true.</p>"]
    pub auto_upgrade: Option<bool>,
    #[doc="<p>The version of the database engine that a DB instance can be upgraded to.</p>"]
    pub description: Option<String>,
    #[doc="<p>The name of the upgrade target database engine.</p>"]
    pub engine: Option<String>,
    #[doc="<p>The version number of the upgrade target database engine.</p>"]
    pub engine_version: Option<String>,
    #[doc="<p>A value that indicates whether a database engine will be upgraded to a major version.</p>"]
    pub is_major_version_upgrade: Option<bool>,
}

struct UpgradeTargetDeserializer;
impl UpgradeTargetDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<UpgradeTarget, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = UpgradeTarget::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "AutoUpgrade" => {
                            obj.auto_upgrade = Some(try!(BooleanDeserializer::deserialize("AutoUpgrade",
                                                                                          stack)));
                        }
                        "Description" => {
                            obj.description = Some(try!(StringDeserializer::deserialize("Description",
                                                                                        stack)));
                        }
                        "Engine" => {
                            obj.engine = Some(try!(StringDeserializer::deserialize("Engine",
                                                                                   stack)));
                        }
                        "EngineVersion" => {
                            obj.engine_version = Some(try!(StringDeserializer::deserialize("EngineVersion",
                                                                                           stack)));
                        }
                        "IsMajorVersionUpgrade" => {
                            obj.is_major_version_upgrade =
                                Some(try!(BooleanDeserializer::deserialize("IsMajorVersionUpgrade",
                                                                           stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct ValidUpgradeTargetListDeserializer;
impl ValidUpgradeTargetListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<UpgradeTarget>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "UpgradeTarget" {
                        obj.push(try!(UpgradeTargetDeserializer::deserialize("UpgradeTarget",
                                                                             stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}

/// Serialize `VpcSecurityGroupIdList` contents to a `SignedRequest`.
struct VpcSecurityGroupIdListSerializer;
impl VpcSecurityGroupIdListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.member.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

#[doc="<p>This data type is used as a response element for queries on VPC security group membership.</p>"]
#[derive(Default,Debug,Clone)]
pub struct VpcSecurityGroupMembership {
    #[doc="<p>The status of the VPC security group.</p>"]
    pub status: Option<String>,
    #[doc="<p>The name of the VPC security group.</p>"]
    pub vpc_security_group_id: Option<String>,
}

struct VpcSecurityGroupMembershipDeserializer;
impl VpcSecurityGroupMembershipDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<VpcSecurityGroupMembership, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = VpcSecurityGroupMembership::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "Status" => {
                            obj.status = Some(try!(StringDeserializer::deserialize("Status",
                                                                                   stack)));
                        }
                        "VpcSecurityGroupId" => {
                            obj.vpc_security_group_id =
                                Some(try!(StringDeserializer::deserialize("VpcSecurityGroupId",
                                                                          stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct VpcSecurityGroupMembershipListDeserializer;
impl VpcSecurityGroupMembershipListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>
        (tag_name: &str,
         stack: &mut T)
         -> Result<Vec<VpcSecurityGroupMembership>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "VpcSecurityGroupMembership" {
                        obj.push(try!(VpcSecurityGroupMembershipDeserializer::deserialize("VpcSecurityGroupMembership", stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
/// Errors returned by AddRoleToDBCluster
#[derive(Debug, PartialEq)]
pub enum AddRoleToDBClusterError {
    ///<p> <i>DBClusterIdentifier</i> does not refer to an existing DB cluster. </p>
    DBClusterNotFoundFault(String),
    ///<p>The specified IAM role Amazon Resource Name (ARN) is already associated with the specified DB cluster.</p>
    DBClusterRoleAlreadyExistsFault(String),
    ///<p>You have exceeded the maximum number of IAM roles that can be associated with the specified DB cluster.</p>
    DBClusterRoleQuotaExceededFault(String),
    ///<p>The DB cluster is not in a valid state.</p>
    InvalidDBClusterStateFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl AddRoleToDBClusterError {
    pub fn from_body(body: &str) -> AddRoleToDBClusterError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "DBClusterNotFoundFault" => AddRoleToDBClusterError::DBClusterNotFoundFault(String::from(parsed_error.message)),
                    "DBClusterRoleAlreadyExistsFault" => AddRoleToDBClusterError::DBClusterRoleAlreadyExistsFault(String::from(parsed_error.message)),
                    "DBClusterRoleQuotaExceededFault" => AddRoleToDBClusterError::DBClusterRoleQuotaExceededFault(String::from(parsed_error.message)),
                    "InvalidDBClusterStateFault" => AddRoleToDBClusterError::InvalidDBClusterStateFault(String::from(parsed_error.message)),
                    _ => AddRoleToDBClusterError::Unknown(String::from(body)),
                }
            }
            Err(_) => AddRoleToDBClusterError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for AddRoleToDBClusterError {
    fn from(err: XmlParseError) -> AddRoleToDBClusterError {
        let XmlParseError(message) = err;
        AddRoleToDBClusterError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for AddRoleToDBClusterError {
    fn from(err: CredentialsError) -> AddRoleToDBClusterError {
        AddRoleToDBClusterError::Credentials(err)
    }
}
impl From<HttpDispatchError> for AddRoleToDBClusterError {
    fn from(err: HttpDispatchError) -> AddRoleToDBClusterError {
        AddRoleToDBClusterError::HttpDispatch(err)
    }
}
impl From<io::Error> for AddRoleToDBClusterError {
    fn from(err: io::Error) -> AddRoleToDBClusterError {
        AddRoleToDBClusterError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for AddRoleToDBClusterError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for AddRoleToDBClusterError {
    fn description(&self) -> &str {
        match *self {
            AddRoleToDBClusterError::DBClusterNotFoundFault(ref cause) => cause,
            AddRoleToDBClusterError::DBClusterRoleAlreadyExistsFault(ref cause) => cause,
            AddRoleToDBClusterError::DBClusterRoleQuotaExceededFault(ref cause) => cause,
            AddRoleToDBClusterError::InvalidDBClusterStateFault(ref cause) => cause,
            AddRoleToDBClusterError::Validation(ref cause) => cause,
            AddRoleToDBClusterError::Credentials(ref err) => err.description(),
            AddRoleToDBClusterError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            AddRoleToDBClusterError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by AddSourceIdentifierToSubscription
#[derive(Debug, PartialEq)]
pub enum AddSourceIdentifierToSubscriptionError {
    ///<p>The requested source could not be found.</p>
    SourceNotFoundFault(String),
    ///<p>The subscription name does not exist.</p>
    SubscriptionNotFoundFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl AddSourceIdentifierToSubscriptionError {
    pub fn from_body(body: &str) -> AddSourceIdentifierToSubscriptionError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "SourceNotFoundFault" => AddSourceIdentifierToSubscriptionError::SourceNotFoundFault(String::from(parsed_error.message)),
                    "SubscriptionNotFoundFault" => AddSourceIdentifierToSubscriptionError::SubscriptionNotFoundFault(String::from(parsed_error.message)),
                    _ => AddSourceIdentifierToSubscriptionError::Unknown(String::from(body)),
                }
            }
            Err(_) => AddSourceIdentifierToSubscriptionError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for AddSourceIdentifierToSubscriptionError {
    fn from(err: XmlParseError) -> AddSourceIdentifierToSubscriptionError {
        let XmlParseError(message) = err;
        AddSourceIdentifierToSubscriptionError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for AddSourceIdentifierToSubscriptionError {
    fn from(err: CredentialsError) -> AddSourceIdentifierToSubscriptionError {
        AddSourceIdentifierToSubscriptionError::Credentials(err)
    }
}
impl From<HttpDispatchError> for AddSourceIdentifierToSubscriptionError {
    fn from(err: HttpDispatchError) -> AddSourceIdentifierToSubscriptionError {
        AddSourceIdentifierToSubscriptionError::HttpDispatch(err)
    }
}
impl From<io::Error> for AddSourceIdentifierToSubscriptionError {
    fn from(err: io::Error) -> AddSourceIdentifierToSubscriptionError {
        AddSourceIdentifierToSubscriptionError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for AddSourceIdentifierToSubscriptionError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for AddSourceIdentifierToSubscriptionError {
    fn description(&self) -> &str {
        match *self {
            AddSourceIdentifierToSubscriptionError::SourceNotFoundFault(ref cause) => cause,
            AddSourceIdentifierToSubscriptionError::SubscriptionNotFoundFault(ref cause) => cause,
            AddSourceIdentifierToSubscriptionError::Validation(ref cause) => cause,
            AddSourceIdentifierToSubscriptionError::Credentials(ref err) => err.description(),
            AddSourceIdentifierToSubscriptionError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            AddSourceIdentifierToSubscriptionError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by AddTagsToResource
#[derive(Debug, PartialEq)]
pub enum AddTagsToResourceError {
    ///<p> <i>DBClusterIdentifier</i> does not refer to an existing DB cluster. </p>
    DBClusterNotFoundFault(String),
    ///<p> <i>DBInstanceIdentifier</i> does not refer to an existing DB instance. </p>
    DBInstanceNotFoundFault(String),
    ///<p> <i>DBSnapshotIdentifier</i> does not refer to an existing DB snapshot. </p>
    DBSnapshotNotFoundFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl AddTagsToResourceError {
    pub fn from_body(body: &str) -> AddTagsToResourceError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "DBClusterNotFoundFault" => AddTagsToResourceError::DBClusterNotFoundFault(String::from(parsed_error.message)),
                    "DBInstanceNotFoundFault" => AddTagsToResourceError::DBInstanceNotFoundFault(String::from(parsed_error.message)),
                    "DBSnapshotNotFoundFault" => AddTagsToResourceError::DBSnapshotNotFoundFault(String::from(parsed_error.message)),
                    _ => AddTagsToResourceError::Unknown(String::from(body)),
                }
            }
            Err(_) => AddTagsToResourceError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for AddTagsToResourceError {
    fn from(err: XmlParseError) -> AddTagsToResourceError {
        let XmlParseError(message) = err;
        AddTagsToResourceError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for AddTagsToResourceError {
    fn from(err: CredentialsError) -> AddTagsToResourceError {
        AddTagsToResourceError::Credentials(err)
    }
}
impl From<HttpDispatchError> for AddTagsToResourceError {
    fn from(err: HttpDispatchError) -> AddTagsToResourceError {
        AddTagsToResourceError::HttpDispatch(err)
    }
}
impl From<io::Error> for AddTagsToResourceError {
    fn from(err: io::Error) -> AddTagsToResourceError {
        AddTagsToResourceError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for AddTagsToResourceError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for AddTagsToResourceError {
    fn description(&self) -> &str {
        match *self {
            AddTagsToResourceError::DBClusterNotFoundFault(ref cause) => cause,
            AddTagsToResourceError::DBInstanceNotFoundFault(ref cause) => cause,
            AddTagsToResourceError::DBSnapshotNotFoundFault(ref cause) => cause,
            AddTagsToResourceError::Validation(ref cause) => cause,
            AddTagsToResourceError::Credentials(ref err) => err.description(),
            AddTagsToResourceError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            AddTagsToResourceError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by ApplyPendingMaintenanceAction
#[derive(Debug, PartialEq)]
pub enum ApplyPendingMaintenanceActionError {
    ///<p>The specified resource ID was not found.</p>
    ResourceNotFoundFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl ApplyPendingMaintenanceActionError {
    pub fn from_body(body: &str) -> ApplyPendingMaintenanceActionError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "ResourceNotFoundFault" => ApplyPendingMaintenanceActionError::ResourceNotFoundFault(String::from(parsed_error.message)),
                    _ => ApplyPendingMaintenanceActionError::Unknown(String::from(body)),
                }
            }
            Err(_) => ApplyPendingMaintenanceActionError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for ApplyPendingMaintenanceActionError {
    fn from(err: XmlParseError) -> ApplyPendingMaintenanceActionError {
        let XmlParseError(message) = err;
        ApplyPendingMaintenanceActionError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for ApplyPendingMaintenanceActionError {
    fn from(err: CredentialsError) -> ApplyPendingMaintenanceActionError {
        ApplyPendingMaintenanceActionError::Credentials(err)
    }
}
impl From<HttpDispatchError> for ApplyPendingMaintenanceActionError {
    fn from(err: HttpDispatchError) -> ApplyPendingMaintenanceActionError {
        ApplyPendingMaintenanceActionError::HttpDispatch(err)
    }
}
impl From<io::Error> for ApplyPendingMaintenanceActionError {
    fn from(err: io::Error) -> ApplyPendingMaintenanceActionError {
        ApplyPendingMaintenanceActionError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for ApplyPendingMaintenanceActionError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ApplyPendingMaintenanceActionError {
    fn description(&self) -> &str {
        match *self {
            ApplyPendingMaintenanceActionError::ResourceNotFoundFault(ref cause) => cause,
            ApplyPendingMaintenanceActionError::Validation(ref cause) => cause,
            ApplyPendingMaintenanceActionError::Credentials(ref err) => err.description(),
            ApplyPendingMaintenanceActionError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            ApplyPendingMaintenanceActionError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by AuthorizeDBSecurityGroupIngress
#[derive(Debug, PartialEq)]
pub enum AuthorizeDBSecurityGroupIngressError {
    ///<p>The specified CIDRIP or EC2 security group is already authorized for the specified DB security group.</p>
    AuthorizationAlreadyExistsFault(String),
    ///<p>DB security group authorization quota has been reached.</p>
    AuthorizationQuotaExceededFault(String),
    ///<p> <i>DBSecurityGroupName</i> does not refer to an existing DB security group. </p>
    DBSecurityGroupNotFoundFault(String),
    ///<p>The state of the DB security group does not allow deletion.</p>
    InvalidDBSecurityGroupStateFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl AuthorizeDBSecurityGroupIngressError {
    pub fn from_body(body: &str) -> AuthorizeDBSecurityGroupIngressError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "AuthorizationAlreadyExistsFault" => AuthorizeDBSecurityGroupIngressError::AuthorizationAlreadyExistsFault(String::from(parsed_error.message)),
                    "AuthorizationQuotaExceededFault" => AuthorizeDBSecurityGroupIngressError::AuthorizationQuotaExceededFault(String::from(parsed_error.message)),
                    "DBSecurityGroupNotFoundFault" => AuthorizeDBSecurityGroupIngressError::DBSecurityGroupNotFoundFault(String::from(parsed_error.message)),
                    "InvalidDBSecurityGroupStateFault" => AuthorizeDBSecurityGroupIngressError::InvalidDBSecurityGroupStateFault(String::from(parsed_error.message)),
                    _ => AuthorizeDBSecurityGroupIngressError::Unknown(String::from(body)),
                }
            }
            Err(_) => AuthorizeDBSecurityGroupIngressError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for AuthorizeDBSecurityGroupIngressError {
    fn from(err: XmlParseError) -> AuthorizeDBSecurityGroupIngressError {
        let XmlParseError(message) = err;
        AuthorizeDBSecurityGroupIngressError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for AuthorizeDBSecurityGroupIngressError {
    fn from(err: CredentialsError) -> AuthorizeDBSecurityGroupIngressError {
        AuthorizeDBSecurityGroupIngressError::Credentials(err)
    }
}
impl From<HttpDispatchError> for AuthorizeDBSecurityGroupIngressError {
    fn from(err: HttpDispatchError) -> AuthorizeDBSecurityGroupIngressError {
        AuthorizeDBSecurityGroupIngressError::HttpDispatch(err)
    }
}
impl From<io::Error> for AuthorizeDBSecurityGroupIngressError {
    fn from(err: io::Error) -> AuthorizeDBSecurityGroupIngressError {
        AuthorizeDBSecurityGroupIngressError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for AuthorizeDBSecurityGroupIngressError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for AuthorizeDBSecurityGroupIngressError {
    fn description(&self) -> &str {
        match *self {
            AuthorizeDBSecurityGroupIngressError::AuthorizationAlreadyExistsFault(ref cause) => {
                cause
            }
            AuthorizeDBSecurityGroupIngressError::AuthorizationQuotaExceededFault(ref cause) => {
                cause
            }
            AuthorizeDBSecurityGroupIngressError::DBSecurityGroupNotFoundFault(ref cause) => cause,
            AuthorizeDBSecurityGroupIngressError::InvalidDBSecurityGroupStateFault(ref cause) => {
                cause
            }
            AuthorizeDBSecurityGroupIngressError::Validation(ref cause) => cause,
            AuthorizeDBSecurityGroupIngressError::Credentials(ref err) => err.description(),
            AuthorizeDBSecurityGroupIngressError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            AuthorizeDBSecurityGroupIngressError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by CopyDBClusterParameterGroup
#[derive(Debug, PartialEq)]
pub enum CopyDBClusterParameterGroupError {
    ///<p>A DB parameter group with the same name exists.</p>
    DBParameterGroupAlreadyExistsFault(String),
    ///<p> <i>DBParameterGroupName</i> does not refer to an existing DB parameter group. </p>
    DBParameterGroupNotFoundFault(String),
    ///<p>Request would result in user exceeding the allowed number of DB parameter groups.</p>
    DBParameterGroupQuotaExceededFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl CopyDBClusterParameterGroupError {
    pub fn from_body(body: &str) -> CopyDBClusterParameterGroupError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "DBParameterGroupAlreadyExistsFault" => CopyDBClusterParameterGroupError::DBParameterGroupAlreadyExistsFault(String::from(parsed_error.message)),
                    "DBParameterGroupNotFoundFault" => CopyDBClusterParameterGroupError::DBParameterGroupNotFoundFault(String::from(parsed_error.message)),
                    "DBParameterGroupQuotaExceededFault" => CopyDBClusterParameterGroupError::DBParameterGroupQuotaExceededFault(String::from(parsed_error.message)),
                    _ => CopyDBClusterParameterGroupError::Unknown(String::from(body)),
                }
            }
            Err(_) => CopyDBClusterParameterGroupError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for CopyDBClusterParameterGroupError {
    fn from(err: XmlParseError) -> CopyDBClusterParameterGroupError {
        let XmlParseError(message) = err;
        CopyDBClusterParameterGroupError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for CopyDBClusterParameterGroupError {
    fn from(err: CredentialsError) -> CopyDBClusterParameterGroupError {
        CopyDBClusterParameterGroupError::Credentials(err)
    }
}
impl From<HttpDispatchError> for CopyDBClusterParameterGroupError {
    fn from(err: HttpDispatchError) -> CopyDBClusterParameterGroupError {
        CopyDBClusterParameterGroupError::HttpDispatch(err)
    }
}
impl From<io::Error> for CopyDBClusterParameterGroupError {
    fn from(err: io::Error) -> CopyDBClusterParameterGroupError {
        CopyDBClusterParameterGroupError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for CopyDBClusterParameterGroupError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CopyDBClusterParameterGroupError {
    fn description(&self) -> &str {
        match *self {
            CopyDBClusterParameterGroupError::DBParameterGroupAlreadyExistsFault(ref cause) => {
                cause
            }
            CopyDBClusterParameterGroupError::DBParameterGroupNotFoundFault(ref cause) => cause,
            CopyDBClusterParameterGroupError::DBParameterGroupQuotaExceededFault(ref cause) => {
                cause
            }
            CopyDBClusterParameterGroupError::Validation(ref cause) => cause,
            CopyDBClusterParameterGroupError::Credentials(ref err) => err.description(),
            CopyDBClusterParameterGroupError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            CopyDBClusterParameterGroupError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by CopyDBClusterSnapshot
#[derive(Debug, PartialEq)]
pub enum CopyDBClusterSnapshotError {
    ///<p>User already has a DB cluster snapshot with the given identifier.</p>
    DBClusterSnapshotAlreadyExistsFault(String),
    ///<p> <i>DBClusterSnapshotIdentifier</i> does not refer to an existing DB cluster snapshot. </p>
    DBClusterSnapshotNotFoundFault(String),
    ///<p>The supplied value is not a valid DB cluster snapshot state.</p>
    InvalidDBClusterSnapshotStateFault(String),
    ///<p>The DB cluster is not in a valid state.</p>
    InvalidDBClusterStateFault(String),
    ///<p>Error accessing KMS key.</p>
    KMSKeyNotAccessibleFault(String),
    ///<p>Request would result in user exceeding the allowed number of DB snapshots.</p>
    SnapshotQuotaExceededFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl CopyDBClusterSnapshotError {
    pub fn from_body(body: &str) -> CopyDBClusterSnapshotError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "DBClusterSnapshotAlreadyExistsFault" => CopyDBClusterSnapshotError::DBClusterSnapshotAlreadyExistsFault(String::from(parsed_error.message)),
                    "DBClusterSnapshotNotFoundFault" => CopyDBClusterSnapshotError::DBClusterSnapshotNotFoundFault(String::from(parsed_error.message)),
                    "InvalidDBClusterSnapshotStateFault" => CopyDBClusterSnapshotError::InvalidDBClusterSnapshotStateFault(String::from(parsed_error.message)),
                    "InvalidDBClusterStateFault" => CopyDBClusterSnapshotError::InvalidDBClusterStateFault(String::from(parsed_error.message)),
                    "KMSKeyNotAccessibleFault" => CopyDBClusterSnapshotError::KMSKeyNotAccessibleFault(String::from(parsed_error.message)),
                    "SnapshotQuotaExceededFault" => CopyDBClusterSnapshotError::SnapshotQuotaExceededFault(String::from(parsed_error.message)),
                    _ => CopyDBClusterSnapshotError::Unknown(String::from(body)),
                }
            }
            Err(_) => CopyDBClusterSnapshotError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for CopyDBClusterSnapshotError {
    fn from(err: XmlParseError) -> CopyDBClusterSnapshotError {
        let XmlParseError(message) = err;
        CopyDBClusterSnapshotError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for CopyDBClusterSnapshotError {
    fn from(err: CredentialsError) -> CopyDBClusterSnapshotError {
        CopyDBClusterSnapshotError::Credentials(err)
    }
}
impl From<HttpDispatchError> for CopyDBClusterSnapshotError {
    fn from(err: HttpDispatchError) -> CopyDBClusterSnapshotError {
        CopyDBClusterSnapshotError::HttpDispatch(err)
    }
}
impl From<io::Error> for CopyDBClusterSnapshotError {
    fn from(err: io::Error) -> CopyDBClusterSnapshotError {
        CopyDBClusterSnapshotError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for CopyDBClusterSnapshotError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CopyDBClusterSnapshotError {
    fn description(&self) -> &str {
        match *self {
            CopyDBClusterSnapshotError::DBClusterSnapshotAlreadyExistsFault(ref cause) => cause,
            CopyDBClusterSnapshotError::DBClusterSnapshotNotFoundFault(ref cause) => cause,
            CopyDBClusterSnapshotError::InvalidDBClusterSnapshotStateFault(ref cause) => cause,
            CopyDBClusterSnapshotError::InvalidDBClusterStateFault(ref cause) => cause,
            CopyDBClusterSnapshotError::KMSKeyNotAccessibleFault(ref cause) => cause,
            CopyDBClusterSnapshotError::SnapshotQuotaExceededFault(ref cause) => cause,
            CopyDBClusterSnapshotError::Validation(ref cause) => cause,
            CopyDBClusterSnapshotError::Credentials(ref err) => err.description(),
            CopyDBClusterSnapshotError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            CopyDBClusterSnapshotError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by CopyDBParameterGroup
#[derive(Debug, PartialEq)]
pub enum CopyDBParameterGroupError {
    ///<p>A DB parameter group with the same name exists.</p>
    DBParameterGroupAlreadyExistsFault(String),
    ///<p> <i>DBParameterGroupName</i> does not refer to an existing DB parameter group. </p>
    DBParameterGroupNotFoundFault(String),
    ///<p>Request would result in user exceeding the allowed number of DB parameter groups.</p>
    DBParameterGroupQuotaExceededFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl CopyDBParameterGroupError {
    pub fn from_body(body: &str) -> CopyDBParameterGroupError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "DBParameterGroupAlreadyExistsFault" => CopyDBParameterGroupError::DBParameterGroupAlreadyExistsFault(String::from(parsed_error.message)),
                    "DBParameterGroupNotFoundFault" => CopyDBParameterGroupError::DBParameterGroupNotFoundFault(String::from(parsed_error.message)),
                    "DBParameterGroupQuotaExceededFault" => CopyDBParameterGroupError::DBParameterGroupQuotaExceededFault(String::from(parsed_error.message)),
                    _ => CopyDBParameterGroupError::Unknown(String::from(body)),
                }
            }
            Err(_) => CopyDBParameterGroupError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for CopyDBParameterGroupError {
    fn from(err: XmlParseError) -> CopyDBParameterGroupError {
        let XmlParseError(message) = err;
        CopyDBParameterGroupError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for CopyDBParameterGroupError {
    fn from(err: CredentialsError) -> CopyDBParameterGroupError {
        CopyDBParameterGroupError::Credentials(err)
    }
}
impl From<HttpDispatchError> for CopyDBParameterGroupError {
    fn from(err: HttpDispatchError) -> CopyDBParameterGroupError {
        CopyDBParameterGroupError::HttpDispatch(err)
    }
}
impl From<io::Error> for CopyDBParameterGroupError {
    fn from(err: io::Error) -> CopyDBParameterGroupError {
        CopyDBParameterGroupError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for CopyDBParameterGroupError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CopyDBParameterGroupError {
    fn description(&self) -> &str {
        match *self {
            CopyDBParameterGroupError::DBParameterGroupAlreadyExistsFault(ref cause) => cause,
            CopyDBParameterGroupError::DBParameterGroupNotFoundFault(ref cause) => cause,
            CopyDBParameterGroupError::DBParameterGroupQuotaExceededFault(ref cause) => cause,
            CopyDBParameterGroupError::Validation(ref cause) => cause,
            CopyDBParameterGroupError::Credentials(ref err) => err.description(),
            CopyDBParameterGroupError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            CopyDBParameterGroupError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by CopyDBSnapshot
#[derive(Debug, PartialEq)]
pub enum CopyDBSnapshotError {
    ///<p> <i>DBSnapshotIdentifier</i> is already used by an existing snapshot. </p>
    DBSnapshotAlreadyExistsFault(String),
    ///<p> <i>DBSnapshotIdentifier</i> does not refer to an existing DB snapshot. </p>
    DBSnapshotNotFoundFault(String),
    ///<p>The state of the DB snapshot does not allow deletion.</p>
    InvalidDBSnapshotStateFault(String),
    ///<p>Error accessing KMS key.</p>
    KMSKeyNotAccessibleFault(String),
    ///<p>Request would result in user exceeding the allowed number of DB snapshots.</p>
    SnapshotQuotaExceededFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl CopyDBSnapshotError {
    pub fn from_body(body: &str) -> CopyDBSnapshotError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "DBSnapshotAlreadyExistsFault" => CopyDBSnapshotError::DBSnapshotAlreadyExistsFault(String::from(parsed_error.message)),
                    "DBSnapshotNotFoundFault" => CopyDBSnapshotError::DBSnapshotNotFoundFault(String::from(parsed_error.message)),
                    "InvalidDBSnapshotStateFault" => CopyDBSnapshotError::InvalidDBSnapshotStateFault(String::from(parsed_error.message)),
                    "KMSKeyNotAccessibleFault" => CopyDBSnapshotError::KMSKeyNotAccessibleFault(String::from(parsed_error.message)),
                    "SnapshotQuotaExceededFault" => CopyDBSnapshotError::SnapshotQuotaExceededFault(String::from(parsed_error.message)),
                    _ => CopyDBSnapshotError::Unknown(String::from(body)),
                }
            }
            Err(_) => CopyDBSnapshotError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for CopyDBSnapshotError {
    fn from(err: XmlParseError) -> CopyDBSnapshotError {
        let XmlParseError(message) = err;
        CopyDBSnapshotError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for CopyDBSnapshotError {
    fn from(err: CredentialsError) -> CopyDBSnapshotError {
        CopyDBSnapshotError::Credentials(err)
    }
}
impl From<HttpDispatchError> for CopyDBSnapshotError {
    fn from(err: HttpDispatchError) -> CopyDBSnapshotError {
        CopyDBSnapshotError::HttpDispatch(err)
    }
}
impl From<io::Error> for CopyDBSnapshotError {
    fn from(err: io::Error) -> CopyDBSnapshotError {
        CopyDBSnapshotError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for CopyDBSnapshotError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CopyDBSnapshotError {
    fn description(&self) -> &str {
        match *self {
            CopyDBSnapshotError::DBSnapshotAlreadyExistsFault(ref cause) => cause,
            CopyDBSnapshotError::DBSnapshotNotFoundFault(ref cause) => cause,
            CopyDBSnapshotError::InvalidDBSnapshotStateFault(ref cause) => cause,
            CopyDBSnapshotError::KMSKeyNotAccessibleFault(ref cause) => cause,
            CopyDBSnapshotError::SnapshotQuotaExceededFault(ref cause) => cause,
            CopyDBSnapshotError::Validation(ref cause) => cause,
            CopyDBSnapshotError::Credentials(ref err) => err.description(),
            CopyDBSnapshotError::HttpDispatch(ref dispatch_error) => dispatch_error.description(),
            CopyDBSnapshotError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by CopyOptionGroup
#[derive(Debug, PartialEq)]
pub enum CopyOptionGroupError {
    ///<p>The option group you are trying to create already exists.</p>
    OptionGroupAlreadyExistsFault(String),
    ///<p>The specified option group could not be found.</p>
    OptionGroupNotFoundFault(String),
    ///<p>The quota of 20 option groups was exceeded for this AWS account.</p>
    OptionGroupQuotaExceededFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl CopyOptionGroupError {
    pub fn from_body(body: &str) -> CopyOptionGroupError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "OptionGroupAlreadyExistsFault" => CopyOptionGroupError::OptionGroupAlreadyExistsFault(String::from(parsed_error.message)),
                    "OptionGroupNotFoundFault" => CopyOptionGroupError::OptionGroupNotFoundFault(String::from(parsed_error.message)),
                    "OptionGroupQuotaExceededFault" => CopyOptionGroupError::OptionGroupQuotaExceededFault(String::from(parsed_error.message)),
                    _ => CopyOptionGroupError::Unknown(String::from(body)),
                }
            }
            Err(_) => CopyOptionGroupError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for CopyOptionGroupError {
    fn from(err: XmlParseError) -> CopyOptionGroupError {
        let XmlParseError(message) = err;
        CopyOptionGroupError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for CopyOptionGroupError {
    fn from(err: CredentialsError) -> CopyOptionGroupError {
        CopyOptionGroupError::Credentials(err)
    }
}
impl From<HttpDispatchError> for CopyOptionGroupError {
    fn from(err: HttpDispatchError) -> CopyOptionGroupError {
        CopyOptionGroupError::HttpDispatch(err)
    }
}
impl From<io::Error> for CopyOptionGroupError {
    fn from(err: io::Error) -> CopyOptionGroupError {
        CopyOptionGroupError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for CopyOptionGroupError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CopyOptionGroupError {
    fn description(&self) -> &str {
        match *self {
            CopyOptionGroupError::OptionGroupAlreadyExistsFault(ref cause) => cause,
            CopyOptionGroupError::OptionGroupNotFoundFault(ref cause) => cause,
            CopyOptionGroupError::OptionGroupQuotaExceededFault(ref cause) => cause,
            CopyOptionGroupError::Validation(ref cause) => cause,
            CopyOptionGroupError::Credentials(ref err) => err.description(),
            CopyOptionGroupError::HttpDispatch(ref dispatch_error) => dispatch_error.description(),
            CopyOptionGroupError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by CreateDBCluster
#[derive(Debug, PartialEq)]
pub enum CreateDBClusterError {
    ///<p>User already has a DB cluster with the given identifier.</p>
    DBClusterAlreadyExistsFault(String),
    ///<p> <i>DBClusterIdentifier</i> does not refer to an existing DB cluster. </p>
    DBClusterNotFoundFault(String),
    ///<p> <i>DBClusterParameterGroupName</i> does not refer to an existing DB Cluster parameter group. </p>
    DBClusterParameterGroupNotFoundFault(String),
    ///<p>User attempted to create a new DB cluster and the user has already reached the maximum allowed DB cluster quota.</p>
    DBClusterQuotaExceededFault(String),
    ///<p> <i>DBInstanceIdentifier</i> does not refer to an existing DB instance. </p>
    DBInstanceNotFoundFault(String),
    ///<p>Subnets in the DB subnet group should cover at least two Availability Zones unless there is only one Availability Zone.</p>
    DBSubnetGroupDoesNotCoverEnoughAZs(String),
    ///<p> <i>DBSubnetGroupName</i> does not refer to an existing DB subnet group. </p>
    DBSubnetGroupNotFoundFault(String),
    ///<p>There is insufficient storage available for the current action. You may be able to resolve this error by updating your subnet group to use different Availability Zones that have more storage available.</p>
    InsufficientStorageClusterCapacityFault(String),
    ///<p>The DB cluster is not in a valid state.</p>
    InvalidDBClusterStateFault(String),
    ///<p> The specified DB instance is not in the <i>available</i> state. </p>
    InvalidDBInstanceStateFault(String),
    ///<p>The DB subnet group cannot be deleted because it is in use.</p>
    InvalidDBSubnetGroupStateFault(String),
    ///<p>The requested subnet is invalid, or multiple subnets were requested that are not all in a common VPC.</p>
    InvalidSubnet(String),
    ///<p>DB subnet group does not cover all Availability Zones after it is created because users' change.</p>
    InvalidVPCNetworkStateFault(String),
    ///<p>Error accessing KMS key.</p>
    KMSKeyNotAccessibleFault(String),
    ///<p>Request would result in user exceeding the allowed amount of storage available across all DB instances.</p>
    StorageQuotaExceededFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl CreateDBClusterError {
    pub fn from_body(body: &str) -> CreateDBClusterError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "DBClusterAlreadyExistsFault" => CreateDBClusterError::DBClusterAlreadyExistsFault(String::from(parsed_error.message)),
                    "DBClusterNotFoundFault" => CreateDBClusterError::DBClusterNotFoundFault(String::from(parsed_error.message)),
                    "DBClusterParameterGroupNotFoundFault" => CreateDBClusterError::DBClusterParameterGroupNotFoundFault(String::from(parsed_error.message)),
                    "DBClusterQuotaExceededFault" => CreateDBClusterError::DBClusterQuotaExceededFault(String::from(parsed_error.message)),
                    "DBInstanceNotFoundFault" => CreateDBClusterError::DBInstanceNotFoundFault(String::from(parsed_error.message)),
                    "DBSubnetGroupDoesNotCoverEnoughAZs" => CreateDBClusterError::DBSubnetGroupDoesNotCoverEnoughAZs(String::from(parsed_error.message)),
                    "DBSubnetGroupNotFoundFault" => CreateDBClusterError::DBSubnetGroupNotFoundFault(String::from(parsed_error.message)),
                    "InsufficientStorageClusterCapacityFault" => CreateDBClusterError::InsufficientStorageClusterCapacityFault(String::from(parsed_error.message)),
                    "InvalidDBClusterStateFault" => CreateDBClusterError::InvalidDBClusterStateFault(String::from(parsed_error.message)),
                    "InvalidDBInstanceStateFault" => CreateDBClusterError::InvalidDBInstanceStateFault(String::from(parsed_error.message)),
                    "InvalidDBSubnetGroupStateFault" => CreateDBClusterError::InvalidDBSubnetGroupStateFault(String::from(parsed_error.message)),
                    "InvalidSubnet" => {
                        CreateDBClusterError::InvalidSubnet(String::from(parsed_error.message))
                    }
                    "InvalidVPCNetworkStateFault" => CreateDBClusterError::InvalidVPCNetworkStateFault(String::from(parsed_error.message)),
                    "KMSKeyNotAccessibleFault" => CreateDBClusterError::KMSKeyNotAccessibleFault(String::from(parsed_error.message)),
                    "StorageQuotaExceededFault" => CreateDBClusterError::StorageQuotaExceededFault(String::from(parsed_error.message)),
                    _ => CreateDBClusterError::Unknown(String::from(body)),
                }
            }
            Err(_) => CreateDBClusterError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for CreateDBClusterError {
    fn from(err: XmlParseError) -> CreateDBClusterError {
        let XmlParseError(message) = err;
        CreateDBClusterError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for CreateDBClusterError {
    fn from(err: CredentialsError) -> CreateDBClusterError {
        CreateDBClusterError::Credentials(err)
    }
}
impl From<HttpDispatchError> for CreateDBClusterError {
    fn from(err: HttpDispatchError) -> CreateDBClusterError {
        CreateDBClusterError::HttpDispatch(err)
    }
}
impl From<io::Error> for CreateDBClusterError {
    fn from(err: io::Error) -> CreateDBClusterError {
        CreateDBClusterError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for CreateDBClusterError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CreateDBClusterError {
    fn description(&self) -> &str {
        match *self {
            CreateDBClusterError::DBClusterAlreadyExistsFault(ref cause) => cause,
            CreateDBClusterError::DBClusterNotFoundFault(ref cause) => cause,
            CreateDBClusterError::DBClusterParameterGroupNotFoundFault(ref cause) => cause,
            CreateDBClusterError::DBClusterQuotaExceededFault(ref cause) => cause,
            CreateDBClusterError::DBInstanceNotFoundFault(ref cause) => cause,
            CreateDBClusterError::DBSubnetGroupDoesNotCoverEnoughAZs(ref cause) => cause,
            CreateDBClusterError::DBSubnetGroupNotFoundFault(ref cause) => cause,
            CreateDBClusterError::InsufficientStorageClusterCapacityFault(ref cause) => cause,
            CreateDBClusterError::InvalidDBClusterStateFault(ref cause) => cause,
            CreateDBClusterError::InvalidDBInstanceStateFault(ref cause) => cause,
            CreateDBClusterError::InvalidDBSubnetGroupStateFault(ref cause) => cause,
            CreateDBClusterError::InvalidSubnet(ref cause) => cause,
            CreateDBClusterError::InvalidVPCNetworkStateFault(ref cause) => cause,
            CreateDBClusterError::KMSKeyNotAccessibleFault(ref cause) => cause,
            CreateDBClusterError::StorageQuotaExceededFault(ref cause) => cause,
            CreateDBClusterError::Validation(ref cause) => cause,
            CreateDBClusterError::Credentials(ref err) => err.description(),
            CreateDBClusterError::HttpDispatch(ref dispatch_error) => dispatch_error.description(),
            CreateDBClusterError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by CreateDBClusterParameterGroup
#[derive(Debug, PartialEq)]
pub enum CreateDBClusterParameterGroupError {
    ///<p>A DB parameter group with the same name exists.</p>
    DBParameterGroupAlreadyExistsFault(String),
    ///<p>Request would result in user exceeding the allowed number of DB parameter groups.</p>
    DBParameterGroupQuotaExceededFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl CreateDBClusterParameterGroupError {
    pub fn from_body(body: &str) -> CreateDBClusterParameterGroupError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "DBParameterGroupAlreadyExistsFault" => CreateDBClusterParameterGroupError::DBParameterGroupAlreadyExistsFault(String::from(parsed_error.message)),
                    "DBParameterGroupQuotaExceededFault" => CreateDBClusterParameterGroupError::DBParameterGroupQuotaExceededFault(String::from(parsed_error.message)),
                    _ => CreateDBClusterParameterGroupError::Unknown(String::from(body)),
                }
            }
            Err(_) => CreateDBClusterParameterGroupError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for CreateDBClusterParameterGroupError {
    fn from(err: XmlParseError) -> CreateDBClusterParameterGroupError {
        let XmlParseError(message) = err;
        CreateDBClusterParameterGroupError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for CreateDBClusterParameterGroupError {
    fn from(err: CredentialsError) -> CreateDBClusterParameterGroupError {
        CreateDBClusterParameterGroupError::Credentials(err)
    }
}
impl From<HttpDispatchError> for CreateDBClusterParameterGroupError {
    fn from(err: HttpDispatchError) -> CreateDBClusterParameterGroupError {
        CreateDBClusterParameterGroupError::HttpDispatch(err)
    }
}
impl From<io::Error> for CreateDBClusterParameterGroupError {
    fn from(err: io::Error) -> CreateDBClusterParameterGroupError {
        CreateDBClusterParameterGroupError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for CreateDBClusterParameterGroupError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CreateDBClusterParameterGroupError {
    fn description(&self) -> &str {
        match *self {
            CreateDBClusterParameterGroupError::DBParameterGroupAlreadyExistsFault(ref cause) => {
                cause
            }
            CreateDBClusterParameterGroupError::DBParameterGroupQuotaExceededFault(ref cause) => {
                cause
            }
            CreateDBClusterParameterGroupError::Validation(ref cause) => cause,
            CreateDBClusterParameterGroupError::Credentials(ref err) => err.description(),
            CreateDBClusterParameterGroupError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            CreateDBClusterParameterGroupError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by CreateDBClusterSnapshot
#[derive(Debug, PartialEq)]
pub enum CreateDBClusterSnapshotError {
    ///<p> <i>DBClusterIdentifier</i> does not refer to an existing DB cluster. </p>
    DBClusterNotFoundFault(String),
    ///<p>User already has a DB cluster snapshot with the given identifier.</p>
    DBClusterSnapshotAlreadyExistsFault(String),
    ///<p>The supplied value is not a valid DB cluster snapshot state.</p>
    InvalidDBClusterSnapshotStateFault(String),
    ///<p>The DB cluster is not in a valid state.</p>
    InvalidDBClusterStateFault(String),
    ///<p>Request would result in user exceeding the allowed number of DB snapshots.</p>
    SnapshotQuotaExceededFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl CreateDBClusterSnapshotError {
    pub fn from_body(body: &str) -> CreateDBClusterSnapshotError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "DBClusterNotFoundFault" => CreateDBClusterSnapshotError::DBClusterNotFoundFault(String::from(parsed_error.message)),
                    "DBClusterSnapshotAlreadyExistsFault" => CreateDBClusterSnapshotError::DBClusterSnapshotAlreadyExistsFault(String::from(parsed_error.message)),
                    "InvalidDBClusterSnapshotStateFault" => CreateDBClusterSnapshotError::InvalidDBClusterSnapshotStateFault(String::from(parsed_error.message)),
                    "InvalidDBClusterStateFault" => CreateDBClusterSnapshotError::InvalidDBClusterStateFault(String::from(parsed_error.message)),
                    "SnapshotQuotaExceededFault" => CreateDBClusterSnapshotError::SnapshotQuotaExceededFault(String::from(parsed_error.message)),
                    _ => CreateDBClusterSnapshotError::Unknown(String::from(body)),
                }
            }
            Err(_) => CreateDBClusterSnapshotError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for CreateDBClusterSnapshotError {
    fn from(err: XmlParseError) -> CreateDBClusterSnapshotError {
        let XmlParseError(message) = err;
        CreateDBClusterSnapshotError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for CreateDBClusterSnapshotError {
    fn from(err: CredentialsError) -> CreateDBClusterSnapshotError {
        CreateDBClusterSnapshotError::Credentials(err)
    }
}
impl From<HttpDispatchError> for CreateDBClusterSnapshotError {
    fn from(err: HttpDispatchError) -> CreateDBClusterSnapshotError {
        CreateDBClusterSnapshotError::HttpDispatch(err)
    }
}
impl From<io::Error> for CreateDBClusterSnapshotError {
    fn from(err: io::Error) -> CreateDBClusterSnapshotError {
        CreateDBClusterSnapshotError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for CreateDBClusterSnapshotError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CreateDBClusterSnapshotError {
    fn description(&self) -> &str {
        match *self {
            CreateDBClusterSnapshotError::DBClusterNotFoundFault(ref cause) => cause,
            CreateDBClusterSnapshotError::DBClusterSnapshotAlreadyExistsFault(ref cause) => cause,
            CreateDBClusterSnapshotError::InvalidDBClusterSnapshotStateFault(ref cause) => cause,
            CreateDBClusterSnapshotError::InvalidDBClusterStateFault(ref cause) => cause,
            CreateDBClusterSnapshotError::SnapshotQuotaExceededFault(ref cause) => cause,
            CreateDBClusterSnapshotError::Validation(ref cause) => cause,
            CreateDBClusterSnapshotError::Credentials(ref err) => err.description(),
            CreateDBClusterSnapshotError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            CreateDBClusterSnapshotError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by CreateDBInstance
#[derive(Debug, PartialEq)]
pub enum CreateDBInstanceError {
    ///<p>Specified CIDRIP or EC2 security group is not authorized for the specified DB security group.</p> <p>RDS may not also be authorized via IAM to perform necessary actions on your behalf.</p>
    AuthorizationNotFoundFault(String),
    ///<p> <i>DBClusterIdentifier</i> does not refer to an existing DB cluster. </p>
    DBClusterNotFoundFault(String),
    ///<p>User already has a DB instance with the given identifier.</p>
    DBInstanceAlreadyExistsFault(String),
    ///<p> <i>DBParameterGroupName</i> does not refer to an existing DB parameter group. </p>
    DBParameterGroupNotFoundFault(String),
    ///<p> <i>DBSecurityGroupName</i> does not refer to an existing DB security group. </p>
    DBSecurityGroupNotFoundFault(String),
    ///<p>Subnets in the DB subnet group should cover at least two Availability Zones unless there is only one Availability Zone.</p>
    DBSubnetGroupDoesNotCoverEnoughAZs(String),
    ///<p> <i>DBSubnetGroupName</i> does not refer to an existing DB subnet group. </p>
    DBSubnetGroupNotFoundFault(String),
    ///<p> <i>Domain</i> does not refer to an existing Active Directory Domain. </p>
    DomainNotFoundFault(String),
    ///<p>Request would result in user exceeding the allowed number of DB instances.</p>
    InstanceQuotaExceededFault(String),
    ///<p>Specified DB instance class is not available in the specified Availability Zone.</p>
    InsufficientDBInstanceCapacityFault(String),
    ///<p>The DB cluster is not in a valid state.</p>
    InvalidDBClusterStateFault(String),
    ///<p>The requested subnet is invalid, or multiple subnets were requested that are not all in a common VPC.</p>
    InvalidSubnet(String),
    ///<p>DB subnet group does not cover all Availability Zones after it is created because users' change.</p>
    InvalidVPCNetworkStateFault(String),
    ///<p>Error accessing KMS key.</p>
    KMSKeyNotAccessibleFault(String),
    ///<p>The specified option group could not be found.</p>
    OptionGroupNotFoundFault(String),
    ///<p>Provisioned IOPS not available in the specified Availability Zone.</p>
    ProvisionedIopsNotAvailableInAZFault(String),
    ///<p>Request would result in user exceeding the allowed amount of storage available across all DB instances.</p>
    StorageQuotaExceededFault(String),
    ///<p> <i>StorageType</i> specified cannot be associated with the DB Instance. </p>
    StorageTypeNotSupportedFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl CreateDBInstanceError {
    pub fn from_body(body: &str) -> CreateDBInstanceError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "AuthorizationNotFoundFault" => CreateDBInstanceError::AuthorizationNotFoundFault(String::from(parsed_error.message)),
                    "DBClusterNotFoundFault" => CreateDBInstanceError::DBClusterNotFoundFault(String::from(parsed_error.message)),
                    "DBInstanceAlreadyExistsFault" => CreateDBInstanceError::DBInstanceAlreadyExistsFault(String::from(parsed_error.message)),
                    "DBParameterGroupNotFoundFault" => CreateDBInstanceError::DBParameterGroupNotFoundFault(String::from(parsed_error.message)),
                    "DBSecurityGroupNotFoundFault" => CreateDBInstanceError::DBSecurityGroupNotFoundFault(String::from(parsed_error.message)),
                    "DBSubnetGroupDoesNotCoverEnoughAZs" => CreateDBInstanceError::DBSubnetGroupDoesNotCoverEnoughAZs(String::from(parsed_error.message)),
                    "DBSubnetGroupNotFoundFault" => CreateDBInstanceError::DBSubnetGroupNotFoundFault(String::from(parsed_error.message)),
                    "DomainNotFoundFault" => CreateDBInstanceError::DomainNotFoundFault(String::from(parsed_error.message)),
                    "InstanceQuotaExceededFault" => CreateDBInstanceError::InstanceQuotaExceededFault(String::from(parsed_error.message)),
                    "InsufficientDBInstanceCapacityFault" => CreateDBInstanceError::InsufficientDBInstanceCapacityFault(String::from(parsed_error.message)),
                    "InvalidDBClusterStateFault" => CreateDBInstanceError::InvalidDBClusterStateFault(String::from(parsed_error.message)),
                    "InvalidSubnet" => {
                        CreateDBInstanceError::InvalidSubnet(String::from(parsed_error.message))
                    }
                    "InvalidVPCNetworkStateFault" => CreateDBInstanceError::InvalidVPCNetworkStateFault(String::from(parsed_error.message)),
                    "KMSKeyNotAccessibleFault" => CreateDBInstanceError::KMSKeyNotAccessibleFault(String::from(parsed_error.message)),
                    "OptionGroupNotFoundFault" => CreateDBInstanceError::OptionGroupNotFoundFault(String::from(parsed_error.message)),
                    "ProvisionedIopsNotAvailableInAZFault" => CreateDBInstanceError::ProvisionedIopsNotAvailableInAZFault(String::from(parsed_error.message)),
                    "StorageQuotaExceededFault" => CreateDBInstanceError::StorageQuotaExceededFault(String::from(parsed_error.message)),
                    "StorageTypeNotSupportedFault" => CreateDBInstanceError::StorageTypeNotSupportedFault(String::from(parsed_error.message)),
                    _ => CreateDBInstanceError::Unknown(String::from(body)),
                }
            }
            Err(_) => CreateDBInstanceError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for CreateDBInstanceError {
    fn from(err: XmlParseError) -> CreateDBInstanceError {
        let XmlParseError(message) = err;
        CreateDBInstanceError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for CreateDBInstanceError {
    fn from(err: CredentialsError) -> CreateDBInstanceError {
        CreateDBInstanceError::Credentials(err)
    }
}
impl From<HttpDispatchError> for CreateDBInstanceError {
    fn from(err: HttpDispatchError) -> CreateDBInstanceError {
        CreateDBInstanceError::HttpDispatch(err)
    }
}
impl From<io::Error> for CreateDBInstanceError {
    fn from(err: io::Error) -> CreateDBInstanceError {
        CreateDBInstanceError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for CreateDBInstanceError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CreateDBInstanceError {
    fn description(&self) -> &str {
        match *self {
            CreateDBInstanceError::AuthorizationNotFoundFault(ref cause) => cause,
            CreateDBInstanceError::DBClusterNotFoundFault(ref cause) => cause,
            CreateDBInstanceError::DBInstanceAlreadyExistsFault(ref cause) => cause,
            CreateDBInstanceError::DBParameterGroupNotFoundFault(ref cause) => cause,
            CreateDBInstanceError::DBSecurityGroupNotFoundFault(ref cause) => cause,
            CreateDBInstanceError::DBSubnetGroupDoesNotCoverEnoughAZs(ref cause) => cause,
            CreateDBInstanceError::DBSubnetGroupNotFoundFault(ref cause) => cause,
            CreateDBInstanceError::DomainNotFoundFault(ref cause) => cause,
            CreateDBInstanceError::InstanceQuotaExceededFault(ref cause) => cause,
            CreateDBInstanceError::InsufficientDBInstanceCapacityFault(ref cause) => cause,
            CreateDBInstanceError::InvalidDBClusterStateFault(ref cause) => cause,
            CreateDBInstanceError::InvalidSubnet(ref cause) => cause,
            CreateDBInstanceError::InvalidVPCNetworkStateFault(ref cause) => cause,
            CreateDBInstanceError::KMSKeyNotAccessibleFault(ref cause) => cause,
            CreateDBInstanceError::OptionGroupNotFoundFault(ref cause) => cause,
            CreateDBInstanceError::ProvisionedIopsNotAvailableInAZFault(ref cause) => cause,
            CreateDBInstanceError::StorageQuotaExceededFault(ref cause) => cause,
            CreateDBInstanceError::StorageTypeNotSupportedFault(ref cause) => cause,
            CreateDBInstanceError::Validation(ref cause) => cause,
            CreateDBInstanceError::Credentials(ref err) => err.description(),
            CreateDBInstanceError::HttpDispatch(ref dispatch_error) => dispatch_error.description(),
            CreateDBInstanceError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by CreateDBInstanceReadReplica
#[derive(Debug, PartialEq)]
pub enum CreateDBInstanceReadReplicaError {
    ///<p>User already has a DB instance with the given identifier.</p>
    DBInstanceAlreadyExistsFault(String),
    ///<p> <i>DBInstanceIdentifier</i> does not refer to an existing DB instance. </p>
    DBInstanceNotFoundFault(String),
    ///<p> <i>DBParameterGroupName</i> does not refer to an existing DB parameter group. </p>
    DBParameterGroupNotFoundFault(String),
    ///<p> <i>DBSecurityGroupName</i> does not refer to an existing DB security group. </p>
    DBSecurityGroupNotFoundFault(String),
    ///<p>Subnets in the DB subnet group should cover at least two Availability Zones unless there is only one Availability Zone.</p>
    DBSubnetGroupDoesNotCoverEnoughAZs(String),
    ///<p>Indicates that the DBSubnetGroup should not be specified while creating read replicas that lie in the same region as the source instance.</p>
    DBSubnetGroupNotAllowedFault(String),
    ///<p> <i>DBSubnetGroupName</i> does not refer to an existing DB subnet group. </p>
    DBSubnetGroupNotFoundFault(String),
    ///<p>Request would result in user exceeding the allowed number of DB instances.</p>
    InstanceQuotaExceededFault(String),
    ///<p>Specified DB instance class is not available in the specified Availability Zone.</p>
    InsufficientDBInstanceCapacityFault(String),
    ///<p> The specified DB instance is not in the <i>available</i> state. </p>
    InvalidDBInstanceStateFault(String),
    ///<p>Indicates the DBSubnetGroup does not belong to the same VPC as that of an existing cross region read replica of the same source instance.</p>
    InvalidDBSubnetGroupFault(String),
    ///<p>The requested subnet is invalid, or multiple subnets were requested that are not all in a common VPC.</p>
    InvalidSubnet(String),
    ///<p>DB subnet group does not cover all Availability Zones after it is created because users' change.</p>
    InvalidVPCNetworkStateFault(String),
    ///<p>Error accessing KMS key.</p>
    KMSKeyNotAccessibleFault(String),
    ///<p>The specified option group could not be found.</p>
    OptionGroupNotFoundFault(String),
    ///<p>Provisioned IOPS not available in the specified Availability Zone.</p>
    ProvisionedIopsNotAvailableInAZFault(String),
    ///<p>Request would result in user exceeding the allowed amount of storage available across all DB instances.</p>
    StorageQuotaExceededFault(String),
    ///<p> <i>StorageType</i> specified cannot be associated with the DB Instance. </p>
    StorageTypeNotSupportedFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl CreateDBInstanceReadReplicaError {
    pub fn from_body(body: &str) -> CreateDBInstanceReadReplicaError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "DBInstanceAlreadyExistsFault" => CreateDBInstanceReadReplicaError::DBInstanceAlreadyExistsFault(String::from(parsed_error.message)),
                    "DBInstanceNotFoundFault" => CreateDBInstanceReadReplicaError::DBInstanceNotFoundFault(String::from(parsed_error.message)),
                    "DBParameterGroupNotFoundFault" => CreateDBInstanceReadReplicaError::DBParameterGroupNotFoundFault(String::from(parsed_error.message)),
                    "DBSecurityGroupNotFoundFault" => CreateDBInstanceReadReplicaError::DBSecurityGroupNotFoundFault(String::from(parsed_error.message)),
                    "DBSubnetGroupDoesNotCoverEnoughAZs" => CreateDBInstanceReadReplicaError::DBSubnetGroupDoesNotCoverEnoughAZs(String::from(parsed_error.message)),
                    "DBSubnetGroupNotAllowedFault" => CreateDBInstanceReadReplicaError::DBSubnetGroupNotAllowedFault(String::from(parsed_error.message)),
                    "DBSubnetGroupNotFoundFault" => CreateDBInstanceReadReplicaError::DBSubnetGroupNotFoundFault(String::from(parsed_error.message)),
                    "InstanceQuotaExceededFault" => CreateDBInstanceReadReplicaError::InstanceQuotaExceededFault(String::from(parsed_error.message)),
                    "InsufficientDBInstanceCapacityFault" => CreateDBInstanceReadReplicaError::InsufficientDBInstanceCapacityFault(String::from(parsed_error.message)),
                    "InvalidDBInstanceStateFault" => CreateDBInstanceReadReplicaError::InvalidDBInstanceStateFault(String::from(parsed_error.message)),
                    "InvalidDBSubnetGroupFault" => CreateDBInstanceReadReplicaError::InvalidDBSubnetGroupFault(String::from(parsed_error.message)),
                    "InvalidSubnet" => CreateDBInstanceReadReplicaError::InvalidSubnet(String::from(parsed_error.message)),
                    "InvalidVPCNetworkStateFault" => CreateDBInstanceReadReplicaError::InvalidVPCNetworkStateFault(String::from(parsed_error.message)),
                    "KMSKeyNotAccessibleFault" => CreateDBInstanceReadReplicaError::KMSKeyNotAccessibleFault(String::from(parsed_error.message)),
                    "OptionGroupNotFoundFault" => CreateDBInstanceReadReplicaError::OptionGroupNotFoundFault(String::from(parsed_error.message)),
                    "ProvisionedIopsNotAvailableInAZFault" => CreateDBInstanceReadReplicaError::ProvisionedIopsNotAvailableInAZFault(String::from(parsed_error.message)),
                    "StorageQuotaExceededFault" => CreateDBInstanceReadReplicaError::StorageQuotaExceededFault(String::from(parsed_error.message)),
                    "StorageTypeNotSupportedFault" => CreateDBInstanceReadReplicaError::StorageTypeNotSupportedFault(String::from(parsed_error.message)),
                    _ => CreateDBInstanceReadReplicaError::Unknown(String::from(body)),
                }
            }
            Err(_) => CreateDBInstanceReadReplicaError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for CreateDBInstanceReadReplicaError {
    fn from(err: XmlParseError) -> CreateDBInstanceReadReplicaError {
        let XmlParseError(message) = err;
        CreateDBInstanceReadReplicaError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for CreateDBInstanceReadReplicaError {
    fn from(err: CredentialsError) -> CreateDBInstanceReadReplicaError {
        CreateDBInstanceReadReplicaError::Credentials(err)
    }
}
impl From<HttpDispatchError> for CreateDBInstanceReadReplicaError {
    fn from(err: HttpDispatchError) -> CreateDBInstanceReadReplicaError {
        CreateDBInstanceReadReplicaError::HttpDispatch(err)
    }
}
impl From<io::Error> for CreateDBInstanceReadReplicaError {
    fn from(err: io::Error) -> CreateDBInstanceReadReplicaError {
        CreateDBInstanceReadReplicaError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for CreateDBInstanceReadReplicaError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CreateDBInstanceReadReplicaError {
    fn description(&self) -> &str {
        match *self {
            CreateDBInstanceReadReplicaError::DBInstanceAlreadyExistsFault(ref cause) => cause,
            CreateDBInstanceReadReplicaError::DBInstanceNotFoundFault(ref cause) => cause,
            CreateDBInstanceReadReplicaError::DBParameterGroupNotFoundFault(ref cause) => cause,
            CreateDBInstanceReadReplicaError::DBSecurityGroupNotFoundFault(ref cause) => cause,
            CreateDBInstanceReadReplicaError::DBSubnetGroupDoesNotCoverEnoughAZs(ref cause) => {
                cause
            }
            CreateDBInstanceReadReplicaError::DBSubnetGroupNotAllowedFault(ref cause) => cause,
            CreateDBInstanceReadReplicaError::DBSubnetGroupNotFoundFault(ref cause) => cause,
            CreateDBInstanceReadReplicaError::InstanceQuotaExceededFault(ref cause) => cause,
            CreateDBInstanceReadReplicaError::InsufficientDBInstanceCapacityFault(ref cause) => {
                cause
            }
            CreateDBInstanceReadReplicaError::InvalidDBInstanceStateFault(ref cause) => cause,
            CreateDBInstanceReadReplicaError::InvalidDBSubnetGroupFault(ref cause) => cause,
            CreateDBInstanceReadReplicaError::InvalidSubnet(ref cause) => cause,
            CreateDBInstanceReadReplicaError::InvalidVPCNetworkStateFault(ref cause) => cause,
            CreateDBInstanceReadReplicaError::KMSKeyNotAccessibleFault(ref cause) => cause,
            CreateDBInstanceReadReplicaError::OptionGroupNotFoundFault(ref cause) => cause,
            CreateDBInstanceReadReplicaError::ProvisionedIopsNotAvailableInAZFault(ref cause) => {
                cause
            }
            CreateDBInstanceReadReplicaError::StorageQuotaExceededFault(ref cause) => cause,
            CreateDBInstanceReadReplicaError::StorageTypeNotSupportedFault(ref cause) => cause,
            CreateDBInstanceReadReplicaError::Validation(ref cause) => cause,
            CreateDBInstanceReadReplicaError::Credentials(ref err) => err.description(),
            CreateDBInstanceReadReplicaError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            CreateDBInstanceReadReplicaError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by CreateDBParameterGroup
#[derive(Debug, PartialEq)]
pub enum CreateDBParameterGroupError {
    ///<p>A DB parameter group with the same name exists.</p>
    DBParameterGroupAlreadyExistsFault(String),
    ///<p>Request would result in user exceeding the allowed number of DB parameter groups.</p>
    DBParameterGroupQuotaExceededFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl CreateDBParameterGroupError {
    pub fn from_body(body: &str) -> CreateDBParameterGroupError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "DBParameterGroupAlreadyExistsFault" => CreateDBParameterGroupError::DBParameterGroupAlreadyExistsFault(String::from(parsed_error.message)),
                    "DBParameterGroupQuotaExceededFault" => CreateDBParameterGroupError::DBParameterGroupQuotaExceededFault(String::from(parsed_error.message)),
                    _ => CreateDBParameterGroupError::Unknown(String::from(body)),
                }
            }
            Err(_) => CreateDBParameterGroupError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for CreateDBParameterGroupError {
    fn from(err: XmlParseError) -> CreateDBParameterGroupError {
        let XmlParseError(message) = err;
        CreateDBParameterGroupError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for CreateDBParameterGroupError {
    fn from(err: CredentialsError) -> CreateDBParameterGroupError {
        CreateDBParameterGroupError::Credentials(err)
    }
}
impl From<HttpDispatchError> for CreateDBParameterGroupError {
    fn from(err: HttpDispatchError) -> CreateDBParameterGroupError {
        CreateDBParameterGroupError::HttpDispatch(err)
    }
}
impl From<io::Error> for CreateDBParameterGroupError {
    fn from(err: io::Error) -> CreateDBParameterGroupError {
        CreateDBParameterGroupError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for CreateDBParameterGroupError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CreateDBParameterGroupError {
    fn description(&self) -> &str {
        match *self {
            CreateDBParameterGroupError::DBParameterGroupAlreadyExistsFault(ref cause) => cause,
            CreateDBParameterGroupError::DBParameterGroupQuotaExceededFault(ref cause) => cause,
            CreateDBParameterGroupError::Validation(ref cause) => cause,
            CreateDBParameterGroupError::Credentials(ref err) => err.description(),
            CreateDBParameterGroupError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            CreateDBParameterGroupError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by CreateDBSecurityGroup
#[derive(Debug, PartialEq)]
pub enum CreateDBSecurityGroupError {
    ///<p> A DB security group with the name specified in <i>DBSecurityGroupName</i> already exists. </p>
    DBSecurityGroupAlreadyExistsFault(String),
    ///<p>A DB security group is not allowed for this action.</p>
    DBSecurityGroupNotSupportedFault(String),
    ///<p>Request would result in user exceeding the allowed number of DB security groups.</p>
    DBSecurityGroupQuotaExceededFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl CreateDBSecurityGroupError {
    pub fn from_body(body: &str) -> CreateDBSecurityGroupError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "DBSecurityGroupAlreadyExistsFault" => CreateDBSecurityGroupError::DBSecurityGroupAlreadyExistsFault(String::from(parsed_error.message)),
                    "DBSecurityGroupNotSupportedFault" => CreateDBSecurityGroupError::DBSecurityGroupNotSupportedFault(String::from(parsed_error.message)),
                    "DBSecurityGroupQuotaExceededFault" => CreateDBSecurityGroupError::DBSecurityGroupQuotaExceededFault(String::from(parsed_error.message)),
                    _ => CreateDBSecurityGroupError::Unknown(String::from(body)),
                }
            }
            Err(_) => CreateDBSecurityGroupError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for CreateDBSecurityGroupError {
    fn from(err: XmlParseError) -> CreateDBSecurityGroupError {
        let XmlParseError(message) = err;
        CreateDBSecurityGroupError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for CreateDBSecurityGroupError {
    fn from(err: CredentialsError) -> CreateDBSecurityGroupError {
        CreateDBSecurityGroupError::Credentials(err)
    }
}
impl From<HttpDispatchError> for CreateDBSecurityGroupError {
    fn from(err: HttpDispatchError) -> CreateDBSecurityGroupError {
        CreateDBSecurityGroupError::HttpDispatch(err)
    }
}
impl From<io::Error> for CreateDBSecurityGroupError {
    fn from(err: io::Error) -> CreateDBSecurityGroupError {
        CreateDBSecurityGroupError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for CreateDBSecurityGroupError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CreateDBSecurityGroupError {
    fn description(&self) -> &str {
        match *self {
            CreateDBSecurityGroupError::DBSecurityGroupAlreadyExistsFault(ref cause) => cause,
            CreateDBSecurityGroupError::DBSecurityGroupNotSupportedFault(ref cause) => cause,
            CreateDBSecurityGroupError::DBSecurityGroupQuotaExceededFault(ref cause) => cause,
            CreateDBSecurityGroupError::Validation(ref cause) => cause,
            CreateDBSecurityGroupError::Credentials(ref err) => err.description(),
            CreateDBSecurityGroupError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            CreateDBSecurityGroupError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by CreateDBSnapshot
#[derive(Debug, PartialEq)]
pub enum CreateDBSnapshotError {
    ///<p> <i>DBInstanceIdentifier</i> does not refer to an existing DB instance. </p>
    DBInstanceNotFoundFault(String),
    ///<p> <i>DBSnapshotIdentifier</i> is already used by an existing snapshot. </p>
    DBSnapshotAlreadyExistsFault(String),
    ///<p> The specified DB instance is not in the <i>available</i> state. </p>
    InvalidDBInstanceStateFault(String),
    ///<p>Request would result in user exceeding the allowed number of DB snapshots.</p>
    SnapshotQuotaExceededFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl CreateDBSnapshotError {
    pub fn from_body(body: &str) -> CreateDBSnapshotError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "DBInstanceNotFoundFault" => CreateDBSnapshotError::DBInstanceNotFoundFault(String::from(parsed_error.message)),
                    "DBSnapshotAlreadyExistsFault" => CreateDBSnapshotError::DBSnapshotAlreadyExistsFault(String::from(parsed_error.message)),
                    "InvalidDBInstanceStateFault" => CreateDBSnapshotError::InvalidDBInstanceStateFault(String::from(parsed_error.message)),
                    "SnapshotQuotaExceededFault" => CreateDBSnapshotError::SnapshotQuotaExceededFault(String::from(parsed_error.message)),
                    _ => CreateDBSnapshotError::Unknown(String::from(body)),
                }
            }
            Err(_) => CreateDBSnapshotError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for CreateDBSnapshotError {
    fn from(err: XmlParseError) -> CreateDBSnapshotError {
        let XmlParseError(message) = err;
        CreateDBSnapshotError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for CreateDBSnapshotError {
    fn from(err: CredentialsError) -> CreateDBSnapshotError {
        CreateDBSnapshotError::Credentials(err)
    }
}
impl From<HttpDispatchError> for CreateDBSnapshotError {
    fn from(err: HttpDispatchError) -> CreateDBSnapshotError {
        CreateDBSnapshotError::HttpDispatch(err)
    }
}
impl From<io::Error> for CreateDBSnapshotError {
    fn from(err: io::Error) -> CreateDBSnapshotError {
        CreateDBSnapshotError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for CreateDBSnapshotError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CreateDBSnapshotError {
    fn description(&self) -> &str {
        match *self {
            CreateDBSnapshotError::DBInstanceNotFoundFault(ref cause) => cause,
            CreateDBSnapshotError::DBSnapshotAlreadyExistsFault(ref cause) => cause,
            CreateDBSnapshotError::InvalidDBInstanceStateFault(ref cause) => cause,
            CreateDBSnapshotError::SnapshotQuotaExceededFault(ref cause) => cause,
            CreateDBSnapshotError::Validation(ref cause) => cause,
            CreateDBSnapshotError::Credentials(ref err) => err.description(),
            CreateDBSnapshotError::HttpDispatch(ref dispatch_error) => dispatch_error.description(),
            CreateDBSnapshotError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by CreateDBSubnetGroup
#[derive(Debug, PartialEq)]
pub enum CreateDBSubnetGroupError {
    ///<p> <i>DBSubnetGroupName</i> is already used by an existing DB subnet group. </p>
    DBSubnetGroupAlreadyExistsFault(String),
    ///<p>Subnets in the DB subnet group should cover at least two Availability Zones unless there is only one Availability Zone.</p>
    DBSubnetGroupDoesNotCoverEnoughAZs(String),
    ///<p>Request would result in user exceeding the allowed number of DB subnet groups.</p>
    DBSubnetGroupQuotaExceededFault(String),
    ///<p>Request would result in user exceeding the allowed number of subnets in a DB subnet groups.</p>
    DBSubnetQuotaExceededFault(String),
    ///<p>The requested subnet is invalid, or multiple subnets were requested that are not all in a common VPC.</p>
    InvalidSubnet(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl CreateDBSubnetGroupError {
    pub fn from_body(body: &str) -> CreateDBSubnetGroupError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "DBSubnetGroupAlreadyExistsFault" => CreateDBSubnetGroupError::DBSubnetGroupAlreadyExistsFault(String::from(parsed_error.message)),
                    "DBSubnetGroupDoesNotCoverEnoughAZs" => CreateDBSubnetGroupError::DBSubnetGroupDoesNotCoverEnoughAZs(String::from(parsed_error.message)),
                    "DBSubnetGroupQuotaExceededFault" => CreateDBSubnetGroupError::DBSubnetGroupQuotaExceededFault(String::from(parsed_error.message)),
                    "DBSubnetQuotaExceededFault" => CreateDBSubnetGroupError::DBSubnetQuotaExceededFault(String::from(parsed_error.message)),
                    "InvalidSubnet" => {
                        CreateDBSubnetGroupError::InvalidSubnet(String::from(parsed_error.message))
                    }
                    _ => CreateDBSubnetGroupError::Unknown(String::from(body)),
                }
            }
            Err(_) => CreateDBSubnetGroupError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for CreateDBSubnetGroupError {
    fn from(err: XmlParseError) -> CreateDBSubnetGroupError {
        let XmlParseError(message) = err;
        CreateDBSubnetGroupError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for CreateDBSubnetGroupError {
    fn from(err: CredentialsError) -> CreateDBSubnetGroupError {
        CreateDBSubnetGroupError::Credentials(err)
    }
}
impl From<HttpDispatchError> for CreateDBSubnetGroupError {
    fn from(err: HttpDispatchError) -> CreateDBSubnetGroupError {
        CreateDBSubnetGroupError::HttpDispatch(err)
    }
}
impl From<io::Error> for CreateDBSubnetGroupError {
    fn from(err: io::Error) -> CreateDBSubnetGroupError {
        CreateDBSubnetGroupError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for CreateDBSubnetGroupError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CreateDBSubnetGroupError {
    fn description(&self) -> &str {
        match *self {
            CreateDBSubnetGroupError::DBSubnetGroupAlreadyExistsFault(ref cause) => cause,
            CreateDBSubnetGroupError::DBSubnetGroupDoesNotCoverEnoughAZs(ref cause) => cause,
            CreateDBSubnetGroupError::DBSubnetGroupQuotaExceededFault(ref cause) => cause,
            CreateDBSubnetGroupError::DBSubnetQuotaExceededFault(ref cause) => cause,
            CreateDBSubnetGroupError::InvalidSubnet(ref cause) => cause,
            CreateDBSubnetGroupError::Validation(ref cause) => cause,
            CreateDBSubnetGroupError::Credentials(ref err) => err.description(),
            CreateDBSubnetGroupError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            CreateDBSubnetGroupError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by CreateEventSubscription
#[derive(Debug, PartialEq)]
pub enum CreateEventSubscriptionError {
    ///<p>You have reached the maximum number of event subscriptions.</p>
    EventSubscriptionQuotaExceededFault(String),
    ///<p>SNS has responded that there is a problem with the SND topic specified.</p>
    SNSInvalidTopicFault(String),
    ///<p>You do not have permission to publish to the SNS topic ARN.</p>
    SNSNoAuthorizationFault(String),
    ///<p>The SNS topic ARN does not exist.</p>
    SNSTopicArnNotFoundFault(String),
    ///<p>The requested source could not be found.</p>
    SourceNotFoundFault(String),
    ///<p>The supplied subscription name already exists.</p>
    SubscriptionAlreadyExistFault(String),
    ///<p>The supplied category does not exist.</p>
    SubscriptionCategoryNotFoundFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl CreateEventSubscriptionError {
    pub fn from_body(body: &str) -> CreateEventSubscriptionError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "EventSubscriptionQuotaExceededFault" => CreateEventSubscriptionError::EventSubscriptionQuotaExceededFault(String::from(parsed_error.message)),
                    "SNSInvalidTopicFault" => CreateEventSubscriptionError::SNSInvalidTopicFault(String::from(parsed_error.message)),
                    "SNSNoAuthorizationFault" => CreateEventSubscriptionError::SNSNoAuthorizationFault(String::from(parsed_error.message)),
                    "SNSTopicArnNotFoundFault" => CreateEventSubscriptionError::SNSTopicArnNotFoundFault(String::from(parsed_error.message)),
                    "SourceNotFoundFault" => CreateEventSubscriptionError::SourceNotFoundFault(String::from(parsed_error.message)),
                    "SubscriptionAlreadyExistFault" => CreateEventSubscriptionError::SubscriptionAlreadyExistFault(String::from(parsed_error.message)),
                    "SubscriptionCategoryNotFoundFault" => CreateEventSubscriptionError::SubscriptionCategoryNotFoundFault(String::from(parsed_error.message)),
                    _ => CreateEventSubscriptionError::Unknown(String::from(body)),
                }
            }
            Err(_) => CreateEventSubscriptionError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for CreateEventSubscriptionError {
    fn from(err: XmlParseError) -> CreateEventSubscriptionError {
        let XmlParseError(message) = err;
        CreateEventSubscriptionError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for CreateEventSubscriptionError {
    fn from(err: CredentialsError) -> CreateEventSubscriptionError {
        CreateEventSubscriptionError::Credentials(err)
    }
}
impl From<HttpDispatchError> for CreateEventSubscriptionError {
    fn from(err: HttpDispatchError) -> CreateEventSubscriptionError {
        CreateEventSubscriptionError::HttpDispatch(err)
    }
}
impl From<io::Error> for CreateEventSubscriptionError {
    fn from(err: io::Error) -> CreateEventSubscriptionError {
        CreateEventSubscriptionError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for CreateEventSubscriptionError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CreateEventSubscriptionError {
    fn description(&self) -> &str {
        match *self {
            CreateEventSubscriptionError::EventSubscriptionQuotaExceededFault(ref cause) => cause,
            CreateEventSubscriptionError::SNSInvalidTopicFault(ref cause) => cause,
            CreateEventSubscriptionError::SNSNoAuthorizationFault(ref cause) => cause,
            CreateEventSubscriptionError::SNSTopicArnNotFoundFault(ref cause) => cause,
            CreateEventSubscriptionError::SourceNotFoundFault(ref cause) => cause,
            CreateEventSubscriptionError::SubscriptionAlreadyExistFault(ref cause) => cause,
            CreateEventSubscriptionError::SubscriptionCategoryNotFoundFault(ref cause) => cause,
            CreateEventSubscriptionError::Validation(ref cause) => cause,
            CreateEventSubscriptionError::Credentials(ref err) => err.description(),
            CreateEventSubscriptionError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            CreateEventSubscriptionError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by CreateOptionGroup
#[derive(Debug, PartialEq)]
pub enum CreateOptionGroupError {
    ///<p>The option group you are trying to create already exists.</p>
    OptionGroupAlreadyExistsFault(String),
    ///<p>The quota of 20 option groups was exceeded for this AWS account.</p>
    OptionGroupQuotaExceededFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl CreateOptionGroupError {
    pub fn from_body(body: &str) -> CreateOptionGroupError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "OptionGroupAlreadyExistsFault" => CreateOptionGroupError::OptionGroupAlreadyExistsFault(String::from(parsed_error.message)),
                    "OptionGroupQuotaExceededFault" => CreateOptionGroupError::OptionGroupQuotaExceededFault(String::from(parsed_error.message)),
                    _ => CreateOptionGroupError::Unknown(String::from(body)),
                }
            }
            Err(_) => CreateOptionGroupError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for CreateOptionGroupError {
    fn from(err: XmlParseError) -> CreateOptionGroupError {
        let XmlParseError(message) = err;
        CreateOptionGroupError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for CreateOptionGroupError {
    fn from(err: CredentialsError) -> CreateOptionGroupError {
        CreateOptionGroupError::Credentials(err)
    }
}
impl From<HttpDispatchError> for CreateOptionGroupError {
    fn from(err: HttpDispatchError) -> CreateOptionGroupError {
        CreateOptionGroupError::HttpDispatch(err)
    }
}
impl From<io::Error> for CreateOptionGroupError {
    fn from(err: io::Error) -> CreateOptionGroupError {
        CreateOptionGroupError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for CreateOptionGroupError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CreateOptionGroupError {
    fn description(&self) -> &str {
        match *self {
            CreateOptionGroupError::OptionGroupAlreadyExistsFault(ref cause) => cause,
            CreateOptionGroupError::OptionGroupQuotaExceededFault(ref cause) => cause,
            CreateOptionGroupError::Validation(ref cause) => cause,
            CreateOptionGroupError::Credentials(ref err) => err.description(),
            CreateOptionGroupError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            CreateOptionGroupError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by DeleteDBCluster
#[derive(Debug, PartialEq)]
pub enum DeleteDBClusterError {
    ///<p> <i>DBClusterIdentifier</i> does not refer to an existing DB cluster. </p>
    DBClusterNotFoundFault(String),
    ///<p>User already has a DB cluster snapshot with the given identifier.</p>
    DBClusterSnapshotAlreadyExistsFault(String),
    ///<p>The supplied value is not a valid DB cluster snapshot state.</p>
    InvalidDBClusterSnapshotStateFault(String),
    ///<p>The DB cluster is not in a valid state.</p>
    InvalidDBClusterStateFault(String),
    ///<p>Request would result in user exceeding the allowed number of DB snapshots.</p>
    SnapshotQuotaExceededFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl DeleteDBClusterError {
    pub fn from_body(body: &str) -> DeleteDBClusterError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "DBClusterNotFoundFault" => DeleteDBClusterError::DBClusterNotFoundFault(String::from(parsed_error.message)),
                    "DBClusterSnapshotAlreadyExistsFault" => DeleteDBClusterError::DBClusterSnapshotAlreadyExistsFault(String::from(parsed_error.message)),
                    "InvalidDBClusterSnapshotStateFault" => DeleteDBClusterError::InvalidDBClusterSnapshotStateFault(String::from(parsed_error.message)),
                    "InvalidDBClusterStateFault" => DeleteDBClusterError::InvalidDBClusterStateFault(String::from(parsed_error.message)),
                    "SnapshotQuotaExceededFault" => DeleteDBClusterError::SnapshotQuotaExceededFault(String::from(parsed_error.message)),
                    _ => DeleteDBClusterError::Unknown(String::from(body)),
                }
            }
            Err(_) => DeleteDBClusterError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for DeleteDBClusterError {
    fn from(err: XmlParseError) -> DeleteDBClusterError {
        let XmlParseError(message) = err;
        DeleteDBClusterError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for DeleteDBClusterError {
    fn from(err: CredentialsError) -> DeleteDBClusterError {
        DeleteDBClusterError::Credentials(err)
    }
}
impl From<HttpDispatchError> for DeleteDBClusterError {
    fn from(err: HttpDispatchError) -> DeleteDBClusterError {
        DeleteDBClusterError::HttpDispatch(err)
    }
}
impl From<io::Error> for DeleteDBClusterError {
    fn from(err: io::Error) -> DeleteDBClusterError {
        DeleteDBClusterError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for DeleteDBClusterError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DeleteDBClusterError {
    fn description(&self) -> &str {
        match *self {
            DeleteDBClusterError::DBClusterNotFoundFault(ref cause) => cause,
            DeleteDBClusterError::DBClusterSnapshotAlreadyExistsFault(ref cause) => cause,
            DeleteDBClusterError::InvalidDBClusterSnapshotStateFault(ref cause) => cause,
            DeleteDBClusterError::InvalidDBClusterStateFault(ref cause) => cause,
            DeleteDBClusterError::SnapshotQuotaExceededFault(ref cause) => cause,
            DeleteDBClusterError::Validation(ref cause) => cause,
            DeleteDBClusterError::Credentials(ref err) => err.description(),
            DeleteDBClusterError::HttpDispatch(ref dispatch_error) => dispatch_error.description(),
            DeleteDBClusterError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by DeleteDBClusterParameterGroup
#[derive(Debug, PartialEq)]
pub enum DeleteDBClusterParameterGroupError {
    ///<p> <i>DBParameterGroupName</i> does not refer to an existing DB parameter group. </p>
    DBParameterGroupNotFoundFault(String),
    ///<p>The DB parameter group is in use or is in an invalid state. If you are attempting to delete the parameter group, you cannot delete it when the parameter group is in this state.</p>
    InvalidDBParameterGroupStateFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl DeleteDBClusterParameterGroupError {
    pub fn from_body(body: &str) -> DeleteDBClusterParameterGroupError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "DBParameterGroupNotFoundFault" => DeleteDBClusterParameterGroupError::DBParameterGroupNotFoundFault(String::from(parsed_error.message)),
                    "InvalidDBParameterGroupStateFault" => DeleteDBClusterParameterGroupError::InvalidDBParameterGroupStateFault(String::from(parsed_error.message)),
                    _ => DeleteDBClusterParameterGroupError::Unknown(String::from(body)),
                }
            }
            Err(_) => DeleteDBClusterParameterGroupError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for DeleteDBClusterParameterGroupError {
    fn from(err: XmlParseError) -> DeleteDBClusterParameterGroupError {
        let XmlParseError(message) = err;
        DeleteDBClusterParameterGroupError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for DeleteDBClusterParameterGroupError {
    fn from(err: CredentialsError) -> DeleteDBClusterParameterGroupError {
        DeleteDBClusterParameterGroupError::Credentials(err)
    }
}
impl From<HttpDispatchError> for DeleteDBClusterParameterGroupError {
    fn from(err: HttpDispatchError) -> DeleteDBClusterParameterGroupError {
        DeleteDBClusterParameterGroupError::HttpDispatch(err)
    }
}
impl From<io::Error> for DeleteDBClusterParameterGroupError {
    fn from(err: io::Error) -> DeleteDBClusterParameterGroupError {
        DeleteDBClusterParameterGroupError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for DeleteDBClusterParameterGroupError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DeleteDBClusterParameterGroupError {
    fn description(&self) -> &str {
        match *self {
            DeleteDBClusterParameterGroupError::DBParameterGroupNotFoundFault(ref cause) => cause,
            DeleteDBClusterParameterGroupError::InvalidDBParameterGroupStateFault(ref cause) => {
                cause
            }
            DeleteDBClusterParameterGroupError::Validation(ref cause) => cause,
            DeleteDBClusterParameterGroupError::Credentials(ref err) => err.description(),
            DeleteDBClusterParameterGroupError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            DeleteDBClusterParameterGroupError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by DeleteDBClusterSnapshot
#[derive(Debug, PartialEq)]
pub enum DeleteDBClusterSnapshotError {
    ///<p> <i>DBClusterSnapshotIdentifier</i> does not refer to an existing DB cluster snapshot. </p>
    DBClusterSnapshotNotFoundFault(String),
    ///<p>The supplied value is not a valid DB cluster snapshot state.</p>
    InvalidDBClusterSnapshotStateFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl DeleteDBClusterSnapshotError {
    pub fn from_body(body: &str) -> DeleteDBClusterSnapshotError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "DBClusterSnapshotNotFoundFault" => DeleteDBClusterSnapshotError::DBClusterSnapshotNotFoundFault(String::from(parsed_error.message)),
                    "InvalidDBClusterSnapshotStateFault" => DeleteDBClusterSnapshotError::InvalidDBClusterSnapshotStateFault(String::from(parsed_error.message)),
                    _ => DeleteDBClusterSnapshotError::Unknown(String::from(body)),
                }
            }
            Err(_) => DeleteDBClusterSnapshotError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for DeleteDBClusterSnapshotError {
    fn from(err: XmlParseError) -> DeleteDBClusterSnapshotError {
        let XmlParseError(message) = err;
        DeleteDBClusterSnapshotError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for DeleteDBClusterSnapshotError {
    fn from(err: CredentialsError) -> DeleteDBClusterSnapshotError {
        DeleteDBClusterSnapshotError::Credentials(err)
    }
}
impl From<HttpDispatchError> for DeleteDBClusterSnapshotError {
    fn from(err: HttpDispatchError) -> DeleteDBClusterSnapshotError {
        DeleteDBClusterSnapshotError::HttpDispatch(err)
    }
}
impl From<io::Error> for DeleteDBClusterSnapshotError {
    fn from(err: io::Error) -> DeleteDBClusterSnapshotError {
        DeleteDBClusterSnapshotError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for DeleteDBClusterSnapshotError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DeleteDBClusterSnapshotError {
    fn description(&self) -> &str {
        match *self {
            DeleteDBClusterSnapshotError::DBClusterSnapshotNotFoundFault(ref cause) => cause,
            DeleteDBClusterSnapshotError::InvalidDBClusterSnapshotStateFault(ref cause) => cause,
            DeleteDBClusterSnapshotError::Validation(ref cause) => cause,
            DeleteDBClusterSnapshotError::Credentials(ref err) => err.description(),
            DeleteDBClusterSnapshotError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            DeleteDBClusterSnapshotError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by DeleteDBInstance
#[derive(Debug, PartialEq)]
pub enum DeleteDBInstanceError {
    ///<p> <i>DBInstanceIdentifier</i> does not refer to an existing DB instance. </p>
    DBInstanceNotFoundFault(String),
    ///<p> <i>DBSnapshotIdentifier</i> is already used by an existing snapshot. </p>
    DBSnapshotAlreadyExistsFault(String),
    ///<p>The DB cluster is not in a valid state.</p>
    InvalidDBClusterStateFault(String),
    ///<p> The specified DB instance is not in the <i>available</i> state. </p>
    InvalidDBInstanceStateFault(String),
    ///<p>Request would result in user exceeding the allowed number of DB snapshots.</p>
    SnapshotQuotaExceededFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl DeleteDBInstanceError {
    pub fn from_body(body: &str) -> DeleteDBInstanceError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "DBInstanceNotFoundFault" => DeleteDBInstanceError::DBInstanceNotFoundFault(String::from(parsed_error.message)),
                    "DBSnapshotAlreadyExistsFault" => DeleteDBInstanceError::DBSnapshotAlreadyExistsFault(String::from(parsed_error.message)),
                    "InvalidDBClusterStateFault" => DeleteDBInstanceError::InvalidDBClusterStateFault(String::from(parsed_error.message)),
                    "InvalidDBInstanceStateFault" => DeleteDBInstanceError::InvalidDBInstanceStateFault(String::from(parsed_error.message)),
                    "SnapshotQuotaExceededFault" => DeleteDBInstanceError::SnapshotQuotaExceededFault(String::from(parsed_error.message)),
                    _ => DeleteDBInstanceError::Unknown(String::from(body)),
                }
            }
            Err(_) => DeleteDBInstanceError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for DeleteDBInstanceError {
    fn from(err: XmlParseError) -> DeleteDBInstanceError {
        let XmlParseError(message) = err;
        DeleteDBInstanceError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for DeleteDBInstanceError {
    fn from(err: CredentialsError) -> DeleteDBInstanceError {
        DeleteDBInstanceError::Credentials(err)
    }
}
impl From<HttpDispatchError> for DeleteDBInstanceError {
    fn from(err: HttpDispatchError) -> DeleteDBInstanceError {
        DeleteDBInstanceError::HttpDispatch(err)
    }
}
impl From<io::Error> for DeleteDBInstanceError {
    fn from(err: io::Error) -> DeleteDBInstanceError {
        DeleteDBInstanceError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for DeleteDBInstanceError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DeleteDBInstanceError {
    fn description(&self) -> &str {
        match *self {
            DeleteDBInstanceError::DBInstanceNotFoundFault(ref cause) => cause,
            DeleteDBInstanceError::DBSnapshotAlreadyExistsFault(ref cause) => cause,
            DeleteDBInstanceError::InvalidDBClusterStateFault(ref cause) => cause,
            DeleteDBInstanceError::InvalidDBInstanceStateFault(ref cause) => cause,
            DeleteDBInstanceError::SnapshotQuotaExceededFault(ref cause) => cause,
            DeleteDBInstanceError::Validation(ref cause) => cause,
            DeleteDBInstanceError::Credentials(ref err) => err.description(),
            DeleteDBInstanceError::HttpDispatch(ref dispatch_error) => dispatch_error.description(),
            DeleteDBInstanceError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by DeleteDBParameterGroup
#[derive(Debug, PartialEq)]
pub enum DeleteDBParameterGroupError {
    ///<p> <i>DBParameterGroupName</i> does not refer to an existing DB parameter group. </p>
    DBParameterGroupNotFoundFault(String),
    ///<p>The DB parameter group is in use or is in an invalid state. If you are attempting to delete the parameter group, you cannot delete it when the parameter group is in this state.</p>
    InvalidDBParameterGroupStateFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl DeleteDBParameterGroupError {
    pub fn from_body(body: &str) -> DeleteDBParameterGroupError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "DBParameterGroupNotFoundFault" => DeleteDBParameterGroupError::DBParameterGroupNotFoundFault(String::from(parsed_error.message)),
                    "InvalidDBParameterGroupStateFault" => DeleteDBParameterGroupError::InvalidDBParameterGroupStateFault(String::from(parsed_error.message)),
                    _ => DeleteDBParameterGroupError::Unknown(String::from(body)),
                }
            }
            Err(_) => DeleteDBParameterGroupError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for DeleteDBParameterGroupError {
    fn from(err: XmlParseError) -> DeleteDBParameterGroupError {
        let XmlParseError(message) = err;
        DeleteDBParameterGroupError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for DeleteDBParameterGroupError {
    fn from(err: CredentialsError) -> DeleteDBParameterGroupError {
        DeleteDBParameterGroupError::Credentials(err)
    }
}
impl From<HttpDispatchError> for DeleteDBParameterGroupError {
    fn from(err: HttpDispatchError) -> DeleteDBParameterGroupError {
        DeleteDBParameterGroupError::HttpDispatch(err)
    }
}
impl From<io::Error> for DeleteDBParameterGroupError {
    fn from(err: io::Error) -> DeleteDBParameterGroupError {
        DeleteDBParameterGroupError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for DeleteDBParameterGroupError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DeleteDBParameterGroupError {
    fn description(&self) -> &str {
        match *self {
            DeleteDBParameterGroupError::DBParameterGroupNotFoundFault(ref cause) => cause,
            DeleteDBParameterGroupError::InvalidDBParameterGroupStateFault(ref cause) => cause,
            DeleteDBParameterGroupError::Validation(ref cause) => cause,
            DeleteDBParameterGroupError::Credentials(ref err) => err.description(),
            DeleteDBParameterGroupError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            DeleteDBParameterGroupError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by DeleteDBSecurityGroup
#[derive(Debug, PartialEq)]
pub enum DeleteDBSecurityGroupError {
    ///<p> <i>DBSecurityGroupName</i> does not refer to an existing DB security group. </p>
    DBSecurityGroupNotFoundFault(String),
    ///<p>The state of the DB security group does not allow deletion.</p>
    InvalidDBSecurityGroupStateFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl DeleteDBSecurityGroupError {
    pub fn from_body(body: &str) -> DeleteDBSecurityGroupError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "DBSecurityGroupNotFoundFault" => DeleteDBSecurityGroupError::DBSecurityGroupNotFoundFault(String::from(parsed_error.message)),
                    "InvalidDBSecurityGroupStateFault" => DeleteDBSecurityGroupError::InvalidDBSecurityGroupStateFault(String::from(parsed_error.message)),
                    _ => DeleteDBSecurityGroupError::Unknown(String::from(body)),
                }
            }
            Err(_) => DeleteDBSecurityGroupError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for DeleteDBSecurityGroupError {
    fn from(err: XmlParseError) -> DeleteDBSecurityGroupError {
        let XmlParseError(message) = err;
        DeleteDBSecurityGroupError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for DeleteDBSecurityGroupError {
    fn from(err: CredentialsError) -> DeleteDBSecurityGroupError {
        DeleteDBSecurityGroupError::Credentials(err)
    }
}
impl From<HttpDispatchError> for DeleteDBSecurityGroupError {
    fn from(err: HttpDispatchError) -> DeleteDBSecurityGroupError {
        DeleteDBSecurityGroupError::HttpDispatch(err)
    }
}
impl From<io::Error> for DeleteDBSecurityGroupError {
    fn from(err: io::Error) -> DeleteDBSecurityGroupError {
        DeleteDBSecurityGroupError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for DeleteDBSecurityGroupError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DeleteDBSecurityGroupError {
    fn description(&self) -> &str {
        match *self {
            DeleteDBSecurityGroupError::DBSecurityGroupNotFoundFault(ref cause) => cause,
            DeleteDBSecurityGroupError::InvalidDBSecurityGroupStateFault(ref cause) => cause,
            DeleteDBSecurityGroupError::Validation(ref cause) => cause,
            DeleteDBSecurityGroupError::Credentials(ref err) => err.description(),
            DeleteDBSecurityGroupError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            DeleteDBSecurityGroupError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by DeleteDBSnapshot
#[derive(Debug, PartialEq)]
pub enum DeleteDBSnapshotError {
    ///<p> <i>DBSnapshotIdentifier</i> does not refer to an existing DB snapshot. </p>
    DBSnapshotNotFoundFault(String),
    ///<p>The state of the DB snapshot does not allow deletion.</p>
    InvalidDBSnapshotStateFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl DeleteDBSnapshotError {
    pub fn from_body(body: &str) -> DeleteDBSnapshotError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "DBSnapshotNotFoundFault" => DeleteDBSnapshotError::DBSnapshotNotFoundFault(String::from(parsed_error.message)),
                    "InvalidDBSnapshotStateFault" => DeleteDBSnapshotError::InvalidDBSnapshotStateFault(String::from(parsed_error.message)),
                    _ => DeleteDBSnapshotError::Unknown(String::from(body)),
                }
            }
            Err(_) => DeleteDBSnapshotError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for DeleteDBSnapshotError {
    fn from(err: XmlParseError) -> DeleteDBSnapshotError {
        let XmlParseError(message) = err;
        DeleteDBSnapshotError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for DeleteDBSnapshotError {
    fn from(err: CredentialsError) -> DeleteDBSnapshotError {
        DeleteDBSnapshotError::Credentials(err)
    }
}
impl From<HttpDispatchError> for DeleteDBSnapshotError {
    fn from(err: HttpDispatchError) -> DeleteDBSnapshotError {
        DeleteDBSnapshotError::HttpDispatch(err)
    }
}
impl From<io::Error> for DeleteDBSnapshotError {
    fn from(err: io::Error) -> DeleteDBSnapshotError {
        DeleteDBSnapshotError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for DeleteDBSnapshotError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DeleteDBSnapshotError {
    fn description(&self) -> &str {
        match *self {
            DeleteDBSnapshotError::DBSnapshotNotFoundFault(ref cause) => cause,
            DeleteDBSnapshotError::InvalidDBSnapshotStateFault(ref cause) => cause,
            DeleteDBSnapshotError::Validation(ref cause) => cause,
            DeleteDBSnapshotError::Credentials(ref err) => err.description(),
            DeleteDBSnapshotError::HttpDispatch(ref dispatch_error) => dispatch_error.description(),
            DeleteDBSnapshotError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by DeleteDBSubnetGroup
#[derive(Debug, PartialEq)]
pub enum DeleteDBSubnetGroupError {
    ///<p> <i>DBSubnetGroupName</i> does not refer to an existing DB subnet group. </p>
    DBSubnetGroupNotFoundFault(String),
    ///<p>The DB subnet group cannot be deleted because it is in use.</p>
    InvalidDBSubnetGroupStateFault(String),
    ///<p> The DB subnet is not in the <i>available</i> state. </p>
    InvalidDBSubnetStateFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl DeleteDBSubnetGroupError {
    pub fn from_body(body: &str) -> DeleteDBSubnetGroupError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "DBSubnetGroupNotFoundFault" => DeleteDBSubnetGroupError::DBSubnetGroupNotFoundFault(String::from(parsed_error.message)),
                    "InvalidDBSubnetGroupStateFault" => DeleteDBSubnetGroupError::InvalidDBSubnetGroupStateFault(String::from(parsed_error.message)),
                    "InvalidDBSubnetStateFault" => DeleteDBSubnetGroupError::InvalidDBSubnetStateFault(String::from(parsed_error.message)),
                    _ => DeleteDBSubnetGroupError::Unknown(String::from(body)),
                }
            }
            Err(_) => DeleteDBSubnetGroupError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for DeleteDBSubnetGroupError {
    fn from(err: XmlParseError) -> DeleteDBSubnetGroupError {
        let XmlParseError(message) = err;
        DeleteDBSubnetGroupError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for DeleteDBSubnetGroupError {
    fn from(err: CredentialsError) -> DeleteDBSubnetGroupError {
        DeleteDBSubnetGroupError::Credentials(err)
    }
}
impl From<HttpDispatchError> for DeleteDBSubnetGroupError {
    fn from(err: HttpDispatchError) -> DeleteDBSubnetGroupError {
        DeleteDBSubnetGroupError::HttpDispatch(err)
    }
}
impl From<io::Error> for DeleteDBSubnetGroupError {
    fn from(err: io::Error) -> DeleteDBSubnetGroupError {
        DeleteDBSubnetGroupError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for DeleteDBSubnetGroupError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DeleteDBSubnetGroupError {
    fn description(&self) -> &str {
        match *self {
            DeleteDBSubnetGroupError::DBSubnetGroupNotFoundFault(ref cause) => cause,
            DeleteDBSubnetGroupError::InvalidDBSubnetGroupStateFault(ref cause) => cause,
            DeleteDBSubnetGroupError::InvalidDBSubnetStateFault(ref cause) => cause,
            DeleteDBSubnetGroupError::Validation(ref cause) => cause,
            DeleteDBSubnetGroupError::Credentials(ref err) => err.description(),
            DeleteDBSubnetGroupError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            DeleteDBSubnetGroupError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by DeleteEventSubscription
#[derive(Debug, PartialEq)]
pub enum DeleteEventSubscriptionError {
    ///<p>This error can occur if someone else is modifying a subscription. You should retry the action.</p>
    InvalidEventSubscriptionStateFault(String),
    ///<p>The subscription name does not exist.</p>
    SubscriptionNotFoundFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl DeleteEventSubscriptionError {
    pub fn from_body(body: &str) -> DeleteEventSubscriptionError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "InvalidEventSubscriptionStateFault" => DeleteEventSubscriptionError::InvalidEventSubscriptionStateFault(String::from(parsed_error.message)),
                    "SubscriptionNotFoundFault" => DeleteEventSubscriptionError::SubscriptionNotFoundFault(String::from(parsed_error.message)),
                    _ => DeleteEventSubscriptionError::Unknown(String::from(body)),
                }
            }
            Err(_) => DeleteEventSubscriptionError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for DeleteEventSubscriptionError {
    fn from(err: XmlParseError) -> DeleteEventSubscriptionError {
        let XmlParseError(message) = err;
        DeleteEventSubscriptionError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for DeleteEventSubscriptionError {
    fn from(err: CredentialsError) -> DeleteEventSubscriptionError {
        DeleteEventSubscriptionError::Credentials(err)
    }
}
impl From<HttpDispatchError> for DeleteEventSubscriptionError {
    fn from(err: HttpDispatchError) -> DeleteEventSubscriptionError {
        DeleteEventSubscriptionError::HttpDispatch(err)
    }
}
impl From<io::Error> for DeleteEventSubscriptionError {
    fn from(err: io::Error) -> DeleteEventSubscriptionError {
        DeleteEventSubscriptionError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for DeleteEventSubscriptionError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DeleteEventSubscriptionError {
    fn description(&self) -> &str {
        match *self {
            DeleteEventSubscriptionError::InvalidEventSubscriptionStateFault(ref cause) => cause,
            DeleteEventSubscriptionError::SubscriptionNotFoundFault(ref cause) => cause,
            DeleteEventSubscriptionError::Validation(ref cause) => cause,
            DeleteEventSubscriptionError::Credentials(ref err) => err.description(),
            DeleteEventSubscriptionError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            DeleteEventSubscriptionError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by DeleteOptionGroup
#[derive(Debug, PartialEq)]
pub enum DeleteOptionGroupError {
    ///<p> The option group is not in the <i>available</i> state. </p>
    InvalidOptionGroupStateFault(String),
    ///<p>The specified option group could not be found.</p>
    OptionGroupNotFoundFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl DeleteOptionGroupError {
    pub fn from_body(body: &str) -> DeleteOptionGroupError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "InvalidOptionGroupStateFault" => DeleteOptionGroupError::InvalidOptionGroupStateFault(String::from(parsed_error.message)),
                    "OptionGroupNotFoundFault" => DeleteOptionGroupError::OptionGroupNotFoundFault(String::from(parsed_error.message)),
                    _ => DeleteOptionGroupError::Unknown(String::from(body)),
                }
            }
            Err(_) => DeleteOptionGroupError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for DeleteOptionGroupError {
    fn from(err: XmlParseError) -> DeleteOptionGroupError {
        let XmlParseError(message) = err;
        DeleteOptionGroupError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for DeleteOptionGroupError {
    fn from(err: CredentialsError) -> DeleteOptionGroupError {
        DeleteOptionGroupError::Credentials(err)
    }
}
impl From<HttpDispatchError> for DeleteOptionGroupError {
    fn from(err: HttpDispatchError) -> DeleteOptionGroupError {
        DeleteOptionGroupError::HttpDispatch(err)
    }
}
impl From<io::Error> for DeleteOptionGroupError {
    fn from(err: io::Error) -> DeleteOptionGroupError {
        DeleteOptionGroupError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for DeleteOptionGroupError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DeleteOptionGroupError {
    fn description(&self) -> &str {
        match *self {
            DeleteOptionGroupError::InvalidOptionGroupStateFault(ref cause) => cause,
            DeleteOptionGroupError::OptionGroupNotFoundFault(ref cause) => cause,
            DeleteOptionGroupError::Validation(ref cause) => cause,
            DeleteOptionGroupError::Credentials(ref err) => err.description(),
            DeleteOptionGroupError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            DeleteOptionGroupError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by DescribeAccountAttributes
#[derive(Debug, PartialEq)]
pub enum DescribeAccountAttributesError {
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl DescribeAccountAttributesError {
    pub fn from_body(body: &str) -> DescribeAccountAttributesError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    _ => DescribeAccountAttributesError::Unknown(String::from(body)),
                }
            }
            Err(_) => DescribeAccountAttributesError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for DescribeAccountAttributesError {
    fn from(err: XmlParseError) -> DescribeAccountAttributesError {
        let XmlParseError(message) = err;
        DescribeAccountAttributesError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for DescribeAccountAttributesError {
    fn from(err: CredentialsError) -> DescribeAccountAttributesError {
        DescribeAccountAttributesError::Credentials(err)
    }
}
impl From<HttpDispatchError> for DescribeAccountAttributesError {
    fn from(err: HttpDispatchError) -> DescribeAccountAttributesError {
        DescribeAccountAttributesError::HttpDispatch(err)
    }
}
impl From<io::Error> for DescribeAccountAttributesError {
    fn from(err: io::Error) -> DescribeAccountAttributesError {
        DescribeAccountAttributesError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for DescribeAccountAttributesError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeAccountAttributesError {
    fn description(&self) -> &str {
        match *self {
            DescribeAccountAttributesError::Validation(ref cause) => cause,
            DescribeAccountAttributesError::Credentials(ref err) => err.description(),
            DescribeAccountAttributesError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            DescribeAccountAttributesError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by DescribeCertificates
#[derive(Debug, PartialEq)]
pub enum DescribeCertificatesError {
    ///<p> <i>CertificateIdentifier</i> does not refer to an existing certificate. </p>
    CertificateNotFoundFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl DescribeCertificatesError {
    pub fn from_body(body: &str) -> DescribeCertificatesError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "CertificateNotFoundFault" => DescribeCertificatesError::CertificateNotFoundFault(String::from(parsed_error.message)),
                    _ => DescribeCertificatesError::Unknown(String::from(body)),
                }
            }
            Err(_) => DescribeCertificatesError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for DescribeCertificatesError {
    fn from(err: XmlParseError) -> DescribeCertificatesError {
        let XmlParseError(message) = err;
        DescribeCertificatesError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for DescribeCertificatesError {
    fn from(err: CredentialsError) -> DescribeCertificatesError {
        DescribeCertificatesError::Credentials(err)
    }
}
impl From<HttpDispatchError> for DescribeCertificatesError {
    fn from(err: HttpDispatchError) -> DescribeCertificatesError {
        DescribeCertificatesError::HttpDispatch(err)
    }
}
impl From<io::Error> for DescribeCertificatesError {
    fn from(err: io::Error) -> DescribeCertificatesError {
        DescribeCertificatesError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for DescribeCertificatesError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeCertificatesError {
    fn description(&self) -> &str {
        match *self {
            DescribeCertificatesError::CertificateNotFoundFault(ref cause) => cause,
            DescribeCertificatesError::Validation(ref cause) => cause,
            DescribeCertificatesError::Credentials(ref err) => err.description(),
            DescribeCertificatesError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            DescribeCertificatesError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by DescribeDBClusterParameterGroups
#[derive(Debug, PartialEq)]
pub enum DescribeDBClusterParameterGroupsError {
    ///<p> <i>DBParameterGroupName</i> does not refer to an existing DB parameter group. </p>
    DBParameterGroupNotFoundFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl DescribeDBClusterParameterGroupsError {
    pub fn from_body(body: &str) -> DescribeDBClusterParameterGroupsError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "DBParameterGroupNotFoundFault" => DescribeDBClusterParameterGroupsError::DBParameterGroupNotFoundFault(String::from(parsed_error.message)),
                    _ => DescribeDBClusterParameterGroupsError::Unknown(String::from(body)),
                }
            }
            Err(_) => DescribeDBClusterParameterGroupsError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for DescribeDBClusterParameterGroupsError {
    fn from(err: XmlParseError) -> DescribeDBClusterParameterGroupsError {
        let XmlParseError(message) = err;
        DescribeDBClusterParameterGroupsError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for DescribeDBClusterParameterGroupsError {
    fn from(err: CredentialsError) -> DescribeDBClusterParameterGroupsError {
        DescribeDBClusterParameterGroupsError::Credentials(err)
    }
}
impl From<HttpDispatchError> for DescribeDBClusterParameterGroupsError {
    fn from(err: HttpDispatchError) -> DescribeDBClusterParameterGroupsError {
        DescribeDBClusterParameterGroupsError::HttpDispatch(err)
    }
}
impl From<io::Error> for DescribeDBClusterParameterGroupsError {
    fn from(err: io::Error) -> DescribeDBClusterParameterGroupsError {
        DescribeDBClusterParameterGroupsError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for DescribeDBClusterParameterGroupsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeDBClusterParameterGroupsError {
    fn description(&self) -> &str {
        match *self {
            DescribeDBClusterParameterGroupsError::DBParameterGroupNotFoundFault(ref cause) => {
                cause
            }
            DescribeDBClusterParameterGroupsError::Validation(ref cause) => cause,
            DescribeDBClusterParameterGroupsError::Credentials(ref err) => err.description(),
            DescribeDBClusterParameterGroupsError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            DescribeDBClusterParameterGroupsError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by DescribeDBClusterParameters
#[derive(Debug, PartialEq)]
pub enum DescribeDBClusterParametersError {
    ///<p> <i>DBParameterGroupName</i> does not refer to an existing DB parameter group. </p>
    DBParameterGroupNotFoundFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl DescribeDBClusterParametersError {
    pub fn from_body(body: &str) -> DescribeDBClusterParametersError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "DBParameterGroupNotFoundFault" => DescribeDBClusterParametersError::DBParameterGroupNotFoundFault(String::from(parsed_error.message)),
                    _ => DescribeDBClusterParametersError::Unknown(String::from(body)),
                }
            }
            Err(_) => DescribeDBClusterParametersError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for DescribeDBClusterParametersError {
    fn from(err: XmlParseError) -> DescribeDBClusterParametersError {
        let XmlParseError(message) = err;
        DescribeDBClusterParametersError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for DescribeDBClusterParametersError {
    fn from(err: CredentialsError) -> DescribeDBClusterParametersError {
        DescribeDBClusterParametersError::Credentials(err)
    }
}
impl From<HttpDispatchError> for DescribeDBClusterParametersError {
    fn from(err: HttpDispatchError) -> DescribeDBClusterParametersError {
        DescribeDBClusterParametersError::HttpDispatch(err)
    }
}
impl From<io::Error> for DescribeDBClusterParametersError {
    fn from(err: io::Error) -> DescribeDBClusterParametersError {
        DescribeDBClusterParametersError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for DescribeDBClusterParametersError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeDBClusterParametersError {
    fn description(&self) -> &str {
        match *self {
            DescribeDBClusterParametersError::DBParameterGroupNotFoundFault(ref cause) => cause,
            DescribeDBClusterParametersError::Validation(ref cause) => cause,
            DescribeDBClusterParametersError::Credentials(ref err) => err.description(),
            DescribeDBClusterParametersError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            DescribeDBClusterParametersError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by DescribeDBClusterSnapshotAttributes
#[derive(Debug, PartialEq)]
pub enum DescribeDBClusterSnapshotAttributesError {
    ///<p> <i>DBClusterSnapshotIdentifier</i> does not refer to an existing DB cluster snapshot. </p>
    DBClusterSnapshotNotFoundFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl DescribeDBClusterSnapshotAttributesError {
    pub fn from_body(body: &str) -> DescribeDBClusterSnapshotAttributesError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "DBClusterSnapshotNotFoundFault" => DescribeDBClusterSnapshotAttributesError::DBClusterSnapshotNotFoundFault(String::from(parsed_error.message)),
                    _ => DescribeDBClusterSnapshotAttributesError::Unknown(String::from(body)),
                }
            }
            Err(_) => DescribeDBClusterSnapshotAttributesError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for DescribeDBClusterSnapshotAttributesError {
    fn from(err: XmlParseError) -> DescribeDBClusterSnapshotAttributesError {
        let XmlParseError(message) = err;
        DescribeDBClusterSnapshotAttributesError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for DescribeDBClusterSnapshotAttributesError {
    fn from(err: CredentialsError) -> DescribeDBClusterSnapshotAttributesError {
        DescribeDBClusterSnapshotAttributesError::Credentials(err)
    }
}
impl From<HttpDispatchError> for DescribeDBClusterSnapshotAttributesError {
    fn from(err: HttpDispatchError) -> DescribeDBClusterSnapshotAttributesError {
        DescribeDBClusterSnapshotAttributesError::HttpDispatch(err)
    }
}
impl From<io::Error> for DescribeDBClusterSnapshotAttributesError {
    fn from(err: io::Error) -> DescribeDBClusterSnapshotAttributesError {
        DescribeDBClusterSnapshotAttributesError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for DescribeDBClusterSnapshotAttributesError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeDBClusterSnapshotAttributesError {
    fn description(&self) -> &str {
        match *self {
            DescribeDBClusterSnapshotAttributesError::DBClusterSnapshotNotFoundFault(ref cause) => {
                cause
            }
            DescribeDBClusterSnapshotAttributesError::Validation(ref cause) => cause,
            DescribeDBClusterSnapshotAttributesError::Credentials(ref err) => err.description(),
            DescribeDBClusterSnapshotAttributesError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            DescribeDBClusterSnapshotAttributesError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by DescribeDBClusterSnapshots
#[derive(Debug, PartialEq)]
pub enum DescribeDBClusterSnapshotsError {
    ///<p> <i>DBClusterSnapshotIdentifier</i> does not refer to an existing DB cluster snapshot. </p>
    DBClusterSnapshotNotFoundFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl DescribeDBClusterSnapshotsError {
    pub fn from_body(body: &str) -> DescribeDBClusterSnapshotsError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "DBClusterSnapshotNotFoundFault" => DescribeDBClusterSnapshotsError::DBClusterSnapshotNotFoundFault(String::from(parsed_error.message)),
                    _ => DescribeDBClusterSnapshotsError::Unknown(String::from(body)),
                }
            }
            Err(_) => DescribeDBClusterSnapshotsError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for DescribeDBClusterSnapshotsError {
    fn from(err: XmlParseError) -> DescribeDBClusterSnapshotsError {
        let XmlParseError(message) = err;
        DescribeDBClusterSnapshotsError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for DescribeDBClusterSnapshotsError {
    fn from(err: CredentialsError) -> DescribeDBClusterSnapshotsError {
        DescribeDBClusterSnapshotsError::Credentials(err)
    }
}
impl From<HttpDispatchError> for DescribeDBClusterSnapshotsError {
    fn from(err: HttpDispatchError) -> DescribeDBClusterSnapshotsError {
        DescribeDBClusterSnapshotsError::HttpDispatch(err)
    }
}
impl From<io::Error> for DescribeDBClusterSnapshotsError {
    fn from(err: io::Error) -> DescribeDBClusterSnapshotsError {
        DescribeDBClusterSnapshotsError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for DescribeDBClusterSnapshotsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeDBClusterSnapshotsError {
    fn description(&self) -> &str {
        match *self {
            DescribeDBClusterSnapshotsError::DBClusterSnapshotNotFoundFault(ref cause) => cause,
            DescribeDBClusterSnapshotsError::Validation(ref cause) => cause,
            DescribeDBClusterSnapshotsError::Credentials(ref err) => err.description(),
            DescribeDBClusterSnapshotsError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            DescribeDBClusterSnapshotsError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by DescribeDBClusters
#[derive(Debug, PartialEq)]
pub enum DescribeDBClustersError {
    ///<p> <i>DBClusterIdentifier</i> does not refer to an existing DB cluster. </p>
    DBClusterNotFoundFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl DescribeDBClustersError {
    pub fn from_body(body: &str) -> DescribeDBClustersError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "DBClusterNotFoundFault" => DescribeDBClustersError::DBClusterNotFoundFault(String::from(parsed_error.message)),
                    _ => DescribeDBClustersError::Unknown(String::from(body)),
                }
            }
            Err(_) => DescribeDBClustersError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for DescribeDBClustersError {
    fn from(err: XmlParseError) -> DescribeDBClustersError {
        let XmlParseError(message) = err;
        DescribeDBClustersError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for DescribeDBClustersError {
    fn from(err: CredentialsError) -> DescribeDBClustersError {
        DescribeDBClustersError::Credentials(err)
    }
}
impl From<HttpDispatchError> for DescribeDBClustersError {
    fn from(err: HttpDispatchError) -> DescribeDBClustersError {
        DescribeDBClustersError::HttpDispatch(err)
    }
}
impl From<io::Error> for DescribeDBClustersError {
    fn from(err: io::Error) -> DescribeDBClustersError {
        DescribeDBClustersError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for DescribeDBClustersError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeDBClustersError {
    fn description(&self) -> &str {
        match *self {
            DescribeDBClustersError::DBClusterNotFoundFault(ref cause) => cause,
            DescribeDBClustersError::Validation(ref cause) => cause,
            DescribeDBClustersError::Credentials(ref err) => err.description(),
            DescribeDBClustersError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            DescribeDBClustersError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by DescribeDBEngineVersions
#[derive(Debug, PartialEq)]
pub enum DescribeDBEngineVersionsError {
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl DescribeDBEngineVersionsError {
    pub fn from_body(body: &str) -> DescribeDBEngineVersionsError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    _ => DescribeDBEngineVersionsError::Unknown(String::from(body)),
                }
            }
            Err(_) => DescribeDBEngineVersionsError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for DescribeDBEngineVersionsError {
    fn from(err: XmlParseError) -> DescribeDBEngineVersionsError {
        let XmlParseError(message) = err;
        DescribeDBEngineVersionsError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for DescribeDBEngineVersionsError {
    fn from(err: CredentialsError) -> DescribeDBEngineVersionsError {
        DescribeDBEngineVersionsError::Credentials(err)
    }
}
impl From<HttpDispatchError> for DescribeDBEngineVersionsError {
    fn from(err: HttpDispatchError) -> DescribeDBEngineVersionsError {
        DescribeDBEngineVersionsError::HttpDispatch(err)
    }
}
impl From<io::Error> for DescribeDBEngineVersionsError {
    fn from(err: io::Error) -> DescribeDBEngineVersionsError {
        DescribeDBEngineVersionsError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for DescribeDBEngineVersionsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeDBEngineVersionsError {
    fn description(&self) -> &str {
        match *self {
            DescribeDBEngineVersionsError::Validation(ref cause) => cause,
            DescribeDBEngineVersionsError::Credentials(ref err) => err.description(),
            DescribeDBEngineVersionsError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            DescribeDBEngineVersionsError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by DescribeDBInstances
#[derive(Debug, PartialEq)]
pub enum DescribeDBInstancesError {
    ///<p> <i>DBInstanceIdentifier</i> does not refer to an existing DB instance. </p>
    DBInstanceNotFoundFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl DescribeDBInstancesError {
    pub fn from_body(body: &str) -> DescribeDBInstancesError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "DBInstanceNotFoundFault" => DescribeDBInstancesError::DBInstanceNotFoundFault(String::from(parsed_error.message)),
                    _ => DescribeDBInstancesError::Unknown(String::from(body)),
                }
            }
            Err(_) => DescribeDBInstancesError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for DescribeDBInstancesError {
    fn from(err: XmlParseError) -> DescribeDBInstancesError {
        let XmlParseError(message) = err;
        DescribeDBInstancesError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for DescribeDBInstancesError {
    fn from(err: CredentialsError) -> DescribeDBInstancesError {
        DescribeDBInstancesError::Credentials(err)
    }
}
impl From<HttpDispatchError> for DescribeDBInstancesError {
    fn from(err: HttpDispatchError) -> DescribeDBInstancesError {
        DescribeDBInstancesError::HttpDispatch(err)
    }
}
impl From<io::Error> for DescribeDBInstancesError {
    fn from(err: io::Error) -> DescribeDBInstancesError {
        DescribeDBInstancesError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for DescribeDBInstancesError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeDBInstancesError {
    fn description(&self) -> &str {
        match *self {
            DescribeDBInstancesError::DBInstanceNotFoundFault(ref cause) => cause,
            DescribeDBInstancesError::Validation(ref cause) => cause,
            DescribeDBInstancesError::Credentials(ref err) => err.description(),
            DescribeDBInstancesError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            DescribeDBInstancesError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by DescribeDBLogFiles
#[derive(Debug, PartialEq)]
pub enum DescribeDBLogFilesError {
    ///<p> <i>DBInstanceIdentifier</i> does not refer to an existing DB instance. </p>
    DBInstanceNotFoundFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl DescribeDBLogFilesError {
    pub fn from_body(body: &str) -> DescribeDBLogFilesError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "DBInstanceNotFoundFault" => DescribeDBLogFilesError::DBInstanceNotFoundFault(String::from(parsed_error.message)),
                    _ => DescribeDBLogFilesError::Unknown(String::from(body)),
                }
            }
            Err(_) => DescribeDBLogFilesError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for DescribeDBLogFilesError {
    fn from(err: XmlParseError) -> DescribeDBLogFilesError {
        let XmlParseError(message) = err;
        DescribeDBLogFilesError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for DescribeDBLogFilesError {
    fn from(err: CredentialsError) -> DescribeDBLogFilesError {
        DescribeDBLogFilesError::Credentials(err)
    }
}
impl From<HttpDispatchError> for DescribeDBLogFilesError {
    fn from(err: HttpDispatchError) -> DescribeDBLogFilesError {
        DescribeDBLogFilesError::HttpDispatch(err)
    }
}
impl From<io::Error> for DescribeDBLogFilesError {
    fn from(err: io::Error) -> DescribeDBLogFilesError {
        DescribeDBLogFilesError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for DescribeDBLogFilesError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeDBLogFilesError {
    fn description(&self) -> &str {
        match *self {
            DescribeDBLogFilesError::DBInstanceNotFoundFault(ref cause) => cause,
            DescribeDBLogFilesError::Validation(ref cause) => cause,
            DescribeDBLogFilesError::Credentials(ref err) => err.description(),
            DescribeDBLogFilesError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            DescribeDBLogFilesError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by DescribeDBParameterGroups
#[derive(Debug, PartialEq)]
pub enum DescribeDBParameterGroupsError {
    ///<p> <i>DBParameterGroupName</i> does not refer to an existing DB parameter group. </p>
    DBParameterGroupNotFoundFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl DescribeDBParameterGroupsError {
    pub fn from_body(body: &str) -> DescribeDBParameterGroupsError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "DBParameterGroupNotFoundFault" => DescribeDBParameterGroupsError::DBParameterGroupNotFoundFault(String::from(parsed_error.message)),
                    _ => DescribeDBParameterGroupsError::Unknown(String::from(body)),
                }
            }
            Err(_) => DescribeDBParameterGroupsError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for DescribeDBParameterGroupsError {
    fn from(err: XmlParseError) -> DescribeDBParameterGroupsError {
        let XmlParseError(message) = err;
        DescribeDBParameterGroupsError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for DescribeDBParameterGroupsError {
    fn from(err: CredentialsError) -> DescribeDBParameterGroupsError {
        DescribeDBParameterGroupsError::Credentials(err)
    }
}
impl From<HttpDispatchError> for DescribeDBParameterGroupsError {
    fn from(err: HttpDispatchError) -> DescribeDBParameterGroupsError {
        DescribeDBParameterGroupsError::HttpDispatch(err)
    }
}
impl From<io::Error> for DescribeDBParameterGroupsError {
    fn from(err: io::Error) -> DescribeDBParameterGroupsError {
        DescribeDBParameterGroupsError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for DescribeDBParameterGroupsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeDBParameterGroupsError {
    fn description(&self) -> &str {
        match *self {
            DescribeDBParameterGroupsError::DBParameterGroupNotFoundFault(ref cause) => cause,
            DescribeDBParameterGroupsError::Validation(ref cause) => cause,
            DescribeDBParameterGroupsError::Credentials(ref err) => err.description(),
            DescribeDBParameterGroupsError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            DescribeDBParameterGroupsError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by DescribeDBParameters
#[derive(Debug, PartialEq)]
pub enum DescribeDBParametersError {
    ///<p> <i>DBParameterGroupName</i> does not refer to an existing DB parameter group. </p>
    DBParameterGroupNotFoundFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl DescribeDBParametersError {
    pub fn from_body(body: &str) -> DescribeDBParametersError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "DBParameterGroupNotFoundFault" => DescribeDBParametersError::DBParameterGroupNotFoundFault(String::from(parsed_error.message)),
                    _ => DescribeDBParametersError::Unknown(String::from(body)),
                }
            }
            Err(_) => DescribeDBParametersError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for DescribeDBParametersError {
    fn from(err: XmlParseError) -> DescribeDBParametersError {
        let XmlParseError(message) = err;
        DescribeDBParametersError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for DescribeDBParametersError {
    fn from(err: CredentialsError) -> DescribeDBParametersError {
        DescribeDBParametersError::Credentials(err)
    }
}
impl From<HttpDispatchError> for DescribeDBParametersError {
    fn from(err: HttpDispatchError) -> DescribeDBParametersError {
        DescribeDBParametersError::HttpDispatch(err)
    }
}
impl From<io::Error> for DescribeDBParametersError {
    fn from(err: io::Error) -> DescribeDBParametersError {
        DescribeDBParametersError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for DescribeDBParametersError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeDBParametersError {
    fn description(&self) -> &str {
        match *self {
            DescribeDBParametersError::DBParameterGroupNotFoundFault(ref cause) => cause,
            DescribeDBParametersError::Validation(ref cause) => cause,
            DescribeDBParametersError::Credentials(ref err) => err.description(),
            DescribeDBParametersError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            DescribeDBParametersError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by DescribeDBSecurityGroups
#[derive(Debug, PartialEq)]
pub enum DescribeDBSecurityGroupsError {
    ///<p> <i>DBSecurityGroupName</i> does not refer to an existing DB security group. </p>
    DBSecurityGroupNotFoundFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl DescribeDBSecurityGroupsError {
    pub fn from_body(body: &str) -> DescribeDBSecurityGroupsError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "DBSecurityGroupNotFoundFault" => DescribeDBSecurityGroupsError::DBSecurityGroupNotFoundFault(String::from(parsed_error.message)),
                    _ => DescribeDBSecurityGroupsError::Unknown(String::from(body)),
                }
            }
            Err(_) => DescribeDBSecurityGroupsError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for DescribeDBSecurityGroupsError {
    fn from(err: XmlParseError) -> DescribeDBSecurityGroupsError {
        let XmlParseError(message) = err;
        DescribeDBSecurityGroupsError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for DescribeDBSecurityGroupsError {
    fn from(err: CredentialsError) -> DescribeDBSecurityGroupsError {
        DescribeDBSecurityGroupsError::Credentials(err)
    }
}
impl From<HttpDispatchError> for DescribeDBSecurityGroupsError {
    fn from(err: HttpDispatchError) -> DescribeDBSecurityGroupsError {
        DescribeDBSecurityGroupsError::HttpDispatch(err)
    }
}
impl From<io::Error> for DescribeDBSecurityGroupsError {
    fn from(err: io::Error) -> DescribeDBSecurityGroupsError {
        DescribeDBSecurityGroupsError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for DescribeDBSecurityGroupsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeDBSecurityGroupsError {
    fn description(&self) -> &str {
        match *self {
            DescribeDBSecurityGroupsError::DBSecurityGroupNotFoundFault(ref cause) => cause,
            DescribeDBSecurityGroupsError::Validation(ref cause) => cause,
            DescribeDBSecurityGroupsError::Credentials(ref err) => err.description(),
            DescribeDBSecurityGroupsError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            DescribeDBSecurityGroupsError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by DescribeDBSnapshotAttributes
#[derive(Debug, PartialEq)]
pub enum DescribeDBSnapshotAttributesError {
    ///<p> <i>DBSnapshotIdentifier</i> does not refer to an existing DB snapshot. </p>
    DBSnapshotNotFoundFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl DescribeDBSnapshotAttributesError {
    pub fn from_body(body: &str) -> DescribeDBSnapshotAttributesError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "DBSnapshotNotFoundFault" => DescribeDBSnapshotAttributesError::DBSnapshotNotFoundFault(String::from(parsed_error.message)),
                    _ => DescribeDBSnapshotAttributesError::Unknown(String::from(body)),
                }
            }
            Err(_) => DescribeDBSnapshotAttributesError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for DescribeDBSnapshotAttributesError {
    fn from(err: XmlParseError) -> DescribeDBSnapshotAttributesError {
        let XmlParseError(message) = err;
        DescribeDBSnapshotAttributesError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for DescribeDBSnapshotAttributesError {
    fn from(err: CredentialsError) -> DescribeDBSnapshotAttributesError {
        DescribeDBSnapshotAttributesError::Credentials(err)
    }
}
impl From<HttpDispatchError> for DescribeDBSnapshotAttributesError {
    fn from(err: HttpDispatchError) -> DescribeDBSnapshotAttributesError {
        DescribeDBSnapshotAttributesError::HttpDispatch(err)
    }
}
impl From<io::Error> for DescribeDBSnapshotAttributesError {
    fn from(err: io::Error) -> DescribeDBSnapshotAttributesError {
        DescribeDBSnapshotAttributesError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for DescribeDBSnapshotAttributesError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeDBSnapshotAttributesError {
    fn description(&self) -> &str {
        match *self {
            DescribeDBSnapshotAttributesError::DBSnapshotNotFoundFault(ref cause) => cause,
            DescribeDBSnapshotAttributesError::Validation(ref cause) => cause,
            DescribeDBSnapshotAttributesError::Credentials(ref err) => err.description(),
            DescribeDBSnapshotAttributesError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            DescribeDBSnapshotAttributesError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by DescribeDBSnapshots
#[derive(Debug, PartialEq)]
pub enum DescribeDBSnapshotsError {
    ///<p> <i>DBSnapshotIdentifier</i> does not refer to an existing DB snapshot. </p>
    DBSnapshotNotFoundFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl DescribeDBSnapshotsError {
    pub fn from_body(body: &str) -> DescribeDBSnapshotsError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "DBSnapshotNotFoundFault" => DescribeDBSnapshotsError::DBSnapshotNotFoundFault(String::from(parsed_error.message)),
                    _ => DescribeDBSnapshotsError::Unknown(String::from(body)),
                }
            }
            Err(_) => DescribeDBSnapshotsError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for DescribeDBSnapshotsError {
    fn from(err: XmlParseError) -> DescribeDBSnapshotsError {
        let XmlParseError(message) = err;
        DescribeDBSnapshotsError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for DescribeDBSnapshotsError {
    fn from(err: CredentialsError) -> DescribeDBSnapshotsError {
        DescribeDBSnapshotsError::Credentials(err)
    }
}
impl From<HttpDispatchError> for DescribeDBSnapshotsError {
    fn from(err: HttpDispatchError) -> DescribeDBSnapshotsError {
        DescribeDBSnapshotsError::HttpDispatch(err)
    }
}
impl From<io::Error> for DescribeDBSnapshotsError {
    fn from(err: io::Error) -> DescribeDBSnapshotsError {
        DescribeDBSnapshotsError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for DescribeDBSnapshotsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeDBSnapshotsError {
    fn description(&self) -> &str {
        match *self {
            DescribeDBSnapshotsError::DBSnapshotNotFoundFault(ref cause) => cause,
            DescribeDBSnapshotsError::Validation(ref cause) => cause,
            DescribeDBSnapshotsError::Credentials(ref err) => err.description(),
            DescribeDBSnapshotsError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            DescribeDBSnapshotsError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by DescribeDBSubnetGroups
#[derive(Debug, PartialEq)]
pub enum DescribeDBSubnetGroupsError {
    ///<p> <i>DBSubnetGroupName</i> does not refer to an existing DB subnet group. </p>
    DBSubnetGroupNotFoundFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl DescribeDBSubnetGroupsError {
    pub fn from_body(body: &str) -> DescribeDBSubnetGroupsError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "DBSubnetGroupNotFoundFault" => DescribeDBSubnetGroupsError::DBSubnetGroupNotFoundFault(String::from(parsed_error.message)),
                    _ => DescribeDBSubnetGroupsError::Unknown(String::from(body)),
                }
            }
            Err(_) => DescribeDBSubnetGroupsError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for DescribeDBSubnetGroupsError {
    fn from(err: XmlParseError) -> DescribeDBSubnetGroupsError {
        let XmlParseError(message) = err;
        DescribeDBSubnetGroupsError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for DescribeDBSubnetGroupsError {
    fn from(err: CredentialsError) -> DescribeDBSubnetGroupsError {
        DescribeDBSubnetGroupsError::Credentials(err)
    }
}
impl From<HttpDispatchError> for DescribeDBSubnetGroupsError {
    fn from(err: HttpDispatchError) -> DescribeDBSubnetGroupsError {
        DescribeDBSubnetGroupsError::HttpDispatch(err)
    }
}
impl From<io::Error> for DescribeDBSubnetGroupsError {
    fn from(err: io::Error) -> DescribeDBSubnetGroupsError {
        DescribeDBSubnetGroupsError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for DescribeDBSubnetGroupsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeDBSubnetGroupsError {
    fn description(&self) -> &str {
        match *self {
            DescribeDBSubnetGroupsError::DBSubnetGroupNotFoundFault(ref cause) => cause,
            DescribeDBSubnetGroupsError::Validation(ref cause) => cause,
            DescribeDBSubnetGroupsError::Credentials(ref err) => err.description(),
            DescribeDBSubnetGroupsError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            DescribeDBSubnetGroupsError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by DescribeEngineDefaultClusterParameters
#[derive(Debug, PartialEq)]
pub enum DescribeEngineDefaultClusterParametersError {
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl DescribeEngineDefaultClusterParametersError {
    pub fn from_body(body: &str) -> DescribeEngineDefaultClusterParametersError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    _ => DescribeEngineDefaultClusterParametersError::Unknown(String::from(body)),
                }
            }
            Err(_) => DescribeEngineDefaultClusterParametersError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for DescribeEngineDefaultClusterParametersError {
    fn from(err: XmlParseError) -> DescribeEngineDefaultClusterParametersError {
        let XmlParseError(message) = err;
        DescribeEngineDefaultClusterParametersError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for DescribeEngineDefaultClusterParametersError {
    fn from(err: CredentialsError) -> DescribeEngineDefaultClusterParametersError {
        DescribeEngineDefaultClusterParametersError::Credentials(err)
    }
}
impl From<HttpDispatchError> for DescribeEngineDefaultClusterParametersError {
    fn from(err: HttpDispatchError) -> DescribeEngineDefaultClusterParametersError {
        DescribeEngineDefaultClusterParametersError::HttpDispatch(err)
    }
}
impl From<io::Error> for DescribeEngineDefaultClusterParametersError {
    fn from(err: io::Error) -> DescribeEngineDefaultClusterParametersError {
        DescribeEngineDefaultClusterParametersError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for DescribeEngineDefaultClusterParametersError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeEngineDefaultClusterParametersError {
    fn description(&self) -> &str {
        match *self {
            DescribeEngineDefaultClusterParametersError::Validation(ref cause) => cause,
            DescribeEngineDefaultClusterParametersError::Credentials(ref err) => err.description(),
            DescribeEngineDefaultClusterParametersError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            DescribeEngineDefaultClusterParametersError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by DescribeEngineDefaultParameters
#[derive(Debug, PartialEq)]
pub enum DescribeEngineDefaultParametersError {
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl DescribeEngineDefaultParametersError {
    pub fn from_body(body: &str) -> DescribeEngineDefaultParametersError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    _ => DescribeEngineDefaultParametersError::Unknown(String::from(body)),
                }
            }
            Err(_) => DescribeEngineDefaultParametersError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for DescribeEngineDefaultParametersError {
    fn from(err: XmlParseError) -> DescribeEngineDefaultParametersError {
        let XmlParseError(message) = err;
        DescribeEngineDefaultParametersError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for DescribeEngineDefaultParametersError {
    fn from(err: CredentialsError) -> DescribeEngineDefaultParametersError {
        DescribeEngineDefaultParametersError::Credentials(err)
    }
}
impl From<HttpDispatchError> for DescribeEngineDefaultParametersError {
    fn from(err: HttpDispatchError) -> DescribeEngineDefaultParametersError {
        DescribeEngineDefaultParametersError::HttpDispatch(err)
    }
}
impl From<io::Error> for DescribeEngineDefaultParametersError {
    fn from(err: io::Error) -> DescribeEngineDefaultParametersError {
        DescribeEngineDefaultParametersError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for DescribeEngineDefaultParametersError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeEngineDefaultParametersError {
    fn description(&self) -> &str {
        match *self {
            DescribeEngineDefaultParametersError::Validation(ref cause) => cause,
            DescribeEngineDefaultParametersError::Credentials(ref err) => err.description(),
            DescribeEngineDefaultParametersError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            DescribeEngineDefaultParametersError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by DescribeEventCategories
#[derive(Debug, PartialEq)]
pub enum DescribeEventCategoriesError {
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl DescribeEventCategoriesError {
    pub fn from_body(body: &str) -> DescribeEventCategoriesError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    _ => DescribeEventCategoriesError::Unknown(String::from(body)),
                }
            }
            Err(_) => DescribeEventCategoriesError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for DescribeEventCategoriesError {
    fn from(err: XmlParseError) -> DescribeEventCategoriesError {
        let XmlParseError(message) = err;
        DescribeEventCategoriesError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for DescribeEventCategoriesError {
    fn from(err: CredentialsError) -> DescribeEventCategoriesError {
        DescribeEventCategoriesError::Credentials(err)
    }
}
impl From<HttpDispatchError> for DescribeEventCategoriesError {
    fn from(err: HttpDispatchError) -> DescribeEventCategoriesError {
        DescribeEventCategoriesError::HttpDispatch(err)
    }
}
impl From<io::Error> for DescribeEventCategoriesError {
    fn from(err: io::Error) -> DescribeEventCategoriesError {
        DescribeEventCategoriesError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for DescribeEventCategoriesError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeEventCategoriesError {
    fn description(&self) -> &str {
        match *self {
            DescribeEventCategoriesError::Validation(ref cause) => cause,
            DescribeEventCategoriesError::Credentials(ref err) => err.description(),
            DescribeEventCategoriesError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            DescribeEventCategoriesError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by DescribeEventSubscriptions
#[derive(Debug, PartialEq)]
pub enum DescribeEventSubscriptionsError {
    ///<p>The subscription name does not exist.</p>
    SubscriptionNotFoundFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl DescribeEventSubscriptionsError {
    pub fn from_body(body: &str) -> DescribeEventSubscriptionsError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "SubscriptionNotFoundFault" => DescribeEventSubscriptionsError::SubscriptionNotFoundFault(String::from(parsed_error.message)),
                    _ => DescribeEventSubscriptionsError::Unknown(String::from(body)),
                }
            }
            Err(_) => DescribeEventSubscriptionsError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for DescribeEventSubscriptionsError {
    fn from(err: XmlParseError) -> DescribeEventSubscriptionsError {
        let XmlParseError(message) = err;
        DescribeEventSubscriptionsError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for DescribeEventSubscriptionsError {
    fn from(err: CredentialsError) -> DescribeEventSubscriptionsError {
        DescribeEventSubscriptionsError::Credentials(err)
    }
}
impl From<HttpDispatchError> for DescribeEventSubscriptionsError {
    fn from(err: HttpDispatchError) -> DescribeEventSubscriptionsError {
        DescribeEventSubscriptionsError::HttpDispatch(err)
    }
}
impl From<io::Error> for DescribeEventSubscriptionsError {
    fn from(err: io::Error) -> DescribeEventSubscriptionsError {
        DescribeEventSubscriptionsError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for DescribeEventSubscriptionsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeEventSubscriptionsError {
    fn description(&self) -> &str {
        match *self {
            DescribeEventSubscriptionsError::SubscriptionNotFoundFault(ref cause) => cause,
            DescribeEventSubscriptionsError::Validation(ref cause) => cause,
            DescribeEventSubscriptionsError::Credentials(ref err) => err.description(),
            DescribeEventSubscriptionsError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            DescribeEventSubscriptionsError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by DescribeEvents
#[derive(Debug, PartialEq)]
pub enum DescribeEventsError {
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl DescribeEventsError {
    pub fn from_body(body: &str) -> DescribeEventsError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    _ => DescribeEventsError::Unknown(String::from(body)),
                }
            }
            Err(_) => DescribeEventsError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for DescribeEventsError {
    fn from(err: XmlParseError) -> DescribeEventsError {
        let XmlParseError(message) = err;
        DescribeEventsError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for DescribeEventsError {
    fn from(err: CredentialsError) -> DescribeEventsError {
        DescribeEventsError::Credentials(err)
    }
}
impl From<HttpDispatchError> for DescribeEventsError {
    fn from(err: HttpDispatchError) -> DescribeEventsError {
        DescribeEventsError::HttpDispatch(err)
    }
}
impl From<io::Error> for DescribeEventsError {
    fn from(err: io::Error) -> DescribeEventsError {
        DescribeEventsError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for DescribeEventsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeEventsError {
    fn description(&self) -> &str {
        match *self {
            DescribeEventsError::Validation(ref cause) => cause,
            DescribeEventsError::Credentials(ref err) => err.description(),
            DescribeEventsError::HttpDispatch(ref dispatch_error) => dispatch_error.description(),
            DescribeEventsError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by DescribeOptionGroupOptions
#[derive(Debug, PartialEq)]
pub enum DescribeOptionGroupOptionsError {
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl DescribeOptionGroupOptionsError {
    pub fn from_body(body: &str) -> DescribeOptionGroupOptionsError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    _ => DescribeOptionGroupOptionsError::Unknown(String::from(body)),
                }
            }
            Err(_) => DescribeOptionGroupOptionsError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for DescribeOptionGroupOptionsError {
    fn from(err: XmlParseError) -> DescribeOptionGroupOptionsError {
        let XmlParseError(message) = err;
        DescribeOptionGroupOptionsError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for DescribeOptionGroupOptionsError {
    fn from(err: CredentialsError) -> DescribeOptionGroupOptionsError {
        DescribeOptionGroupOptionsError::Credentials(err)
    }
}
impl From<HttpDispatchError> for DescribeOptionGroupOptionsError {
    fn from(err: HttpDispatchError) -> DescribeOptionGroupOptionsError {
        DescribeOptionGroupOptionsError::HttpDispatch(err)
    }
}
impl From<io::Error> for DescribeOptionGroupOptionsError {
    fn from(err: io::Error) -> DescribeOptionGroupOptionsError {
        DescribeOptionGroupOptionsError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for DescribeOptionGroupOptionsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeOptionGroupOptionsError {
    fn description(&self) -> &str {
        match *self {
            DescribeOptionGroupOptionsError::Validation(ref cause) => cause,
            DescribeOptionGroupOptionsError::Credentials(ref err) => err.description(),
            DescribeOptionGroupOptionsError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            DescribeOptionGroupOptionsError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by DescribeOptionGroups
#[derive(Debug, PartialEq)]
pub enum DescribeOptionGroupsError {
    ///<p>The specified option group could not be found.</p>
    OptionGroupNotFoundFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl DescribeOptionGroupsError {
    pub fn from_body(body: &str) -> DescribeOptionGroupsError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "OptionGroupNotFoundFault" => DescribeOptionGroupsError::OptionGroupNotFoundFault(String::from(parsed_error.message)),
                    _ => DescribeOptionGroupsError::Unknown(String::from(body)),
                }
            }
            Err(_) => DescribeOptionGroupsError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for DescribeOptionGroupsError {
    fn from(err: XmlParseError) -> DescribeOptionGroupsError {
        let XmlParseError(message) = err;
        DescribeOptionGroupsError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for DescribeOptionGroupsError {
    fn from(err: CredentialsError) -> DescribeOptionGroupsError {
        DescribeOptionGroupsError::Credentials(err)
    }
}
impl From<HttpDispatchError> for DescribeOptionGroupsError {
    fn from(err: HttpDispatchError) -> DescribeOptionGroupsError {
        DescribeOptionGroupsError::HttpDispatch(err)
    }
}
impl From<io::Error> for DescribeOptionGroupsError {
    fn from(err: io::Error) -> DescribeOptionGroupsError {
        DescribeOptionGroupsError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for DescribeOptionGroupsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeOptionGroupsError {
    fn description(&self) -> &str {
        match *self {
            DescribeOptionGroupsError::OptionGroupNotFoundFault(ref cause) => cause,
            DescribeOptionGroupsError::Validation(ref cause) => cause,
            DescribeOptionGroupsError::Credentials(ref err) => err.description(),
            DescribeOptionGroupsError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            DescribeOptionGroupsError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by DescribeOrderableDBInstanceOptions
#[derive(Debug, PartialEq)]
pub enum DescribeOrderableDBInstanceOptionsError {
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl DescribeOrderableDBInstanceOptionsError {
    pub fn from_body(body: &str) -> DescribeOrderableDBInstanceOptionsError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    _ => DescribeOrderableDBInstanceOptionsError::Unknown(String::from(body)),
                }
            }
            Err(_) => DescribeOrderableDBInstanceOptionsError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for DescribeOrderableDBInstanceOptionsError {
    fn from(err: XmlParseError) -> DescribeOrderableDBInstanceOptionsError {
        let XmlParseError(message) = err;
        DescribeOrderableDBInstanceOptionsError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for DescribeOrderableDBInstanceOptionsError {
    fn from(err: CredentialsError) -> DescribeOrderableDBInstanceOptionsError {
        DescribeOrderableDBInstanceOptionsError::Credentials(err)
    }
}
impl From<HttpDispatchError> for DescribeOrderableDBInstanceOptionsError {
    fn from(err: HttpDispatchError) -> DescribeOrderableDBInstanceOptionsError {
        DescribeOrderableDBInstanceOptionsError::HttpDispatch(err)
    }
}
impl From<io::Error> for DescribeOrderableDBInstanceOptionsError {
    fn from(err: io::Error) -> DescribeOrderableDBInstanceOptionsError {
        DescribeOrderableDBInstanceOptionsError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for DescribeOrderableDBInstanceOptionsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeOrderableDBInstanceOptionsError {
    fn description(&self) -> &str {
        match *self {
            DescribeOrderableDBInstanceOptionsError::Validation(ref cause) => cause,
            DescribeOrderableDBInstanceOptionsError::Credentials(ref err) => err.description(),
            DescribeOrderableDBInstanceOptionsError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            DescribeOrderableDBInstanceOptionsError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by DescribePendingMaintenanceActions
#[derive(Debug, PartialEq)]
pub enum DescribePendingMaintenanceActionsError {
    ///<p>The specified resource ID was not found.</p>
    ResourceNotFoundFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl DescribePendingMaintenanceActionsError {
    pub fn from_body(body: &str) -> DescribePendingMaintenanceActionsError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "ResourceNotFoundFault" => DescribePendingMaintenanceActionsError::ResourceNotFoundFault(String::from(parsed_error.message)),
                    _ => DescribePendingMaintenanceActionsError::Unknown(String::from(body)),
                }
            }
            Err(_) => DescribePendingMaintenanceActionsError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for DescribePendingMaintenanceActionsError {
    fn from(err: XmlParseError) -> DescribePendingMaintenanceActionsError {
        let XmlParseError(message) = err;
        DescribePendingMaintenanceActionsError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for DescribePendingMaintenanceActionsError {
    fn from(err: CredentialsError) -> DescribePendingMaintenanceActionsError {
        DescribePendingMaintenanceActionsError::Credentials(err)
    }
}
impl From<HttpDispatchError> for DescribePendingMaintenanceActionsError {
    fn from(err: HttpDispatchError) -> DescribePendingMaintenanceActionsError {
        DescribePendingMaintenanceActionsError::HttpDispatch(err)
    }
}
impl From<io::Error> for DescribePendingMaintenanceActionsError {
    fn from(err: io::Error) -> DescribePendingMaintenanceActionsError {
        DescribePendingMaintenanceActionsError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for DescribePendingMaintenanceActionsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribePendingMaintenanceActionsError {
    fn description(&self) -> &str {
        match *self {
            DescribePendingMaintenanceActionsError::ResourceNotFoundFault(ref cause) => cause,
            DescribePendingMaintenanceActionsError::Validation(ref cause) => cause,
            DescribePendingMaintenanceActionsError::Credentials(ref err) => err.description(),
            DescribePendingMaintenanceActionsError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            DescribePendingMaintenanceActionsError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by DescribeReservedDBInstances
#[derive(Debug, PartialEq)]
pub enum DescribeReservedDBInstancesError {
    ///<p>The specified reserved DB Instance not found.</p>
    ReservedDBInstanceNotFoundFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl DescribeReservedDBInstancesError {
    pub fn from_body(body: &str) -> DescribeReservedDBInstancesError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "ReservedDBInstanceNotFoundFault" => DescribeReservedDBInstancesError::ReservedDBInstanceNotFoundFault(String::from(parsed_error.message)),
                    _ => DescribeReservedDBInstancesError::Unknown(String::from(body)),
                }
            }
            Err(_) => DescribeReservedDBInstancesError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for DescribeReservedDBInstancesError {
    fn from(err: XmlParseError) -> DescribeReservedDBInstancesError {
        let XmlParseError(message) = err;
        DescribeReservedDBInstancesError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for DescribeReservedDBInstancesError {
    fn from(err: CredentialsError) -> DescribeReservedDBInstancesError {
        DescribeReservedDBInstancesError::Credentials(err)
    }
}
impl From<HttpDispatchError> for DescribeReservedDBInstancesError {
    fn from(err: HttpDispatchError) -> DescribeReservedDBInstancesError {
        DescribeReservedDBInstancesError::HttpDispatch(err)
    }
}
impl From<io::Error> for DescribeReservedDBInstancesError {
    fn from(err: io::Error) -> DescribeReservedDBInstancesError {
        DescribeReservedDBInstancesError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for DescribeReservedDBInstancesError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeReservedDBInstancesError {
    fn description(&self) -> &str {
        match *self {
            DescribeReservedDBInstancesError::ReservedDBInstanceNotFoundFault(ref cause) => cause,
            DescribeReservedDBInstancesError::Validation(ref cause) => cause,
            DescribeReservedDBInstancesError::Credentials(ref err) => err.description(),
            DescribeReservedDBInstancesError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            DescribeReservedDBInstancesError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by DescribeReservedDBInstancesOfferings
#[derive(Debug, PartialEq)]
pub enum DescribeReservedDBInstancesOfferingsError {
    ///<p>Specified offering does not exist.</p>
    ReservedDBInstancesOfferingNotFoundFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl DescribeReservedDBInstancesOfferingsError {
    pub fn from_body(body: &str) -> DescribeReservedDBInstancesOfferingsError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "ReservedDBInstancesOfferingNotFoundFault" => DescribeReservedDBInstancesOfferingsError::ReservedDBInstancesOfferingNotFoundFault(String::from(parsed_error.message)),
                    _ => DescribeReservedDBInstancesOfferingsError::Unknown(String::from(body)),
                }
            }
            Err(_) => DescribeReservedDBInstancesOfferingsError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for DescribeReservedDBInstancesOfferingsError {
    fn from(err: XmlParseError) -> DescribeReservedDBInstancesOfferingsError {
        let XmlParseError(message) = err;
        DescribeReservedDBInstancesOfferingsError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for DescribeReservedDBInstancesOfferingsError {
    fn from(err: CredentialsError) -> DescribeReservedDBInstancesOfferingsError {
        DescribeReservedDBInstancesOfferingsError::Credentials(err)
    }
}
impl From<HttpDispatchError> for DescribeReservedDBInstancesOfferingsError {
    fn from(err: HttpDispatchError) -> DescribeReservedDBInstancesOfferingsError {
        DescribeReservedDBInstancesOfferingsError::HttpDispatch(err)
    }
}
impl From<io::Error> for DescribeReservedDBInstancesOfferingsError {
    fn from(err: io::Error) -> DescribeReservedDBInstancesOfferingsError {
        DescribeReservedDBInstancesOfferingsError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for DescribeReservedDBInstancesOfferingsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeReservedDBInstancesOfferingsError {
    fn description(&self) -> &str {
        match *self {
            DescribeReservedDBInstancesOfferingsError::ReservedDBInstancesOfferingNotFoundFault(ref cause) => cause,
            DescribeReservedDBInstancesOfferingsError::Validation(ref cause) => cause,
            DescribeReservedDBInstancesOfferingsError::Credentials(ref err) => err.description(),
            DescribeReservedDBInstancesOfferingsError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            DescribeReservedDBInstancesOfferingsError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by DescribeSourceRegions
#[derive(Debug, PartialEq)]
pub enum DescribeSourceRegionsError {
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl DescribeSourceRegionsError {
    pub fn from_body(body: &str) -> DescribeSourceRegionsError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    _ => DescribeSourceRegionsError::Unknown(String::from(body)),
                }
            }
            Err(_) => DescribeSourceRegionsError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for DescribeSourceRegionsError {
    fn from(err: XmlParseError) -> DescribeSourceRegionsError {
        let XmlParseError(message) = err;
        DescribeSourceRegionsError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for DescribeSourceRegionsError {
    fn from(err: CredentialsError) -> DescribeSourceRegionsError {
        DescribeSourceRegionsError::Credentials(err)
    }
}
impl From<HttpDispatchError> for DescribeSourceRegionsError {
    fn from(err: HttpDispatchError) -> DescribeSourceRegionsError {
        DescribeSourceRegionsError::HttpDispatch(err)
    }
}
impl From<io::Error> for DescribeSourceRegionsError {
    fn from(err: io::Error) -> DescribeSourceRegionsError {
        DescribeSourceRegionsError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for DescribeSourceRegionsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeSourceRegionsError {
    fn description(&self) -> &str {
        match *self {
            DescribeSourceRegionsError::Validation(ref cause) => cause,
            DescribeSourceRegionsError::Credentials(ref err) => err.description(),
            DescribeSourceRegionsError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            DescribeSourceRegionsError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by DownloadDBLogFilePortion
#[derive(Debug, PartialEq)]
pub enum DownloadDBLogFilePortionError {
    ///<p> <i>DBInstanceIdentifier</i> does not refer to an existing DB instance. </p>
    DBInstanceNotFoundFault(String),
    ///<p> <i>LogFileName</i> does not refer to an existing DB log file.</p>
    DBLogFileNotFoundFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl DownloadDBLogFilePortionError {
    pub fn from_body(body: &str) -> DownloadDBLogFilePortionError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "DBInstanceNotFoundFault" => DownloadDBLogFilePortionError::DBInstanceNotFoundFault(String::from(parsed_error.message)),
                    "DBLogFileNotFoundFault" => DownloadDBLogFilePortionError::DBLogFileNotFoundFault(String::from(parsed_error.message)),
                    _ => DownloadDBLogFilePortionError::Unknown(String::from(body)),
                }
            }
            Err(_) => DownloadDBLogFilePortionError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for DownloadDBLogFilePortionError {
    fn from(err: XmlParseError) -> DownloadDBLogFilePortionError {
        let XmlParseError(message) = err;
        DownloadDBLogFilePortionError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for DownloadDBLogFilePortionError {
    fn from(err: CredentialsError) -> DownloadDBLogFilePortionError {
        DownloadDBLogFilePortionError::Credentials(err)
    }
}
impl From<HttpDispatchError> for DownloadDBLogFilePortionError {
    fn from(err: HttpDispatchError) -> DownloadDBLogFilePortionError {
        DownloadDBLogFilePortionError::HttpDispatch(err)
    }
}
impl From<io::Error> for DownloadDBLogFilePortionError {
    fn from(err: io::Error) -> DownloadDBLogFilePortionError {
        DownloadDBLogFilePortionError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for DownloadDBLogFilePortionError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DownloadDBLogFilePortionError {
    fn description(&self) -> &str {
        match *self {
            DownloadDBLogFilePortionError::DBInstanceNotFoundFault(ref cause) => cause,
            DownloadDBLogFilePortionError::DBLogFileNotFoundFault(ref cause) => cause,
            DownloadDBLogFilePortionError::Validation(ref cause) => cause,
            DownloadDBLogFilePortionError::Credentials(ref err) => err.description(),
            DownloadDBLogFilePortionError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            DownloadDBLogFilePortionError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by FailoverDBCluster
#[derive(Debug, PartialEq)]
pub enum FailoverDBClusterError {
    ///<p> <i>DBClusterIdentifier</i> does not refer to an existing DB cluster. </p>
    DBClusterNotFoundFault(String),
    ///<p>The DB cluster is not in a valid state.</p>
    InvalidDBClusterStateFault(String),
    ///<p> The specified DB instance is not in the <i>available</i> state. </p>
    InvalidDBInstanceStateFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl FailoverDBClusterError {
    pub fn from_body(body: &str) -> FailoverDBClusterError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "DBClusterNotFoundFault" => FailoverDBClusterError::DBClusterNotFoundFault(String::from(parsed_error.message)),
                    "InvalidDBClusterStateFault" => FailoverDBClusterError::InvalidDBClusterStateFault(String::from(parsed_error.message)),
                    "InvalidDBInstanceStateFault" => FailoverDBClusterError::InvalidDBInstanceStateFault(String::from(parsed_error.message)),
                    _ => FailoverDBClusterError::Unknown(String::from(body)),
                }
            }
            Err(_) => FailoverDBClusterError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for FailoverDBClusterError {
    fn from(err: XmlParseError) -> FailoverDBClusterError {
        let XmlParseError(message) = err;
        FailoverDBClusterError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for FailoverDBClusterError {
    fn from(err: CredentialsError) -> FailoverDBClusterError {
        FailoverDBClusterError::Credentials(err)
    }
}
impl From<HttpDispatchError> for FailoverDBClusterError {
    fn from(err: HttpDispatchError) -> FailoverDBClusterError {
        FailoverDBClusterError::HttpDispatch(err)
    }
}
impl From<io::Error> for FailoverDBClusterError {
    fn from(err: io::Error) -> FailoverDBClusterError {
        FailoverDBClusterError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for FailoverDBClusterError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for FailoverDBClusterError {
    fn description(&self) -> &str {
        match *self {
            FailoverDBClusterError::DBClusterNotFoundFault(ref cause) => cause,
            FailoverDBClusterError::InvalidDBClusterStateFault(ref cause) => cause,
            FailoverDBClusterError::InvalidDBInstanceStateFault(ref cause) => cause,
            FailoverDBClusterError::Validation(ref cause) => cause,
            FailoverDBClusterError::Credentials(ref err) => err.description(),
            FailoverDBClusterError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            FailoverDBClusterError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by ListTagsForResource
#[derive(Debug, PartialEq)]
pub enum ListTagsForResourceError {
    ///<p> <i>DBClusterIdentifier</i> does not refer to an existing DB cluster. </p>
    DBClusterNotFoundFault(String),
    ///<p> <i>DBInstanceIdentifier</i> does not refer to an existing DB instance. </p>
    DBInstanceNotFoundFault(String),
    ///<p> <i>DBSnapshotIdentifier</i> does not refer to an existing DB snapshot. </p>
    DBSnapshotNotFoundFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl ListTagsForResourceError {
    pub fn from_body(body: &str) -> ListTagsForResourceError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "DBClusterNotFoundFault" => ListTagsForResourceError::DBClusterNotFoundFault(String::from(parsed_error.message)),
                    "DBInstanceNotFoundFault" => ListTagsForResourceError::DBInstanceNotFoundFault(String::from(parsed_error.message)),
                    "DBSnapshotNotFoundFault" => ListTagsForResourceError::DBSnapshotNotFoundFault(String::from(parsed_error.message)),
                    _ => ListTagsForResourceError::Unknown(String::from(body)),
                }
            }
            Err(_) => ListTagsForResourceError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for ListTagsForResourceError {
    fn from(err: XmlParseError) -> ListTagsForResourceError {
        let XmlParseError(message) = err;
        ListTagsForResourceError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for ListTagsForResourceError {
    fn from(err: CredentialsError) -> ListTagsForResourceError {
        ListTagsForResourceError::Credentials(err)
    }
}
impl From<HttpDispatchError> for ListTagsForResourceError {
    fn from(err: HttpDispatchError) -> ListTagsForResourceError {
        ListTagsForResourceError::HttpDispatch(err)
    }
}
impl From<io::Error> for ListTagsForResourceError {
    fn from(err: io::Error) -> ListTagsForResourceError {
        ListTagsForResourceError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for ListTagsForResourceError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ListTagsForResourceError {
    fn description(&self) -> &str {
        match *self {
            ListTagsForResourceError::DBClusterNotFoundFault(ref cause) => cause,
            ListTagsForResourceError::DBInstanceNotFoundFault(ref cause) => cause,
            ListTagsForResourceError::DBSnapshotNotFoundFault(ref cause) => cause,
            ListTagsForResourceError::Validation(ref cause) => cause,
            ListTagsForResourceError::Credentials(ref err) => err.description(),
            ListTagsForResourceError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            ListTagsForResourceError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by ModifyDBCluster
#[derive(Debug, PartialEq)]
pub enum ModifyDBClusterError {
    ///<p>User already has a DB cluster with the given identifier.</p>
    DBClusterAlreadyExistsFault(String),
    ///<p> <i>DBClusterIdentifier</i> does not refer to an existing DB cluster. </p>
    DBClusterNotFoundFault(String),
    ///<p> <i>DBClusterParameterGroupName</i> does not refer to an existing DB Cluster parameter group. </p>
    DBClusterParameterGroupNotFoundFault(String),
    ///<p> <i>DBSubnetGroupName</i> does not refer to an existing DB subnet group. </p>
    DBSubnetGroupNotFoundFault(String),
    ///<p>The DB cluster is not in a valid state.</p>
    InvalidDBClusterStateFault(String),
    ///<p> The specified DB instance is not in the <i>available</i> state. </p>
    InvalidDBInstanceStateFault(String),
    ///<p>The state of the DB security group does not allow deletion.</p>
    InvalidDBSecurityGroupStateFault(String),
    ///<p>The DB subnet group cannot be deleted because it is in use.</p>
    InvalidDBSubnetGroupStateFault(String),
    ///<p>The requested subnet is invalid, or multiple subnets were requested that are not all in a common VPC.</p>
    InvalidSubnet(String),
    ///<p>DB subnet group does not cover all Availability Zones after it is created because users' change.</p>
    InvalidVPCNetworkStateFault(String),
    ///<p>Request would result in user exceeding the allowed amount of storage available across all DB instances.</p>
    StorageQuotaExceededFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl ModifyDBClusterError {
    pub fn from_body(body: &str) -> ModifyDBClusterError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "DBClusterAlreadyExistsFault" => ModifyDBClusterError::DBClusterAlreadyExistsFault(String::from(parsed_error.message)),
                    "DBClusterNotFoundFault" => ModifyDBClusterError::DBClusterNotFoundFault(String::from(parsed_error.message)),
                    "DBClusterParameterGroupNotFoundFault" => ModifyDBClusterError::DBClusterParameterGroupNotFoundFault(String::from(parsed_error.message)),
                    "DBSubnetGroupNotFoundFault" => ModifyDBClusterError::DBSubnetGroupNotFoundFault(String::from(parsed_error.message)),
                    "InvalidDBClusterStateFault" => ModifyDBClusterError::InvalidDBClusterStateFault(String::from(parsed_error.message)),
                    "InvalidDBInstanceStateFault" => ModifyDBClusterError::InvalidDBInstanceStateFault(String::from(parsed_error.message)),
                    "InvalidDBSecurityGroupStateFault" => ModifyDBClusterError::InvalidDBSecurityGroupStateFault(String::from(parsed_error.message)),
                    "InvalidDBSubnetGroupStateFault" => ModifyDBClusterError::InvalidDBSubnetGroupStateFault(String::from(parsed_error.message)),
                    "InvalidSubnet" => {
                        ModifyDBClusterError::InvalidSubnet(String::from(parsed_error.message))
                    }
                    "InvalidVPCNetworkStateFault" => ModifyDBClusterError::InvalidVPCNetworkStateFault(String::from(parsed_error.message)),
                    "StorageQuotaExceededFault" => ModifyDBClusterError::StorageQuotaExceededFault(String::from(parsed_error.message)),
                    _ => ModifyDBClusterError::Unknown(String::from(body)),
                }
            }
            Err(_) => ModifyDBClusterError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for ModifyDBClusterError {
    fn from(err: XmlParseError) -> ModifyDBClusterError {
        let XmlParseError(message) = err;
        ModifyDBClusterError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for ModifyDBClusterError {
    fn from(err: CredentialsError) -> ModifyDBClusterError {
        ModifyDBClusterError::Credentials(err)
    }
}
impl From<HttpDispatchError> for ModifyDBClusterError {
    fn from(err: HttpDispatchError) -> ModifyDBClusterError {
        ModifyDBClusterError::HttpDispatch(err)
    }
}
impl From<io::Error> for ModifyDBClusterError {
    fn from(err: io::Error) -> ModifyDBClusterError {
        ModifyDBClusterError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for ModifyDBClusterError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ModifyDBClusterError {
    fn description(&self) -> &str {
        match *self {
            ModifyDBClusterError::DBClusterAlreadyExistsFault(ref cause) => cause,
            ModifyDBClusterError::DBClusterNotFoundFault(ref cause) => cause,
            ModifyDBClusterError::DBClusterParameterGroupNotFoundFault(ref cause) => cause,
            ModifyDBClusterError::DBSubnetGroupNotFoundFault(ref cause) => cause,
            ModifyDBClusterError::InvalidDBClusterStateFault(ref cause) => cause,
            ModifyDBClusterError::InvalidDBInstanceStateFault(ref cause) => cause,
            ModifyDBClusterError::InvalidDBSecurityGroupStateFault(ref cause) => cause,
            ModifyDBClusterError::InvalidDBSubnetGroupStateFault(ref cause) => cause,
            ModifyDBClusterError::InvalidSubnet(ref cause) => cause,
            ModifyDBClusterError::InvalidVPCNetworkStateFault(ref cause) => cause,
            ModifyDBClusterError::StorageQuotaExceededFault(ref cause) => cause,
            ModifyDBClusterError::Validation(ref cause) => cause,
            ModifyDBClusterError::Credentials(ref err) => err.description(),
            ModifyDBClusterError::HttpDispatch(ref dispatch_error) => dispatch_error.description(),
            ModifyDBClusterError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by ModifyDBClusterParameterGroup
#[derive(Debug, PartialEq)]
pub enum ModifyDBClusterParameterGroupError {
    ///<p> <i>DBParameterGroupName</i> does not refer to an existing DB parameter group. </p>
    DBParameterGroupNotFoundFault(String),
    ///<p>The DB parameter group is in use or is in an invalid state. If you are attempting to delete the parameter group, you cannot delete it when the parameter group is in this state.</p>
    InvalidDBParameterGroupStateFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl ModifyDBClusterParameterGroupError {
    pub fn from_body(body: &str) -> ModifyDBClusterParameterGroupError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "DBParameterGroupNotFoundFault" => ModifyDBClusterParameterGroupError::DBParameterGroupNotFoundFault(String::from(parsed_error.message)),
                    "InvalidDBParameterGroupStateFault" => ModifyDBClusterParameterGroupError::InvalidDBParameterGroupStateFault(String::from(parsed_error.message)),
                    _ => ModifyDBClusterParameterGroupError::Unknown(String::from(body)),
                }
            }
            Err(_) => ModifyDBClusterParameterGroupError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for ModifyDBClusterParameterGroupError {
    fn from(err: XmlParseError) -> ModifyDBClusterParameterGroupError {
        let XmlParseError(message) = err;
        ModifyDBClusterParameterGroupError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for ModifyDBClusterParameterGroupError {
    fn from(err: CredentialsError) -> ModifyDBClusterParameterGroupError {
        ModifyDBClusterParameterGroupError::Credentials(err)
    }
}
impl From<HttpDispatchError> for ModifyDBClusterParameterGroupError {
    fn from(err: HttpDispatchError) -> ModifyDBClusterParameterGroupError {
        ModifyDBClusterParameterGroupError::HttpDispatch(err)
    }
}
impl From<io::Error> for ModifyDBClusterParameterGroupError {
    fn from(err: io::Error) -> ModifyDBClusterParameterGroupError {
        ModifyDBClusterParameterGroupError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for ModifyDBClusterParameterGroupError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ModifyDBClusterParameterGroupError {
    fn description(&self) -> &str {
        match *self {
            ModifyDBClusterParameterGroupError::DBParameterGroupNotFoundFault(ref cause) => cause,
            ModifyDBClusterParameterGroupError::InvalidDBParameterGroupStateFault(ref cause) => {
                cause
            }
            ModifyDBClusterParameterGroupError::Validation(ref cause) => cause,
            ModifyDBClusterParameterGroupError::Credentials(ref err) => err.description(),
            ModifyDBClusterParameterGroupError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            ModifyDBClusterParameterGroupError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by ModifyDBClusterSnapshotAttribute
#[derive(Debug, PartialEq)]
pub enum ModifyDBClusterSnapshotAttributeError {
    ///<p> <i>DBClusterSnapshotIdentifier</i> does not refer to an existing DB cluster snapshot. </p>
    DBClusterSnapshotNotFoundFault(String),
    ///<p>The supplied value is not a valid DB cluster snapshot state.</p>
    InvalidDBClusterSnapshotStateFault(String),
    ///<p>You have exceeded the maximum number of accounts that you can share a manual DB snapshot with.</p>
    SharedSnapshotQuotaExceededFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl ModifyDBClusterSnapshotAttributeError {
    pub fn from_body(body: &str) -> ModifyDBClusterSnapshotAttributeError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "DBClusterSnapshotNotFoundFault" => ModifyDBClusterSnapshotAttributeError::DBClusterSnapshotNotFoundFault(String::from(parsed_error.message)),
                    "InvalidDBClusterSnapshotStateFault" => ModifyDBClusterSnapshotAttributeError::InvalidDBClusterSnapshotStateFault(String::from(parsed_error.message)),
                    "SharedSnapshotQuotaExceededFault" => ModifyDBClusterSnapshotAttributeError::SharedSnapshotQuotaExceededFault(String::from(parsed_error.message)),
                    _ => ModifyDBClusterSnapshotAttributeError::Unknown(String::from(body)),
                }
            }
            Err(_) => ModifyDBClusterSnapshotAttributeError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for ModifyDBClusterSnapshotAttributeError {
    fn from(err: XmlParseError) -> ModifyDBClusterSnapshotAttributeError {
        let XmlParseError(message) = err;
        ModifyDBClusterSnapshotAttributeError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for ModifyDBClusterSnapshotAttributeError {
    fn from(err: CredentialsError) -> ModifyDBClusterSnapshotAttributeError {
        ModifyDBClusterSnapshotAttributeError::Credentials(err)
    }
}
impl From<HttpDispatchError> for ModifyDBClusterSnapshotAttributeError {
    fn from(err: HttpDispatchError) -> ModifyDBClusterSnapshotAttributeError {
        ModifyDBClusterSnapshotAttributeError::HttpDispatch(err)
    }
}
impl From<io::Error> for ModifyDBClusterSnapshotAttributeError {
    fn from(err: io::Error) -> ModifyDBClusterSnapshotAttributeError {
        ModifyDBClusterSnapshotAttributeError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for ModifyDBClusterSnapshotAttributeError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ModifyDBClusterSnapshotAttributeError {
    fn description(&self) -> &str {
        match *self {
            ModifyDBClusterSnapshotAttributeError::DBClusterSnapshotNotFoundFault(ref cause) => {
                cause
            }
            ModifyDBClusterSnapshotAttributeError::InvalidDBClusterSnapshotStateFault(ref cause) => cause,
            ModifyDBClusterSnapshotAttributeError::SharedSnapshotQuotaExceededFault(ref cause) => {
                cause
            }
            ModifyDBClusterSnapshotAttributeError::Validation(ref cause) => cause,
            ModifyDBClusterSnapshotAttributeError::Credentials(ref err) => err.description(),
            ModifyDBClusterSnapshotAttributeError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            ModifyDBClusterSnapshotAttributeError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by ModifyDBInstance
#[derive(Debug, PartialEq)]
pub enum ModifyDBInstanceError {
    ///<p>Specified CIDRIP or EC2 security group is not authorized for the specified DB security group.</p> <p>RDS may not also be authorized via IAM to perform necessary actions on your behalf.</p>
    AuthorizationNotFoundFault(String),
    ///<p> <i>CertificateIdentifier</i> does not refer to an existing certificate. </p>
    CertificateNotFoundFault(String),
    ///<p>User already has a DB instance with the given identifier.</p>
    DBInstanceAlreadyExistsFault(String),
    ///<p> <i>DBInstanceIdentifier</i> does not refer to an existing DB instance. </p>
    DBInstanceNotFoundFault(String),
    ///<p> <i>DBParameterGroupName</i> does not refer to an existing DB parameter group. </p>
    DBParameterGroupNotFoundFault(String),
    ///<p> <i>DBSecurityGroupName</i> does not refer to an existing DB security group. </p>
    DBSecurityGroupNotFoundFault(String),
    ///<p>The DB upgrade failed because a resource the DB depends on could not be modified.</p>
    DBUpgradeDependencyFailureFault(String),
    ///<p> <i>Domain</i> does not refer to an existing Active Directory Domain. </p>
    DomainNotFoundFault(String),
    ///<p>Specified DB instance class is not available in the specified Availability Zone.</p>
    InsufficientDBInstanceCapacityFault(String),
    ///<p> The specified DB instance is not in the <i>available</i> state. </p>
    InvalidDBInstanceStateFault(String),
    ///<p>The state of the DB security group does not allow deletion.</p>
    InvalidDBSecurityGroupStateFault(String),
    ///<p>DB subnet group does not cover all Availability Zones after it is created because users' change.</p>
    InvalidVPCNetworkStateFault(String),
    ///<p>The specified option group could not be found.</p>
    OptionGroupNotFoundFault(String),
    ///<p>Provisioned IOPS not available in the specified Availability Zone.</p>
    ProvisionedIopsNotAvailableInAZFault(String),
    ///<p>Request would result in user exceeding the allowed amount of storage available across all DB instances.</p>
    StorageQuotaExceededFault(String),
    ///<p> <i>StorageType</i> specified cannot be associated with the DB Instance. </p>
    StorageTypeNotSupportedFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl ModifyDBInstanceError {
    pub fn from_body(body: &str) -> ModifyDBInstanceError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "AuthorizationNotFoundFault" => ModifyDBInstanceError::AuthorizationNotFoundFault(String::from(parsed_error.message)),
                    "CertificateNotFoundFault" => ModifyDBInstanceError::CertificateNotFoundFault(String::from(parsed_error.message)),
                    "DBInstanceAlreadyExistsFault" => ModifyDBInstanceError::DBInstanceAlreadyExistsFault(String::from(parsed_error.message)),
                    "DBInstanceNotFoundFault" => ModifyDBInstanceError::DBInstanceNotFoundFault(String::from(parsed_error.message)),
                    "DBParameterGroupNotFoundFault" => ModifyDBInstanceError::DBParameterGroupNotFoundFault(String::from(parsed_error.message)),
                    "DBSecurityGroupNotFoundFault" => ModifyDBInstanceError::DBSecurityGroupNotFoundFault(String::from(parsed_error.message)),
                    "DBUpgradeDependencyFailureFault" => ModifyDBInstanceError::DBUpgradeDependencyFailureFault(String::from(parsed_error.message)),
                    "DomainNotFoundFault" => ModifyDBInstanceError::DomainNotFoundFault(String::from(parsed_error.message)),
                    "InsufficientDBInstanceCapacityFault" => ModifyDBInstanceError::InsufficientDBInstanceCapacityFault(String::from(parsed_error.message)),
                    "InvalidDBInstanceStateFault" => ModifyDBInstanceError::InvalidDBInstanceStateFault(String::from(parsed_error.message)),
                    "InvalidDBSecurityGroupStateFault" => ModifyDBInstanceError::InvalidDBSecurityGroupStateFault(String::from(parsed_error.message)),
                    "InvalidVPCNetworkStateFault" => ModifyDBInstanceError::InvalidVPCNetworkStateFault(String::from(parsed_error.message)),
                    "OptionGroupNotFoundFault" => ModifyDBInstanceError::OptionGroupNotFoundFault(String::from(parsed_error.message)),
                    "ProvisionedIopsNotAvailableInAZFault" => ModifyDBInstanceError::ProvisionedIopsNotAvailableInAZFault(String::from(parsed_error.message)),
                    "StorageQuotaExceededFault" => ModifyDBInstanceError::StorageQuotaExceededFault(String::from(parsed_error.message)),
                    "StorageTypeNotSupportedFault" => ModifyDBInstanceError::StorageTypeNotSupportedFault(String::from(parsed_error.message)),
                    _ => ModifyDBInstanceError::Unknown(String::from(body)),
                }
            }
            Err(_) => ModifyDBInstanceError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for ModifyDBInstanceError {
    fn from(err: XmlParseError) -> ModifyDBInstanceError {
        let XmlParseError(message) = err;
        ModifyDBInstanceError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for ModifyDBInstanceError {
    fn from(err: CredentialsError) -> ModifyDBInstanceError {
        ModifyDBInstanceError::Credentials(err)
    }
}
impl From<HttpDispatchError> for ModifyDBInstanceError {
    fn from(err: HttpDispatchError) -> ModifyDBInstanceError {
        ModifyDBInstanceError::HttpDispatch(err)
    }
}
impl From<io::Error> for ModifyDBInstanceError {
    fn from(err: io::Error) -> ModifyDBInstanceError {
        ModifyDBInstanceError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for ModifyDBInstanceError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ModifyDBInstanceError {
    fn description(&self) -> &str {
        match *self {
            ModifyDBInstanceError::AuthorizationNotFoundFault(ref cause) => cause,
            ModifyDBInstanceError::CertificateNotFoundFault(ref cause) => cause,
            ModifyDBInstanceError::DBInstanceAlreadyExistsFault(ref cause) => cause,
            ModifyDBInstanceError::DBInstanceNotFoundFault(ref cause) => cause,
            ModifyDBInstanceError::DBParameterGroupNotFoundFault(ref cause) => cause,
            ModifyDBInstanceError::DBSecurityGroupNotFoundFault(ref cause) => cause,
            ModifyDBInstanceError::DBUpgradeDependencyFailureFault(ref cause) => cause,
            ModifyDBInstanceError::DomainNotFoundFault(ref cause) => cause,
            ModifyDBInstanceError::InsufficientDBInstanceCapacityFault(ref cause) => cause,
            ModifyDBInstanceError::InvalidDBInstanceStateFault(ref cause) => cause,
            ModifyDBInstanceError::InvalidDBSecurityGroupStateFault(ref cause) => cause,
            ModifyDBInstanceError::InvalidVPCNetworkStateFault(ref cause) => cause,
            ModifyDBInstanceError::OptionGroupNotFoundFault(ref cause) => cause,
            ModifyDBInstanceError::ProvisionedIopsNotAvailableInAZFault(ref cause) => cause,
            ModifyDBInstanceError::StorageQuotaExceededFault(ref cause) => cause,
            ModifyDBInstanceError::StorageTypeNotSupportedFault(ref cause) => cause,
            ModifyDBInstanceError::Validation(ref cause) => cause,
            ModifyDBInstanceError::Credentials(ref err) => err.description(),
            ModifyDBInstanceError::HttpDispatch(ref dispatch_error) => dispatch_error.description(),
            ModifyDBInstanceError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by ModifyDBParameterGroup
#[derive(Debug, PartialEq)]
pub enum ModifyDBParameterGroupError {
    ///<p> <i>DBParameterGroupName</i> does not refer to an existing DB parameter group. </p>
    DBParameterGroupNotFoundFault(String),
    ///<p>The DB parameter group is in use or is in an invalid state. If you are attempting to delete the parameter group, you cannot delete it when the parameter group is in this state.</p>
    InvalidDBParameterGroupStateFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl ModifyDBParameterGroupError {
    pub fn from_body(body: &str) -> ModifyDBParameterGroupError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "DBParameterGroupNotFoundFault" => ModifyDBParameterGroupError::DBParameterGroupNotFoundFault(String::from(parsed_error.message)),
                    "InvalidDBParameterGroupStateFault" => ModifyDBParameterGroupError::InvalidDBParameterGroupStateFault(String::from(parsed_error.message)),
                    _ => ModifyDBParameterGroupError::Unknown(String::from(body)),
                }
            }
            Err(_) => ModifyDBParameterGroupError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for ModifyDBParameterGroupError {
    fn from(err: XmlParseError) -> ModifyDBParameterGroupError {
        let XmlParseError(message) = err;
        ModifyDBParameterGroupError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for ModifyDBParameterGroupError {
    fn from(err: CredentialsError) -> ModifyDBParameterGroupError {
        ModifyDBParameterGroupError::Credentials(err)
    }
}
impl From<HttpDispatchError> for ModifyDBParameterGroupError {
    fn from(err: HttpDispatchError) -> ModifyDBParameterGroupError {
        ModifyDBParameterGroupError::HttpDispatch(err)
    }
}
impl From<io::Error> for ModifyDBParameterGroupError {
    fn from(err: io::Error) -> ModifyDBParameterGroupError {
        ModifyDBParameterGroupError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for ModifyDBParameterGroupError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ModifyDBParameterGroupError {
    fn description(&self) -> &str {
        match *self {
            ModifyDBParameterGroupError::DBParameterGroupNotFoundFault(ref cause) => cause,
            ModifyDBParameterGroupError::InvalidDBParameterGroupStateFault(ref cause) => cause,
            ModifyDBParameterGroupError::Validation(ref cause) => cause,
            ModifyDBParameterGroupError::Credentials(ref err) => err.description(),
            ModifyDBParameterGroupError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            ModifyDBParameterGroupError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by ModifyDBSnapshot
#[derive(Debug, PartialEq)]
pub enum ModifyDBSnapshotError {
    ///<p> <i>DBSnapshotIdentifier</i> does not refer to an existing DB snapshot. </p>
    DBSnapshotNotFoundFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl ModifyDBSnapshotError {
    pub fn from_body(body: &str) -> ModifyDBSnapshotError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "DBSnapshotNotFoundFault" => ModifyDBSnapshotError::DBSnapshotNotFoundFault(String::from(parsed_error.message)),
                    _ => ModifyDBSnapshotError::Unknown(String::from(body)),
                }
            }
            Err(_) => ModifyDBSnapshotError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for ModifyDBSnapshotError {
    fn from(err: XmlParseError) -> ModifyDBSnapshotError {
        let XmlParseError(message) = err;
        ModifyDBSnapshotError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for ModifyDBSnapshotError {
    fn from(err: CredentialsError) -> ModifyDBSnapshotError {
        ModifyDBSnapshotError::Credentials(err)
    }
}
impl From<HttpDispatchError> for ModifyDBSnapshotError {
    fn from(err: HttpDispatchError) -> ModifyDBSnapshotError {
        ModifyDBSnapshotError::HttpDispatch(err)
    }
}
impl From<io::Error> for ModifyDBSnapshotError {
    fn from(err: io::Error) -> ModifyDBSnapshotError {
        ModifyDBSnapshotError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for ModifyDBSnapshotError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ModifyDBSnapshotError {
    fn description(&self) -> &str {
        match *self {
            ModifyDBSnapshotError::DBSnapshotNotFoundFault(ref cause) => cause,
            ModifyDBSnapshotError::Validation(ref cause) => cause,
            ModifyDBSnapshotError::Credentials(ref err) => err.description(),
            ModifyDBSnapshotError::HttpDispatch(ref dispatch_error) => dispatch_error.description(),
            ModifyDBSnapshotError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by ModifyDBSnapshotAttribute
#[derive(Debug, PartialEq)]
pub enum ModifyDBSnapshotAttributeError {
    ///<p> <i>DBSnapshotIdentifier</i> does not refer to an existing DB snapshot. </p>
    DBSnapshotNotFoundFault(String),
    ///<p>The state of the DB snapshot does not allow deletion.</p>
    InvalidDBSnapshotStateFault(String),
    ///<p>You have exceeded the maximum number of accounts that you can share a manual DB snapshot with.</p>
    SharedSnapshotQuotaExceededFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl ModifyDBSnapshotAttributeError {
    pub fn from_body(body: &str) -> ModifyDBSnapshotAttributeError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "DBSnapshotNotFoundFault" => ModifyDBSnapshotAttributeError::DBSnapshotNotFoundFault(String::from(parsed_error.message)),
                    "InvalidDBSnapshotStateFault" => ModifyDBSnapshotAttributeError::InvalidDBSnapshotStateFault(String::from(parsed_error.message)),
                    "SharedSnapshotQuotaExceededFault" => ModifyDBSnapshotAttributeError::SharedSnapshotQuotaExceededFault(String::from(parsed_error.message)),
                    _ => ModifyDBSnapshotAttributeError::Unknown(String::from(body)),
                }
            }
            Err(_) => ModifyDBSnapshotAttributeError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for ModifyDBSnapshotAttributeError {
    fn from(err: XmlParseError) -> ModifyDBSnapshotAttributeError {
        let XmlParseError(message) = err;
        ModifyDBSnapshotAttributeError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for ModifyDBSnapshotAttributeError {
    fn from(err: CredentialsError) -> ModifyDBSnapshotAttributeError {
        ModifyDBSnapshotAttributeError::Credentials(err)
    }
}
impl From<HttpDispatchError> for ModifyDBSnapshotAttributeError {
    fn from(err: HttpDispatchError) -> ModifyDBSnapshotAttributeError {
        ModifyDBSnapshotAttributeError::HttpDispatch(err)
    }
}
impl From<io::Error> for ModifyDBSnapshotAttributeError {
    fn from(err: io::Error) -> ModifyDBSnapshotAttributeError {
        ModifyDBSnapshotAttributeError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for ModifyDBSnapshotAttributeError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ModifyDBSnapshotAttributeError {
    fn description(&self) -> &str {
        match *self {
            ModifyDBSnapshotAttributeError::DBSnapshotNotFoundFault(ref cause) => cause,
            ModifyDBSnapshotAttributeError::InvalidDBSnapshotStateFault(ref cause) => cause,
            ModifyDBSnapshotAttributeError::SharedSnapshotQuotaExceededFault(ref cause) => cause,
            ModifyDBSnapshotAttributeError::Validation(ref cause) => cause,
            ModifyDBSnapshotAttributeError::Credentials(ref err) => err.description(),
            ModifyDBSnapshotAttributeError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            ModifyDBSnapshotAttributeError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by ModifyDBSubnetGroup
#[derive(Debug, PartialEq)]
pub enum ModifyDBSubnetGroupError {
    ///<p>Subnets in the DB subnet group should cover at least two Availability Zones unless there is only one Availability Zone.</p>
    DBSubnetGroupDoesNotCoverEnoughAZs(String),
    ///<p> <i>DBSubnetGroupName</i> does not refer to an existing DB subnet group. </p>
    DBSubnetGroupNotFoundFault(String),
    ///<p>Request would result in user exceeding the allowed number of subnets in a DB subnet groups.</p>
    DBSubnetQuotaExceededFault(String),
    ///<p>The requested subnet is invalid, or multiple subnets were requested that are not all in a common VPC.</p>
    InvalidSubnet(String),
    ///<p>The DB subnet is already in use in the Availability Zone.</p>
    SubnetAlreadyInUse(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl ModifyDBSubnetGroupError {
    pub fn from_body(body: &str) -> ModifyDBSubnetGroupError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "DBSubnetGroupDoesNotCoverEnoughAZs" => ModifyDBSubnetGroupError::DBSubnetGroupDoesNotCoverEnoughAZs(String::from(parsed_error.message)),
                    "DBSubnetGroupNotFoundFault" => ModifyDBSubnetGroupError::DBSubnetGroupNotFoundFault(String::from(parsed_error.message)),
                    "DBSubnetQuotaExceededFault" => ModifyDBSubnetGroupError::DBSubnetQuotaExceededFault(String::from(parsed_error.message)),
                    "InvalidSubnet" => {
                        ModifyDBSubnetGroupError::InvalidSubnet(String::from(parsed_error.message))
                    }
                    "SubnetAlreadyInUse" => ModifyDBSubnetGroupError::SubnetAlreadyInUse(String::from(parsed_error.message)),
                    _ => ModifyDBSubnetGroupError::Unknown(String::from(body)),
                }
            }
            Err(_) => ModifyDBSubnetGroupError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for ModifyDBSubnetGroupError {
    fn from(err: XmlParseError) -> ModifyDBSubnetGroupError {
        let XmlParseError(message) = err;
        ModifyDBSubnetGroupError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for ModifyDBSubnetGroupError {
    fn from(err: CredentialsError) -> ModifyDBSubnetGroupError {
        ModifyDBSubnetGroupError::Credentials(err)
    }
}
impl From<HttpDispatchError> for ModifyDBSubnetGroupError {
    fn from(err: HttpDispatchError) -> ModifyDBSubnetGroupError {
        ModifyDBSubnetGroupError::HttpDispatch(err)
    }
}
impl From<io::Error> for ModifyDBSubnetGroupError {
    fn from(err: io::Error) -> ModifyDBSubnetGroupError {
        ModifyDBSubnetGroupError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for ModifyDBSubnetGroupError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ModifyDBSubnetGroupError {
    fn description(&self) -> &str {
        match *self {
            ModifyDBSubnetGroupError::DBSubnetGroupDoesNotCoverEnoughAZs(ref cause) => cause,
            ModifyDBSubnetGroupError::DBSubnetGroupNotFoundFault(ref cause) => cause,
            ModifyDBSubnetGroupError::DBSubnetQuotaExceededFault(ref cause) => cause,
            ModifyDBSubnetGroupError::InvalidSubnet(ref cause) => cause,
            ModifyDBSubnetGroupError::SubnetAlreadyInUse(ref cause) => cause,
            ModifyDBSubnetGroupError::Validation(ref cause) => cause,
            ModifyDBSubnetGroupError::Credentials(ref err) => err.description(),
            ModifyDBSubnetGroupError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            ModifyDBSubnetGroupError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by ModifyEventSubscription
#[derive(Debug, PartialEq)]
pub enum ModifyEventSubscriptionError {
    ///<p>You have reached the maximum number of event subscriptions.</p>
    EventSubscriptionQuotaExceededFault(String),
    ///<p>SNS has responded that there is a problem with the SND topic specified.</p>
    SNSInvalidTopicFault(String),
    ///<p>You do not have permission to publish to the SNS topic ARN.</p>
    SNSNoAuthorizationFault(String),
    ///<p>The SNS topic ARN does not exist.</p>
    SNSTopicArnNotFoundFault(String),
    ///<p>The supplied category does not exist.</p>
    SubscriptionCategoryNotFoundFault(String),
    ///<p>The subscription name does not exist.</p>
    SubscriptionNotFoundFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl ModifyEventSubscriptionError {
    pub fn from_body(body: &str) -> ModifyEventSubscriptionError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "EventSubscriptionQuotaExceededFault" => ModifyEventSubscriptionError::EventSubscriptionQuotaExceededFault(String::from(parsed_error.message)),
                    "SNSInvalidTopicFault" => ModifyEventSubscriptionError::SNSInvalidTopicFault(String::from(parsed_error.message)),
                    "SNSNoAuthorizationFault" => ModifyEventSubscriptionError::SNSNoAuthorizationFault(String::from(parsed_error.message)),
                    "SNSTopicArnNotFoundFault" => ModifyEventSubscriptionError::SNSTopicArnNotFoundFault(String::from(parsed_error.message)),
                    "SubscriptionCategoryNotFoundFault" => ModifyEventSubscriptionError::SubscriptionCategoryNotFoundFault(String::from(parsed_error.message)),
                    "SubscriptionNotFoundFault" => ModifyEventSubscriptionError::SubscriptionNotFoundFault(String::from(parsed_error.message)),
                    _ => ModifyEventSubscriptionError::Unknown(String::from(body)),
                }
            }
            Err(_) => ModifyEventSubscriptionError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for ModifyEventSubscriptionError {
    fn from(err: XmlParseError) -> ModifyEventSubscriptionError {
        let XmlParseError(message) = err;
        ModifyEventSubscriptionError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for ModifyEventSubscriptionError {
    fn from(err: CredentialsError) -> ModifyEventSubscriptionError {
        ModifyEventSubscriptionError::Credentials(err)
    }
}
impl From<HttpDispatchError> for ModifyEventSubscriptionError {
    fn from(err: HttpDispatchError) -> ModifyEventSubscriptionError {
        ModifyEventSubscriptionError::HttpDispatch(err)
    }
}
impl From<io::Error> for ModifyEventSubscriptionError {
    fn from(err: io::Error) -> ModifyEventSubscriptionError {
        ModifyEventSubscriptionError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for ModifyEventSubscriptionError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ModifyEventSubscriptionError {
    fn description(&self) -> &str {
        match *self {
            ModifyEventSubscriptionError::EventSubscriptionQuotaExceededFault(ref cause) => cause,
            ModifyEventSubscriptionError::SNSInvalidTopicFault(ref cause) => cause,
            ModifyEventSubscriptionError::SNSNoAuthorizationFault(ref cause) => cause,
            ModifyEventSubscriptionError::SNSTopicArnNotFoundFault(ref cause) => cause,
            ModifyEventSubscriptionError::SubscriptionCategoryNotFoundFault(ref cause) => cause,
            ModifyEventSubscriptionError::SubscriptionNotFoundFault(ref cause) => cause,
            ModifyEventSubscriptionError::Validation(ref cause) => cause,
            ModifyEventSubscriptionError::Credentials(ref err) => err.description(),
            ModifyEventSubscriptionError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            ModifyEventSubscriptionError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by ModifyOptionGroup
#[derive(Debug, PartialEq)]
pub enum ModifyOptionGroupError {
    ///<p> The option group is not in the <i>available</i> state. </p>
    InvalidOptionGroupStateFault(String),
    ///<p>The specified option group could not be found.</p>
    OptionGroupNotFoundFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl ModifyOptionGroupError {
    pub fn from_body(body: &str) -> ModifyOptionGroupError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "InvalidOptionGroupStateFault" => ModifyOptionGroupError::InvalidOptionGroupStateFault(String::from(parsed_error.message)),
                    "OptionGroupNotFoundFault" => ModifyOptionGroupError::OptionGroupNotFoundFault(String::from(parsed_error.message)),
                    _ => ModifyOptionGroupError::Unknown(String::from(body)),
                }
            }
            Err(_) => ModifyOptionGroupError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for ModifyOptionGroupError {
    fn from(err: XmlParseError) -> ModifyOptionGroupError {
        let XmlParseError(message) = err;
        ModifyOptionGroupError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for ModifyOptionGroupError {
    fn from(err: CredentialsError) -> ModifyOptionGroupError {
        ModifyOptionGroupError::Credentials(err)
    }
}
impl From<HttpDispatchError> for ModifyOptionGroupError {
    fn from(err: HttpDispatchError) -> ModifyOptionGroupError {
        ModifyOptionGroupError::HttpDispatch(err)
    }
}
impl From<io::Error> for ModifyOptionGroupError {
    fn from(err: io::Error) -> ModifyOptionGroupError {
        ModifyOptionGroupError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for ModifyOptionGroupError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ModifyOptionGroupError {
    fn description(&self) -> &str {
        match *self {
            ModifyOptionGroupError::InvalidOptionGroupStateFault(ref cause) => cause,
            ModifyOptionGroupError::OptionGroupNotFoundFault(ref cause) => cause,
            ModifyOptionGroupError::Validation(ref cause) => cause,
            ModifyOptionGroupError::Credentials(ref err) => err.description(),
            ModifyOptionGroupError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            ModifyOptionGroupError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by PromoteReadReplica
#[derive(Debug, PartialEq)]
pub enum PromoteReadReplicaError {
    ///<p> <i>DBInstanceIdentifier</i> does not refer to an existing DB instance. </p>
    DBInstanceNotFoundFault(String),
    ///<p> The specified DB instance is not in the <i>available</i> state. </p>
    InvalidDBInstanceStateFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl PromoteReadReplicaError {
    pub fn from_body(body: &str) -> PromoteReadReplicaError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "DBInstanceNotFoundFault" => PromoteReadReplicaError::DBInstanceNotFoundFault(String::from(parsed_error.message)),
                    "InvalidDBInstanceStateFault" => PromoteReadReplicaError::InvalidDBInstanceStateFault(String::from(parsed_error.message)),
                    _ => PromoteReadReplicaError::Unknown(String::from(body)),
                }
            }
            Err(_) => PromoteReadReplicaError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for PromoteReadReplicaError {
    fn from(err: XmlParseError) -> PromoteReadReplicaError {
        let XmlParseError(message) = err;
        PromoteReadReplicaError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for PromoteReadReplicaError {
    fn from(err: CredentialsError) -> PromoteReadReplicaError {
        PromoteReadReplicaError::Credentials(err)
    }
}
impl From<HttpDispatchError> for PromoteReadReplicaError {
    fn from(err: HttpDispatchError) -> PromoteReadReplicaError {
        PromoteReadReplicaError::HttpDispatch(err)
    }
}
impl From<io::Error> for PromoteReadReplicaError {
    fn from(err: io::Error) -> PromoteReadReplicaError {
        PromoteReadReplicaError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for PromoteReadReplicaError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for PromoteReadReplicaError {
    fn description(&self) -> &str {
        match *self {
            PromoteReadReplicaError::DBInstanceNotFoundFault(ref cause) => cause,
            PromoteReadReplicaError::InvalidDBInstanceStateFault(ref cause) => cause,
            PromoteReadReplicaError::Validation(ref cause) => cause,
            PromoteReadReplicaError::Credentials(ref err) => err.description(),
            PromoteReadReplicaError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            PromoteReadReplicaError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by PromoteReadReplicaDBCluster
#[derive(Debug, PartialEq)]
pub enum PromoteReadReplicaDBClusterError {
    ///<p> <i>DBClusterIdentifier</i> does not refer to an existing DB cluster. </p>
    DBClusterNotFoundFault(String),
    ///<p>The DB cluster is not in a valid state.</p>
    InvalidDBClusterStateFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl PromoteReadReplicaDBClusterError {
    pub fn from_body(body: &str) -> PromoteReadReplicaDBClusterError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "DBClusterNotFoundFault" => PromoteReadReplicaDBClusterError::DBClusterNotFoundFault(String::from(parsed_error.message)),
                    "InvalidDBClusterStateFault" => PromoteReadReplicaDBClusterError::InvalidDBClusterStateFault(String::from(parsed_error.message)),
                    _ => PromoteReadReplicaDBClusterError::Unknown(String::from(body)),
                }
            }
            Err(_) => PromoteReadReplicaDBClusterError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for PromoteReadReplicaDBClusterError {
    fn from(err: XmlParseError) -> PromoteReadReplicaDBClusterError {
        let XmlParseError(message) = err;
        PromoteReadReplicaDBClusterError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for PromoteReadReplicaDBClusterError {
    fn from(err: CredentialsError) -> PromoteReadReplicaDBClusterError {
        PromoteReadReplicaDBClusterError::Credentials(err)
    }
}
impl From<HttpDispatchError> for PromoteReadReplicaDBClusterError {
    fn from(err: HttpDispatchError) -> PromoteReadReplicaDBClusterError {
        PromoteReadReplicaDBClusterError::HttpDispatch(err)
    }
}
impl From<io::Error> for PromoteReadReplicaDBClusterError {
    fn from(err: io::Error) -> PromoteReadReplicaDBClusterError {
        PromoteReadReplicaDBClusterError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for PromoteReadReplicaDBClusterError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for PromoteReadReplicaDBClusterError {
    fn description(&self) -> &str {
        match *self {
            PromoteReadReplicaDBClusterError::DBClusterNotFoundFault(ref cause) => cause,
            PromoteReadReplicaDBClusterError::InvalidDBClusterStateFault(ref cause) => cause,
            PromoteReadReplicaDBClusterError::Validation(ref cause) => cause,
            PromoteReadReplicaDBClusterError::Credentials(ref err) => err.description(),
            PromoteReadReplicaDBClusterError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            PromoteReadReplicaDBClusterError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by PurchaseReservedDBInstancesOffering
#[derive(Debug, PartialEq)]
pub enum PurchaseReservedDBInstancesOfferingError {
    ///<p>User already has a reservation with the given identifier.</p>
    ReservedDBInstanceAlreadyExistsFault(String),
    ///<p>Request would exceed the user's DB Instance quota.</p>
    ReservedDBInstanceQuotaExceededFault(String),
    ///<p>Specified offering does not exist.</p>
    ReservedDBInstancesOfferingNotFoundFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl PurchaseReservedDBInstancesOfferingError {
    pub fn from_body(body: &str) -> PurchaseReservedDBInstancesOfferingError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "ReservedDBInstanceAlreadyExistsFault" => PurchaseReservedDBInstancesOfferingError::ReservedDBInstanceAlreadyExistsFault(String::from(parsed_error.message)),
                    "ReservedDBInstanceQuotaExceededFault" => PurchaseReservedDBInstancesOfferingError::ReservedDBInstanceQuotaExceededFault(String::from(parsed_error.message)),
                    "ReservedDBInstancesOfferingNotFoundFault" => PurchaseReservedDBInstancesOfferingError::ReservedDBInstancesOfferingNotFoundFault(String::from(parsed_error.message)),
                    _ => PurchaseReservedDBInstancesOfferingError::Unknown(String::from(body)),
                }
            }
            Err(_) => PurchaseReservedDBInstancesOfferingError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for PurchaseReservedDBInstancesOfferingError {
    fn from(err: XmlParseError) -> PurchaseReservedDBInstancesOfferingError {
        let XmlParseError(message) = err;
        PurchaseReservedDBInstancesOfferingError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for PurchaseReservedDBInstancesOfferingError {
    fn from(err: CredentialsError) -> PurchaseReservedDBInstancesOfferingError {
        PurchaseReservedDBInstancesOfferingError::Credentials(err)
    }
}
impl From<HttpDispatchError> for PurchaseReservedDBInstancesOfferingError {
    fn from(err: HttpDispatchError) -> PurchaseReservedDBInstancesOfferingError {
        PurchaseReservedDBInstancesOfferingError::HttpDispatch(err)
    }
}
impl From<io::Error> for PurchaseReservedDBInstancesOfferingError {
    fn from(err: io::Error) -> PurchaseReservedDBInstancesOfferingError {
        PurchaseReservedDBInstancesOfferingError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for PurchaseReservedDBInstancesOfferingError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for PurchaseReservedDBInstancesOfferingError {
    fn description(&self) -> &str {
        match *self {
            PurchaseReservedDBInstancesOfferingError::ReservedDBInstanceAlreadyExistsFault(ref cause) => cause,
            PurchaseReservedDBInstancesOfferingError::ReservedDBInstanceQuotaExceededFault(ref cause) => cause,
            PurchaseReservedDBInstancesOfferingError::ReservedDBInstancesOfferingNotFoundFault(ref cause) => cause,
            PurchaseReservedDBInstancesOfferingError::Validation(ref cause) => cause,
            PurchaseReservedDBInstancesOfferingError::Credentials(ref err) => err.description(),
            PurchaseReservedDBInstancesOfferingError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            PurchaseReservedDBInstancesOfferingError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by RebootDBInstance
#[derive(Debug, PartialEq)]
pub enum RebootDBInstanceError {
    ///<p> <i>DBInstanceIdentifier</i> does not refer to an existing DB instance. </p>
    DBInstanceNotFoundFault(String),
    ///<p> The specified DB instance is not in the <i>available</i> state. </p>
    InvalidDBInstanceStateFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl RebootDBInstanceError {
    pub fn from_body(body: &str) -> RebootDBInstanceError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "DBInstanceNotFoundFault" => RebootDBInstanceError::DBInstanceNotFoundFault(String::from(parsed_error.message)),
                    "InvalidDBInstanceStateFault" => RebootDBInstanceError::InvalidDBInstanceStateFault(String::from(parsed_error.message)),
                    _ => RebootDBInstanceError::Unknown(String::from(body)),
                }
            }
            Err(_) => RebootDBInstanceError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for RebootDBInstanceError {
    fn from(err: XmlParseError) -> RebootDBInstanceError {
        let XmlParseError(message) = err;
        RebootDBInstanceError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for RebootDBInstanceError {
    fn from(err: CredentialsError) -> RebootDBInstanceError {
        RebootDBInstanceError::Credentials(err)
    }
}
impl From<HttpDispatchError> for RebootDBInstanceError {
    fn from(err: HttpDispatchError) -> RebootDBInstanceError {
        RebootDBInstanceError::HttpDispatch(err)
    }
}
impl From<io::Error> for RebootDBInstanceError {
    fn from(err: io::Error) -> RebootDBInstanceError {
        RebootDBInstanceError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for RebootDBInstanceError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for RebootDBInstanceError {
    fn description(&self) -> &str {
        match *self {
            RebootDBInstanceError::DBInstanceNotFoundFault(ref cause) => cause,
            RebootDBInstanceError::InvalidDBInstanceStateFault(ref cause) => cause,
            RebootDBInstanceError::Validation(ref cause) => cause,
            RebootDBInstanceError::Credentials(ref err) => err.description(),
            RebootDBInstanceError::HttpDispatch(ref dispatch_error) => dispatch_error.description(),
            RebootDBInstanceError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by RemoveRoleFromDBCluster
#[derive(Debug, PartialEq)]
pub enum RemoveRoleFromDBClusterError {
    ///<p> <i>DBClusterIdentifier</i> does not refer to an existing DB cluster. </p>
    DBClusterNotFoundFault(String),
    ///<p>The specified IAM role Amazon Resource Name (ARN) is not associated with the specified DB cluster.</p>
    DBClusterRoleNotFoundFault(String),
    ///<p>The DB cluster is not in a valid state.</p>
    InvalidDBClusterStateFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl RemoveRoleFromDBClusterError {
    pub fn from_body(body: &str) -> RemoveRoleFromDBClusterError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "DBClusterNotFoundFault" => RemoveRoleFromDBClusterError::DBClusterNotFoundFault(String::from(parsed_error.message)),
                    "DBClusterRoleNotFoundFault" => RemoveRoleFromDBClusterError::DBClusterRoleNotFoundFault(String::from(parsed_error.message)),
                    "InvalidDBClusterStateFault" => RemoveRoleFromDBClusterError::InvalidDBClusterStateFault(String::from(parsed_error.message)),
                    _ => RemoveRoleFromDBClusterError::Unknown(String::from(body)),
                }
            }
            Err(_) => RemoveRoleFromDBClusterError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for RemoveRoleFromDBClusterError {
    fn from(err: XmlParseError) -> RemoveRoleFromDBClusterError {
        let XmlParseError(message) = err;
        RemoveRoleFromDBClusterError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for RemoveRoleFromDBClusterError {
    fn from(err: CredentialsError) -> RemoveRoleFromDBClusterError {
        RemoveRoleFromDBClusterError::Credentials(err)
    }
}
impl From<HttpDispatchError> for RemoveRoleFromDBClusterError {
    fn from(err: HttpDispatchError) -> RemoveRoleFromDBClusterError {
        RemoveRoleFromDBClusterError::HttpDispatch(err)
    }
}
impl From<io::Error> for RemoveRoleFromDBClusterError {
    fn from(err: io::Error) -> RemoveRoleFromDBClusterError {
        RemoveRoleFromDBClusterError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for RemoveRoleFromDBClusterError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for RemoveRoleFromDBClusterError {
    fn description(&self) -> &str {
        match *self {
            RemoveRoleFromDBClusterError::DBClusterNotFoundFault(ref cause) => cause,
            RemoveRoleFromDBClusterError::DBClusterRoleNotFoundFault(ref cause) => cause,
            RemoveRoleFromDBClusterError::InvalidDBClusterStateFault(ref cause) => cause,
            RemoveRoleFromDBClusterError::Validation(ref cause) => cause,
            RemoveRoleFromDBClusterError::Credentials(ref err) => err.description(),
            RemoveRoleFromDBClusterError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            RemoveRoleFromDBClusterError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by RemoveSourceIdentifierFromSubscription
#[derive(Debug, PartialEq)]
pub enum RemoveSourceIdentifierFromSubscriptionError {
    ///<p>The requested source could not be found.</p>
    SourceNotFoundFault(String),
    ///<p>The subscription name does not exist.</p>
    SubscriptionNotFoundFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl RemoveSourceIdentifierFromSubscriptionError {
    pub fn from_body(body: &str) -> RemoveSourceIdentifierFromSubscriptionError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "SourceNotFoundFault" => RemoveSourceIdentifierFromSubscriptionError::SourceNotFoundFault(String::from(parsed_error.message)),
                    "SubscriptionNotFoundFault" => RemoveSourceIdentifierFromSubscriptionError::SubscriptionNotFoundFault(String::from(parsed_error.message)),
                    _ => RemoveSourceIdentifierFromSubscriptionError::Unknown(String::from(body)),
                }
            }
            Err(_) => RemoveSourceIdentifierFromSubscriptionError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for RemoveSourceIdentifierFromSubscriptionError {
    fn from(err: XmlParseError) -> RemoveSourceIdentifierFromSubscriptionError {
        let XmlParseError(message) = err;
        RemoveSourceIdentifierFromSubscriptionError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for RemoveSourceIdentifierFromSubscriptionError {
    fn from(err: CredentialsError) -> RemoveSourceIdentifierFromSubscriptionError {
        RemoveSourceIdentifierFromSubscriptionError::Credentials(err)
    }
}
impl From<HttpDispatchError> for RemoveSourceIdentifierFromSubscriptionError {
    fn from(err: HttpDispatchError) -> RemoveSourceIdentifierFromSubscriptionError {
        RemoveSourceIdentifierFromSubscriptionError::HttpDispatch(err)
    }
}
impl From<io::Error> for RemoveSourceIdentifierFromSubscriptionError {
    fn from(err: io::Error) -> RemoveSourceIdentifierFromSubscriptionError {
        RemoveSourceIdentifierFromSubscriptionError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for RemoveSourceIdentifierFromSubscriptionError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for RemoveSourceIdentifierFromSubscriptionError {
    fn description(&self) -> &str {
        match *self {
            RemoveSourceIdentifierFromSubscriptionError::SourceNotFoundFault(ref cause) => cause,
            RemoveSourceIdentifierFromSubscriptionError::SubscriptionNotFoundFault(ref cause) => {
                cause
            }
            RemoveSourceIdentifierFromSubscriptionError::Validation(ref cause) => cause,
            RemoveSourceIdentifierFromSubscriptionError::Credentials(ref err) => err.description(),
            RemoveSourceIdentifierFromSubscriptionError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            RemoveSourceIdentifierFromSubscriptionError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by RemoveTagsFromResource
#[derive(Debug, PartialEq)]
pub enum RemoveTagsFromResourceError {
    ///<p> <i>DBClusterIdentifier</i> does not refer to an existing DB cluster. </p>
    DBClusterNotFoundFault(String),
    ///<p> <i>DBInstanceIdentifier</i> does not refer to an existing DB instance. </p>
    DBInstanceNotFoundFault(String),
    ///<p> <i>DBSnapshotIdentifier</i> does not refer to an existing DB snapshot. </p>
    DBSnapshotNotFoundFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl RemoveTagsFromResourceError {
    pub fn from_body(body: &str) -> RemoveTagsFromResourceError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "DBClusterNotFoundFault" => RemoveTagsFromResourceError::DBClusterNotFoundFault(String::from(parsed_error.message)),
                    "DBInstanceNotFoundFault" => RemoveTagsFromResourceError::DBInstanceNotFoundFault(String::from(parsed_error.message)),
                    "DBSnapshotNotFoundFault" => RemoveTagsFromResourceError::DBSnapshotNotFoundFault(String::from(parsed_error.message)),
                    _ => RemoveTagsFromResourceError::Unknown(String::from(body)),
                }
            }
            Err(_) => RemoveTagsFromResourceError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for RemoveTagsFromResourceError {
    fn from(err: XmlParseError) -> RemoveTagsFromResourceError {
        let XmlParseError(message) = err;
        RemoveTagsFromResourceError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for RemoveTagsFromResourceError {
    fn from(err: CredentialsError) -> RemoveTagsFromResourceError {
        RemoveTagsFromResourceError::Credentials(err)
    }
}
impl From<HttpDispatchError> for RemoveTagsFromResourceError {
    fn from(err: HttpDispatchError) -> RemoveTagsFromResourceError {
        RemoveTagsFromResourceError::HttpDispatch(err)
    }
}
impl From<io::Error> for RemoveTagsFromResourceError {
    fn from(err: io::Error) -> RemoveTagsFromResourceError {
        RemoveTagsFromResourceError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for RemoveTagsFromResourceError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for RemoveTagsFromResourceError {
    fn description(&self) -> &str {
        match *self {
            RemoveTagsFromResourceError::DBClusterNotFoundFault(ref cause) => cause,
            RemoveTagsFromResourceError::DBInstanceNotFoundFault(ref cause) => cause,
            RemoveTagsFromResourceError::DBSnapshotNotFoundFault(ref cause) => cause,
            RemoveTagsFromResourceError::Validation(ref cause) => cause,
            RemoveTagsFromResourceError::Credentials(ref err) => err.description(),
            RemoveTagsFromResourceError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            RemoveTagsFromResourceError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by ResetDBClusterParameterGroup
#[derive(Debug, PartialEq)]
pub enum ResetDBClusterParameterGroupError {
    ///<p> <i>DBParameterGroupName</i> does not refer to an existing DB parameter group. </p>
    DBParameterGroupNotFoundFault(String),
    ///<p>The DB parameter group is in use or is in an invalid state. If you are attempting to delete the parameter group, you cannot delete it when the parameter group is in this state.</p>
    InvalidDBParameterGroupStateFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl ResetDBClusterParameterGroupError {
    pub fn from_body(body: &str) -> ResetDBClusterParameterGroupError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "DBParameterGroupNotFoundFault" => ResetDBClusterParameterGroupError::DBParameterGroupNotFoundFault(String::from(parsed_error.message)),
                    "InvalidDBParameterGroupStateFault" => ResetDBClusterParameterGroupError::InvalidDBParameterGroupStateFault(String::from(parsed_error.message)),
                    _ => ResetDBClusterParameterGroupError::Unknown(String::from(body)),
                }
            }
            Err(_) => ResetDBClusterParameterGroupError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for ResetDBClusterParameterGroupError {
    fn from(err: XmlParseError) -> ResetDBClusterParameterGroupError {
        let XmlParseError(message) = err;
        ResetDBClusterParameterGroupError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for ResetDBClusterParameterGroupError {
    fn from(err: CredentialsError) -> ResetDBClusterParameterGroupError {
        ResetDBClusterParameterGroupError::Credentials(err)
    }
}
impl From<HttpDispatchError> for ResetDBClusterParameterGroupError {
    fn from(err: HttpDispatchError) -> ResetDBClusterParameterGroupError {
        ResetDBClusterParameterGroupError::HttpDispatch(err)
    }
}
impl From<io::Error> for ResetDBClusterParameterGroupError {
    fn from(err: io::Error) -> ResetDBClusterParameterGroupError {
        ResetDBClusterParameterGroupError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for ResetDBClusterParameterGroupError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ResetDBClusterParameterGroupError {
    fn description(&self) -> &str {
        match *self {
            ResetDBClusterParameterGroupError::DBParameterGroupNotFoundFault(ref cause) => cause,
            ResetDBClusterParameterGroupError::InvalidDBParameterGroupStateFault(ref cause) => {
                cause
            }
            ResetDBClusterParameterGroupError::Validation(ref cause) => cause,
            ResetDBClusterParameterGroupError::Credentials(ref err) => err.description(),
            ResetDBClusterParameterGroupError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            ResetDBClusterParameterGroupError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by ResetDBParameterGroup
#[derive(Debug, PartialEq)]
pub enum ResetDBParameterGroupError {
    ///<p> <i>DBParameterGroupName</i> does not refer to an existing DB parameter group. </p>
    DBParameterGroupNotFoundFault(String),
    ///<p>The DB parameter group is in use or is in an invalid state. If you are attempting to delete the parameter group, you cannot delete it when the parameter group is in this state.</p>
    InvalidDBParameterGroupStateFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl ResetDBParameterGroupError {
    pub fn from_body(body: &str) -> ResetDBParameterGroupError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "DBParameterGroupNotFoundFault" => ResetDBParameterGroupError::DBParameterGroupNotFoundFault(String::from(parsed_error.message)),
                    "InvalidDBParameterGroupStateFault" => ResetDBParameterGroupError::InvalidDBParameterGroupStateFault(String::from(parsed_error.message)),
                    _ => ResetDBParameterGroupError::Unknown(String::from(body)),
                }
            }
            Err(_) => ResetDBParameterGroupError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for ResetDBParameterGroupError {
    fn from(err: XmlParseError) -> ResetDBParameterGroupError {
        let XmlParseError(message) = err;
        ResetDBParameterGroupError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for ResetDBParameterGroupError {
    fn from(err: CredentialsError) -> ResetDBParameterGroupError {
        ResetDBParameterGroupError::Credentials(err)
    }
}
impl From<HttpDispatchError> for ResetDBParameterGroupError {
    fn from(err: HttpDispatchError) -> ResetDBParameterGroupError {
        ResetDBParameterGroupError::HttpDispatch(err)
    }
}
impl From<io::Error> for ResetDBParameterGroupError {
    fn from(err: io::Error) -> ResetDBParameterGroupError {
        ResetDBParameterGroupError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for ResetDBParameterGroupError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ResetDBParameterGroupError {
    fn description(&self) -> &str {
        match *self {
            ResetDBParameterGroupError::DBParameterGroupNotFoundFault(ref cause) => cause,
            ResetDBParameterGroupError::InvalidDBParameterGroupStateFault(ref cause) => cause,
            ResetDBParameterGroupError::Validation(ref cause) => cause,
            ResetDBParameterGroupError::Credentials(ref err) => err.description(),
            ResetDBParameterGroupError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            ResetDBParameterGroupError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by RestoreDBClusterFromS3
#[derive(Debug, PartialEq)]
pub enum RestoreDBClusterFromS3Error {
    ///<p>User already has a DB cluster with the given identifier.</p>
    DBClusterAlreadyExistsFault(String),
    ///<p> <i>DBClusterIdentifier</i> does not refer to an existing DB cluster. </p>
    DBClusterNotFoundFault(String),
    ///<p> <i>DBClusterParameterGroupName</i> does not refer to an existing DB Cluster parameter group. </p>
    DBClusterParameterGroupNotFoundFault(String),
    ///<p>User attempted to create a new DB cluster and the user has already reached the maximum allowed DB cluster quota.</p>
    DBClusterQuotaExceededFault(String),
    ///<p> <i>DBSubnetGroupName</i> does not refer to an existing DB subnet group. </p>
    DBSubnetGroupNotFoundFault(String),
    ///<p>There is insufficient storage available for the current action. You may be able to resolve this error by updating your subnet group to use different Availability Zones that have more storage available.</p>
    InsufficientStorageClusterCapacityFault(String),
    ///<p>The DB cluster is not in a valid state.</p>
    InvalidDBClusterStateFault(String),
    ///<p>The DB subnet group cannot be deleted because it is in use.</p>
    InvalidDBSubnetGroupStateFault(String),
    ///<p>The specified Amazon S3 bucket name could not be found or Amazon RDS is not authorized to access the specified Amazon S3 bucket. Verify the <b>SourceS3BucketName</b> and <b>S3IngestionRoleArn</b> values and try again.</p>
    InvalidS3BucketFault(String),
    ///<p>The requested subnet is invalid, or multiple subnets were requested that are not all in a common VPC.</p>
    InvalidSubnet(String),
    ///<p>DB subnet group does not cover all Availability Zones after it is created because users' change.</p>
    InvalidVPCNetworkStateFault(String),
    ///<p>Error accessing KMS key.</p>
    KMSKeyNotAccessibleFault(String),
    ///<p>Request would result in user exceeding the allowed amount of storage available across all DB instances.</p>
    StorageQuotaExceededFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl RestoreDBClusterFromS3Error {
    pub fn from_body(body: &str) -> RestoreDBClusterFromS3Error {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "DBClusterAlreadyExistsFault" => RestoreDBClusterFromS3Error::DBClusterAlreadyExistsFault(String::from(parsed_error.message)),
                    "DBClusterNotFoundFault" => RestoreDBClusterFromS3Error::DBClusterNotFoundFault(String::from(parsed_error.message)),
                    "DBClusterParameterGroupNotFoundFault" => RestoreDBClusterFromS3Error::DBClusterParameterGroupNotFoundFault(String::from(parsed_error.message)),
                    "DBClusterQuotaExceededFault" => RestoreDBClusterFromS3Error::DBClusterQuotaExceededFault(String::from(parsed_error.message)),
                    "DBSubnetGroupNotFoundFault" => RestoreDBClusterFromS3Error::DBSubnetGroupNotFoundFault(String::from(parsed_error.message)),
                    "InsufficientStorageClusterCapacityFault" => RestoreDBClusterFromS3Error::InsufficientStorageClusterCapacityFault(String::from(parsed_error.message)),
                    "InvalidDBClusterStateFault" => RestoreDBClusterFromS3Error::InvalidDBClusterStateFault(String::from(parsed_error.message)),
                    "InvalidDBSubnetGroupStateFault" => RestoreDBClusterFromS3Error::InvalidDBSubnetGroupStateFault(String::from(parsed_error.message)),
                    "InvalidS3BucketFault" => RestoreDBClusterFromS3Error::InvalidS3BucketFault(String::from(parsed_error.message)),
                    "InvalidSubnet" => RestoreDBClusterFromS3Error::InvalidSubnet(String::from(parsed_error.message)),
                    "InvalidVPCNetworkStateFault" => RestoreDBClusterFromS3Error::InvalidVPCNetworkStateFault(String::from(parsed_error.message)),
                    "KMSKeyNotAccessibleFault" => RestoreDBClusterFromS3Error::KMSKeyNotAccessibleFault(String::from(parsed_error.message)),
                    "StorageQuotaExceededFault" => RestoreDBClusterFromS3Error::StorageQuotaExceededFault(String::from(parsed_error.message)),
                    _ => RestoreDBClusterFromS3Error::Unknown(String::from(body)),
                }
            }
            Err(_) => RestoreDBClusterFromS3Error::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for RestoreDBClusterFromS3Error {
    fn from(err: XmlParseError) -> RestoreDBClusterFromS3Error {
        let XmlParseError(message) = err;
        RestoreDBClusterFromS3Error::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for RestoreDBClusterFromS3Error {
    fn from(err: CredentialsError) -> RestoreDBClusterFromS3Error {
        RestoreDBClusterFromS3Error::Credentials(err)
    }
}
impl From<HttpDispatchError> for RestoreDBClusterFromS3Error {
    fn from(err: HttpDispatchError) -> RestoreDBClusterFromS3Error {
        RestoreDBClusterFromS3Error::HttpDispatch(err)
    }
}
impl From<io::Error> for RestoreDBClusterFromS3Error {
    fn from(err: io::Error) -> RestoreDBClusterFromS3Error {
        RestoreDBClusterFromS3Error::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for RestoreDBClusterFromS3Error {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for RestoreDBClusterFromS3Error {
    fn description(&self) -> &str {
        match *self {
            RestoreDBClusterFromS3Error::DBClusterAlreadyExistsFault(ref cause) => cause,
            RestoreDBClusterFromS3Error::DBClusterNotFoundFault(ref cause) => cause,
            RestoreDBClusterFromS3Error::DBClusterParameterGroupNotFoundFault(ref cause) => cause,
            RestoreDBClusterFromS3Error::DBClusterQuotaExceededFault(ref cause) => cause,
            RestoreDBClusterFromS3Error::DBSubnetGroupNotFoundFault(ref cause) => cause,
            RestoreDBClusterFromS3Error::InsufficientStorageClusterCapacityFault(ref cause) => {
                cause
            }
            RestoreDBClusterFromS3Error::InvalidDBClusterStateFault(ref cause) => cause,
            RestoreDBClusterFromS3Error::InvalidDBSubnetGroupStateFault(ref cause) => cause,
            RestoreDBClusterFromS3Error::InvalidS3BucketFault(ref cause) => cause,
            RestoreDBClusterFromS3Error::InvalidSubnet(ref cause) => cause,
            RestoreDBClusterFromS3Error::InvalidVPCNetworkStateFault(ref cause) => cause,
            RestoreDBClusterFromS3Error::KMSKeyNotAccessibleFault(ref cause) => cause,
            RestoreDBClusterFromS3Error::StorageQuotaExceededFault(ref cause) => cause,
            RestoreDBClusterFromS3Error::Validation(ref cause) => cause,
            RestoreDBClusterFromS3Error::Credentials(ref err) => err.description(),
            RestoreDBClusterFromS3Error::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            RestoreDBClusterFromS3Error::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by RestoreDBClusterFromSnapshot
#[derive(Debug, PartialEq)]
pub enum RestoreDBClusterFromSnapshotError {
    ///<p>User already has a DB cluster with the given identifier.</p>
    DBClusterAlreadyExistsFault(String),
    ///<p>User attempted to create a new DB cluster and the user has already reached the maximum allowed DB cluster quota.</p>
    DBClusterQuotaExceededFault(String),
    ///<p> <i>DBClusterSnapshotIdentifier</i> does not refer to an existing DB cluster snapshot. </p>
    DBClusterSnapshotNotFoundFault(String),
    ///<p> <i>DBSnapshotIdentifier</i> does not refer to an existing DB snapshot. </p>
    DBSnapshotNotFoundFault(String),
    ///<p> <i>DBSubnetGroupName</i> does not refer to an existing DB subnet group. </p>
    DBSubnetGroupNotFoundFault(String),
    ///<p>The DB cluster does not have enough capacity for the current operation.</p>
    InsufficientDBClusterCapacityFault(String),
    ///<p>There is insufficient storage available for the current action. You may be able to resolve this error by updating your subnet group to use different Availability Zones that have more storage available.</p>
    InsufficientStorageClusterCapacityFault(String),
    ///<p>The supplied value is not a valid DB cluster snapshot state.</p>
    InvalidDBClusterSnapshotStateFault(String),
    ///<p>The state of the DB snapshot does not allow deletion.</p>
    InvalidDBSnapshotStateFault(String),
    ///<p>Cannot restore from vpc backup to non-vpc DB instance.</p>
    InvalidRestoreFault(String),
    ///<p>The requested subnet is invalid, or multiple subnets were requested that are not all in a common VPC.</p>
    InvalidSubnet(String),
    ///<p>DB subnet group does not cover all Availability Zones after it is created because users' change.</p>
    InvalidVPCNetworkStateFault(String),
    ///<p>Error accessing KMS key.</p>
    KMSKeyNotAccessibleFault(String),
    ///<p>The specified option group could not be found.</p>
    OptionGroupNotFoundFault(String),
    ///<p>Request would result in user exceeding the allowed amount of storage available across all DB instances.</p>
    StorageQuotaExceededFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl RestoreDBClusterFromSnapshotError {
    pub fn from_body(body: &str) -> RestoreDBClusterFromSnapshotError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "DBClusterAlreadyExistsFault" => RestoreDBClusterFromSnapshotError::DBClusterAlreadyExistsFault(String::from(parsed_error.message)),
                    "DBClusterQuotaExceededFault" => RestoreDBClusterFromSnapshotError::DBClusterQuotaExceededFault(String::from(parsed_error.message)),
                    "DBClusterSnapshotNotFoundFault" => RestoreDBClusterFromSnapshotError::DBClusterSnapshotNotFoundFault(String::from(parsed_error.message)),
                    "DBSnapshotNotFoundFault" => RestoreDBClusterFromSnapshotError::DBSnapshotNotFoundFault(String::from(parsed_error.message)),
                    "DBSubnetGroupNotFoundFault" => RestoreDBClusterFromSnapshotError::DBSubnetGroupNotFoundFault(String::from(parsed_error.message)),
                    "InsufficientDBClusterCapacityFault" => RestoreDBClusterFromSnapshotError::InsufficientDBClusterCapacityFault(String::from(parsed_error.message)),
                    "InsufficientStorageClusterCapacityFault" => RestoreDBClusterFromSnapshotError::InsufficientStorageClusterCapacityFault(String::from(parsed_error.message)),
                    "InvalidDBClusterSnapshotStateFault" => RestoreDBClusterFromSnapshotError::InvalidDBClusterSnapshotStateFault(String::from(parsed_error.message)),
                    "InvalidDBSnapshotStateFault" => RestoreDBClusterFromSnapshotError::InvalidDBSnapshotStateFault(String::from(parsed_error.message)),
                    "InvalidRestoreFault" => RestoreDBClusterFromSnapshotError::InvalidRestoreFault(String::from(parsed_error.message)),
                    "InvalidSubnet" => RestoreDBClusterFromSnapshotError::InvalidSubnet(String::from(parsed_error.message)),
                    "InvalidVPCNetworkStateFault" => RestoreDBClusterFromSnapshotError::InvalidVPCNetworkStateFault(String::from(parsed_error.message)),
                    "KMSKeyNotAccessibleFault" => RestoreDBClusterFromSnapshotError::KMSKeyNotAccessibleFault(String::from(parsed_error.message)),
                    "OptionGroupNotFoundFault" => RestoreDBClusterFromSnapshotError::OptionGroupNotFoundFault(String::from(parsed_error.message)),
                    "StorageQuotaExceededFault" => RestoreDBClusterFromSnapshotError::StorageQuotaExceededFault(String::from(parsed_error.message)),
                    _ => RestoreDBClusterFromSnapshotError::Unknown(String::from(body)),
                }
            }
            Err(_) => RestoreDBClusterFromSnapshotError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for RestoreDBClusterFromSnapshotError {
    fn from(err: XmlParseError) -> RestoreDBClusterFromSnapshotError {
        let XmlParseError(message) = err;
        RestoreDBClusterFromSnapshotError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for RestoreDBClusterFromSnapshotError {
    fn from(err: CredentialsError) -> RestoreDBClusterFromSnapshotError {
        RestoreDBClusterFromSnapshotError::Credentials(err)
    }
}
impl From<HttpDispatchError> for RestoreDBClusterFromSnapshotError {
    fn from(err: HttpDispatchError) -> RestoreDBClusterFromSnapshotError {
        RestoreDBClusterFromSnapshotError::HttpDispatch(err)
    }
}
impl From<io::Error> for RestoreDBClusterFromSnapshotError {
    fn from(err: io::Error) -> RestoreDBClusterFromSnapshotError {
        RestoreDBClusterFromSnapshotError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for RestoreDBClusterFromSnapshotError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for RestoreDBClusterFromSnapshotError {
    fn description(&self) -> &str {
        match *self {
            RestoreDBClusterFromSnapshotError::DBClusterAlreadyExistsFault(ref cause) => cause,
            RestoreDBClusterFromSnapshotError::DBClusterQuotaExceededFault(ref cause) => cause,
            RestoreDBClusterFromSnapshotError::DBClusterSnapshotNotFoundFault(ref cause) => cause,
            RestoreDBClusterFromSnapshotError::DBSnapshotNotFoundFault(ref cause) => cause,
            RestoreDBClusterFromSnapshotError::DBSubnetGroupNotFoundFault(ref cause) => cause,
            RestoreDBClusterFromSnapshotError::InsufficientDBClusterCapacityFault(ref cause) => {
                cause
            }
            RestoreDBClusterFromSnapshotError::InsufficientStorageClusterCapacityFault(ref cause) => cause,
            RestoreDBClusterFromSnapshotError::InvalidDBClusterSnapshotStateFault(ref cause) => {
                cause
            }
            RestoreDBClusterFromSnapshotError::InvalidDBSnapshotStateFault(ref cause) => cause,
            RestoreDBClusterFromSnapshotError::InvalidRestoreFault(ref cause) => cause,
            RestoreDBClusterFromSnapshotError::InvalidSubnet(ref cause) => cause,
            RestoreDBClusterFromSnapshotError::InvalidVPCNetworkStateFault(ref cause) => cause,
            RestoreDBClusterFromSnapshotError::KMSKeyNotAccessibleFault(ref cause) => cause,
            RestoreDBClusterFromSnapshotError::OptionGroupNotFoundFault(ref cause) => cause,
            RestoreDBClusterFromSnapshotError::StorageQuotaExceededFault(ref cause) => cause,
            RestoreDBClusterFromSnapshotError::Validation(ref cause) => cause,
            RestoreDBClusterFromSnapshotError::Credentials(ref err) => err.description(),
            RestoreDBClusterFromSnapshotError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            RestoreDBClusterFromSnapshotError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by RestoreDBClusterToPointInTime
#[derive(Debug, PartialEq)]
pub enum RestoreDBClusterToPointInTimeError {
    ///<p>User already has a DB cluster with the given identifier.</p>
    DBClusterAlreadyExistsFault(String),
    ///<p> <i>DBClusterIdentifier</i> does not refer to an existing DB cluster. </p>
    DBClusterNotFoundFault(String),
    ///<p>User attempted to create a new DB cluster and the user has already reached the maximum allowed DB cluster quota.</p>
    DBClusterQuotaExceededFault(String),
    ///<p> <i>DBClusterSnapshotIdentifier</i> does not refer to an existing DB cluster snapshot. </p>
    DBClusterSnapshotNotFoundFault(String),
    ///<p> <i>DBSubnetGroupName</i> does not refer to an existing DB subnet group. </p>
    DBSubnetGroupNotFoundFault(String),
    ///<p>The DB cluster does not have enough capacity for the current operation.</p>
    InsufficientDBClusterCapacityFault(String),
    ///<p>There is insufficient storage available for the current action. You may be able to resolve this error by updating your subnet group to use different Availability Zones that have more storage available.</p>
    InsufficientStorageClusterCapacityFault(String),
    ///<p>The supplied value is not a valid DB cluster snapshot state.</p>
    InvalidDBClusterSnapshotStateFault(String),
    ///<p>The DB cluster is not in a valid state.</p>
    InvalidDBClusterStateFault(String),
    ///<p>The state of the DB snapshot does not allow deletion.</p>
    InvalidDBSnapshotStateFault(String),
    ///<p>Cannot restore from vpc backup to non-vpc DB instance.</p>
    InvalidRestoreFault(String),
    ///<p>The requested subnet is invalid, or multiple subnets were requested that are not all in a common VPC.</p>
    InvalidSubnet(String),
    ///<p>DB subnet group does not cover all Availability Zones after it is created because users' change.</p>
    InvalidVPCNetworkStateFault(String),
    ///<p>Error accessing KMS key.</p>
    KMSKeyNotAccessibleFault(String),
    ///<p>The specified option group could not be found.</p>
    OptionGroupNotFoundFault(String),
    ///<p>Request would result in user exceeding the allowed amount of storage available across all DB instances.</p>
    StorageQuotaExceededFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl RestoreDBClusterToPointInTimeError {
    pub fn from_body(body: &str) -> RestoreDBClusterToPointInTimeError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "DBClusterAlreadyExistsFault" => RestoreDBClusterToPointInTimeError::DBClusterAlreadyExistsFault(String::from(parsed_error.message)),
                    "DBClusterNotFoundFault" => RestoreDBClusterToPointInTimeError::DBClusterNotFoundFault(String::from(parsed_error.message)),
                    "DBClusterQuotaExceededFault" => RestoreDBClusterToPointInTimeError::DBClusterQuotaExceededFault(String::from(parsed_error.message)),
                    "DBClusterSnapshotNotFoundFault" => RestoreDBClusterToPointInTimeError::DBClusterSnapshotNotFoundFault(String::from(parsed_error.message)),
                    "DBSubnetGroupNotFoundFault" => RestoreDBClusterToPointInTimeError::DBSubnetGroupNotFoundFault(String::from(parsed_error.message)),
                    "InsufficientDBClusterCapacityFault" => RestoreDBClusterToPointInTimeError::InsufficientDBClusterCapacityFault(String::from(parsed_error.message)),
                    "InsufficientStorageClusterCapacityFault" => RestoreDBClusterToPointInTimeError::InsufficientStorageClusterCapacityFault(String::from(parsed_error.message)),
                    "InvalidDBClusterSnapshotStateFault" => RestoreDBClusterToPointInTimeError::InvalidDBClusterSnapshotStateFault(String::from(parsed_error.message)),
                    "InvalidDBClusterStateFault" => RestoreDBClusterToPointInTimeError::InvalidDBClusterStateFault(String::from(parsed_error.message)),
                    "InvalidDBSnapshotStateFault" => RestoreDBClusterToPointInTimeError::InvalidDBSnapshotStateFault(String::from(parsed_error.message)),
                    "InvalidRestoreFault" => RestoreDBClusterToPointInTimeError::InvalidRestoreFault(String::from(parsed_error.message)),
                    "InvalidSubnet" => RestoreDBClusterToPointInTimeError::InvalidSubnet(String::from(parsed_error.message)),
                    "InvalidVPCNetworkStateFault" => RestoreDBClusterToPointInTimeError::InvalidVPCNetworkStateFault(String::from(parsed_error.message)),
                    "KMSKeyNotAccessibleFault" => RestoreDBClusterToPointInTimeError::KMSKeyNotAccessibleFault(String::from(parsed_error.message)),
                    "OptionGroupNotFoundFault" => RestoreDBClusterToPointInTimeError::OptionGroupNotFoundFault(String::from(parsed_error.message)),
                    "StorageQuotaExceededFault" => RestoreDBClusterToPointInTimeError::StorageQuotaExceededFault(String::from(parsed_error.message)),
                    _ => RestoreDBClusterToPointInTimeError::Unknown(String::from(body)),
                }
            }
            Err(_) => RestoreDBClusterToPointInTimeError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for RestoreDBClusterToPointInTimeError {
    fn from(err: XmlParseError) -> RestoreDBClusterToPointInTimeError {
        let XmlParseError(message) = err;
        RestoreDBClusterToPointInTimeError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for RestoreDBClusterToPointInTimeError {
    fn from(err: CredentialsError) -> RestoreDBClusterToPointInTimeError {
        RestoreDBClusterToPointInTimeError::Credentials(err)
    }
}
impl From<HttpDispatchError> for RestoreDBClusterToPointInTimeError {
    fn from(err: HttpDispatchError) -> RestoreDBClusterToPointInTimeError {
        RestoreDBClusterToPointInTimeError::HttpDispatch(err)
    }
}
impl From<io::Error> for RestoreDBClusterToPointInTimeError {
    fn from(err: io::Error) -> RestoreDBClusterToPointInTimeError {
        RestoreDBClusterToPointInTimeError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for RestoreDBClusterToPointInTimeError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for RestoreDBClusterToPointInTimeError {
    fn description(&self) -> &str {
        match *self {
            RestoreDBClusterToPointInTimeError::DBClusterAlreadyExistsFault(ref cause) => cause,
            RestoreDBClusterToPointInTimeError::DBClusterNotFoundFault(ref cause) => cause,
            RestoreDBClusterToPointInTimeError::DBClusterQuotaExceededFault(ref cause) => cause,
            RestoreDBClusterToPointInTimeError::DBClusterSnapshotNotFoundFault(ref cause) => cause,
            RestoreDBClusterToPointInTimeError::DBSubnetGroupNotFoundFault(ref cause) => cause,
            RestoreDBClusterToPointInTimeError::InsufficientDBClusterCapacityFault(ref cause) => {
                cause
            }
            RestoreDBClusterToPointInTimeError::InsufficientStorageClusterCapacityFault(ref cause) => cause,
            RestoreDBClusterToPointInTimeError::InvalidDBClusterSnapshotStateFault(ref cause) => {
                cause
            }
            RestoreDBClusterToPointInTimeError::InvalidDBClusterStateFault(ref cause) => cause,
            RestoreDBClusterToPointInTimeError::InvalidDBSnapshotStateFault(ref cause) => cause,
            RestoreDBClusterToPointInTimeError::InvalidRestoreFault(ref cause) => cause,
            RestoreDBClusterToPointInTimeError::InvalidSubnet(ref cause) => cause,
            RestoreDBClusterToPointInTimeError::InvalidVPCNetworkStateFault(ref cause) => cause,
            RestoreDBClusterToPointInTimeError::KMSKeyNotAccessibleFault(ref cause) => cause,
            RestoreDBClusterToPointInTimeError::OptionGroupNotFoundFault(ref cause) => cause,
            RestoreDBClusterToPointInTimeError::StorageQuotaExceededFault(ref cause) => cause,
            RestoreDBClusterToPointInTimeError::Validation(ref cause) => cause,
            RestoreDBClusterToPointInTimeError::Credentials(ref err) => err.description(),
            RestoreDBClusterToPointInTimeError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            RestoreDBClusterToPointInTimeError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by RestoreDBInstanceFromDBSnapshot
#[derive(Debug, PartialEq)]
pub enum RestoreDBInstanceFromDBSnapshotError {
    ///<p>Specified CIDRIP or EC2 security group is not authorized for the specified DB security group.</p> <p>RDS may not also be authorized via IAM to perform necessary actions on your behalf.</p>
    AuthorizationNotFoundFault(String),
    ///<p>User already has a DB instance with the given identifier.</p>
    DBInstanceAlreadyExistsFault(String),
    ///<p> <i>DBSecurityGroupName</i> does not refer to an existing DB security group. </p>
    DBSecurityGroupNotFoundFault(String),
    ///<p> <i>DBSnapshotIdentifier</i> does not refer to an existing DB snapshot. </p>
    DBSnapshotNotFoundFault(String),
    ///<p>Subnets in the DB subnet group should cover at least two Availability Zones unless there is only one Availability Zone.</p>
    DBSubnetGroupDoesNotCoverEnoughAZs(String),
    ///<p> <i>DBSubnetGroupName</i> does not refer to an existing DB subnet group. </p>
    DBSubnetGroupNotFoundFault(String),
    ///<p> <i>Domain</i> does not refer to an existing Active Directory Domain. </p>
    DomainNotFoundFault(String),
    ///<p>Request would result in user exceeding the allowed number of DB instances.</p>
    InstanceQuotaExceededFault(String),
    ///<p>Specified DB instance class is not available in the specified Availability Zone.</p>
    InsufficientDBInstanceCapacityFault(String),
    ///<p>The state of the DB snapshot does not allow deletion.</p>
    InvalidDBSnapshotStateFault(String),
    ///<p>Cannot restore from vpc backup to non-vpc DB instance.</p>
    InvalidRestoreFault(String),
    ///<p>The requested subnet is invalid, or multiple subnets were requested that are not all in a common VPC.</p>
    InvalidSubnet(String),
    ///<p>DB subnet group does not cover all Availability Zones after it is created because users' change.</p>
    InvalidVPCNetworkStateFault(String),
    ///<p>Error accessing KMS key.</p>
    KMSKeyNotAccessibleFault(String),
    ///<p>The specified option group could not be found.</p>
    OptionGroupNotFoundFault(String),
    ///<p>Provisioned IOPS not available in the specified Availability Zone.</p>
    ProvisionedIopsNotAvailableInAZFault(String),
    ///<p>Request would result in user exceeding the allowed amount of storage available across all DB instances.</p>
    StorageQuotaExceededFault(String),
    ///<p> <i>StorageType</i> specified cannot be associated with the DB Instance. </p>
    StorageTypeNotSupportedFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl RestoreDBInstanceFromDBSnapshotError {
    pub fn from_body(body: &str) -> RestoreDBInstanceFromDBSnapshotError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "AuthorizationNotFoundFault" => RestoreDBInstanceFromDBSnapshotError::AuthorizationNotFoundFault(String::from(parsed_error.message)),
                    "DBInstanceAlreadyExistsFault" => RestoreDBInstanceFromDBSnapshotError::DBInstanceAlreadyExistsFault(String::from(parsed_error.message)),
                    "DBSecurityGroupNotFoundFault" => RestoreDBInstanceFromDBSnapshotError::DBSecurityGroupNotFoundFault(String::from(parsed_error.message)),
                    "DBSnapshotNotFoundFault" => RestoreDBInstanceFromDBSnapshotError::DBSnapshotNotFoundFault(String::from(parsed_error.message)),
                    "DBSubnetGroupDoesNotCoverEnoughAZs" => RestoreDBInstanceFromDBSnapshotError::DBSubnetGroupDoesNotCoverEnoughAZs(String::from(parsed_error.message)),
                    "DBSubnetGroupNotFoundFault" => RestoreDBInstanceFromDBSnapshotError::DBSubnetGroupNotFoundFault(String::from(parsed_error.message)),
                    "DomainNotFoundFault" => RestoreDBInstanceFromDBSnapshotError::DomainNotFoundFault(String::from(parsed_error.message)),
                    "InstanceQuotaExceededFault" => RestoreDBInstanceFromDBSnapshotError::InstanceQuotaExceededFault(String::from(parsed_error.message)),
                    "InsufficientDBInstanceCapacityFault" => RestoreDBInstanceFromDBSnapshotError::InsufficientDBInstanceCapacityFault(String::from(parsed_error.message)),
                    "InvalidDBSnapshotStateFault" => RestoreDBInstanceFromDBSnapshotError::InvalidDBSnapshotStateFault(String::from(parsed_error.message)),
                    "InvalidRestoreFault" => RestoreDBInstanceFromDBSnapshotError::InvalidRestoreFault(String::from(parsed_error.message)),
                    "InvalidSubnet" => RestoreDBInstanceFromDBSnapshotError::InvalidSubnet(String::from(parsed_error.message)),
                    "InvalidVPCNetworkStateFault" => RestoreDBInstanceFromDBSnapshotError::InvalidVPCNetworkStateFault(String::from(parsed_error.message)),
                    "KMSKeyNotAccessibleFault" => RestoreDBInstanceFromDBSnapshotError::KMSKeyNotAccessibleFault(String::from(parsed_error.message)),
                    "OptionGroupNotFoundFault" => RestoreDBInstanceFromDBSnapshotError::OptionGroupNotFoundFault(String::from(parsed_error.message)),
                    "ProvisionedIopsNotAvailableInAZFault" => RestoreDBInstanceFromDBSnapshotError::ProvisionedIopsNotAvailableInAZFault(String::from(parsed_error.message)),
                    "StorageQuotaExceededFault" => RestoreDBInstanceFromDBSnapshotError::StorageQuotaExceededFault(String::from(parsed_error.message)),
                    "StorageTypeNotSupportedFault" => RestoreDBInstanceFromDBSnapshotError::StorageTypeNotSupportedFault(String::from(parsed_error.message)),
                    _ => RestoreDBInstanceFromDBSnapshotError::Unknown(String::from(body)),
                }
            }
            Err(_) => RestoreDBInstanceFromDBSnapshotError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for RestoreDBInstanceFromDBSnapshotError {
    fn from(err: XmlParseError) -> RestoreDBInstanceFromDBSnapshotError {
        let XmlParseError(message) = err;
        RestoreDBInstanceFromDBSnapshotError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for RestoreDBInstanceFromDBSnapshotError {
    fn from(err: CredentialsError) -> RestoreDBInstanceFromDBSnapshotError {
        RestoreDBInstanceFromDBSnapshotError::Credentials(err)
    }
}
impl From<HttpDispatchError> for RestoreDBInstanceFromDBSnapshotError {
    fn from(err: HttpDispatchError) -> RestoreDBInstanceFromDBSnapshotError {
        RestoreDBInstanceFromDBSnapshotError::HttpDispatch(err)
    }
}
impl From<io::Error> for RestoreDBInstanceFromDBSnapshotError {
    fn from(err: io::Error) -> RestoreDBInstanceFromDBSnapshotError {
        RestoreDBInstanceFromDBSnapshotError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for RestoreDBInstanceFromDBSnapshotError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for RestoreDBInstanceFromDBSnapshotError {
    fn description(&self) -> &str {
        match *self {
            RestoreDBInstanceFromDBSnapshotError::AuthorizationNotFoundFault(ref cause) => cause,
            RestoreDBInstanceFromDBSnapshotError::DBInstanceAlreadyExistsFault(ref cause) => cause,
            RestoreDBInstanceFromDBSnapshotError::DBSecurityGroupNotFoundFault(ref cause) => cause,
            RestoreDBInstanceFromDBSnapshotError::DBSnapshotNotFoundFault(ref cause) => cause,
            RestoreDBInstanceFromDBSnapshotError::DBSubnetGroupDoesNotCoverEnoughAZs(ref cause) => {
                cause
            }
            RestoreDBInstanceFromDBSnapshotError::DBSubnetGroupNotFoundFault(ref cause) => cause,
            RestoreDBInstanceFromDBSnapshotError::DomainNotFoundFault(ref cause) => cause,
            RestoreDBInstanceFromDBSnapshotError::InstanceQuotaExceededFault(ref cause) => cause,
            RestoreDBInstanceFromDBSnapshotError::InsufficientDBInstanceCapacityFault(ref cause) => cause,
            RestoreDBInstanceFromDBSnapshotError::InvalidDBSnapshotStateFault(ref cause) => cause,
            RestoreDBInstanceFromDBSnapshotError::InvalidRestoreFault(ref cause) => cause,
            RestoreDBInstanceFromDBSnapshotError::InvalidSubnet(ref cause) => cause,
            RestoreDBInstanceFromDBSnapshotError::InvalidVPCNetworkStateFault(ref cause) => cause,
            RestoreDBInstanceFromDBSnapshotError::KMSKeyNotAccessibleFault(ref cause) => cause,
            RestoreDBInstanceFromDBSnapshotError::OptionGroupNotFoundFault(ref cause) => cause,
            RestoreDBInstanceFromDBSnapshotError::ProvisionedIopsNotAvailableInAZFault(ref cause) => cause,
            RestoreDBInstanceFromDBSnapshotError::StorageQuotaExceededFault(ref cause) => cause,
            RestoreDBInstanceFromDBSnapshotError::StorageTypeNotSupportedFault(ref cause) => cause,
            RestoreDBInstanceFromDBSnapshotError::Validation(ref cause) => cause,
            RestoreDBInstanceFromDBSnapshotError::Credentials(ref err) => err.description(),
            RestoreDBInstanceFromDBSnapshotError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            RestoreDBInstanceFromDBSnapshotError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by RestoreDBInstanceToPointInTime
#[derive(Debug, PartialEq)]
pub enum RestoreDBInstanceToPointInTimeError {
    ///<p>Specified CIDRIP or EC2 security group is not authorized for the specified DB security group.</p> <p>RDS may not also be authorized via IAM to perform necessary actions on your behalf.</p>
    AuthorizationNotFoundFault(String),
    ///<p>User already has a DB instance with the given identifier.</p>
    DBInstanceAlreadyExistsFault(String),
    ///<p> <i>DBInstanceIdentifier</i> does not refer to an existing DB instance. </p>
    DBInstanceNotFoundFault(String),
    ///<p> <i>DBSecurityGroupName</i> does not refer to an existing DB security group. </p>
    DBSecurityGroupNotFoundFault(String),
    ///<p>Subnets in the DB subnet group should cover at least two Availability Zones unless there is only one Availability Zone.</p>
    DBSubnetGroupDoesNotCoverEnoughAZs(String),
    ///<p> <i>DBSubnetGroupName</i> does not refer to an existing DB subnet group. </p>
    DBSubnetGroupNotFoundFault(String),
    ///<p> <i>Domain</i> does not refer to an existing Active Directory Domain. </p>
    DomainNotFoundFault(String),
    ///<p>Request would result in user exceeding the allowed number of DB instances.</p>
    InstanceQuotaExceededFault(String),
    ///<p>Specified DB instance class is not available in the specified Availability Zone.</p>
    InsufficientDBInstanceCapacityFault(String),
    ///<p> The specified DB instance is not in the <i>available</i> state. </p>
    InvalidDBInstanceStateFault(String),
    ///<p>Cannot restore from vpc backup to non-vpc DB instance.</p>
    InvalidRestoreFault(String),
    ///<p>The requested subnet is invalid, or multiple subnets were requested that are not all in a common VPC.</p>
    InvalidSubnet(String),
    ///<p>DB subnet group does not cover all Availability Zones after it is created because users' change.</p>
    InvalidVPCNetworkStateFault(String),
    ///<p>Error accessing KMS key.</p>
    KMSKeyNotAccessibleFault(String),
    ///<p>The specified option group could not be found.</p>
    OptionGroupNotFoundFault(String),
    ///<p> <i>SourceDBInstanceIdentifier</i> refers to a DB instance with <i>BackupRetentionPeriod</i> equal to 0. </p>
    PointInTimeRestoreNotEnabledFault(String),
    ///<p>Provisioned IOPS not available in the specified Availability Zone.</p>
    ProvisionedIopsNotAvailableInAZFault(String),
    ///<p>Request would result in user exceeding the allowed amount of storage available across all DB instances.</p>
    StorageQuotaExceededFault(String),
    ///<p> <i>StorageType</i> specified cannot be associated with the DB Instance. </p>
    StorageTypeNotSupportedFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl RestoreDBInstanceToPointInTimeError {
    pub fn from_body(body: &str) -> RestoreDBInstanceToPointInTimeError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "AuthorizationNotFoundFault" => RestoreDBInstanceToPointInTimeError::AuthorizationNotFoundFault(String::from(parsed_error.message)),
                    "DBInstanceAlreadyExistsFault" => RestoreDBInstanceToPointInTimeError::DBInstanceAlreadyExistsFault(String::from(parsed_error.message)),
                    "DBInstanceNotFoundFault" => RestoreDBInstanceToPointInTimeError::DBInstanceNotFoundFault(String::from(parsed_error.message)),
                    "DBSecurityGroupNotFoundFault" => RestoreDBInstanceToPointInTimeError::DBSecurityGroupNotFoundFault(String::from(parsed_error.message)),
                    "DBSubnetGroupDoesNotCoverEnoughAZs" => RestoreDBInstanceToPointInTimeError::DBSubnetGroupDoesNotCoverEnoughAZs(String::from(parsed_error.message)),
                    "DBSubnetGroupNotFoundFault" => RestoreDBInstanceToPointInTimeError::DBSubnetGroupNotFoundFault(String::from(parsed_error.message)),
                    "DomainNotFoundFault" => RestoreDBInstanceToPointInTimeError::DomainNotFoundFault(String::from(parsed_error.message)),
                    "InstanceQuotaExceededFault" => RestoreDBInstanceToPointInTimeError::InstanceQuotaExceededFault(String::from(parsed_error.message)),
                    "InsufficientDBInstanceCapacityFault" => RestoreDBInstanceToPointInTimeError::InsufficientDBInstanceCapacityFault(String::from(parsed_error.message)),
                    "InvalidDBInstanceStateFault" => RestoreDBInstanceToPointInTimeError::InvalidDBInstanceStateFault(String::from(parsed_error.message)),
                    "InvalidRestoreFault" => RestoreDBInstanceToPointInTimeError::InvalidRestoreFault(String::from(parsed_error.message)),
                    "InvalidSubnet" => RestoreDBInstanceToPointInTimeError::InvalidSubnet(String::from(parsed_error.message)),
                    "InvalidVPCNetworkStateFault" => RestoreDBInstanceToPointInTimeError::InvalidVPCNetworkStateFault(String::from(parsed_error.message)),
                    "KMSKeyNotAccessibleFault" => RestoreDBInstanceToPointInTimeError::KMSKeyNotAccessibleFault(String::from(parsed_error.message)),
                    "OptionGroupNotFoundFault" => RestoreDBInstanceToPointInTimeError::OptionGroupNotFoundFault(String::from(parsed_error.message)),
                    "PointInTimeRestoreNotEnabledFault" => RestoreDBInstanceToPointInTimeError::PointInTimeRestoreNotEnabledFault(String::from(parsed_error.message)),
                    "ProvisionedIopsNotAvailableInAZFault" => RestoreDBInstanceToPointInTimeError::ProvisionedIopsNotAvailableInAZFault(String::from(parsed_error.message)),
                    "StorageQuotaExceededFault" => RestoreDBInstanceToPointInTimeError::StorageQuotaExceededFault(String::from(parsed_error.message)),
                    "StorageTypeNotSupportedFault" => RestoreDBInstanceToPointInTimeError::StorageTypeNotSupportedFault(String::from(parsed_error.message)),
                    _ => RestoreDBInstanceToPointInTimeError::Unknown(String::from(body)),
                }
            }
            Err(_) => RestoreDBInstanceToPointInTimeError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for RestoreDBInstanceToPointInTimeError {
    fn from(err: XmlParseError) -> RestoreDBInstanceToPointInTimeError {
        let XmlParseError(message) = err;
        RestoreDBInstanceToPointInTimeError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for RestoreDBInstanceToPointInTimeError {
    fn from(err: CredentialsError) -> RestoreDBInstanceToPointInTimeError {
        RestoreDBInstanceToPointInTimeError::Credentials(err)
    }
}
impl From<HttpDispatchError> for RestoreDBInstanceToPointInTimeError {
    fn from(err: HttpDispatchError) -> RestoreDBInstanceToPointInTimeError {
        RestoreDBInstanceToPointInTimeError::HttpDispatch(err)
    }
}
impl From<io::Error> for RestoreDBInstanceToPointInTimeError {
    fn from(err: io::Error) -> RestoreDBInstanceToPointInTimeError {
        RestoreDBInstanceToPointInTimeError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for RestoreDBInstanceToPointInTimeError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for RestoreDBInstanceToPointInTimeError {
    fn description(&self) -> &str {
        match *self {
            RestoreDBInstanceToPointInTimeError::AuthorizationNotFoundFault(ref cause) => cause,
            RestoreDBInstanceToPointInTimeError::DBInstanceAlreadyExistsFault(ref cause) => cause,
            RestoreDBInstanceToPointInTimeError::DBInstanceNotFoundFault(ref cause) => cause,
            RestoreDBInstanceToPointInTimeError::DBSecurityGroupNotFoundFault(ref cause) => cause,
            RestoreDBInstanceToPointInTimeError::DBSubnetGroupDoesNotCoverEnoughAZs(ref cause) => {
                cause
            }
            RestoreDBInstanceToPointInTimeError::DBSubnetGroupNotFoundFault(ref cause) => cause,
            RestoreDBInstanceToPointInTimeError::DomainNotFoundFault(ref cause) => cause,
            RestoreDBInstanceToPointInTimeError::InstanceQuotaExceededFault(ref cause) => cause,
            RestoreDBInstanceToPointInTimeError::InsufficientDBInstanceCapacityFault(ref cause) => {
                cause
            }
            RestoreDBInstanceToPointInTimeError::InvalidDBInstanceStateFault(ref cause) => cause,
            RestoreDBInstanceToPointInTimeError::InvalidRestoreFault(ref cause) => cause,
            RestoreDBInstanceToPointInTimeError::InvalidSubnet(ref cause) => cause,
            RestoreDBInstanceToPointInTimeError::InvalidVPCNetworkStateFault(ref cause) => cause,
            RestoreDBInstanceToPointInTimeError::KMSKeyNotAccessibleFault(ref cause) => cause,
            RestoreDBInstanceToPointInTimeError::OptionGroupNotFoundFault(ref cause) => cause,
            RestoreDBInstanceToPointInTimeError::PointInTimeRestoreNotEnabledFault(ref cause) => {
                cause
            }
            RestoreDBInstanceToPointInTimeError::ProvisionedIopsNotAvailableInAZFault(ref cause) => cause,
            RestoreDBInstanceToPointInTimeError::StorageQuotaExceededFault(ref cause) => cause,
            RestoreDBInstanceToPointInTimeError::StorageTypeNotSupportedFault(ref cause) => cause,
            RestoreDBInstanceToPointInTimeError::Validation(ref cause) => cause,
            RestoreDBInstanceToPointInTimeError::Credentials(ref err) => err.description(),
            RestoreDBInstanceToPointInTimeError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            RestoreDBInstanceToPointInTimeError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by RevokeDBSecurityGroupIngress
#[derive(Debug, PartialEq)]
pub enum RevokeDBSecurityGroupIngressError {
    ///<p>Specified CIDRIP or EC2 security group is not authorized for the specified DB security group.</p> <p>RDS may not also be authorized via IAM to perform necessary actions on your behalf.</p>
    AuthorizationNotFoundFault(String),
    ///<p> <i>DBSecurityGroupName</i> does not refer to an existing DB security group. </p>
    DBSecurityGroupNotFoundFault(String),
    ///<p>The state of the DB security group does not allow deletion.</p>
    InvalidDBSecurityGroupStateFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl RevokeDBSecurityGroupIngressError {
    pub fn from_body(body: &str) -> RevokeDBSecurityGroupIngressError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "AuthorizationNotFoundFault" => RevokeDBSecurityGroupIngressError::AuthorizationNotFoundFault(String::from(parsed_error.message)),
                    "DBSecurityGroupNotFoundFault" => RevokeDBSecurityGroupIngressError::DBSecurityGroupNotFoundFault(String::from(parsed_error.message)),
                    "InvalidDBSecurityGroupStateFault" => RevokeDBSecurityGroupIngressError::InvalidDBSecurityGroupStateFault(String::from(parsed_error.message)),
                    _ => RevokeDBSecurityGroupIngressError::Unknown(String::from(body)),
                }
            }
            Err(_) => RevokeDBSecurityGroupIngressError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for RevokeDBSecurityGroupIngressError {
    fn from(err: XmlParseError) -> RevokeDBSecurityGroupIngressError {
        let XmlParseError(message) = err;
        RevokeDBSecurityGroupIngressError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for RevokeDBSecurityGroupIngressError {
    fn from(err: CredentialsError) -> RevokeDBSecurityGroupIngressError {
        RevokeDBSecurityGroupIngressError::Credentials(err)
    }
}
impl From<HttpDispatchError> for RevokeDBSecurityGroupIngressError {
    fn from(err: HttpDispatchError) -> RevokeDBSecurityGroupIngressError {
        RevokeDBSecurityGroupIngressError::HttpDispatch(err)
    }
}
impl From<io::Error> for RevokeDBSecurityGroupIngressError {
    fn from(err: io::Error) -> RevokeDBSecurityGroupIngressError {
        RevokeDBSecurityGroupIngressError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for RevokeDBSecurityGroupIngressError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for RevokeDBSecurityGroupIngressError {
    fn description(&self) -> &str {
        match *self {
            RevokeDBSecurityGroupIngressError::AuthorizationNotFoundFault(ref cause) => cause,
            RevokeDBSecurityGroupIngressError::DBSecurityGroupNotFoundFault(ref cause) => cause,
            RevokeDBSecurityGroupIngressError::InvalidDBSecurityGroupStateFault(ref cause) => cause,
            RevokeDBSecurityGroupIngressError::Validation(ref cause) => cause,
            RevokeDBSecurityGroupIngressError::Credentials(ref err) => err.description(),
            RevokeDBSecurityGroupIngressError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            RevokeDBSecurityGroupIngressError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by StartDBInstance
#[derive(Debug, PartialEq)]
pub enum StartDBInstanceError {
    ///<p>Specified CIDRIP or EC2 security group is not authorized for the specified DB security group.</p> <p>RDS may not also be authorized via IAM to perform necessary actions on your behalf.</p>
    AuthorizationNotFoundFault(String),
    ///<p> <i>DBClusterIdentifier</i> does not refer to an existing DB cluster. </p>
    DBClusterNotFoundFault(String),
    ///<p> <i>DBInstanceIdentifier</i> does not refer to an existing DB instance. </p>
    DBInstanceNotFoundFault(String),
    ///<p>Subnets in the DB subnet group should cover at least two Availability Zones unless there is only one Availability Zone.</p>
    DBSubnetGroupDoesNotCoverEnoughAZs(String),
    ///<p> <i>DBSubnetGroupName</i> does not refer to an existing DB subnet group. </p>
    DBSubnetGroupNotFoundFault(String),
    ///<p>Specified DB instance class is not available in the specified Availability Zone.</p>
    InsufficientDBInstanceCapacityFault(String),
    ///<p>The DB cluster is not in a valid state.</p>
    InvalidDBClusterStateFault(String),
    ///<p> The specified DB instance is not in the <i>available</i> state. </p>
    InvalidDBInstanceStateFault(String),
    ///<p>The requested subnet is invalid, or multiple subnets were requested that are not all in a common VPC.</p>
    InvalidSubnet(String),
    ///<p>DB subnet group does not cover all Availability Zones after it is created because users' change.</p>
    InvalidVPCNetworkStateFault(String),
    ///<p>Error accessing KMS key.</p>
    KMSKeyNotAccessibleFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl StartDBInstanceError {
    pub fn from_body(body: &str) -> StartDBInstanceError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "AuthorizationNotFoundFault" => StartDBInstanceError::AuthorizationNotFoundFault(String::from(parsed_error.message)),
                    "DBClusterNotFoundFault" => StartDBInstanceError::DBClusterNotFoundFault(String::from(parsed_error.message)),
                    "DBInstanceNotFoundFault" => StartDBInstanceError::DBInstanceNotFoundFault(String::from(parsed_error.message)),
                    "DBSubnetGroupDoesNotCoverEnoughAZs" => StartDBInstanceError::DBSubnetGroupDoesNotCoverEnoughAZs(String::from(parsed_error.message)),
                    "DBSubnetGroupNotFoundFault" => StartDBInstanceError::DBSubnetGroupNotFoundFault(String::from(parsed_error.message)),
                    "InsufficientDBInstanceCapacityFault" => StartDBInstanceError::InsufficientDBInstanceCapacityFault(String::from(parsed_error.message)),
                    "InvalidDBClusterStateFault" => StartDBInstanceError::InvalidDBClusterStateFault(String::from(parsed_error.message)),
                    "InvalidDBInstanceStateFault" => StartDBInstanceError::InvalidDBInstanceStateFault(String::from(parsed_error.message)),
                    "InvalidSubnet" => {
                        StartDBInstanceError::InvalidSubnet(String::from(parsed_error.message))
                    }
                    "InvalidVPCNetworkStateFault" => StartDBInstanceError::InvalidVPCNetworkStateFault(String::from(parsed_error.message)),
                    "KMSKeyNotAccessibleFault" => StartDBInstanceError::KMSKeyNotAccessibleFault(String::from(parsed_error.message)),
                    _ => StartDBInstanceError::Unknown(String::from(body)),
                }
            }
            Err(_) => StartDBInstanceError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for StartDBInstanceError {
    fn from(err: XmlParseError) -> StartDBInstanceError {
        let XmlParseError(message) = err;
        StartDBInstanceError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for StartDBInstanceError {
    fn from(err: CredentialsError) -> StartDBInstanceError {
        StartDBInstanceError::Credentials(err)
    }
}
impl From<HttpDispatchError> for StartDBInstanceError {
    fn from(err: HttpDispatchError) -> StartDBInstanceError {
        StartDBInstanceError::HttpDispatch(err)
    }
}
impl From<io::Error> for StartDBInstanceError {
    fn from(err: io::Error) -> StartDBInstanceError {
        StartDBInstanceError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for StartDBInstanceError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for StartDBInstanceError {
    fn description(&self) -> &str {
        match *self {
            StartDBInstanceError::AuthorizationNotFoundFault(ref cause) => cause,
            StartDBInstanceError::DBClusterNotFoundFault(ref cause) => cause,
            StartDBInstanceError::DBInstanceNotFoundFault(ref cause) => cause,
            StartDBInstanceError::DBSubnetGroupDoesNotCoverEnoughAZs(ref cause) => cause,
            StartDBInstanceError::DBSubnetGroupNotFoundFault(ref cause) => cause,
            StartDBInstanceError::InsufficientDBInstanceCapacityFault(ref cause) => cause,
            StartDBInstanceError::InvalidDBClusterStateFault(ref cause) => cause,
            StartDBInstanceError::InvalidDBInstanceStateFault(ref cause) => cause,
            StartDBInstanceError::InvalidSubnet(ref cause) => cause,
            StartDBInstanceError::InvalidVPCNetworkStateFault(ref cause) => cause,
            StartDBInstanceError::KMSKeyNotAccessibleFault(ref cause) => cause,
            StartDBInstanceError::Validation(ref cause) => cause,
            StartDBInstanceError::Credentials(ref err) => err.description(),
            StartDBInstanceError::HttpDispatch(ref dispatch_error) => dispatch_error.description(),
            StartDBInstanceError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by StopDBInstance
#[derive(Debug, PartialEq)]
pub enum StopDBInstanceError {
    ///<p> <i>DBInstanceIdentifier</i> does not refer to an existing DB instance. </p>
    DBInstanceNotFoundFault(String),
    ///<p> <i>DBSnapshotIdentifier</i> is already used by an existing snapshot. </p>
    DBSnapshotAlreadyExistsFault(String),
    ///<p>The DB cluster is not in a valid state.</p>
    InvalidDBClusterStateFault(String),
    ///<p> The specified DB instance is not in the <i>available</i> state. </p>
    InvalidDBInstanceStateFault(String),
    ///<p>Request would result in user exceeding the allowed number of DB snapshots.</p>
    SnapshotQuotaExceededFault(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl StopDBInstanceError {
    pub fn from_body(body: &str) -> StopDBInstanceError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "DBInstanceNotFoundFault" => StopDBInstanceError::DBInstanceNotFoundFault(String::from(parsed_error.message)),
                    "DBSnapshotAlreadyExistsFault" => StopDBInstanceError::DBSnapshotAlreadyExistsFault(String::from(parsed_error.message)),
                    "InvalidDBClusterStateFault" => StopDBInstanceError::InvalidDBClusterStateFault(String::from(parsed_error.message)),
                    "InvalidDBInstanceStateFault" => StopDBInstanceError::InvalidDBInstanceStateFault(String::from(parsed_error.message)),
                    "SnapshotQuotaExceededFault" => StopDBInstanceError::SnapshotQuotaExceededFault(String::from(parsed_error.message)),
                    _ => StopDBInstanceError::Unknown(String::from(body)),
                }
            }
            Err(_) => StopDBInstanceError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for StopDBInstanceError {
    fn from(err: XmlParseError) -> StopDBInstanceError {
        let XmlParseError(message) = err;
        StopDBInstanceError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for StopDBInstanceError {
    fn from(err: CredentialsError) -> StopDBInstanceError {
        StopDBInstanceError::Credentials(err)
    }
}
impl From<HttpDispatchError> for StopDBInstanceError {
    fn from(err: HttpDispatchError) -> StopDBInstanceError {
        StopDBInstanceError::HttpDispatch(err)
    }
}
impl From<io::Error> for StopDBInstanceError {
    fn from(err: io::Error) -> StopDBInstanceError {
        StopDBInstanceError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for StopDBInstanceError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for StopDBInstanceError {
    fn description(&self) -> &str {
        match *self {
            StopDBInstanceError::DBInstanceNotFoundFault(ref cause) => cause,
            StopDBInstanceError::DBSnapshotAlreadyExistsFault(ref cause) => cause,
            StopDBInstanceError::InvalidDBClusterStateFault(ref cause) => cause,
            StopDBInstanceError::InvalidDBInstanceStateFault(ref cause) => cause,
            StopDBInstanceError::SnapshotQuotaExceededFault(ref cause) => cause,
            StopDBInstanceError::Validation(ref cause) => cause,
            StopDBInstanceError::Credentials(ref err) => err.description(),
            StopDBInstanceError::HttpDispatch(ref dispatch_error) => dispatch_error.description(),
            StopDBInstanceError::Unknown(ref cause) => cause,
        }
    }
}
/// Trait representing the capabilities of the Amazon RDS API. Amazon RDS clients implement this trait.
pub trait Rds {
    #[doc="<p>Associates an Identity and Access Management (IAM) role from an Aurora DB cluster. For more information, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Aurora.Authorizing.AWSServices.html\">Authorizing Amazon Aurora to Access Other AWS Services On Your Behalf</a>.</p>"]
    fn add_role_to_db_cluster(&self,
                              input: &AddRoleToDBClusterMessage)
                              -> Result<(), AddRoleToDBClusterError>;


    #[doc="<p>Adds a source identifier to an existing RDS event notification subscription.</p>"]
    fn add_source_identifier_to_subscription
        (&self,
         input: &AddSourceIdentifierToSubscriptionMessage)
         -> Result<AddSourceIdentifierToSubscriptionResult, AddSourceIdentifierToSubscriptionError>;


    #[doc="<p>Adds metadata tags to an Amazon RDS resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon RDS resources, or used in a Condition statement in an IAM policy for Amazon RDS.</p> <p>For an overview on tagging Amazon RDS resources, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html\">Tagging Amazon RDS Resources</a>.</p>"]
    fn add_tags_to_resource(&self,
                            input: &AddTagsToResourceMessage)
                            -> Result<(), AddTagsToResourceError>;


    #[doc="<p>Applies a pending maintenance action to a resource (for example, to a DB instance).</p>"]
    fn apply_pending_maintenance_action
        (&self,
         input: &ApplyPendingMaintenanceActionMessage)
         -> Result<ApplyPendingMaintenanceActionResult, ApplyPendingMaintenanceActionError>;


    #[doc="<p>Enables ingress to a DBSecurityGroup using one of two forms of authorization. First, EC2 or VPC security groups can be added to the DBSecurityGroup if the application using the database is running on EC2 or VPC instances. Second, IP ranges are available if the application accessing your database is running on the Internet. Required parameters for this API are one of CIDR range, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId for non-VPC).</p> <note> <p>You cannot authorize ingress from an EC2 security group in one AWS Region to an Amazon RDS DB instance in another. You cannot authorize ingress from a VPC security group in one VPC to an Amazon RDS DB instance in another.</p> </note> <p>For an overview of CIDR ranges, go to the <a href=\"http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing\">Wikipedia Tutorial</a>. </p>"]
    fn authorize_db_security_group_ingress
        (&self,
         input: &AuthorizeDBSecurityGroupIngressMessage)
         -> Result<AuthorizeDBSecurityGroupIngressResult, AuthorizeDBSecurityGroupIngressError>;


    #[doc="<p>Copies the specified DB cluster parameter group.</p>"]
    fn copy_db_cluster_parameter_group
        (&self,
         input: &CopyDBClusterParameterGroupMessage)
         -> Result<CopyDBClusterParameterGroupResult, CopyDBClusterParameterGroupError>;


    #[doc="<p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can copy an encrypted DB cluster snapshot from another AWS Region. In that case, the AWS Region where you call the <code>CopyDBClusterSnapshot</code> action is the destination AWS Region for the encrypted DB cluster snapshot to be copied to. To copy an encrypted DB cluster snapshot from another AWS Region, you must provide the following values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS Key Management System (KMS) key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>PreSignedUrl</code> - A URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> action to be called in the source AWS Region where the DB cluster snapshot will be copied from. The pre-signed URL must be a valid request for the <code>CopyDBClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot will be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a href=\"http://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html\"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href=\"http://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\"> Signature Version 4 Signing Process</a>.</p> </li> <li> <p> <code>TargetDBClusterSnapshotIdentifier</code> - The identifier for the new copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the ARN format for the source AWS Region and is the same value as the <code>SourceDBClusterSnapshotIdentifier</code> in the pre-signed URL. </p> </li> </ul> <p>To cancel the copy operation once it is in progress, delete the target DB cluster snapshot identified by <code>TargetDBClusterSnapshotIdentifier</code> while that DB cluster snapshot is in \"copying\" status.</p> <p>For more information on copying encrypted DB cluster snapshots from one AWS Region to another, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopyDBClusterSnapshot.CrossRegion\"> Copying a DB Cluster Snapshot in the Same Account, Either in the Same Region or Across Regions</a> in the Amazon RDS User Guide.</p> <p>For more information on Amazon Aurora, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Aurora.html\">Aurora on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p>"]
    fn copy_db_cluster_snapshot
        (&self,
         input: &CopyDBClusterSnapshotMessage)
         -> Result<CopyDBClusterSnapshotResult, CopyDBClusterSnapshotError>;


    #[doc="<p>Copies the specified DB parameter group.</p>"]
    fn copy_db_parameter_group(&self,
                               input: &CopyDBParameterGroupMessage)
                               -> Result<CopyDBParameterGroupResult, CopyDBParameterGroupError>;


    #[doc="<p>Copies the specified DB snapshot. The source DB snapshot must be in the \"available\" state.</p> <p>You can copy a snapshot from one AWS Region to another. In that case, the AWS Region where you call the <code>CopyDBSnapshot</code> action is the destination AWS Region for the DB snapshot copy. </p> <p>You cannot copy an encrypted, shared DB snapshot from one AWS Region to another.</p> <p>For more information about copying snapshots, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopyDBSnapshot.html\">Copying a DB Snapshot</a> in the Amazon RDS User Guide. </p>"]
    fn copy_db_snapshot(&self,
                        input: &CopyDBSnapshotMessage)
                        -> Result<CopyDBSnapshotResult, CopyDBSnapshotError>;


    #[doc="<p>Copies the specified option group.</p>"]
    fn copy_option_group(&self,
                         input: &CopyOptionGroupMessage)
                         -> Result<CopyOptionGroupResult, CopyOptionGroupError>;


    #[doc="<p>Creates a new Amazon Aurora DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon RDS MySQL DB instance. For cross-region replication where the DB cluster identified by <code>ReplicationSourceIdentifier</code> is encrypted, you must also specify the <code>PreSignedUrl</code> parameter.</p> <p>For more information on Amazon Aurora, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Aurora.html\">Aurora on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p>"]
    fn create_db_cluster(&self,
                         input: &CreateDBClusterMessage)
                         -> Result<CreateDBClusterResult, CreateDBClusterError>;


    #[doc="<p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <a>ModifyDBClusterParameterGroup</a>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <a>ModifyDBCluster</a>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect. </p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href=\"https://console.aws.amazon.com/rds/\">Amazon RDS console</a> or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important> <p>For more information on Amazon Aurora, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Aurora.html\">Aurora on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p>"]
    fn create_db_cluster_parameter_group
        (&self,
         input: &CreateDBClusterParameterGroupMessage)
         -> Result<CreateDBClusterParameterGroupResult, CreateDBClusterParameterGroupError>;


    #[doc="<p>Creates a snapshot of a DB cluster. For more information on Amazon Aurora, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Aurora.html\">Aurora on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p>"]
    fn create_db_cluster_snapshot
        (&self,
         input: &CreateDBClusterSnapshotMessage)
         -> Result<CreateDBClusterSnapshotResult, CreateDBClusterSnapshotError>;


    #[doc="<p>Creates a new DB instance.</p>"]
    fn create_db_instance(&self,
                          input: &CreateDBInstanceMessage)
                          -> Result<CreateDBInstanceResult, CreateDBInstanceError>;


    #[doc="<p>Creates a new DB instance that acts as a Read Replica for an existing source DB instance. You can create a Read Replica for a DB instance running MySQL, MariaDB, or PostgreSQL. </p> <note> <p>Amazon Aurora does not support this action. You must call the <code>CreateDBInstance</code> action to create a DB instance for an Aurora DB cluster. </p> </note> <p>All Read Replica DB instances are created as Single-AZ deployments with backups disabled. All other DB instance attributes (including DB security groups and DB parameter groups) are inherited from the source DB instance, except as specified below. </p> <important> <p>The source DB instance must have backup retention enabled. </p> </important> <p>For more information, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html\">Working with PostgreSQL, MySQL, and MariaDB Read Replicas</a>. </p>"]
    fn create_db_instance_read_replica
        (&self,
         input: &CreateDBInstanceReadReplicaMessage)
         -> Result<CreateDBInstanceReadReplicaResult, CreateDBInstanceReadReplicaError>;


    #[doc="<p>Creates a new DB parameter group.</p> <p> A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect. </p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href=\"https://console.aws.amazon.com/rds/\">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>"]
    fn create_db_parameter_group
        (&self,
         input: &CreateDBParameterGroupMessage)
         -> Result<CreateDBParameterGroupResult, CreateDBParameterGroupError>;


    #[doc="<p>Creates a new DB security group. DB security groups control access to a DB instance.</p>"]
    fn create_db_security_group
        (&self,
         input: &CreateDBSecurityGroupMessage)
         -> Result<CreateDBSecurityGroupResult, CreateDBSecurityGroupError>;


    #[doc="<p>Creates a DBSnapshot. The source DBInstance must be in \"available\" state.</p>"]
    fn create_db_snapshot(&self,
                          input: &CreateDBSnapshotMessage)
                          -> Result<CreateDBSnapshotResult, CreateDBSnapshotError>;


    #[doc="<p>Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.</p>"]
    fn create_db_subnet_group(&self,
                              input: &CreateDBSubnetGroupMessage)
                              -> Result<CreateDBSubnetGroupResult, CreateDBSubnetGroupError>;


    #[doc="<p>Creates an RDS event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the RDS console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of RDS sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you will be notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you will receive notice of the events for that source type for all your RDS sources. If you do not specify either the SourceType nor the SourceIdentifier, you will be notified of events generated from all RDS sources belonging to your customer account.</p>"]
    fn create_event_subscription
        (&self,
         input: &CreateEventSubscriptionMessage)
         -> Result<CreateEventSubscriptionResult, CreateEventSubscriptionError>;


    #[doc="<p>Creates a new option group. You can create up to 20 option groups.</p>"]
    fn create_option_group(&self,
                           input: &CreateOptionGroupMessage)
                           -> Result<CreateOptionGroupResult, CreateOptionGroupError>;


    #[doc="<p>The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and cannot be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.</p> <p/> <p>For more information on Amazon Aurora, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Aurora.html\">Aurora on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p>"]
    fn delete_db_cluster(&self,
                         input: &DeleteDBClusterMessage)
                         -> Result<DeleteDBClusterResult, DeleteDBClusterError>;


    #[doc="<p>Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted cannot be associated with any DB clusters.</p> <p>For more information on Amazon Aurora, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Aurora.html\">Aurora on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p>"]
    fn delete_db_cluster_parameter_group(&self,
                                         input: &DeleteDBClusterParameterGroupMessage)
                                         -> Result<(), DeleteDBClusterParameterGroupError>;


    #[doc="<p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note> <p>For more information on Amazon Aurora, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Aurora.html\">Aurora on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p>"]
    fn delete_db_cluster_snapshot
        (&self,
         input: &DeleteDBClusterSnapshotMessage)
         -> Result<DeleteDBClusterSnapshotResult, DeleteDBClusterSnapshotError>;


    #[doc="<p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and cannot be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon RDS DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action cannot be canceled or reverted once submitted. </p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when the <code>SkipFinalSnapshot</code> parameter is set to <code>true</code>.</p> <p>If the specified DB instance is part of an Amazon Aurora DB cluster, you cannot delete the DB instance if the following are true:</p> <ul> <li> <p>The DB cluster is a Read Replica of another Amazon Aurora DB cluster.</p> </li> <li> <p>The DB instance is the only instance in the DB cluster.</p> </li> </ul> <p>To delete a DB instance in this case, first call the <a>PromoteReadReplicaDBCluster</a> API action to promote the DB cluster so it's no longer a Read Replica. After the promotion completes, then call the <code>DeleteDBInstance</code> API action to delete the final instance in the DB cluster.</p>"]
    fn delete_db_instance(&self,
                          input: &DeleteDBInstanceMessage)
                          -> Result<DeleteDBInstanceResult, DeleteDBInstanceError>;


    #[doc="<p>Deletes a specified DBParameterGroup. The DBParameterGroup to be deleted cannot be associated with any DB instances.</p>"]
    fn delete_db_parameter_group(&self,
                                 input: &DeleteDBParameterGroupMessage)
                                 -> Result<(), DeleteDBParameterGroupError>;


    #[doc="<p>Deletes a DB security group.</p> <note> <p>The specified DB security group must not be associated with any DB instances.</p> </note>"]
    fn delete_db_security_group(&self,
                                input: &DeleteDBSecurityGroupMessage)
                                -> Result<(), DeleteDBSecurityGroupError>;


    #[doc="<p>Deletes a DBSnapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DBSnapshot must be in the <code>available</code> state to be deleted.</p> </note>"]
    fn delete_db_snapshot(&self,
                          input: &DeleteDBSnapshotMessage)
                          -> Result<DeleteDBSnapshotResult, DeleteDBSnapshotError>;


    #[doc="<p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>"]
    fn delete_db_subnet_group(&self,
                              input: &DeleteDBSubnetGroupMessage)
                              -> Result<(), DeleteDBSubnetGroupError>;


    #[doc="<p>Deletes an RDS event notification subscription.</p>"]
    fn delete_event_subscription
        (&self,
         input: &DeleteEventSubscriptionMessage)
         -> Result<DeleteEventSubscriptionResult, DeleteEventSubscriptionError>;


    #[doc="<p>Deletes an existing option group.</p>"]
    fn delete_option_group(&self,
                           input: &DeleteOptionGroupMessage)
                           -> Result<(), DeleteOptionGroupError>;


    #[doc="<p>Lists all of the attributes for a customer account. The attributes include Amazon RDS quotas for the account, such as the number of DB instances allowed. The description for a quota includes the quota name, current usage toward that quota, and the quota's maximum value.</p> <p>This command does not take any parameters.</p>"]
    fn describe_account_attributes
        (&self,
         input: &DescribeAccountAttributesMessage)
         -> Result<AccountAttributesMessage, DescribeAccountAttributesError>;


    #[doc="<p>Lists the set of CA certificates provided by Amazon RDS for this AWS account.</p>"]
    fn describe_certificates(&self,
                             input: &DescribeCertificatesMessage)
                             -> Result<CertificateMessage, DescribeCertificatesError>;


    #[doc="<p> Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group. </p> <p>For more information on Amazon Aurora, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Aurora.html\">Aurora on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p>"]
    fn describe_db_cluster_parameter_groups
        (&self,
         input: &DescribeDBClusterParameterGroupsMessage)
         -> Result<DBClusterParameterGroupsMessage, DescribeDBClusterParameterGroupsError>;


    #[doc="<p>Returns the detailed parameter list for a particular DB cluster parameter group.</p> <p>For more information on Amazon Aurora, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Aurora.html\">Aurora on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p>"]
    fn describe_db_cluster_parameters
        (&self,
         input: &DescribeDBClusterParametersMessage)
         -> Result<DBClusterParameterGroupDetails, DescribeDBClusterParametersError>;


    #[doc="<p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>"]
    fn describe_db_cluster_snapshot_attributes
        (&self,
         input: &DescribeDBClusterSnapshotAttributesMessage)
         -> Result<DescribeDBClusterSnapshotAttributesResult,
                   DescribeDBClusterSnapshotAttributesError>;


    #[doc="<p>Returns information about DB cluster snapshots. This API action supports pagination.</p> <p>For more information on Amazon Aurora, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Aurora.html\">Aurora on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p>"]
    fn describe_db_cluster_snapshots
        (&self,
         input: &DescribeDBClusterSnapshotsMessage)
         -> Result<DBClusterSnapshotMessage, DescribeDBClusterSnapshotsError>;


    #[doc="<p>Returns information about provisioned Aurora DB clusters. This API supports pagination.</p> <p>For more information on Amazon Aurora, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Aurora.html\">Aurora on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p>"]
    fn describe_db_clusters(&self,
                            input: &DescribeDBClustersMessage)
                            -> Result<DBClusterMessage, DescribeDBClustersError>;


    #[doc="<p>Returns a list of the available DB engines.</p>"]
    fn describe_db_engine_versions
        (&self,
         input: &DescribeDBEngineVersionsMessage)
         -> Result<DBEngineVersionMessage, DescribeDBEngineVersionsError>;


    #[doc="<p>Returns information about provisioned RDS instances. This API supports pagination.</p>"]
    fn describe_db_instances(&self,
                             input: &DescribeDBInstancesMessage)
                             -> Result<DBInstanceMessage, DescribeDBInstancesError>;


    #[doc="<p>Returns a list of DB log files for the DB instance.</p>"]
    fn describe_db_log_files(&self,
                             input: &DescribeDBLogFilesMessage)
                             -> Result<DescribeDBLogFilesResponse, DescribeDBLogFilesError>;


    #[doc="<p> Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group. </p>"]
    fn describe_db_parameter_groups
        (&self,
         input: &DescribeDBParameterGroupsMessage)
         -> Result<DBParameterGroupsMessage, DescribeDBParameterGroupsError>;


    #[doc="<p>Returns the detailed parameter list for a particular DB parameter group.</p>"]
    fn describe_db_parameters(&self,
                              input: &DescribeDBParametersMessage)
                              -> Result<DBParameterGroupDetails, DescribeDBParametersError>;


    #[doc="<p> Returns a list of <code>DBSecurityGroup</code> descriptions. If a <code>DBSecurityGroupName</code> is specified, the list will contain only the descriptions of the specified DB security group. </p>"]
    fn describe_db_security_groups
        (&self,
         input: &DescribeDBSecurityGroupsMessage)
         -> Result<DBSecurityGroupMessage, DescribeDBSecurityGroupsError>;


    #[doc="<p>Returns a list of DB snapshot attribute names and values for a manual DB snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB snapshot, or to make the manual DB snapshot public or private, use the <a>ModifyDBSnapshotAttribute</a> API action.</p>"]
    fn describe_db_snapshot_attributes
        (&self,
         input: &DescribeDBSnapshotAttributesMessage)
         -> Result<DescribeDBSnapshotAttributesResult, DescribeDBSnapshotAttributesError>;


    #[doc="<p>Returns information about DB snapshots. This API action supports pagination.</p>"]
    fn describe_db_snapshots(&self,
                             input: &DescribeDBSnapshotsMessage)
                             -> Result<DBSnapshotMessage, DescribeDBSnapshotsError>;


    #[doc="<p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href=\"http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing\">Wikipedia Tutorial</a>. </p>"]
    fn describe_db_subnet_groups(&self,
                                 input: &DescribeDBSubnetGroupsMessage)
                                 -> Result<DBSubnetGroupMessage, DescribeDBSubnetGroupsError>;


    #[doc="<p>Returns the default engine and system parameter information for the cluster database engine.</p> <p>For more information on Amazon Aurora, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Aurora.html\">Aurora on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p>"]
    fn describe_engine_default_cluster_parameters(&self, input: &DescribeEngineDefaultClusterParametersMessage) -> Result<DescribeEngineDefaultClusterParametersResult, DescribeEngineDefaultClusterParametersError>;


    #[doc="<p>Returns the default engine and system parameter information for the specified database engine.</p>"]
    fn describe_engine_default_parameters
        (&self,
         input: &DescribeEngineDefaultParametersMessage)
         -> Result<DescribeEngineDefaultParametersResult, DescribeEngineDefaultParametersError>;


    #[doc="<p>Displays a list of categories for all event source types, or, if specified, for a specified source type. You can see a list of the event categories and source types in the <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html\"> Events</a> topic in the <i>Amazon RDS User Guide.</i> </p>"]
    fn describe_event_categories
        (&self,
         input: &DescribeEventCategoriesMessage)
         -> Result<EventCategoriesMessage, DescribeEventCategoriesError>;


    #[doc="<p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>"]
    fn describe_event_subscriptions
        (&self,
         input: &DescribeEventSubscriptionsMessage)
         -> Result<EventSubscriptionsMessage, DescribeEventSubscriptionsError>;


    #[doc="<p>Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.</p>"]
    fn describe_events(&self,
                       input: &DescribeEventsMessage)
                       -> Result<EventsMessage, DescribeEventsError>;


    #[doc="<p>Describes all available options.</p>"]
    fn describe_option_group_options
        (&self,
         input: &DescribeOptionGroupOptionsMessage)
         -> Result<OptionGroupOptionsMessage, DescribeOptionGroupOptionsError>;


    #[doc="<p>Describes the available option groups.</p>"]
    fn describe_option_groups(&self,
                              input: &DescribeOptionGroupsMessage)
                              -> Result<OptionGroups, DescribeOptionGroupsError>;


    #[doc="<p>Returns a list of orderable DB instance options for the specified engine.</p>"]
    fn describe_orderable_db_instance_options
        (&self,
         input: &DescribeOrderableDBInstanceOptionsMessage)
         -> Result<OrderableDBInstanceOptionsMessage, DescribeOrderableDBInstanceOptionsError>;


    #[doc="<p>Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.</p>"]
    fn describe_pending_maintenance_actions
        (&self,
         input: &DescribePendingMaintenanceActionsMessage)
         -> Result<PendingMaintenanceActionsMessage, DescribePendingMaintenanceActionsError>;


    #[doc="<p>Returns information about reserved DB instances for this account, or about a specified reserved DB instance.</p>"]
    fn describe_reserved_db_instances
        (&self,
         input: &DescribeReservedDBInstancesMessage)
         -> Result<ReservedDBInstanceMessage, DescribeReservedDBInstancesError>;


    #[doc="<p>Lists available reserved DB instance offerings.</p>"]
    fn describe_reserved_db_instances_offerings
        (&self,
         input: &DescribeReservedDBInstancesOfferingsMessage)
         -> Result<ReservedDBInstancesOfferingMessage, DescribeReservedDBInstancesOfferingsError>;


    #[doc="<p>Returns a list of the source AWS regions where the current AWS Region can create a Read Replica or copy a DB snapshot from. This API action supports pagination.</p>"]
    fn describe_source_regions(&self,
                               input: &DescribeSourceRegionsMessage)
                               -> Result<SourceRegionMessage, DescribeSourceRegionsError>;


    #[doc="<p>Downloads all or a portion of the specified log file, up to 1 MB in size.</p>"]
    fn download_db_log_file_portion
        (&self,
         input: &DownloadDBLogFilePortionMessage)
         -> Result<DownloadDBLogFilePortionDetails, DownloadDBLogFilePortionError>;


    #[doc="<p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Aurora Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Aurora will automatically fail over to an Aurora Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p> <p>For more information on Amazon Aurora, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Aurora.html\">Aurora on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p>"]
    fn failover_db_cluster(&self,
                           input: &FailoverDBClusterMessage)
                           -> Result<FailoverDBClusterResult, FailoverDBClusterError>;


    #[doc="<p>Lists all tags on an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html\">Tagging Amazon RDS Resources</a>.</p>"]
    fn list_tags_for_resource(&self,
                              input: &ListTagsForResourceMessage)
                              -> Result<TagListMessage, ListTagsForResourceError>;


    #[doc="<p>Modify a setting for an Amazon Aurora DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Aurora.html\">Aurora on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p>"]
    fn modify_db_cluster(&self,
                         input: &ModifyDBClusterMessage)
                         -> Result<ModifyDBClusterResult, ModifyDBClusterError>;


    #[doc="<p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <p>For more information on Amazon Aurora, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Aurora.html\">Aurora on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href=\"https://console.aws.amazon.com/rds/\">Amazon RDS console</a> or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>"]
    fn modify_db_cluster_parameter_group
        (&self,
         input: &ModifyDBClusterParameterGroupMessage)
         -> Result<DBClusterParameterGroupNameMessage, ModifyDBClusterParameterGroupError>;


    #[doc="<p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <a>DescribeDBClusterSnapshotAttributes</a> API action.</p>"]
    fn modify_db_cluster_snapshot_attribute
        (&self,
         input: &ModifyDBClusterSnapshotAttributeMessage)
         -> Result<ModifyDBClusterSnapshotAttributeResult, ModifyDBClusterSnapshotAttributeError>;


    #[doc="<p>Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request.</p>"]
    fn modify_db_instance(&self,
                          input: &ModifyDBInstanceMessage)
                          -> Result<ModifyDBInstanceResult, ModifyDBInstanceError>;


    #[doc="<p> Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href=\"https://console.aws.amazon.com/rds/\">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>"]
    fn modify_db_parameter_group
        (&self,
         input: &ModifyDBParameterGroupMessage)
         -> Result<DBParameterGroupNameMessage, ModifyDBParameterGroupError>;


    #[doc="<p>Updates a manual DB snapshot, which can be encrypted or not encrypted, with a new engine version. You can update the engine version to either a new major or minor engine version. </p> <p>Amazon RDS supports upgrading a MySQL DB snapshot from MySQL 5.1 to MySQL 5.5.</p>"]
    fn modify_db_snapshot(&self,
                          input: &ModifyDBSnapshotMessage)
                          -> Result<ModifyDBSnapshotResult, ModifyDBSnapshotError>;


    #[doc="<p>Adds an attribute and values to, or removes an attribute and values from, a manual DB snapshot.</p> <p>To share a manual DB snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB snapshot. Uses the value <code>all</code> to make the manual DB snapshot public, which means it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts. If the manual DB snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB snapshot, or whether a manual DB snapshot public or private, use the <a>DescribeDBSnapshotAttributes</a> API action.</p>"]
    fn modify_db_snapshot_attribute
        (&self,
         input: &ModifyDBSnapshotAttributeMessage)
         -> Result<ModifyDBSnapshotAttributeResult, ModifyDBSnapshotAttributeError>;


    #[doc="<p>Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.</p>"]
    fn modify_db_subnet_group(&self,
                              input: &ModifyDBSubnetGroupMessage)
                              -> Result<ModifyDBSubnetGroupResult, ModifyDBSubnetGroupError>;


    #[doc="<p>Modifies an existing RDS event notification subscription. Note that you cannot modify the source identifiers using this call; to change source identifiers for a subscription, use the <a>AddSourceIdentifierToSubscription</a> and <a>RemoveSourceIdentifierFromSubscription</a> calls.</p> <p>You can see a list of the event categories for a given SourceType in the <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html\">Events</a> topic in the Amazon RDS User Guide or by using the <b>DescribeEventCategories</b> action.</p>"]
    fn modify_event_subscription
        (&self,
         input: &ModifyEventSubscriptionMessage)
         -> Result<ModifyEventSubscriptionResult, ModifyEventSubscriptionError>;


    #[doc="<p>Modifies an existing option group.</p>"]
    fn modify_option_group(&self,
                           input: &ModifyOptionGroupMessage)
                           -> Result<ModifyOptionGroupResult, ModifyOptionGroupError>;


    #[doc="<p>Promotes a Read Replica DB instance to a standalone DB instance.</p> <note> <p>We recommend that you enable automated backups on your Read Replica before promoting the Read Replica. This ensures that no backup is taken during the promotion process. Once the instance is promoted to a primary instance, backups are taken based on your backup settings.</p> </note>"]
    fn promote_read_replica(&self,
                            input: &PromoteReadReplicaMessage)
                            -> Result<PromoteReadReplicaResult, PromoteReadReplicaError>;


    #[doc="<p>Promotes a Read Replica DB cluster to a standalone DB cluster.</p>"]
    fn promote_read_replica_db_cluster
        (&self,
         input: &PromoteReadReplicaDBClusterMessage)
         -> Result<PromoteReadReplicaDBClusterResult, PromoteReadReplicaDBClusterError>;


    #[doc="<p>Purchases a reserved DB instance offering.</p>"]
    fn purchase_reserved_db_instances_offering
        (&self,
         input: &PurchaseReservedDBInstancesOfferingMessage)
         -> Result<PurchaseReservedDBInstancesOfferingResult,
                   PurchaseReservedDBInstancesOfferingError>;


    #[doc="<p>Rebooting a DB instance restarts the database engine service. A reboot also applies to the DB instance any modifications to the associated DB parameter group that were pending. Rebooting a DB instance results in a momentary outage of the instance, during which the DB instance status is set to rebooting. If the RDS instance is configured for MultiAZ, it is possible that the reboot will be conducted through a failover. An Amazon RDS event is created when the reboot is completed.</p> <p>If your DB instance is deployed in multiple Availability Zones, you can force a failover from one AZ to the other during the reboot. You might force a failover to test the availability of your DB instance deployment or to restore operations to the original AZ after a failover occurs.</p> <p>The time required to reboot is a function of the specific database engine's crash recovery process. To improve the reboot time, we recommend that you reduce database activities as much as possible during the reboot process to reduce rollback activity for in-transit transactions.</p>"]
    fn reboot_db_instance(&self,
                          input: &RebootDBInstanceMessage)
                          -> Result<RebootDBInstanceResult, RebootDBInstanceError>;


    #[doc="<p>Disassociates an Identity and Access Management (IAM) role from an Aurora DB cluster. For more information, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Aurora.Authorizing.AWSServices.html\">Authorizing Amazon Aurora to Access Other AWS Services On Your Behalf</a>.</p>"]
    fn remove_role_from_db_cluster(&self,
                                   input: &RemoveRoleFromDBClusterMessage)
                                   -> Result<(), RemoveRoleFromDBClusterError>;


    #[doc="<p>Removes a source identifier from an existing RDS event notification subscription.</p>"]
    fn remove_source_identifier_from_subscription(&self, input: &RemoveSourceIdentifierFromSubscriptionMessage) -> Result<RemoveSourceIdentifierFromSubscriptionResult, RemoveSourceIdentifierFromSubscriptionError>;


    #[doc="<p>Removes metadata tags from an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html\">Tagging Amazon RDS Resources</a>.</p>"]
    fn remove_tags_from_resource(&self,
                                 input: &RemoveTagsFromResourceMessage)
                                 -> Result<(), RemoveTagsFromResourceError>;


    #[doc="<p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters. </p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <a>RebootDBInstance</a> request. You must call <a>RebootDBInstance</a> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p> <p>For more information on Amazon Aurora, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Aurora.html\">Aurora on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p>"]
    fn reset_db_cluster_parameter_group
        (&self,
         input: &ResetDBClusterParameterGroupMessage)
         -> Result<DBClusterParameterGroupNameMessage, ResetDBClusterParameterGroupError>;


    #[doc="<p> Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. </p>"]
    fn reset_db_parameter_group
        (&self,
         input: &ResetDBParameterGroupMessage)
         -> Result<DBParameterGroupNameMessage, ResetDBParameterGroupError>;


    #[doc="<p>Creates an Amazon Aurora DB cluster from data stored in an Amazon S3 bucket. Amazon RDS must be authorized to access the Amazon S3 bucket and the data must be created using the Percona XtraBackup utility as described in <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Aurora.Migrate.MySQL.html#Aurora.Migrate.MySQL.S3\">Migrating Data from MySQL by Using an Amazon S3 Bucket</a>.</p>"]
    fn restore_db_cluster_from_s3
        (&self,
         input: &RestoreDBClusterFromS3Message)
         -> Result<RestoreDBClusterFromS3Result, RestoreDBClusterFromS3Error>;


    #[doc="<p>Creates a new DB cluster from a DB cluster snapshot. The target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.</p> <p>For more information on Amazon Aurora, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Aurora.html\">Aurora on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p>"]
    fn restore_db_cluster_from_snapshot
        (&self,
         input: &RestoreDBClusterFromSnapshotMessage)
         -> Result<RestoreDBClusterFromSnapshotResult, RestoreDBClusterFromSnapshotError>;


    #[doc="<p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group. </p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <a>CreateDBInstance</a> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note> <p>For more information on Amazon Aurora, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Aurora.html\">Aurora on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p>"]
    fn restore_db_cluster_to_point_in_time
        (&self,
         input: &RestoreDBClusterToPointInTimeMessage)
         -> Result<RestoreDBClusterToPointInTimeResult, RestoreDBClusterToPointInTimeError>;


    #[doc="<p>Creates a new DB instance from a DB snapshot. The target database is created from the source database restore point with the most of original configuration with the default security group and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored AZ deployment and not a single-AZ deployment.</p> <p>If your intent is to replace your original DB instance with the new, restored DB instance, then rename your original DB instance before you call the RestoreDBInstanceFromDBSnapshot action. RDS does not allow two DB instances with the same name. Once you have renamed your original DB instance with a different identifier, then you can pass the original name of the DB instance as the DBInstanceIdentifier in the call to the RestoreDBInstanceFromDBSnapshot action. The result is that you will replace the original DB instance with the DB instance created from the snapshot.</p> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p>"]
    fn restore_db_instance_from_db_snapshot
        (&self,
         input: &RestoreDBInstanceFromDBSnapshotMessage)
         -> Result<RestoreDBInstanceFromDBSnapshotResult, RestoreDBInstanceFromDBSnapshotError>;


    #[doc="<p>Restores a DB instance to an arbitrary point in time. You can restore to any point in time before the time identified by the LatestRestorableTime property. You can restore to a point up to the number of days specified by the BackupRetentionPeriod property.</p> <p>The target database is created with most of the original configuration, but in a system-selected availability zone, with the default security group, the default subnet group, and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored deployment and not a single-AZ deployment.</p>"]
    fn restore_db_instance_to_point_in_time
        (&self,
         input: &RestoreDBInstanceToPointInTimeMessage)
         -> Result<RestoreDBInstanceToPointInTimeResult, RestoreDBInstanceToPointInTimeError>;


    #[doc="<p>Revokes ingress from a DBSecurityGroup for previously authorized IP ranges or EC2 or VPC Security Groups. Required parameters for this API are one of CIDRIP, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId).</p>"]
    fn revoke_db_security_group_ingress
        (&self,
         input: &RevokeDBSecurityGroupIngressMessage)
         -> Result<RevokeDBSecurityGroupIngressResult, RevokeDBSecurityGroupIngressError>;


    #[doc="<p> Starts a DB instance that was stopped using the AWS console, the stop-db-instance AWS CLI command, or the StopDBInstance action. For more information, see Stopping and Starting a DB instance in the AWS RDS user guide. </p>"]
    fn start_db_instance(&self,
                         input: &StartDBInstanceMessage)
                         -> Result<StartDBInstanceResult, StartDBInstanceError>;


    #[doc="<p> Stops a DB instance. When you stop a DB instance, Amazon RDS retains the DB instance's metadata, including its endpoint, DB parameter group, and option group membership. Amazon RDS also retains the transaction logs so you can do a point-in-time restore if necessary. For more information, see Stopping and Starting a DB instance in the AWS RDS user guide. </p>"]
    fn stop_db_instance(&self,
                        input: &StopDBInstanceMessage)
                        -> Result<StopDBInstanceResult, StopDBInstanceError>;
}
/// A client for the Amazon RDS API.
pub struct RdsClient<P, D>
    where P: ProvideAwsCredentials,
          D: DispatchSignedRequest
{
    credentials_provider: P,
    region: region::Region,
    dispatcher: D,
}

impl<P, D> RdsClient<P, D>
    where P: ProvideAwsCredentials,
          D: DispatchSignedRequest
{
    pub fn new(request_dispatcher: D, credentials_provider: P, region: region::Region) -> Self {
        RdsClient {
            credentials_provider: credentials_provider,
            region: region,
            dispatcher: request_dispatcher,
        }
    }
}

impl<P, D> Rds for RdsClient<P, D>
    where P: ProvideAwsCredentials,
          D: DispatchSignedRequest
{
    #[doc="<p>Associates an Identity and Access Management (IAM) role from an Aurora DB cluster. For more information, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Aurora.Authorizing.AWSServices.html\">Authorizing Amazon Aurora to Access Other AWS Services On Your Behalf</a>.</p>"]
    fn add_role_to_db_cluster(&self,
                              input: &AddRoleToDBClusterMessage)
                              -> Result<(), AddRoleToDBClusterError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "AddRoleToDBCluster");
        params.put("Version", "2014-10-31");
        AddRoleToDBClusterMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {
                let result = ();
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(AddRoleToDBClusterError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Adds a source identifier to an existing RDS event notification subscription.</p>"]
    fn add_source_identifier_to_subscription
        (&self,
         input: &AddSourceIdentifierToSubscriptionMessage)
         -> Result<AddSourceIdentifierToSubscriptionResult, AddSourceIdentifierToSubscriptionError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "AddSourceIdentifierToSubscription");
        params.put("Version", "2014-10-31");
        AddSourceIdentifierToSubscriptionMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = AddSourceIdentifierToSubscriptionResult::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(AddSourceIdentifierToSubscriptionResultDeserializer::deserialize("AddSourceIdentifierToSubscriptionResult", &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(AddSourceIdentifierToSubscriptionError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Adds metadata tags to an Amazon RDS resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon RDS resources, or used in a Condition statement in an IAM policy for Amazon RDS.</p> <p>For an overview on tagging Amazon RDS resources, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html\">Tagging Amazon RDS Resources</a>.</p>"]
    fn add_tags_to_resource(&self,
                            input: &AddTagsToResourceMessage)
                            -> Result<(), AddTagsToResourceError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "AddTagsToResource");
        params.put("Version", "2014-10-31");
        AddTagsToResourceMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {
                let result = ();
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(AddTagsToResourceError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Applies a pending maintenance action to a resource (for example, to a DB instance).</p>"]
    fn apply_pending_maintenance_action
        (&self,
         input: &ApplyPendingMaintenanceActionMessage)
         -> Result<ApplyPendingMaintenanceActionResult, ApplyPendingMaintenanceActionError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ApplyPendingMaintenanceAction");
        params.put("Version", "2014-10-31");
        ApplyPendingMaintenanceActionMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = ApplyPendingMaintenanceActionResult::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(ApplyPendingMaintenanceActionResultDeserializer::deserialize("ApplyPendingMaintenanceActionResult", &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(ApplyPendingMaintenanceActionError::from_body(String::from_utf8_lossy(&body)
                                                                      .as_ref()))
            }
        }
    }


    #[doc="<p>Enables ingress to a DBSecurityGroup using one of two forms of authorization. First, EC2 or VPC security groups can be added to the DBSecurityGroup if the application using the database is running on EC2 or VPC instances. Second, IP ranges are available if the application accessing your database is running on the Internet. Required parameters for this API are one of CIDR range, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId for non-VPC).</p> <note> <p>You cannot authorize ingress from an EC2 security group in one AWS Region to an Amazon RDS DB instance in another. You cannot authorize ingress from a VPC security group in one VPC to an Amazon RDS DB instance in another.</p> </note> <p>For an overview of CIDR ranges, go to the <a href=\"http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing\">Wikipedia Tutorial</a>. </p>"]
    fn authorize_db_security_group_ingress
        (&self,
         input: &AuthorizeDBSecurityGroupIngressMessage)
         -> Result<AuthorizeDBSecurityGroupIngressResult, AuthorizeDBSecurityGroupIngressError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "AuthorizeDBSecurityGroupIngress");
        params.put("Version", "2014-10-31");
        AuthorizeDBSecurityGroupIngressMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = AuthorizeDBSecurityGroupIngressResult::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(AuthorizeDBSecurityGroupIngressResultDeserializer::deserialize("AuthorizeDBSecurityGroupIngressResult", &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(AuthorizeDBSecurityGroupIngressError::from_body(String::from_utf8_lossy(&body)
                                                                        .as_ref()))
            }
        }
    }


    #[doc="<p>Copies the specified DB cluster parameter group.</p>"]
    fn copy_db_cluster_parameter_group
        (&self,
         input: &CopyDBClusterParameterGroupMessage)
         -> Result<CopyDBClusterParameterGroupResult, CopyDBClusterParameterGroupError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CopyDBClusterParameterGroup");
        params.put("Version", "2014-10-31");
        CopyDBClusterParameterGroupMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = CopyDBClusterParameterGroupResult::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(CopyDBClusterParameterGroupResultDeserializer::deserialize("CopyDBClusterParameterGroupResult", &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(CopyDBClusterParameterGroupError::from_body(String::from_utf8_lossy(&body)
                                                                    .as_ref()))
            }
        }
    }


    #[doc="<p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can copy an encrypted DB cluster snapshot from another AWS Region. In that case, the AWS Region where you call the <code>CopyDBClusterSnapshot</code> action is the destination AWS Region for the encrypted DB cluster snapshot to be copied to. To copy an encrypted DB cluster snapshot from another AWS Region, you must provide the following values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS Key Management System (KMS) key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>PreSignedUrl</code> - A URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> action to be called in the source AWS Region where the DB cluster snapshot will be copied from. The pre-signed URL must be a valid request for the <code>CopyDBClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot will be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a href=\"http://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html\"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href=\"http://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\"> Signature Version 4 Signing Process</a>.</p> </li> <li> <p> <code>TargetDBClusterSnapshotIdentifier</code> - The identifier for the new copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the ARN format for the source AWS Region and is the same value as the <code>SourceDBClusterSnapshotIdentifier</code> in the pre-signed URL. </p> </li> </ul> <p>To cancel the copy operation once it is in progress, delete the target DB cluster snapshot identified by <code>TargetDBClusterSnapshotIdentifier</code> while that DB cluster snapshot is in \"copying\" status.</p> <p>For more information on copying encrypted DB cluster snapshots from one AWS Region to another, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopyDBClusterSnapshot.CrossRegion\"> Copying a DB Cluster Snapshot in the Same Account, Either in the Same Region or Across Regions</a> in the Amazon RDS User Guide.</p> <p>For more information on Amazon Aurora, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Aurora.html\">Aurora on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p>"]
    fn copy_db_cluster_snapshot
        (&self,
         input: &CopyDBClusterSnapshotMessage)
         -> Result<CopyDBClusterSnapshotResult, CopyDBClusterSnapshotError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CopyDBClusterSnapshot");
        params.put("Version", "2014-10-31");
        CopyDBClusterSnapshotMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = CopyDBClusterSnapshotResult::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(CopyDBClusterSnapshotResultDeserializer::deserialize("CopyDBClusterSnapshotResult",
                                                                                       &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(CopyDBClusterSnapshotError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Copies the specified DB parameter group.</p>"]
    fn copy_db_parameter_group(&self,
                               input: &CopyDBParameterGroupMessage)
                               -> Result<CopyDBParameterGroupResult, CopyDBParameterGroupError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CopyDBParameterGroup");
        params.put("Version", "2014-10-31");
        CopyDBParameterGroupMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = CopyDBParameterGroupResult::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(CopyDBParameterGroupResultDeserializer::deserialize("CopyDBParameterGroupResult",
                                                                                      &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(CopyDBParameterGroupError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Copies the specified DB snapshot. The source DB snapshot must be in the \"available\" state.</p> <p>You can copy a snapshot from one AWS Region to another. In that case, the AWS Region where you call the <code>CopyDBSnapshot</code> action is the destination AWS Region for the DB snapshot copy. </p> <p>You cannot copy an encrypted, shared DB snapshot from one AWS Region to another.</p> <p>For more information about copying snapshots, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopyDBSnapshot.html\">Copying a DB Snapshot</a> in the Amazon RDS User Guide. </p>"]
    fn copy_db_snapshot(&self,
                        input: &CopyDBSnapshotMessage)
                        -> Result<CopyDBSnapshotResult, CopyDBSnapshotError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CopyDBSnapshot");
        params.put("Version", "2014-10-31");
        CopyDBSnapshotMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = CopyDBSnapshotResult::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(CopyDBSnapshotResultDeserializer::deserialize("CopyDBSnapshotResult",
                                                                                &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(CopyDBSnapshotError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Copies the specified option group.</p>"]
    fn copy_option_group(&self,
                         input: &CopyOptionGroupMessage)
                         -> Result<CopyOptionGroupResult, CopyOptionGroupError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CopyOptionGroup");
        params.put("Version", "2014-10-31");
        CopyOptionGroupMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = CopyOptionGroupResult::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(CopyOptionGroupResultDeserializer::deserialize("CopyOptionGroupResult",
                                                                                 &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(CopyOptionGroupError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Creates a new Amazon Aurora DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon RDS MySQL DB instance. For cross-region replication where the DB cluster identified by <code>ReplicationSourceIdentifier</code> is encrypted, you must also specify the <code>PreSignedUrl</code> parameter.</p> <p>For more information on Amazon Aurora, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Aurora.html\">Aurora on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p>"]
    fn create_db_cluster(&self,
                         input: &CreateDBClusterMessage)
                         -> Result<CreateDBClusterResult, CreateDBClusterError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CreateDBCluster");
        params.put("Version", "2014-10-31");
        CreateDBClusterMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = CreateDBClusterResult::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(CreateDBClusterResultDeserializer::deserialize("CreateDBClusterResult",
                                                                                 &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(CreateDBClusterError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <a>ModifyDBClusterParameterGroup</a>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <a>ModifyDBCluster</a>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect. </p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href=\"https://console.aws.amazon.com/rds/\">Amazon RDS console</a> or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important> <p>For more information on Amazon Aurora, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Aurora.html\">Aurora on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p>"]
    fn create_db_cluster_parameter_group
        (&self,
         input: &CreateDBClusterParameterGroupMessage)
         -> Result<CreateDBClusterParameterGroupResult, CreateDBClusterParameterGroupError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CreateDBClusterParameterGroup");
        params.put("Version", "2014-10-31");
        CreateDBClusterParameterGroupMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = CreateDBClusterParameterGroupResult::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(CreateDBClusterParameterGroupResultDeserializer::deserialize("CreateDBClusterParameterGroupResult", &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(CreateDBClusterParameterGroupError::from_body(String::from_utf8_lossy(&body)
                                                                      .as_ref()))
            }
        }
    }


    #[doc="<p>Creates a snapshot of a DB cluster. For more information on Amazon Aurora, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Aurora.html\">Aurora on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p>"]
    fn create_db_cluster_snapshot
        (&self,
         input: &CreateDBClusterSnapshotMessage)
         -> Result<CreateDBClusterSnapshotResult, CreateDBClusterSnapshotError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CreateDBClusterSnapshot");
        params.put("Version", "2014-10-31");
        CreateDBClusterSnapshotMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = CreateDBClusterSnapshotResult::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result =
                        try!(CreateDBClusterSnapshotResultDeserializer::deserialize("CreateDBClusterSnapshotResult",
                                                                                    &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(CreateDBClusterSnapshotError::from_body(String::from_utf8_lossy(&body)
                                                                .as_ref()))
            }
        }
    }


    #[doc="<p>Creates a new DB instance.</p>"]
    fn create_db_instance(&self,
                          input: &CreateDBInstanceMessage)
                          -> Result<CreateDBInstanceResult, CreateDBInstanceError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CreateDBInstance");
        params.put("Version", "2014-10-31");
        CreateDBInstanceMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = CreateDBInstanceResult::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(CreateDBInstanceResultDeserializer::deserialize("CreateDBInstanceResult",
                                                                                  &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(CreateDBInstanceError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Creates a new DB instance that acts as a Read Replica for an existing source DB instance. You can create a Read Replica for a DB instance running MySQL, MariaDB, or PostgreSQL. </p> <note> <p>Amazon Aurora does not support this action. You must call the <code>CreateDBInstance</code> action to create a DB instance for an Aurora DB cluster. </p> </note> <p>All Read Replica DB instances are created as Single-AZ deployments with backups disabled. All other DB instance attributes (including DB security groups and DB parameter groups) are inherited from the source DB instance, except as specified below. </p> <important> <p>The source DB instance must have backup retention enabled. </p> </important> <p>For more information, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html\">Working with PostgreSQL, MySQL, and MariaDB Read Replicas</a>. </p>"]
    fn create_db_instance_read_replica
        (&self,
         input: &CreateDBInstanceReadReplicaMessage)
         -> Result<CreateDBInstanceReadReplicaResult, CreateDBInstanceReadReplicaError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CreateDBInstanceReadReplica");
        params.put("Version", "2014-10-31");
        CreateDBInstanceReadReplicaMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = CreateDBInstanceReadReplicaResult::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(CreateDBInstanceReadReplicaResultDeserializer::deserialize("CreateDBInstanceReadReplicaResult", &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(CreateDBInstanceReadReplicaError::from_body(String::from_utf8_lossy(&body)
                                                                    .as_ref()))
            }
        }
    }


    #[doc="<p>Creates a new DB parameter group.</p> <p> A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect. </p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href=\"https://console.aws.amazon.com/rds/\">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>"]
    fn create_db_parameter_group
        (&self,
         input: &CreateDBParameterGroupMessage)
         -> Result<CreateDBParameterGroupResult, CreateDBParameterGroupError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CreateDBParameterGroup");
        params.put("Version", "2014-10-31");
        CreateDBParameterGroupMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = CreateDBParameterGroupResult::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result =
                        try!(CreateDBParameterGroupResultDeserializer::deserialize("CreateDBParameterGroupResult",
                                                                                   &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(CreateDBParameterGroupError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Creates a new DB security group. DB security groups control access to a DB instance.</p>"]
    fn create_db_security_group
        (&self,
         input: &CreateDBSecurityGroupMessage)
         -> Result<CreateDBSecurityGroupResult, CreateDBSecurityGroupError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CreateDBSecurityGroup");
        params.put("Version", "2014-10-31");
        CreateDBSecurityGroupMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = CreateDBSecurityGroupResult::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(CreateDBSecurityGroupResultDeserializer::deserialize("CreateDBSecurityGroupResult",
                                                                                       &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(CreateDBSecurityGroupError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Creates a DBSnapshot. The source DBInstance must be in \"available\" state.</p>"]
    fn create_db_snapshot(&self,
                          input: &CreateDBSnapshotMessage)
                          -> Result<CreateDBSnapshotResult, CreateDBSnapshotError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CreateDBSnapshot");
        params.put("Version", "2014-10-31");
        CreateDBSnapshotMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = CreateDBSnapshotResult::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(CreateDBSnapshotResultDeserializer::deserialize("CreateDBSnapshotResult",
                                                                                  &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(CreateDBSnapshotError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.</p>"]
    fn create_db_subnet_group(&self,
                              input: &CreateDBSubnetGroupMessage)
                              -> Result<CreateDBSubnetGroupResult, CreateDBSubnetGroupError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CreateDBSubnetGroup");
        params.put("Version", "2014-10-31");
        CreateDBSubnetGroupMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = CreateDBSubnetGroupResult::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(CreateDBSubnetGroupResultDeserializer::deserialize("CreateDBSubnetGroupResult",
                                                                                     &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(CreateDBSubnetGroupError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Creates an RDS event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the RDS console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of RDS sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you will be notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you will receive notice of the events for that source type for all your RDS sources. If you do not specify either the SourceType nor the SourceIdentifier, you will be notified of events generated from all RDS sources belonging to your customer account.</p>"]
    fn create_event_subscription
        (&self,
         input: &CreateEventSubscriptionMessage)
         -> Result<CreateEventSubscriptionResult, CreateEventSubscriptionError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CreateEventSubscription");
        params.put("Version", "2014-10-31");
        CreateEventSubscriptionMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = CreateEventSubscriptionResult::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result =
                        try!(CreateEventSubscriptionResultDeserializer::deserialize("CreateEventSubscriptionResult",
                                                                                    &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(CreateEventSubscriptionError::from_body(String::from_utf8_lossy(&body)
                                                                .as_ref()))
            }
        }
    }


    #[doc="<p>Creates a new option group. You can create up to 20 option groups.</p>"]
    fn create_option_group(&self,
                           input: &CreateOptionGroupMessage)
                           -> Result<CreateOptionGroupResult, CreateOptionGroupError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CreateOptionGroup");
        params.put("Version", "2014-10-31");
        CreateOptionGroupMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = CreateOptionGroupResult::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(CreateOptionGroupResultDeserializer::deserialize("CreateOptionGroupResult",
                                                                                   &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(CreateOptionGroupError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and cannot be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.</p> <p/> <p>For more information on Amazon Aurora, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Aurora.html\">Aurora on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p>"]
    fn delete_db_cluster(&self,
                         input: &DeleteDBClusterMessage)
                         -> Result<DeleteDBClusterResult, DeleteDBClusterError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DeleteDBCluster");
        params.put("Version", "2014-10-31");
        DeleteDBClusterMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = DeleteDBClusterResult::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(DeleteDBClusterResultDeserializer::deserialize("DeleteDBClusterResult",
                                                                                 &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(DeleteDBClusterError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted cannot be associated with any DB clusters.</p> <p>For more information on Amazon Aurora, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Aurora.html\">Aurora on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p>"]
    fn delete_db_cluster_parameter_group(&self,
                                         input: &DeleteDBClusterParameterGroupMessage)
                                         -> Result<(), DeleteDBClusterParameterGroupError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DeleteDBClusterParameterGroup");
        params.put("Version", "2014-10-31");
        DeleteDBClusterParameterGroupMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {
                let result = ();
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(DeleteDBClusterParameterGroupError::from_body(String::from_utf8_lossy(&body)
                                                                      .as_ref()))
            }
        }
    }


    #[doc="<p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note> <p>For more information on Amazon Aurora, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Aurora.html\">Aurora on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p>"]
    fn delete_db_cluster_snapshot
        (&self,
         input: &DeleteDBClusterSnapshotMessage)
         -> Result<DeleteDBClusterSnapshotResult, DeleteDBClusterSnapshotError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DeleteDBClusterSnapshot");
        params.put("Version", "2014-10-31");
        DeleteDBClusterSnapshotMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = DeleteDBClusterSnapshotResult::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result =
                        try!(DeleteDBClusterSnapshotResultDeserializer::deserialize("DeleteDBClusterSnapshotResult",
                                                                                    &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(DeleteDBClusterSnapshotError::from_body(String::from_utf8_lossy(&body)
                                                                .as_ref()))
            }
        }
    }


    #[doc="<p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and cannot be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon RDS DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action cannot be canceled or reverted once submitted. </p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when the <code>SkipFinalSnapshot</code> parameter is set to <code>true</code>.</p> <p>If the specified DB instance is part of an Amazon Aurora DB cluster, you cannot delete the DB instance if the following are true:</p> <ul> <li> <p>The DB cluster is a Read Replica of another Amazon Aurora DB cluster.</p> </li> <li> <p>The DB instance is the only instance in the DB cluster.</p> </li> </ul> <p>To delete a DB instance in this case, first call the <a>PromoteReadReplicaDBCluster</a> API action to promote the DB cluster so it's no longer a Read Replica. After the promotion completes, then call the <code>DeleteDBInstance</code> API action to delete the final instance in the DB cluster.</p>"]
    fn delete_db_instance(&self,
                          input: &DeleteDBInstanceMessage)
                          -> Result<DeleteDBInstanceResult, DeleteDBInstanceError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DeleteDBInstance");
        params.put("Version", "2014-10-31");
        DeleteDBInstanceMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = DeleteDBInstanceResult::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(DeleteDBInstanceResultDeserializer::deserialize("DeleteDBInstanceResult",
                                                                                  &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(DeleteDBInstanceError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Deletes a specified DBParameterGroup. The DBParameterGroup to be deleted cannot be associated with any DB instances.</p>"]
    fn delete_db_parameter_group(&self,
                                 input: &DeleteDBParameterGroupMessage)
                                 -> Result<(), DeleteDBParameterGroupError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DeleteDBParameterGroup");
        params.put("Version", "2014-10-31");
        DeleteDBParameterGroupMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {
                let result = ();
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(DeleteDBParameterGroupError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Deletes a DB security group.</p> <note> <p>The specified DB security group must not be associated with any DB instances.</p> </note>"]
    fn delete_db_security_group(&self,
                                input: &DeleteDBSecurityGroupMessage)
                                -> Result<(), DeleteDBSecurityGroupError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DeleteDBSecurityGroup");
        params.put("Version", "2014-10-31");
        DeleteDBSecurityGroupMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {
                let result = ();
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(DeleteDBSecurityGroupError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Deletes a DBSnapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DBSnapshot must be in the <code>available</code> state to be deleted.</p> </note>"]
    fn delete_db_snapshot(&self,
                          input: &DeleteDBSnapshotMessage)
                          -> Result<DeleteDBSnapshotResult, DeleteDBSnapshotError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DeleteDBSnapshot");
        params.put("Version", "2014-10-31");
        DeleteDBSnapshotMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = DeleteDBSnapshotResult::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(DeleteDBSnapshotResultDeserializer::deserialize("DeleteDBSnapshotResult",
                                                                                  &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(DeleteDBSnapshotError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>"]
    fn delete_db_subnet_group(&self,
                              input: &DeleteDBSubnetGroupMessage)
                              -> Result<(), DeleteDBSubnetGroupError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DeleteDBSubnetGroup");
        params.put("Version", "2014-10-31");
        DeleteDBSubnetGroupMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {
                let result = ();
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(DeleteDBSubnetGroupError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Deletes an RDS event notification subscription.</p>"]
    fn delete_event_subscription
        (&self,
         input: &DeleteEventSubscriptionMessage)
         -> Result<DeleteEventSubscriptionResult, DeleteEventSubscriptionError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DeleteEventSubscription");
        params.put("Version", "2014-10-31");
        DeleteEventSubscriptionMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = DeleteEventSubscriptionResult::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result =
                        try!(DeleteEventSubscriptionResultDeserializer::deserialize("DeleteEventSubscriptionResult",
                                                                                    &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(DeleteEventSubscriptionError::from_body(String::from_utf8_lossy(&body)
                                                                .as_ref()))
            }
        }
    }


    #[doc="<p>Deletes an existing option group.</p>"]
    fn delete_option_group(&self,
                           input: &DeleteOptionGroupMessage)
                           -> Result<(), DeleteOptionGroupError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DeleteOptionGroup");
        params.put("Version", "2014-10-31");
        DeleteOptionGroupMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {
                let result = ();
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(DeleteOptionGroupError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Lists all of the attributes for a customer account. The attributes include Amazon RDS quotas for the account, such as the number of DB instances allowed. The description for a quota includes the quota name, current usage toward that quota, and the quota's maximum value.</p> <p>This command does not take any parameters.</p>"]
    fn describe_account_attributes
        (&self,
         input: &DescribeAccountAttributesMessage)
         -> Result<AccountAttributesMessage, DescribeAccountAttributesError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeAccountAttributes");
        params.put("Version", "2014-10-31");
        DescribeAccountAttributesMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = AccountAttributesMessage::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(AccountAttributesMessageDeserializer::deserialize("DescribeAccountAttributesResult",
                                                                                    &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(DescribeAccountAttributesError::from_body(String::from_utf8_lossy(&body)
                                                                  .as_ref()))
            }
        }
    }


    #[doc="<p>Lists the set of CA certificates provided by Amazon RDS for this AWS account.</p>"]
    fn describe_certificates(&self,
                             input: &DescribeCertificatesMessage)
                             -> Result<CertificateMessage, DescribeCertificatesError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeCertificates");
        params.put("Version", "2014-10-31");
        DescribeCertificatesMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = CertificateMessage::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(CertificateMessageDeserializer::deserialize("DescribeCertificatesResult",
                                                                              &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(DescribeCertificatesError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p> Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group. </p> <p>For more information on Amazon Aurora, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Aurora.html\">Aurora on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p>"]
    fn describe_db_cluster_parameter_groups
        (&self,
         input: &DescribeDBClusterParameterGroupsMessage)
         -> Result<DBClusterParameterGroupsMessage, DescribeDBClusterParameterGroupsError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeDBClusterParameterGroups");
        params.put("Version", "2014-10-31");
        DescribeDBClusterParameterGroupsMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = DBClusterParameterGroupsMessage::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result =
                        try!(DBClusterParameterGroupsMessageDeserializer::deserialize("DescribeDBClusterParameterGroupsResult",
                                                                                      &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(DescribeDBClusterParameterGroupsError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Returns the detailed parameter list for a particular DB cluster parameter group.</p> <p>For more information on Amazon Aurora, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Aurora.html\">Aurora on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p>"]
    fn describe_db_cluster_parameters
        (&self,
         input: &DescribeDBClusterParametersMessage)
         -> Result<DBClusterParameterGroupDetails, DescribeDBClusterParametersError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeDBClusterParameters");
        params.put("Version", "2014-10-31");
        DescribeDBClusterParametersMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = DBClusterParameterGroupDetails::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result =
                        try!(DBClusterParameterGroupDetailsDeserializer::deserialize("DescribeDBClusterParametersResult",
                                                                                     &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(DescribeDBClusterParametersError::from_body(String::from_utf8_lossy(&body)
                                                                    .as_ref()))
            }
        }
    }


    #[doc="<p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>"]
    fn describe_db_cluster_snapshot_attributes
        (&self,
         input: &DescribeDBClusterSnapshotAttributesMessage)
         -> Result<DescribeDBClusterSnapshotAttributesResult,
                   DescribeDBClusterSnapshotAttributesError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeDBClusterSnapshotAttributes");
        params.put("Version", "2014-10-31");
        DescribeDBClusterSnapshotAttributesMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = DescribeDBClusterSnapshotAttributesResult::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(DescribeDBClusterSnapshotAttributesResultDeserializer::deserialize("DescribeDBClusterSnapshotAttributesResult", &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(DescribeDBClusterSnapshotAttributesError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Returns information about DB cluster snapshots. This API action supports pagination.</p> <p>For more information on Amazon Aurora, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Aurora.html\">Aurora on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p>"]
    fn describe_db_cluster_snapshots
        (&self,
         input: &DescribeDBClusterSnapshotsMessage)
         -> Result<DBClusterSnapshotMessage, DescribeDBClusterSnapshotsError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeDBClusterSnapshots");
        params.put("Version", "2014-10-31");
        DescribeDBClusterSnapshotsMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = DBClusterSnapshotMessage::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(DBClusterSnapshotMessageDeserializer::deserialize("DescribeDBClusterSnapshotsResult",
                                                                                    &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(DescribeDBClusterSnapshotsError::from_body(String::from_utf8_lossy(&body)
                                                                   .as_ref()))
            }
        }
    }


    #[doc="<p>Returns information about provisioned Aurora DB clusters. This API supports pagination.</p> <p>For more information on Amazon Aurora, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Aurora.html\">Aurora on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p>"]
    fn describe_db_clusters(&self,
                            input: &DescribeDBClustersMessage)
                            -> Result<DBClusterMessage, DescribeDBClustersError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeDBClusters");
        params.put("Version", "2014-10-31");
        DescribeDBClustersMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = DBClusterMessage::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(DBClusterMessageDeserializer::deserialize("DescribeDBClustersResult",
                                                                            &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(DescribeDBClustersError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Returns a list of the available DB engines.</p>"]
    fn describe_db_engine_versions
        (&self,
         input: &DescribeDBEngineVersionsMessage)
         -> Result<DBEngineVersionMessage, DescribeDBEngineVersionsError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeDBEngineVersions");
        params.put("Version", "2014-10-31");
        DescribeDBEngineVersionsMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = DBEngineVersionMessage::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(DBEngineVersionMessageDeserializer::deserialize("DescribeDBEngineVersionsResult",
                                                                                  &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(DescribeDBEngineVersionsError::from_body(String::from_utf8_lossy(&body)
                                                                 .as_ref()))
            }
        }
    }


    #[doc="<p>Returns information about provisioned RDS instances. This API supports pagination.</p>"]
    fn describe_db_instances(&self,
                             input: &DescribeDBInstancesMessage)
                             -> Result<DBInstanceMessage, DescribeDBInstancesError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeDBInstances");
        params.put("Version", "2014-10-31");
        DescribeDBInstancesMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = DBInstanceMessage::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(DBInstanceMessageDeserializer::deserialize("DescribeDBInstancesResult",
                                                                             &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(DescribeDBInstancesError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Returns a list of DB log files for the DB instance.</p>"]
    fn describe_db_log_files(&self,
                             input: &DescribeDBLogFilesMessage)
                             -> Result<DescribeDBLogFilesResponse, DescribeDBLogFilesError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeDBLogFiles");
        params.put("Version", "2014-10-31");
        DescribeDBLogFilesMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = DescribeDBLogFilesResponse::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(DescribeDBLogFilesResponseDeserializer::deserialize("DescribeDBLogFilesResult",
                                                                                      &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(DescribeDBLogFilesError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p> Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group. </p>"]
    fn describe_db_parameter_groups
        (&self,
         input: &DescribeDBParameterGroupsMessage)
         -> Result<DBParameterGroupsMessage, DescribeDBParameterGroupsError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeDBParameterGroups");
        params.put("Version", "2014-10-31");
        DescribeDBParameterGroupsMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = DBParameterGroupsMessage::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(DBParameterGroupsMessageDeserializer::deserialize("DescribeDBParameterGroupsResult",
                                                                                    &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(DescribeDBParameterGroupsError::from_body(String::from_utf8_lossy(&body)
                                                                  .as_ref()))
            }
        }
    }


    #[doc="<p>Returns the detailed parameter list for a particular DB parameter group.</p>"]
    fn describe_db_parameters(&self,
                              input: &DescribeDBParametersMessage)
                              -> Result<DBParameterGroupDetails, DescribeDBParametersError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeDBParameters");
        params.put("Version", "2014-10-31");
        DescribeDBParametersMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = DBParameterGroupDetails::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(DBParameterGroupDetailsDeserializer::deserialize("DescribeDBParametersResult",
                                                                                   &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(DescribeDBParametersError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p> Returns a list of <code>DBSecurityGroup</code> descriptions. If a <code>DBSecurityGroupName</code> is specified, the list will contain only the descriptions of the specified DB security group. </p>"]
    fn describe_db_security_groups
        (&self,
         input: &DescribeDBSecurityGroupsMessage)
         -> Result<DBSecurityGroupMessage, DescribeDBSecurityGroupsError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeDBSecurityGroups");
        params.put("Version", "2014-10-31");
        DescribeDBSecurityGroupsMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = DBSecurityGroupMessage::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(DBSecurityGroupMessageDeserializer::deserialize("DescribeDBSecurityGroupsResult",
                                                                                  &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(DescribeDBSecurityGroupsError::from_body(String::from_utf8_lossy(&body)
                                                                 .as_ref()))
            }
        }
    }


    #[doc="<p>Returns a list of DB snapshot attribute names and values for a manual DB snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB snapshot, or to make the manual DB snapshot public or private, use the <a>ModifyDBSnapshotAttribute</a> API action.</p>"]
    fn describe_db_snapshot_attributes
        (&self,
         input: &DescribeDBSnapshotAttributesMessage)
         -> Result<DescribeDBSnapshotAttributesResult, DescribeDBSnapshotAttributesError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeDBSnapshotAttributes");
        params.put("Version", "2014-10-31");
        DescribeDBSnapshotAttributesMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = DescribeDBSnapshotAttributesResult::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(DescribeDBSnapshotAttributesResultDeserializer::deserialize("DescribeDBSnapshotAttributesResult", &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(DescribeDBSnapshotAttributesError::from_body(String::from_utf8_lossy(&body)
                                                                     .as_ref()))
            }
        }
    }


    #[doc="<p>Returns information about DB snapshots. This API action supports pagination.</p>"]
    fn describe_db_snapshots(&self,
                             input: &DescribeDBSnapshotsMessage)
                             -> Result<DBSnapshotMessage, DescribeDBSnapshotsError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeDBSnapshots");
        params.put("Version", "2014-10-31");
        DescribeDBSnapshotsMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = DBSnapshotMessage::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(DBSnapshotMessageDeserializer::deserialize("DescribeDBSnapshotsResult",
                                                                             &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(DescribeDBSnapshotsError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href=\"http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing\">Wikipedia Tutorial</a>. </p>"]
    fn describe_db_subnet_groups(&self,
                                 input: &DescribeDBSubnetGroupsMessage)
                                 -> Result<DBSubnetGroupMessage, DescribeDBSubnetGroupsError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeDBSubnetGroups");
        params.put("Version", "2014-10-31");
        DescribeDBSubnetGroupsMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = DBSubnetGroupMessage::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(DBSubnetGroupMessageDeserializer::deserialize("DescribeDBSubnetGroupsResult",
                                                                                &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(DescribeDBSubnetGroupsError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Returns the default engine and system parameter information for the cluster database engine.</p> <p>For more information on Amazon Aurora, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Aurora.html\">Aurora on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p>"]
fn describe_engine_default_cluster_parameters(&self, input: &DescribeEngineDefaultClusterParametersMessage) -> Result<DescribeEngineDefaultClusterParametersResult, DescribeEngineDefaultClusterParametersError>{
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeEngineDefaultClusterParameters");
        params.put("Version", "2014-10-31");
        DescribeEngineDefaultClusterParametersMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = DescribeEngineDefaultClusterParametersResult::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(DescribeEngineDefaultClusterParametersResultDeserializer::deserialize("DescribeEngineDefaultClusterParametersResult", &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(DescribeEngineDefaultClusterParametersError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Returns the default engine and system parameter information for the specified database engine.</p>"]
    fn describe_engine_default_parameters
        (&self,
         input: &DescribeEngineDefaultParametersMessage)
         -> Result<DescribeEngineDefaultParametersResult, DescribeEngineDefaultParametersError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeEngineDefaultParameters");
        params.put("Version", "2014-10-31");
        DescribeEngineDefaultParametersMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = DescribeEngineDefaultParametersResult::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(DescribeEngineDefaultParametersResultDeserializer::deserialize("DescribeEngineDefaultParametersResult", &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(DescribeEngineDefaultParametersError::from_body(String::from_utf8_lossy(&body)
                                                                        .as_ref()))
            }
        }
    }


    #[doc="<p>Displays a list of categories for all event source types, or, if specified, for a specified source type. You can see a list of the event categories and source types in the <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html\"> Events</a> topic in the <i>Amazon RDS User Guide.</i> </p>"]
    fn describe_event_categories
        (&self,
         input: &DescribeEventCategoriesMessage)
         -> Result<EventCategoriesMessage, DescribeEventCategoriesError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeEventCategories");
        params.put("Version", "2014-10-31");
        DescribeEventCategoriesMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = EventCategoriesMessage::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(EventCategoriesMessageDeserializer::deserialize("DescribeEventCategoriesResult",
                                                                                  &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(DescribeEventCategoriesError::from_body(String::from_utf8_lossy(&body)
                                                                .as_ref()))
            }
        }
    }


    #[doc="<p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>"]
    fn describe_event_subscriptions
        (&self,
         input: &DescribeEventSubscriptionsMessage)
         -> Result<EventSubscriptionsMessage, DescribeEventSubscriptionsError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeEventSubscriptions");
        params.put("Version", "2014-10-31");
        DescribeEventSubscriptionsMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = EventSubscriptionsMessage::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(EventSubscriptionsMessageDeserializer::deserialize("DescribeEventSubscriptionsResult",
                                                                                     &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(DescribeEventSubscriptionsError::from_body(String::from_utf8_lossy(&body)
                                                                   .as_ref()))
            }
        }
    }


    #[doc="<p>Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.</p>"]
    fn describe_events(&self,
                       input: &DescribeEventsMessage)
                       -> Result<EventsMessage, DescribeEventsError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeEvents");
        params.put("Version", "2014-10-31");
        DescribeEventsMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = EventsMessage::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(EventsMessageDeserializer::deserialize("DescribeEventsResult",
                                                                         &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(DescribeEventsError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Describes all available options.</p>"]
    fn describe_option_group_options
        (&self,
         input: &DescribeOptionGroupOptionsMessage)
         -> Result<OptionGroupOptionsMessage, DescribeOptionGroupOptionsError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeOptionGroupOptions");
        params.put("Version", "2014-10-31");
        DescribeOptionGroupOptionsMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = OptionGroupOptionsMessage::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(OptionGroupOptionsMessageDeserializer::deserialize("DescribeOptionGroupOptionsResult",
                                                                                     &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(DescribeOptionGroupOptionsError::from_body(String::from_utf8_lossy(&body)
                                                                   .as_ref()))
            }
        }
    }


    #[doc="<p>Describes the available option groups.</p>"]
    fn describe_option_groups(&self,
                              input: &DescribeOptionGroupsMessage)
                              -> Result<OptionGroups, DescribeOptionGroupsError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeOptionGroups");
        params.put("Version", "2014-10-31");
        DescribeOptionGroupsMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = OptionGroups::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(OptionGroupsDeserializer::deserialize("DescribeOptionGroupsResult",
                                                                        &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(DescribeOptionGroupsError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Returns a list of orderable DB instance options for the specified engine.</p>"]
    fn describe_orderable_db_instance_options
        (&self,
         input: &DescribeOrderableDBInstanceOptionsMessage)
         -> Result<OrderableDBInstanceOptionsMessage, DescribeOrderableDBInstanceOptionsError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeOrderableDBInstanceOptions");
        params.put("Version", "2014-10-31");
        DescribeOrderableDBInstanceOptionsMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = OrderableDBInstanceOptionsMessage::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(OrderableDBInstanceOptionsMessageDeserializer::deserialize("DescribeOrderableDBInstanceOptionsResult", &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(DescribeOrderableDBInstanceOptionsError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.</p>"]
    fn describe_pending_maintenance_actions
        (&self,
         input: &DescribePendingMaintenanceActionsMessage)
         -> Result<PendingMaintenanceActionsMessage, DescribePendingMaintenanceActionsError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribePendingMaintenanceActions");
        params.put("Version", "2014-10-31");
        DescribePendingMaintenanceActionsMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = PendingMaintenanceActionsMessage::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result =
                        try!(PendingMaintenanceActionsMessageDeserializer::deserialize("DescribePendingMaintenanceActionsResult",
                                                                                       &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(DescribePendingMaintenanceActionsError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Returns information about reserved DB instances for this account, or about a specified reserved DB instance.</p>"]
    fn describe_reserved_db_instances
        (&self,
         input: &DescribeReservedDBInstancesMessage)
         -> Result<ReservedDBInstanceMessage, DescribeReservedDBInstancesError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeReservedDBInstances");
        params.put("Version", "2014-10-31");
        DescribeReservedDBInstancesMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = ReservedDBInstanceMessage::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(ReservedDBInstanceMessageDeserializer::deserialize("DescribeReservedDBInstancesResult",
                                                                                     &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(DescribeReservedDBInstancesError::from_body(String::from_utf8_lossy(&body)
                                                                    .as_ref()))
            }
        }
    }


    #[doc="<p>Lists available reserved DB instance offerings.</p>"]
    fn describe_reserved_db_instances_offerings
        (&self,
         input: &DescribeReservedDBInstancesOfferingsMessage)
         -> Result<ReservedDBInstancesOfferingMessage, DescribeReservedDBInstancesOfferingsError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeReservedDBInstancesOfferings");
        params.put("Version", "2014-10-31");
        DescribeReservedDBInstancesOfferingsMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = ReservedDBInstancesOfferingMessage::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(ReservedDBInstancesOfferingMessageDeserializer::deserialize("DescribeReservedDBInstancesOfferingsResult", &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(DescribeReservedDBInstancesOfferingsError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Returns a list of the source AWS regions where the current AWS Region can create a Read Replica or copy a DB snapshot from. This API action supports pagination.</p>"]
    fn describe_source_regions(&self,
                               input: &DescribeSourceRegionsMessage)
                               -> Result<SourceRegionMessage, DescribeSourceRegionsError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeSourceRegions");
        params.put("Version", "2014-10-31");
        DescribeSourceRegionsMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = SourceRegionMessage::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(SourceRegionMessageDeserializer::deserialize("DescribeSourceRegionsResult",
                                                                               &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(DescribeSourceRegionsError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Downloads all or a portion of the specified log file, up to 1 MB in size.</p>"]
    fn download_db_log_file_portion
        (&self,
         input: &DownloadDBLogFilePortionMessage)
         -> Result<DownloadDBLogFilePortionDetails, DownloadDBLogFilePortionError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DownloadDBLogFilePortion");
        params.put("Version", "2014-10-31");
        DownloadDBLogFilePortionMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = DownloadDBLogFilePortionDetails::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result =
                        try!(DownloadDBLogFilePortionDetailsDeserializer::deserialize("DownloadDBLogFilePortionResult",
                                                                                      &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(DownloadDBLogFilePortionError::from_body(String::from_utf8_lossy(&body)
                                                                 .as_ref()))
            }
        }
    }


    #[doc="<p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Aurora Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Aurora will automatically fail over to an Aurora Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p> <p>For more information on Amazon Aurora, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Aurora.html\">Aurora on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p>"]
    fn failover_db_cluster(&self,
                           input: &FailoverDBClusterMessage)
                           -> Result<FailoverDBClusterResult, FailoverDBClusterError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "FailoverDBCluster");
        params.put("Version", "2014-10-31");
        FailoverDBClusterMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = FailoverDBClusterResult::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(FailoverDBClusterResultDeserializer::deserialize("FailoverDBClusterResult",
                                                                                   &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(FailoverDBClusterError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Lists all tags on an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html\">Tagging Amazon RDS Resources</a>.</p>"]
    fn list_tags_for_resource(&self,
                              input: &ListTagsForResourceMessage)
                              -> Result<TagListMessage, ListTagsForResourceError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ListTagsForResource");
        params.put("Version", "2014-10-31");
        ListTagsForResourceMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = TagListMessage::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(TagListMessageDeserializer::deserialize("ListTagsForResourceResult",
                                                                          &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(ListTagsForResourceError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Modify a setting for an Amazon Aurora DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Aurora.html\">Aurora on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p>"]
    fn modify_db_cluster(&self,
                         input: &ModifyDBClusterMessage)
                         -> Result<ModifyDBClusterResult, ModifyDBClusterError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ModifyDBCluster");
        params.put("Version", "2014-10-31");
        ModifyDBClusterMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = ModifyDBClusterResult::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(ModifyDBClusterResultDeserializer::deserialize("ModifyDBClusterResult",
                                                                                 &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(ModifyDBClusterError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <p>For more information on Amazon Aurora, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Aurora.html\">Aurora on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href=\"https://console.aws.amazon.com/rds/\">Amazon RDS console</a> or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>"]
    fn modify_db_cluster_parameter_group
        (&self,
         input: &ModifyDBClusterParameterGroupMessage)
         -> Result<DBClusterParameterGroupNameMessage, ModifyDBClusterParameterGroupError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ModifyDBClusterParameterGroup");
        params.put("Version", "2014-10-31");
        ModifyDBClusterParameterGroupMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = DBClusterParameterGroupNameMessage::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(DBClusterParameterGroupNameMessageDeserializer::deserialize("ModifyDBClusterParameterGroupResult", &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(ModifyDBClusterParameterGroupError::from_body(String::from_utf8_lossy(&body)
                                                                      .as_ref()))
            }
        }
    }


    #[doc="<p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <a>DescribeDBClusterSnapshotAttributes</a> API action.</p>"]
    fn modify_db_cluster_snapshot_attribute
        (&self,
         input: &ModifyDBClusterSnapshotAttributeMessage)
         -> Result<ModifyDBClusterSnapshotAttributeResult, ModifyDBClusterSnapshotAttributeError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ModifyDBClusterSnapshotAttribute");
        params.put("Version", "2014-10-31");
        ModifyDBClusterSnapshotAttributeMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = ModifyDBClusterSnapshotAttributeResult::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(ModifyDBClusterSnapshotAttributeResultDeserializer::deserialize("ModifyDBClusterSnapshotAttributeResult", &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(ModifyDBClusterSnapshotAttributeError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request.</p>"]
    fn modify_db_instance(&self,
                          input: &ModifyDBInstanceMessage)
                          -> Result<ModifyDBInstanceResult, ModifyDBInstanceError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ModifyDBInstance");
        params.put("Version", "2014-10-31");
        ModifyDBInstanceMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = ModifyDBInstanceResult::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(ModifyDBInstanceResultDeserializer::deserialize("ModifyDBInstanceResult",
                                                                                  &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(ModifyDBInstanceError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p> Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href=\"https://console.aws.amazon.com/rds/\">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>"]
    fn modify_db_parameter_group
        (&self,
         input: &ModifyDBParameterGroupMessage)
         -> Result<DBParameterGroupNameMessage, ModifyDBParameterGroupError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ModifyDBParameterGroup");
        params.put("Version", "2014-10-31");
        ModifyDBParameterGroupMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = DBParameterGroupNameMessage::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(DBParameterGroupNameMessageDeserializer::deserialize("ModifyDBParameterGroupResult",
                                                                                       &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(ModifyDBParameterGroupError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Updates a manual DB snapshot, which can be encrypted or not encrypted, with a new engine version. You can update the engine version to either a new major or minor engine version. </p> <p>Amazon RDS supports upgrading a MySQL DB snapshot from MySQL 5.1 to MySQL 5.5.</p>"]
    fn modify_db_snapshot(&self,
                          input: &ModifyDBSnapshotMessage)
                          -> Result<ModifyDBSnapshotResult, ModifyDBSnapshotError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ModifyDBSnapshot");
        params.put("Version", "2014-10-31");
        ModifyDBSnapshotMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = ModifyDBSnapshotResult::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(ModifyDBSnapshotResultDeserializer::deserialize("ModifyDBSnapshotResult",
                                                                                  &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(ModifyDBSnapshotError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Adds an attribute and values to, or removes an attribute and values from, a manual DB snapshot.</p> <p>To share a manual DB snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB snapshot. Uses the value <code>all</code> to make the manual DB snapshot public, which means it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts. If the manual DB snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB snapshot, or whether a manual DB snapshot public or private, use the <a>DescribeDBSnapshotAttributes</a> API action.</p>"]
    fn modify_db_snapshot_attribute
        (&self,
         input: &ModifyDBSnapshotAttributeMessage)
         -> Result<ModifyDBSnapshotAttributeResult, ModifyDBSnapshotAttributeError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ModifyDBSnapshotAttribute");
        params.put("Version", "2014-10-31");
        ModifyDBSnapshotAttributeMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = ModifyDBSnapshotAttributeResult::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result =
                        try!(ModifyDBSnapshotAttributeResultDeserializer::deserialize("ModifyDBSnapshotAttributeResult",
                                                                                      &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(ModifyDBSnapshotAttributeError::from_body(String::from_utf8_lossy(&body)
                                                                  .as_ref()))
            }
        }
    }


    #[doc="<p>Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.</p>"]
    fn modify_db_subnet_group(&self,
                              input: &ModifyDBSubnetGroupMessage)
                              -> Result<ModifyDBSubnetGroupResult, ModifyDBSubnetGroupError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ModifyDBSubnetGroup");
        params.put("Version", "2014-10-31");
        ModifyDBSubnetGroupMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = ModifyDBSubnetGroupResult::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(ModifyDBSubnetGroupResultDeserializer::deserialize("ModifyDBSubnetGroupResult",
                                                                                     &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(ModifyDBSubnetGroupError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Modifies an existing RDS event notification subscription. Note that you cannot modify the source identifiers using this call; to change source identifiers for a subscription, use the <a>AddSourceIdentifierToSubscription</a> and <a>RemoveSourceIdentifierFromSubscription</a> calls.</p> <p>You can see a list of the event categories for a given SourceType in the <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html\">Events</a> topic in the Amazon RDS User Guide or by using the <b>DescribeEventCategories</b> action.</p>"]
    fn modify_event_subscription
        (&self,
         input: &ModifyEventSubscriptionMessage)
         -> Result<ModifyEventSubscriptionResult, ModifyEventSubscriptionError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ModifyEventSubscription");
        params.put("Version", "2014-10-31");
        ModifyEventSubscriptionMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = ModifyEventSubscriptionResult::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result =
                        try!(ModifyEventSubscriptionResultDeserializer::deserialize("ModifyEventSubscriptionResult",
                                                                                    &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(ModifyEventSubscriptionError::from_body(String::from_utf8_lossy(&body)
                                                                .as_ref()))
            }
        }
    }


    #[doc="<p>Modifies an existing option group.</p>"]
    fn modify_option_group(&self,
                           input: &ModifyOptionGroupMessage)
                           -> Result<ModifyOptionGroupResult, ModifyOptionGroupError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ModifyOptionGroup");
        params.put("Version", "2014-10-31");
        ModifyOptionGroupMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = ModifyOptionGroupResult::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(ModifyOptionGroupResultDeserializer::deserialize("ModifyOptionGroupResult",
                                                                                   &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(ModifyOptionGroupError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Promotes a Read Replica DB instance to a standalone DB instance.</p> <note> <p>We recommend that you enable automated backups on your Read Replica before promoting the Read Replica. This ensures that no backup is taken during the promotion process. Once the instance is promoted to a primary instance, backups are taken based on your backup settings.</p> </note>"]
    fn promote_read_replica(&self,
                            input: &PromoteReadReplicaMessage)
                            -> Result<PromoteReadReplicaResult, PromoteReadReplicaError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "PromoteReadReplica");
        params.put("Version", "2014-10-31");
        PromoteReadReplicaMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = PromoteReadReplicaResult::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(PromoteReadReplicaResultDeserializer::deserialize("PromoteReadReplicaResult",
                                                                                    &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(PromoteReadReplicaError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Promotes a Read Replica DB cluster to a standalone DB cluster.</p>"]
    fn promote_read_replica_db_cluster
        (&self,
         input: &PromoteReadReplicaDBClusterMessage)
         -> Result<PromoteReadReplicaDBClusterResult, PromoteReadReplicaDBClusterError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "PromoteReadReplicaDBCluster");
        params.put("Version", "2014-10-31");
        PromoteReadReplicaDBClusterMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = PromoteReadReplicaDBClusterResult::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(PromoteReadReplicaDBClusterResultDeserializer::deserialize("PromoteReadReplicaDBClusterResult", &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(PromoteReadReplicaDBClusterError::from_body(String::from_utf8_lossy(&body)
                                                                    .as_ref()))
            }
        }
    }


    #[doc="<p>Purchases a reserved DB instance offering.</p>"]
    fn purchase_reserved_db_instances_offering
        (&self,
         input: &PurchaseReservedDBInstancesOfferingMessage)
         -> Result<PurchaseReservedDBInstancesOfferingResult,
                   PurchaseReservedDBInstancesOfferingError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "PurchaseReservedDBInstancesOffering");
        params.put("Version", "2014-10-31");
        PurchaseReservedDBInstancesOfferingMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = PurchaseReservedDBInstancesOfferingResult::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(PurchaseReservedDBInstancesOfferingResultDeserializer::deserialize("PurchaseReservedDBInstancesOfferingResult", &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(PurchaseReservedDBInstancesOfferingError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Rebooting a DB instance restarts the database engine service. A reboot also applies to the DB instance any modifications to the associated DB parameter group that were pending. Rebooting a DB instance results in a momentary outage of the instance, during which the DB instance status is set to rebooting. If the RDS instance is configured for MultiAZ, it is possible that the reboot will be conducted through a failover. An Amazon RDS event is created when the reboot is completed.</p> <p>If your DB instance is deployed in multiple Availability Zones, you can force a failover from one AZ to the other during the reboot. You might force a failover to test the availability of your DB instance deployment or to restore operations to the original AZ after a failover occurs.</p> <p>The time required to reboot is a function of the specific database engine's crash recovery process. To improve the reboot time, we recommend that you reduce database activities as much as possible during the reboot process to reduce rollback activity for in-transit transactions.</p>"]
    fn reboot_db_instance(&self,
                          input: &RebootDBInstanceMessage)
                          -> Result<RebootDBInstanceResult, RebootDBInstanceError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "RebootDBInstance");
        params.put("Version", "2014-10-31");
        RebootDBInstanceMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = RebootDBInstanceResult::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(RebootDBInstanceResultDeserializer::deserialize("RebootDBInstanceResult",
                                                                                  &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(RebootDBInstanceError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Disassociates an Identity and Access Management (IAM) role from an Aurora DB cluster. For more information, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Aurora.Authorizing.AWSServices.html\">Authorizing Amazon Aurora to Access Other AWS Services On Your Behalf</a>.</p>"]
    fn remove_role_from_db_cluster(&self,
                                   input: &RemoveRoleFromDBClusterMessage)
                                   -> Result<(), RemoveRoleFromDBClusterError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "RemoveRoleFromDBCluster");
        params.put("Version", "2014-10-31");
        RemoveRoleFromDBClusterMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {
                let result = ();
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(RemoveRoleFromDBClusterError::from_body(String::from_utf8_lossy(&body)
                                                                .as_ref()))
            }
        }
    }


    #[doc="<p>Removes a source identifier from an existing RDS event notification subscription.</p>"]
fn remove_source_identifier_from_subscription(&self, input: &RemoveSourceIdentifierFromSubscriptionMessage) -> Result<RemoveSourceIdentifierFromSubscriptionResult, RemoveSourceIdentifierFromSubscriptionError>{
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "RemoveSourceIdentifierFromSubscription");
        params.put("Version", "2014-10-31");
        RemoveSourceIdentifierFromSubscriptionMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = RemoveSourceIdentifierFromSubscriptionResult::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(RemoveSourceIdentifierFromSubscriptionResultDeserializer::deserialize("RemoveSourceIdentifierFromSubscriptionResult", &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(RemoveSourceIdentifierFromSubscriptionError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Removes metadata tags from an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html\">Tagging Amazon RDS Resources</a>.</p>"]
    fn remove_tags_from_resource(&self,
                                 input: &RemoveTagsFromResourceMessage)
                                 -> Result<(), RemoveTagsFromResourceError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "RemoveTagsFromResource");
        params.put("Version", "2014-10-31");
        RemoveTagsFromResourceMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {
                let result = ();
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(RemoveTagsFromResourceError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters. </p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <a>RebootDBInstance</a> request. You must call <a>RebootDBInstance</a> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p> <p>For more information on Amazon Aurora, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Aurora.html\">Aurora on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p>"]
    fn reset_db_cluster_parameter_group
        (&self,
         input: &ResetDBClusterParameterGroupMessage)
         -> Result<DBClusterParameterGroupNameMessage, ResetDBClusterParameterGroupError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ResetDBClusterParameterGroup");
        params.put("Version", "2014-10-31");
        ResetDBClusterParameterGroupMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = DBClusterParameterGroupNameMessage::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(DBClusterParameterGroupNameMessageDeserializer::deserialize("ResetDBClusterParameterGroupResult", &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(ResetDBClusterParameterGroupError::from_body(String::from_utf8_lossy(&body)
                                                                     .as_ref()))
            }
        }
    }


    #[doc="<p> Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. </p>"]
    fn reset_db_parameter_group
        (&self,
         input: &ResetDBParameterGroupMessage)
         -> Result<DBParameterGroupNameMessage, ResetDBParameterGroupError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ResetDBParameterGroup");
        params.put("Version", "2014-10-31");
        ResetDBParameterGroupMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = DBParameterGroupNameMessage::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(DBParameterGroupNameMessageDeserializer::deserialize("ResetDBParameterGroupResult",
                                                                                       &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(ResetDBParameterGroupError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Creates an Amazon Aurora DB cluster from data stored in an Amazon S3 bucket. Amazon RDS must be authorized to access the Amazon S3 bucket and the data must be created using the Percona XtraBackup utility as described in <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Aurora.Migrate.MySQL.html#Aurora.Migrate.MySQL.S3\">Migrating Data from MySQL by Using an Amazon S3 Bucket</a>.</p>"]
    fn restore_db_cluster_from_s3
        (&self,
         input: &RestoreDBClusterFromS3Message)
         -> Result<RestoreDBClusterFromS3Result, RestoreDBClusterFromS3Error> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "RestoreDBClusterFromS3");
        params.put("Version", "2014-10-31");
        RestoreDBClusterFromS3MessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = RestoreDBClusterFromS3Result::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result =
                        try!(RestoreDBClusterFromS3ResultDeserializer::deserialize("RestoreDBClusterFromS3Result",
                                                                                   &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(RestoreDBClusterFromS3Error::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Creates a new DB cluster from a DB cluster snapshot. The target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.</p> <p>For more information on Amazon Aurora, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Aurora.html\">Aurora on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p>"]
    fn restore_db_cluster_from_snapshot
        (&self,
         input: &RestoreDBClusterFromSnapshotMessage)
         -> Result<RestoreDBClusterFromSnapshotResult, RestoreDBClusterFromSnapshotError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "RestoreDBClusterFromSnapshot");
        params.put("Version", "2014-10-31");
        RestoreDBClusterFromSnapshotMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = RestoreDBClusterFromSnapshotResult::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(RestoreDBClusterFromSnapshotResultDeserializer::deserialize("RestoreDBClusterFromSnapshotResult", &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(RestoreDBClusterFromSnapshotError::from_body(String::from_utf8_lossy(&body)
                                                                     .as_ref()))
            }
        }
    }


    #[doc="<p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group. </p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <a>CreateDBInstance</a> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note> <p>For more information on Amazon Aurora, see <a href=\"http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Aurora.html\">Aurora on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p>"]
    fn restore_db_cluster_to_point_in_time
        (&self,
         input: &RestoreDBClusterToPointInTimeMessage)
         -> Result<RestoreDBClusterToPointInTimeResult, RestoreDBClusterToPointInTimeError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "RestoreDBClusterToPointInTime");
        params.put("Version", "2014-10-31");
        RestoreDBClusterToPointInTimeMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = RestoreDBClusterToPointInTimeResult::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(RestoreDBClusterToPointInTimeResultDeserializer::deserialize("RestoreDBClusterToPointInTimeResult", &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(RestoreDBClusterToPointInTimeError::from_body(String::from_utf8_lossy(&body)
                                                                      .as_ref()))
            }
        }
    }


    #[doc="<p>Creates a new DB instance from a DB snapshot. The target database is created from the source database restore point with the most of original configuration with the default security group and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored AZ deployment and not a single-AZ deployment.</p> <p>If your intent is to replace your original DB instance with the new, restored DB instance, then rename your original DB instance before you call the RestoreDBInstanceFromDBSnapshot action. RDS does not allow two DB instances with the same name. Once you have renamed your original DB instance with a different identifier, then you can pass the original name of the DB instance as the DBInstanceIdentifier in the call to the RestoreDBInstanceFromDBSnapshot action. The result is that you will replace the original DB instance with the DB instance created from the snapshot.</p> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p>"]
    fn restore_db_instance_from_db_snapshot
        (&self,
         input: &RestoreDBInstanceFromDBSnapshotMessage)
         -> Result<RestoreDBInstanceFromDBSnapshotResult, RestoreDBInstanceFromDBSnapshotError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "RestoreDBInstanceFromDBSnapshot");
        params.put("Version", "2014-10-31");
        RestoreDBInstanceFromDBSnapshotMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = RestoreDBInstanceFromDBSnapshotResult::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(RestoreDBInstanceFromDBSnapshotResultDeserializer::deserialize("RestoreDBInstanceFromDBSnapshotResult", &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(RestoreDBInstanceFromDBSnapshotError::from_body(String::from_utf8_lossy(&body)
                                                                        .as_ref()))
            }
        }
    }


    #[doc="<p>Restores a DB instance to an arbitrary point in time. You can restore to any point in time before the time identified by the LatestRestorableTime property. You can restore to a point up to the number of days specified by the BackupRetentionPeriod property.</p> <p>The target database is created with most of the original configuration, but in a system-selected availability zone, with the default security group, the default subnet group, and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored deployment and not a single-AZ deployment.</p>"]
    fn restore_db_instance_to_point_in_time
        (&self,
         input: &RestoreDBInstanceToPointInTimeMessage)
         -> Result<RestoreDBInstanceToPointInTimeResult, RestoreDBInstanceToPointInTimeError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "RestoreDBInstanceToPointInTime");
        params.put("Version", "2014-10-31");
        RestoreDBInstanceToPointInTimeMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = RestoreDBInstanceToPointInTimeResult::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(RestoreDBInstanceToPointInTimeResultDeserializer::deserialize("RestoreDBInstanceToPointInTimeResult", &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(RestoreDBInstanceToPointInTimeError::from_body(String::from_utf8_lossy(&body)
                                                                       .as_ref()))
            }
        }
    }


    #[doc="<p>Revokes ingress from a DBSecurityGroup for previously authorized IP ranges or EC2 or VPC Security Groups. Required parameters for this API are one of CIDRIP, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId).</p>"]
    fn revoke_db_security_group_ingress
        (&self,
         input: &RevokeDBSecurityGroupIngressMessage)
         -> Result<RevokeDBSecurityGroupIngressResult, RevokeDBSecurityGroupIngressError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "RevokeDBSecurityGroupIngress");
        params.put("Version", "2014-10-31");
        RevokeDBSecurityGroupIngressMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = RevokeDBSecurityGroupIngressResult::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(RevokeDBSecurityGroupIngressResultDeserializer::deserialize("RevokeDBSecurityGroupIngressResult", &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(RevokeDBSecurityGroupIngressError::from_body(String::from_utf8_lossy(&body)
                                                                     .as_ref()))
            }
        }
    }


    #[doc="<p> Starts a DB instance that was stopped using the AWS console, the stop-db-instance AWS CLI command, or the StopDBInstance action. For more information, see Stopping and Starting a DB instance in the AWS RDS user guide. </p>"]
    fn start_db_instance(&self,
                         input: &StartDBInstanceMessage)
                         -> Result<StartDBInstanceResult, StartDBInstanceError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "StartDBInstance");
        params.put("Version", "2014-10-31");
        StartDBInstanceMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = StartDBInstanceResult::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(StartDBInstanceResultDeserializer::deserialize("StartDBInstanceResult",
                                                                                 &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(StartDBInstanceError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p> Stops a DB instance. When you stop a DB instance, Amazon RDS retains the DB instance's metadata, including its endpoint, DB parameter group, and option group membership. Amazon RDS also retains the transaction logs so you can do a point-in-time restore if necessary. For more information, see Stopping and Starting a DB instance in the AWS RDS user guide. </p>"]
    fn stop_db_instance(&self,
                        input: &StopDBInstanceMessage)
                        -> Result<StopDBInstanceResult, StopDBInstanceError> {
        let mut request = SignedRequest::new("POST", "rds", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "StopDBInstance");
        params.put("Version", "2014-10-31");
        StopDBInstanceMessageSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = StopDBInstanceResult::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(StopDBInstanceResultDeserializer::deserialize("StopDBInstanceResult",
                                                                                &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(StopDBInstanceError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }
}

#[cfg(test)]
mod protocol_tests {

    extern crate rusoto_mock;

    use super::*;
    use self::rusoto_mock::*;
    use rusoto_core::Region as rusoto_region;


    #[test]
    fn test_parse_error_rds_describe_db_instances() {
        let mock_response = MockResponseReader::read_response("test_resources/generated/error",
                                                              "rds-describe-db-instances.xml");
        let mock = MockRequestDispatcher::with_status(400).with_body(&mock_response);
        let client = RdsClient::new(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = DescribeDBInstancesMessage::default();
        let result = client.describe_db_instances(&request);
        assert!(!result.is_ok(), "parse error: {:?}", result);
    }

    #[test]
    fn test_parse_valid_rds_describe_db_engine_versions() {
        let mock_response = MockResponseReader::read_response("test_resources/generated/valid",
                                                              "rds-describe-db-engine-versions.xml");
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = RdsClient::new(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = DescribeDBEngineVersionsMessage::default();
        let result = client.describe_db_engine_versions(&request);
        assert!(result.is_ok(), "parse error: {:?}", result);
    }


    #[test]
    fn test_parse_valid_rds_describe_db_instances() {
        let mock_response = MockResponseReader::read_response("test_resources/generated/valid",
                                                              "rds-describe-db-instances.xml");
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = RdsClient::new(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = DescribeDBInstancesMessage::default();
        let result = client.describe_db_instances(&request);
        assert!(result.is_ok(), "parse error: {:?}", result);
    }


    #[test]
    fn test_parse_valid_rds_describe_db_parameter_groups() {
        let mock_response = MockResponseReader::read_response("test_resources/generated/valid",
                                                              "rds-describe-db-parameter-groups.xml");
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = RdsClient::new(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = DescribeDBParameterGroupsMessage::default();
        let result = client.describe_db_parameter_groups(&request);
        assert!(result.is_ok(), "parse error: {:?}", result);
    }


    #[test]
    fn test_parse_valid_rds_describe_db_security_groups() {
        let mock_response = MockResponseReader::read_response("test_resources/generated/valid",
                                                              "rds-describe-db-security-groups.xml");
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = RdsClient::new(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = DescribeDBSecurityGroupsMessage::default();
        let result = client.describe_db_security_groups(&request);
        assert!(result.is_ok(), "parse error: {:?}", result);
    }


    #[test]
    fn test_parse_valid_rds_describe_db_snapshots() {
        let mock_response = MockResponseReader::read_response("test_resources/generated/valid",
                                                              "rds-describe-db-snapshots.xml");
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = RdsClient::new(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = DescribeDBSnapshotsMessage::default();
        let result = client.describe_db_snapshots(&request);
        assert!(result.is_ok(), "parse error: {:?}", result);
    }


    #[test]
    fn test_parse_valid_rds_describe_db_subnet_groups() {
        let mock_response = MockResponseReader::read_response("test_resources/generated/valid",
                                                              "rds-describe-db-subnet-groups.xml");
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = RdsClient::new(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = DescribeDBSubnetGroupsMessage::default();
        let result = client.describe_db_subnet_groups(&request);
        assert!(result.is_ok(), "parse error: {:?}", result);
    }


    #[test]
    fn test_parse_valid_rds_describe_event_categories() {
        let mock_response = MockResponseReader::read_response("test_resources/generated/valid",
                                                              "rds-describe-event-categories.xml");
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = RdsClient::new(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = DescribeEventCategoriesMessage::default();
        let result = client.describe_event_categories(&request);
        assert!(result.is_ok(), "parse error: {:?}", result);
    }


    #[test]
    fn test_parse_valid_rds_describe_event_subscriptions() {
        let mock_response = MockResponseReader::read_response("test_resources/generated/valid",
                                                              "rds-describe-event-subscriptions.xml");
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = RdsClient::new(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = DescribeEventSubscriptionsMessage::default();
        let result = client.describe_event_subscriptions(&request);
        assert!(result.is_ok(), "parse error: {:?}", result);
    }


    #[test]
    fn test_parse_valid_rds_describe_events() {
        let mock_response = MockResponseReader::read_response("test_resources/generated/valid",
                                                              "rds-describe-events.xml");
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = RdsClient::new(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = DescribeEventsMessage::default();
        let result = client.describe_events(&request);
        assert!(result.is_ok(), "parse error: {:?}", result);
    }


    #[test]
    fn test_parse_valid_rds_describe_option_groups() {
        let mock_response = MockResponseReader::read_response("test_resources/generated/valid",
                                                              "rds-describe-option-groups.xml");
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = RdsClient::new(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = DescribeOptionGroupsMessage::default();
        let result = client.describe_option_groups(&request);
        assert!(result.is_ok(), "parse error: {:?}", result);
    }


    #[test]
    fn test_parse_valid_rds_describe_reserved_db_instances_offerings() {
        let mock_response = MockResponseReader::read_response("test_resources/generated/valid",
                                                              "rds-describe-reserved-db-instances-offerings.xml");
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = RdsClient::new(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = DescribeReservedDBInstancesOfferingsMessage::default();
        let result = client.describe_reserved_db_instances_offerings(&request);
        assert!(result.is_ok(), "parse error: {:?}", result);
    }


    #[test]
    fn test_parse_valid_rds_describe_reserved_db_instances() {
        let mock_response = MockResponseReader::read_response("test_resources/generated/valid",
                                                              "rds-describe-reserved-db-instances.xml");
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = RdsClient::new(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = DescribeReservedDBInstancesMessage::default();
        let result = client.describe_reserved_db_instances(&request);
        assert!(result.is_ok(), "parse error: {:?}", result);
    }
}
