
// =================================================================
//
//                           * WARNING *
//
//                    This file is generated!
//
//  Changes made to this file will be overwritten. If changes are
//  required to the generated code, the service_crategen project
//  must be updated to generate the changes.
//
// =================================================================

#[allow(warnings)]
use hyper::Client;
use hyper::status::StatusCode;
use rusoto_core::request::DispatchSignedRequest;
use rusoto_core::region;

use std::fmt;
use std::error::Error;
use std::io;
use std::io::Read;
use rusoto_core::request::HttpDispatchError;
use rusoto_core::credential::{CredentialsError, ProvideAwsCredentials};

use std::str::FromStr;
use xml::EventReader;
use xml::reader::ParserConfig;
use rusoto_core::param::{Params, ServiceParams};
use rusoto_core::signature::SignedRequest;
use xml::reader::XmlEvent;
use rusoto_core::xmlutil::{Next, Peek, XmlParseError, XmlResponse};
use rusoto_core::xmlutil::{characters, end_element, start_element, skip_tree, peek_at_name};
use rusoto_core::xmlerror::*;

enum DeserializerNext {
    Close,
    Skip,
    Element(String),
}
#[doc="<p>Contains information about an AWS access key.</p> <p> This data type is used as a response element in the <a>CreateAccessKey</a> and <a>ListAccessKeys</a> actions. </p> <note> <p>The <code>SecretAccessKey</code> value is returned only in response to <a>CreateAccessKey</a>. You can get a secret access key only when you first create an access key; you cannot recover the secret access key later. If you lose a secret access key, you must create a new access key.</p> </note>"]
#[derive(Default,Debug,Clone)]
pub struct AccessKey {
    #[doc="<p>The ID for this access key.</p>"]
    pub access_key_id: String,
    #[doc="<p>The date when the access key was created.</p>"]
    pub create_date: Option<String>,
    #[doc="<p>The secret key used to sign requests.</p>"]
    pub secret_access_key: String,
    #[doc="<p>The status of the access key. <code>Active</code> means the key is valid for API calls, while <code>Inactive</code> means it is not. </p>"]
    pub status: String,
    #[doc="<p>The name of the IAM user that the access key is associated with.</p>"]
    pub user_name: String,
}

struct AccessKeyDeserializer;
impl AccessKeyDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<AccessKey, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = AccessKey::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "AccessKeyId" => {
                            obj.access_key_id =
                                try!(AccessKeyIdTypeDeserializer::deserialize("AccessKeyId",
                                                                              stack));
                        }
                        "CreateDate" => {
                            obj.create_date = Some(try!(DateTypeDeserializer::deserialize("CreateDate",
                                                                                          stack)));
                        }
                        "SecretAccessKey" => {
                            obj.secret_access_key =
                                try!(AccessKeySecretTypeDeserializer::deserialize("SecretAccessKey",
                                                                                  stack));
                        }
                        "Status" => {
                            obj.status = try!(StatusTypeDeserializer::deserialize("Status", stack));
                        }
                        "UserName" => {
                            obj.user_name = try!(UserNameTypeDeserializer::deserialize("UserName",
                                                                                       stack));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct AccessKeyIdTypeDeserializer;
impl AccessKeyIdTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<String, XmlParseError> {
        try!(start_element(tag_name, stack));
        let obj = try!(characters(stack));
        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p>Contains information about the last time an AWS access key was used.</p> <p>This data type is used as a response element in the <a>GetAccessKeyLastUsed</a> action.</p>"]
#[derive(Default,Debug,Clone)]
pub struct AccessKeyLastUsed {
    #[doc="<p>The date and time, in <a href=\"http://www.iso.org/iso/iso8601\">ISO 8601 date-time format</a>, when the access key was most recently used. This field is null when:</p> <ul> <li> <p>The user does not have an access key.</p> </li> <li> <p>An access key exists but has never been used, at least not since IAM started tracking this information on April 22nd, 2015.</p> </li> <li> <p>There is no sign-in data associated with the user</p> </li> </ul>"]
    pub last_used_date: String,
    #[doc="<p>The AWS region where this access key was most recently used. This field is displays \"N/A\" when:</p> <ul> <li> <p>The user does not have an access key.</p> </li> <li> <p>An access key exists but has never been used, at least not since IAM started tracking this information on April 22nd, 2015.</p> </li> <li> <p>There is no sign-in data associated with the user</p> </li> </ul> <p>For more information about AWS regions, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html\">Regions and Endpoints</a> in the Amazon Web Services General Reference.</p>"]
    pub region: String,
    #[doc="<p>The name of the AWS service with which this access key was most recently used. This field displays \"N/A\" when:</p> <ul> <li> <p>The user does not have an access key.</p> </li> <li> <p>An access key exists but has never been used, at least not since IAM started tracking this information on April 22nd, 2015.</p> </li> <li> <p>There is no sign-in data associated with the user</p> </li> </ul>"]
    pub service_name: String,
}

struct AccessKeyLastUsedDeserializer;
impl AccessKeyLastUsedDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<AccessKeyLastUsed, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = AccessKeyLastUsed::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "LastUsedDate" => {
                            obj.last_used_date = try!(DateTypeDeserializer::deserialize("LastUsedDate",
                                                                                        stack));
                        }
                        "Region" => {
                            obj.region = try!(StringTypeDeserializer::deserialize("Region", stack));
                        }
                        "ServiceName" => {
                            obj.service_name = try!(StringTypeDeserializer::deserialize("ServiceName",
                                                                                        stack));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p>Contains information about an AWS access key, without its secret key.</p> <p>This data type is used as a response element in the <a>ListAccessKeys</a> action.</p>"]
#[derive(Default,Debug,Clone)]
pub struct AccessKeyMetadata {
    #[doc="<p>The ID for this access key.</p>"]
    pub access_key_id: Option<String>,
    #[doc="<p>The date when the access key was created.</p>"]
    pub create_date: Option<String>,
    #[doc="<p>The status of the access key. <code>Active</code> means the key is valid for API calls; <code>Inactive</code> means it is not.</p>"]
    pub status: Option<String>,
    #[doc="<p>The name of the IAM user that the key is associated with.</p>"]
    pub user_name: Option<String>,
}

struct AccessKeyMetadataDeserializer;
impl AccessKeyMetadataDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<AccessKeyMetadata, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = AccessKeyMetadata::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "AccessKeyId" => {
                            obj.access_key_id =
                                Some(try!(AccessKeyIdTypeDeserializer::deserialize("AccessKeyId",
                                                                                   stack)));
                        }
                        "CreateDate" => {
                            obj.create_date = Some(try!(DateTypeDeserializer::deserialize("CreateDate",
                                                                                          stack)));
                        }
                        "Status" => {
                            obj.status = Some(try!(StatusTypeDeserializer::deserialize("Status",
                                                                                       stack)));
                        }
                        "UserName" => {
                            obj.user_name =
                                Some(try!(UserNameTypeDeserializer::deserialize("UserName",
                                                                                stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct AccessKeyMetadataListTypeDeserializer;
impl AccessKeyMetadataListTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<AccessKeyMetadata>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "member" {
                        obj.push(try!(AccessKeyMetadataDeserializer::deserialize("member", stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
struct AccessKeySecretTypeDeserializer;
impl AccessKeySecretTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<String, XmlParseError> {
        try!(start_element(tag_name, stack));
        let obj = try!(characters(stack));
        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct AccountAliasListTypeDeserializer;
impl AccountAliasListTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<String>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "member" {
                        obj.push(try!(AccountAliasTypeDeserializer::deserialize("member", stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
struct AccountAliasTypeDeserializer;
impl AccountAliasTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<String, XmlParseError> {
        try!(start_element(tag_name, stack));
        let obj = try!(characters(stack));
        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}

/// Serialize `ActionNameListType` contents to a `SignedRequest`.
struct ActionNameListTypeSerializer;
impl ActionNameListTypeSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.member.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

struct ActionNameTypeDeserializer;
impl ActionNameTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<String, XmlParseError> {
        try!(start_element(tag_name, stack));
        let obj = try!(characters(stack));
        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct AddClientIDToOpenIDConnectProviderRequest {
    #[doc="<p>The client ID (also known as audience) to add to the IAM OpenID Connect provider resource.</p>"]
    pub client_id: String,
    #[doc="<p>The Amazon Resource Name (ARN) of the IAM OpenID Connect (OIDC) provider resource to add the client ID to. You can get a list of OIDC provider ARNs by using the <a>ListOpenIDConnectProviders</a> action.</p>"]
    pub open_id_connect_provider_arn: String,
}


/// Serialize `AddClientIDToOpenIDConnectProviderRequest` contents to a `SignedRequest`.
struct AddClientIDToOpenIDConnectProviderRequestSerializer;
impl AddClientIDToOpenIDConnectProviderRequestSerializer {
    fn serialize(params: &mut Params,
                 name: &str,
                 obj: &AddClientIDToOpenIDConnectProviderRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "ClientID"),
                   &obj.client_id.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "OpenIDConnectProviderArn"),
                   &obj.open_id_connect_provider_arn.replace("+", "%2B"));

    }
}

#[derive(Default,Debug,Clone)]
pub struct AddRoleToInstanceProfileRequest {
    #[doc="<p>The name of the instance profile to update.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>"]
    pub instance_profile_name: String,
    #[doc="<p>The name of the role to add.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>"]
    pub role_name: String,
}


/// Serialize `AddRoleToInstanceProfileRequest` contents to a `SignedRequest`.
struct AddRoleToInstanceProfileRequestSerializer;
impl AddRoleToInstanceProfileRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &AddRoleToInstanceProfileRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "InstanceProfileName"),
                   &obj.instance_profile_name.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "RoleName"),
                   &obj.role_name.replace("+", "%2B"));

    }
}

#[derive(Default,Debug,Clone)]
pub struct AddUserToGroupRequest {
    #[doc="<p>The name of the group to update.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>"]
    pub group_name: String,
    #[doc="<p>The name of the user to add.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>"]
    pub user_name: String,
}


/// Serialize `AddUserToGroupRequest` contents to a `SignedRequest`.
struct AddUserToGroupRequestSerializer;
impl AddUserToGroupRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &AddUserToGroupRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "GroupName"),
                   &obj.group_name.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "UserName"),
                   &obj.user_name.replace("+", "%2B"));

    }
}

struct ArnTypeDeserializer;
impl ArnTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<String, XmlParseError> {
        try!(start_element(tag_name, stack));
        let obj = try!(characters(stack));
        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct AttachGroupPolicyRequest {
    #[doc="<p>The name (friendly name, not ARN) of the group to attach the policy to.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>"]
    pub group_name: String,
    #[doc="<p>The Amazon Resource Name (ARN) of the IAM policy you want to attach.</p> <p>For more information about ARNs, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>"]
    pub policy_arn: String,
}


/// Serialize `AttachGroupPolicyRequest` contents to a `SignedRequest`.
struct AttachGroupPolicyRequestSerializer;
impl AttachGroupPolicyRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &AttachGroupPolicyRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "GroupName"),
                   &obj.group_name.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "PolicyArn"),
                   &obj.policy_arn.replace("+", "%2B"));

    }
}

#[derive(Default,Debug,Clone)]
pub struct AttachRolePolicyRequest {
    #[doc="<p>The Amazon Resource Name (ARN) of the IAM policy you want to attach.</p> <p>For more information about ARNs, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>"]
    pub policy_arn: String,
    #[doc="<p>The name (friendly name, not ARN) of the role to attach the policy to.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>"]
    pub role_name: String,
}


/// Serialize `AttachRolePolicyRequest` contents to a `SignedRequest`.
struct AttachRolePolicyRequestSerializer;
impl AttachRolePolicyRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &AttachRolePolicyRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "PolicyArn"),
                   &obj.policy_arn.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "RoleName"),
                   &obj.role_name.replace("+", "%2B"));

    }
}

#[derive(Default,Debug,Clone)]
pub struct AttachUserPolicyRequest {
    #[doc="<p>The Amazon Resource Name (ARN) of the IAM policy you want to attach.</p> <p>For more information about ARNs, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>"]
    pub policy_arn: String,
    #[doc="<p>The name (friendly name, not ARN) of the IAM user to attach the policy to.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>"]
    pub user_name: String,
}


/// Serialize `AttachUserPolicyRequest` contents to a `SignedRequest`.
struct AttachUserPolicyRequestSerializer;
impl AttachUserPolicyRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &AttachUserPolicyRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "PolicyArn"),
                   &obj.policy_arn.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "UserName"),
                   &obj.user_name.replace("+", "%2B"));

    }
}

struct AttachedPoliciesListTypeDeserializer;
impl AttachedPoliciesListTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<AttachedPolicy>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "member" {
                        obj.push(try!(AttachedPolicyDeserializer::deserialize("member", stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
#[doc="<p>Contains information about an attached policy.</p> <p>An attached policy is a managed policy that has been attached to a user, group, or role. This data type is used as a response element in the <a>ListAttachedGroupPolicies</a>, <a>ListAttachedRolePolicies</a>, <a>ListAttachedUserPolicies</a>, and <a>GetAccountAuthorizationDetails</a> actions. </p> <p>For more information about managed policies, refer to <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html\">Managed Policies and Inline Policies</a> in the <i>Using IAM</i> guide. </p>"]
#[derive(Default,Debug,Clone)]
pub struct AttachedPolicy {
    pub policy_arn: Option<String>,
    #[doc="<p>The friendly name of the attached policy.</p>"]
    pub policy_name: Option<String>,
}

struct AttachedPolicyDeserializer;
impl AttachedPolicyDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<AttachedPolicy, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = AttachedPolicy::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "PolicyArn" => {
                            obj.policy_arn = Some(try!(ArnTypeDeserializer::deserialize("PolicyArn",
                                                                                        stack)));
                        }
                        "PolicyName" => {
                            obj.policy_name =
                                Some(try!(PolicyNameTypeDeserializer::deserialize("PolicyName",
                                                                                  stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct AttachmentCountTypeDeserializer;
impl AttachmentCountTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<i64, XmlParseError> {
        try!(start_element(tag_name, stack));
        let obj = i64::from_str(try!(characters(stack)).as_ref()).unwrap();
        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct BooleanObjectTypeDeserializer;
impl BooleanObjectTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<bool, XmlParseError> {
        try!(start_element(tag_name, stack));
        let obj = bool::from_str(try!(characters(stack)).as_ref()).unwrap();
        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct BooleanTypeDeserializer;
impl BooleanTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<bool, XmlParseError> {
        try!(start_element(tag_name, stack));
        let obj = bool::from_str(try!(characters(stack)).as_ref()).unwrap();
        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct BootstrapDatumDeserializer;
impl BootstrapDatumDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<u8>, XmlParseError> {
        try!(start_element(tag_name, stack));
        let obj = try!(characters(stack)).into_bytes();
        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct CertificateBodyTypeDeserializer;
impl CertificateBodyTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<String, XmlParseError> {
        try!(start_element(tag_name, stack));
        let obj = try!(characters(stack));
        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct CertificateChainTypeDeserializer;
impl CertificateChainTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<String, XmlParseError> {
        try!(start_element(tag_name, stack));
        let obj = try!(characters(stack));
        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct CertificateIdTypeDeserializer;
impl CertificateIdTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<String, XmlParseError> {
        try!(start_element(tag_name, stack));
        let obj = try!(characters(stack));
        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct CertificateListTypeDeserializer;
impl CertificateListTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<SigningCertificate>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "member" {
                        obj.push(try!(SigningCertificateDeserializer::deserialize("member",
                                                                                  stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct ChangePasswordRequest {
    #[doc="<p>The new password. The new password must conform to the AWS account's password policy, if one exists.</p> <p>The <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a> used to validate this parameter is a string of characters consisting of almost any printable ASCII character from the space (\\u0020) through the end of the ASCII character range (\\u00FF). You can also include the tab (\\u0009), line feed (\\u000A), and carriage return (\\u000D) characters. Although any of these characters are valid in a password, note that many tools, such as the AWS Management Console, might restrict the ability to enter certain characters because they have special meaning within that tool.</p>"]
    pub new_password: String,
    #[doc="<p>The IAM user's current password.</p>"]
    pub old_password: String,
}


/// Serialize `ChangePasswordRequest` contents to a `SignedRequest`.
struct ChangePasswordRequestSerializer;
impl ChangePasswordRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ChangePasswordRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "NewPassword"),
                   &obj.new_password.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "OldPassword"),
                   &obj.old_password.replace("+", "%2B"));

    }
}

struct ClientIDListTypeDeserializer;
impl ClientIDListTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<String>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "member" {
                        obj.push(try!(ClientIDTypeDeserializer::deserialize("member", stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}

/// Serialize `ClientIDListType` contents to a `SignedRequest`.
struct ClientIDListTypeSerializer;
impl ClientIDListTypeSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.member.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

struct ClientIDTypeDeserializer;
impl ClientIDTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<String, XmlParseError> {
        try!(start_element(tag_name, stack));
        let obj = try!(characters(stack));
        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct ColumnNumberDeserializer;
impl ColumnNumberDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<i64, XmlParseError> {
        try!(start_element(tag_name, stack));
        let obj = i64::from_str(try!(characters(stack)).as_ref()).unwrap();
        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p>Contains information about a condition context key. It includes the name of the key and specifies the value (or values, if the context key supports multiple values) to use in the simulation. This information is used when evaluating the <code>Condition</code> elements of the input policies.</p> <p>This data type is used as an input parameter to <code> <a>SimulateCustomPolicy</a> </code> and <code> <a>SimulateCustomPolicy</a> </code>.</p>"]
#[derive(Default,Debug,Clone)]
pub struct ContextEntry {
    #[doc="<p>The full name of a condition context key, including the service prefix. For example, <code>aws:SourceIp</code> or <code>s3:VersionId</code>.</p>"]
    pub context_key_name: Option<String>,
    #[doc="<p>The data type of the value (or values) specified in the <code>ContextKeyValues</code> parameter.</p>"]
    pub context_key_type: Option<String>,
    #[doc="<p>The value (or values, if the condition context key supports multiple values) to provide to the simulation for use when the key is referenced by a <code>Condition</code> element in an input policy.</p>"]
    pub context_key_values: Option<Vec<String>>,
}


/// Serialize `ContextEntry` contents to a `SignedRequest`.
struct ContextEntrySerializer;
impl ContextEntrySerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ContextEntry) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.context_key_name {
            params.put(&format!("{}{}", prefix, "ContextKeyName"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.context_key_type {
            params.put(&format!("{}{}", prefix, "ContextKeyType"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.context_key_values {
            ContextKeyValueListTypeSerializer::serialize(params,
                                                         &format!("{}{}",
                                                                 prefix,
                                                                 "ContextKeyValues"),
                                                         field_value);
        }

    }
}


/// Serialize `ContextEntryListType` contents to a `SignedRequest`.
struct ContextEntryListTypeSerializer;
impl ContextEntryListTypeSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<ContextEntry>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.member.{}", name, index + 1);
            ContextEntrySerializer::serialize(params, &key, obj);
        }
    }
}

struct ContextKeyNameTypeDeserializer;
impl ContextKeyNameTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<String, XmlParseError> {
        try!(start_element(tag_name, stack));
        let obj = try!(characters(stack));
        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct ContextKeyNamesResultListTypeDeserializer;
impl ContextKeyNamesResultListTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<String>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "member" {
                        obj.push(try!(ContextKeyNameTypeDeserializer::deserialize("member",
                                                                                  stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}

/// Serialize `ContextKeyValueListType` contents to a `SignedRequest`.
struct ContextKeyValueListTypeSerializer;
impl ContextKeyValueListTypeSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.member.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

#[derive(Default,Debug,Clone)]
pub struct CreateAccessKeyRequest {
    #[doc="<p>The name of the IAM user that the new key will belong to.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>"]
    pub user_name: Option<String>,
}


/// Serialize `CreateAccessKeyRequest` contents to a `SignedRequest`.
struct CreateAccessKeyRequestSerializer;
impl CreateAccessKeyRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateAccessKeyRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.user_name {
            params.put(&format!("{}{}", prefix, "UserName"),
                       &field_value.replace("+", "%2B"));
        }

    }
}

#[doc="<p>Contains the response to a successful <a>CreateAccessKey</a> request. </p>"]
#[derive(Default,Debug,Clone)]
pub struct CreateAccessKeyResponse {
    #[doc="<p>A structure with details about the access key.</p>"]
    pub access_key: AccessKey,
}

struct CreateAccessKeyResponseDeserializer;
impl CreateAccessKeyResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<CreateAccessKeyResponse, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = CreateAccessKeyResponse::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "AccessKey" => {
                            obj.access_key = try!(AccessKeyDeserializer::deserialize("AccessKey",
                                                                                     stack));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct CreateAccountAliasRequest {
    #[doc="<p>The account alias to create.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.</p>"]
    pub account_alias: String,
}


/// Serialize `CreateAccountAliasRequest` contents to a `SignedRequest`.
struct CreateAccountAliasRequestSerializer;
impl CreateAccountAliasRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateAccountAliasRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "AccountAlias"),
                   &obj.account_alias.replace("+", "%2B"));

    }
}

#[derive(Default,Debug,Clone)]
pub struct CreateGroupRequest {
    #[doc="<p>The name of the group to create. Do not include the path in this value.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-. The group name must be unique within the account. Group names are not distinguished by case. For example, you cannot create groups named both \"ADMINS\" and \"admins\".</p>"]
    pub group_name: String,
    #[doc="<p> The path to the group. For more information about paths, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html\">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This paramater allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes, containing any ASCII character from the ! (\\u0021) thru the DEL character (\\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>"]
    pub path: Option<String>,
}


/// Serialize `CreateGroupRequest` contents to a `SignedRequest`.
struct CreateGroupRequestSerializer;
impl CreateGroupRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateGroupRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "GroupName"),
                   &obj.group_name.replace("+", "%2B"));
        if let Some(ref field_value) = obj.path {
            params.put(&format!("{}{}", prefix, "Path"),
                       &field_value.replace("+", "%2B"));
        }

    }
}

#[doc="<p>Contains the response to a successful <a>CreateGroup</a> request. </p>"]
#[derive(Default,Debug,Clone)]
pub struct CreateGroupResponse {
    #[doc="<p>A structure containing details about the new group.</p>"]
    pub group: Group,
}

struct CreateGroupResponseDeserializer;
impl CreateGroupResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<CreateGroupResponse, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = CreateGroupResponse::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "Group" => {
                            obj.group = try!(GroupDeserializer::deserialize("Group", stack));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct CreateInstanceProfileRequest {
    #[doc="<p>The name of the instance profile to create.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>"]
    pub instance_profile_name: String,
    #[doc="<p> The path to the instance profile. For more information about paths, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html\">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This paramater allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes, containing any ASCII character from the ! (\\u0021) thru the DEL character (\\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>"]
    pub path: Option<String>,
}


/// Serialize `CreateInstanceProfileRequest` contents to a `SignedRequest`.
struct CreateInstanceProfileRequestSerializer;
impl CreateInstanceProfileRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateInstanceProfileRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "InstanceProfileName"),
                   &obj.instance_profile_name.replace("+", "%2B"));
        if let Some(ref field_value) = obj.path {
            params.put(&format!("{}{}", prefix, "Path"),
                       &field_value.replace("+", "%2B"));
        }

    }
}

#[doc="<p>Contains the response to a successful <a>CreateInstanceProfile</a> request. </p>"]
#[derive(Default,Debug,Clone)]
pub struct CreateInstanceProfileResponse {
    #[doc="<p>A structure containing details about the new instance profile.</p>"]
    pub instance_profile: InstanceProfile,
}

struct CreateInstanceProfileResponseDeserializer;
impl CreateInstanceProfileResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<CreateInstanceProfileResponse, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = CreateInstanceProfileResponse::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "InstanceProfile" => {
                            obj.instance_profile =
                                try!(InstanceProfileDeserializer::deserialize("InstanceProfile",
                                                                              stack));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct CreateLoginProfileRequest {
    #[doc="<p>The new password for the user.</p> <p>The <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a> used to validate this parameter is a string of characters consisting of almost any printable ASCII character from the space (\\u0020) through the end of the ASCII character range (\\u00FF). You can also include the tab (\\u0009), line feed (\\u000A), and carriage return (\\u000D) characters. Although any of these characters are valid in a password, note that many tools, such as the AWS Management Console, might restrict the ability to enter certain characters because they have special meaning within that tool.</p>"]
    pub password: String,
    #[doc="<p>Specifies whether the user is required to set a new password on next sign-in.</p>"]
    pub password_reset_required: Option<bool>,
    #[doc="<p>The name of the IAM user to create a password for. The user must already exist.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>"]
    pub user_name: String,
}


/// Serialize `CreateLoginProfileRequest` contents to a `SignedRequest`.
struct CreateLoginProfileRequestSerializer;
impl CreateLoginProfileRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateLoginProfileRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "Password"),
                   &obj.password.replace("+", "%2B"));
        if let Some(ref field_value) = obj.password_reset_required {
            params.put(&format!("{}{}", prefix, "PasswordResetRequired"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        params.put(&format!("{}{}", prefix, "UserName"),
                   &obj.user_name.replace("+", "%2B"));

    }
}

#[doc="<p>Contains the response to a successful <a>CreateLoginProfile</a> request. </p>"]
#[derive(Default,Debug,Clone)]
pub struct CreateLoginProfileResponse {
    #[doc="<p>A structure containing the user name and password create date.</p>"]
    pub login_profile: LoginProfile,
}

struct CreateLoginProfileResponseDeserializer;
impl CreateLoginProfileResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<CreateLoginProfileResponse, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = CreateLoginProfileResponse::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "LoginProfile" => {
                            obj.login_profile = try!(LoginProfileDeserializer::deserialize("LoginProfile",
                                                                                           stack));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct CreateOpenIDConnectProviderRequest {
    #[doc="<p>A list of client IDs (also known as audiences). When a mobile or web app registers with an OpenID Connect provider, they establish a value that identifies the application. (This is the value that's sent as the <code>client_id</code> parameter on OAuth requests.)</p> <p>You can register multiple client IDs with the same provider. For example, you might have multiple applications that use the same OIDC provider. You cannot register more than 100 client IDs with a single IAM OIDC provider.</p> <p>There is no defined format for a client ID. The <code>CreateOpenIDConnectProviderRequest</code> action accepts client IDs up to 255 characters long.</p>"]
    pub client_id_list: Option<Vec<String>>,
    #[doc="<p>A list of server certificate thumbprints for the OpenID Connect (OIDC) identity provider's server certificate(s). Typically this list includes only one entry. However, IAM lets you have up to five thumbprints for an OIDC provider. This lets you maintain multiple thumbprints if the identity provider is rotating certificates.</p> <p>The server certificate thumbprint is the hex-encoded SHA-1 hash value of the X.509 certificate used by the domain where the OpenID Connect provider makes its keys available. It is always a 40-character string.</p> <p>You must provide at least one thumbprint when creating an IAM OIDC provider. For example, if the OIDC provider is <code>server.example.com</code> and the provider stores its keys at \"https://keys.server.example.com/openid-connect\", the thumbprint string would be the hex-encoded SHA-1 hash value of the certificate used by https://keys.server.example.com.</p> <p>For more information about obtaining the OIDC provider's thumbprint, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/identity-providers-oidc-obtain-thumbprint.html\">Obtaining the Thumbprint for an OpenID Connect Provider</a> in the <i>IAM User Guide</i>.</p>"]
    pub thumbprint_list: Vec<String>,
    #[doc="<p>The URL of the identity provider. The URL must begin with \"https://\" and should correspond to the <code>iss</code> claim in the provider's OpenID Connect ID tokens. Per the OIDC standard, path components are allowed but query parameters are not. Typically the URL consists of only a host name, like \"https://server.example.org\" or \"https://example.com\".</p> <p>You cannot register the same provider multiple times in a single AWS account. If you try to submit a URL that has already been used for an OpenID Connect provider in the AWS account, you will get an error.</p>"]
    pub url: String,
}


/// Serialize `CreateOpenIDConnectProviderRequest` contents to a `SignedRequest`.
struct CreateOpenIDConnectProviderRequestSerializer;
impl CreateOpenIDConnectProviderRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateOpenIDConnectProviderRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.client_id_list {
            ClientIDListTypeSerializer::serialize(params,
                                                  &format!("{}{}", prefix, "ClientIDList"),
                                                  field_value);
        }
        ThumbprintListTypeSerializer::serialize(params,
                                                &format!("{}{}", prefix, "ThumbprintList"),
                                                &obj.thumbprint_list);
        params.put(&format!("{}{}", prefix, "Url"),
                   &obj.url.replace("+", "%2B"));

    }
}

#[doc="<p>Contains the response to a successful <a>CreateOpenIDConnectProvider</a> request. </p>"]
#[derive(Default,Debug,Clone)]
pub struct CreateOpenIDConnectProviderResponse {
    #[doc="<p>The Amazon Resource Name (ARN) of the new IAM OpenID Connect provider that is created. For more information, see <a>OpenIDConnectProviderListEntry</a>. </p>"]
    pub open_id_connect_provider_arn: Option<String>,
}

struct CreateOpenIDConnectProviderResponseDeserializer;
impl CreateOpenIDConnectProviderResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>
        (tag_name: &str,
         stack: &mut T)
         -> Result<CreateOpenIDConnectProviderResponse, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = CreateOpenIDConnectProviderResponse::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "OpenIDConnectProviderArn" => {
                            obj.open_id_connect_provider_arn =
                                Some(try!(ArnTypeDeserializer::deserialize("OpenIDConnectProviderArn",
                                                                           stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct CreatePolicyRequest {
    #[doc="<p>A friendly description of the policy.</p> <p>Typically used to store information about the permissions defined in the policy. For example, \"Grants access to production DynamoDB tables.\"</p> <p>The policy description is immutable. After a value is assigned, it cannot be changed.</p>"]
    pub description: Option<String>,
    #[doc="<p>The path for the policy.</p> <p>For more information about paths, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html\">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This paramater allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes, containing any ASCII character from the ! (\\u0021) thru the DEL character (\\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>"]
    pub path: Option<String>,
    #[doc="<p>The JSON policy document that you want to use as the content for the new policy.</p> <p>The <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a> used to validate this parameter is a string of characters consisting of any printable ASCII character ranging from the space character (\\u0020) through end of the ASCII character range as well as the printable characters in the Basic Latin and Latin-1 Supplement character set (through \\u00FF). It also includes the special characters tab (\\u0009), line feed (\\u000A), and carriage return (\\u000D).</p>"]
    pub policy_document: String,
    #[doc="<p>The friendly name of the policy.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>"]
    pub policy_name: String,
}


/// Serialize `CreatePolicyRequest` contents to a `SignedRequest`.
struct CreatePolicyRequestSerializer;
impl CreatePolicyRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreatePolicyRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.description {
            params.put(&format!("{}{}", prefix, "Description"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.path {
            params.put(&format!("{}{}", prefix, "Path"),
                       &field_value.replace("+", "%2B"));
        }
        params.put(&format!("{}{}", prefix, "PolicyDocument"),
                   &obj.policy_document.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "PolicyName"),
                   &obj.policy_name.replace("+", "%2B"));

    }
}

#[doc="<p>Contains the response to a successful <a>CreatePolicy</a> request. </p>"]
#[derive(Default,Debug,Clone)]
pub struct CreatePolicyResponse {
    #[doc="<p>A structure containing details about the new policy.</p>"]
    pub policy: Option<Policy>,
}

struct CreatePolicyResponseDeserializer;
impl CreatePolicyResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<CreatePolicyResponse, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = CreatePolicyResponse::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "Policy" => {
                            obj.policy = Some(try!(PolicyDeserializer::deserialize("Policy",
                                                                                   stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct CreatePolicyVersionRequest {
    #[doc="<p>The Amazon Resource Name (ARN) of the IAM policy to which you want to add a new version.</p> <p>For more information about ARNs, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>"]
    pub policy_arn: String,
    #[doc="<p>The JSON policy document that you want to use as the content for this new version of the policy.</p> <p>The <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a> used to validate this parameter is a string of characters consisting of any printable ASCII character ranging from the space character (\\u0020) through end of the ASCII character range as well as the printable characters in the Basic Latin and Latin-1 Supplement character set (through \\u00FF). It also includes the special characters tab (\\u0009), line feed (\\u000A), and carriage return (\\u000D).</p>"]
    pub policy_document: String,
    #[doc="<p>Specifies whether to set this version as the policy's default version.</p> <p>When this parameter is <code>true</code>, the new policy version becomes the operative version; that is, the version that is in effect for the IAM users, groups, and roles that the policy is attached to.</p> <p>For more information about managed policy versions, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html\">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>"]
    pub set_as_default: Option<bool>,
}


/// Serialize `CreatePolicyVersionRequest` contents to a `SignedRequest`.
struct CreatePolicyVersionRequestSerializer;
impl CreatePolicyVersionRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreatePolicyVersionRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "PolicyArn"),
                   &obj.policy_arn.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "PolicyDocument"),
                   &obj.policy_document.replace("+", "%2B"));
        if let Some(ref field_value) = obj.set_as_default {
            params.put(&format!("{}{}", prefix, "SetAsDefault"),
                       &field_value.to_string().replace("+", "%2B"));
        }

    }
}

#[doc="<p>Contains the response to a successful <a>CreatePolicyVersion</a> request. </p>"]
#[derive(Default,Debug,Clone)]
pub struct CreatePolicyVersionResponse {
    #[doc="<p>A structure containing details about the new policy version.</p>"]
    pub policy_version: Option<PolicyVersion>,
}

struct CreatePolicyVersionResponseDeserializer;
impl CreatePolicyVersionResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<CreatePolicyVersionResponse, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = CreatePolicyVersionResponse::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "PolicyVersion" => {
                            obj.policy_version =
                                Some(try!(PolicyVersionDeserializer::deserialize("PolicyVersion",
                                                                                 stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct CreateRoleRequest {
    #[doc="<p>The trust relationship policy document that grants an entity permission to assume the role.</p> <p>The <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a> used to validate this parameter is a string of characters consisting of any printable ASCII character ranging from the space character (\\u0020) through end of the ASCII character range as well as the printable characters in the Basic Latin and Latin-1 Supplement character set (through \\u00FF). It also includes the special characters tab (\\u0009), line feed (\\u000A), and carriage return (\\u000D).</p>"]
    pub assume_role_policy_document: String,
    #[doc="<p>A customer-provided description of the role.</p>"]
    pub description: Option<String>,
    #[doc="<p> The path to the role. For more information about paths, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html\">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This paramater allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes, containing any ASCII character from the ! (\\u0021) thru the DEL character (\\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>"]
    pub path: Option<String>,
    #[doc="<p>The name of the role to create.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p> <p>Role names are not distinguished by case. For example, you cannot create roles named both \"PRODROLE\" and \"prodrole\".</p>"]
    pub role_name: String,
}


/// Serialize `CreateRoleRequest` contents to a `SignedRequest`.
struct CreateRoleRequestSerializer;
impl CreateRoleRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateRoleRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "AssumeRolePolicyDocument"),
                   &obj.assume_role_policy_document.replace("+", "%2B"));
        if let Some(ref field_value) = obj.description {
            params.put(&format!("{}{}", prefix, "Description"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.path {
            params.put(&format!("{}{}", prefix, "Path"),
                       &field_value.replace("+", "%2B"));
        }
        params.put(&format!("{}{}", prefix, "RoleName"),
                   &obj.role_name.replace("+", "%2B"));

    }
}

#[doc="<p>Contains the response to a successful <a>CreateRole</a> request. </p>"]
#[derive(Default,Debug,Clone)]
pub struct CreateRoleResponse {
    #[doc="<p>A structure containing details about the new role.</p>"]
    pub role: Role,
}

struct CreateRoleResponseDeserializer;
impl CreateRoleResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<CreateRoleResponse, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = CreateRoleResponse::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "Role" => {
                            obj.role = try!(RoleDeserializer::deserialize("Role", stack));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct CreateSAMLProviderRequest {
    #[doc="<p>The name of the provider to create.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>"]
    pub name: String,
    #[doc="<p>An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <p>For more information, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html\">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i> </p>"]
    pub saml_metadata_document: String,
}


/// Serialize `CreateSAMLProviderRequest` contents to a `SignedRequest`.
struct CreateSAMLProviderRequestSerializer;
impl CreateSAMLProviderRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateSAMLProviderRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "Name"),
                   &obj.name.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "SAMLMetadataDocument"),
                   &obj.saml_metadata_document.replace("+", "%2B"));

    }
}

#[doc="<p>Contains the response to a successful <a>CreateSAMLProvider</a> request. </p>"]
#[derive(Default,Debug,Clone)]
pub struct CreateSAMLProviderResponse {
    #[doc="<p>The Amazon Resource Name (ARN) of the new SAML provider resource in IAM.</p>"]
    pub saml_provider_arn: Option<String>,
}

struct CreateSAMLProviderResponseDeserializer;
impl CreateSAMLProviderResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<CreateSAMLProviderResponse, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = CreateSAMLProviderResponse::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "SAMLProviderArn" => {
                            obj.saml_provider_arn =
                                Some(try!(ArnTypeDeserializer::deserialize("SAMLProviderArn",
                                                                           stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct CreateServiceLinkedRoleRequest {
    #[doc="<p>The AWS service to which this role is attached. You use a string similar to a URL but without the http:// in front. For example: <code>elasticbeanstalk.amazonaws.com</code> </p>"]
    pub aws_service_name: String,
    #[doc="<p>A string that you provide, which is combined with the service name to form the complete role name. If you make multiple requests for the same service, then you must supply a different <code>CustomSuffix</code> for each request. Otherwise the request fails with a duplicate role name error. For example, you could add <code>-1</code> or <code>-debug</code> to the suffix.</p>"]
    pub custom_suffix: Option<String>,
    #[doc="<p>The description of the role.</p>"]
    pub description: Option<String>,
}


/// Serialize `CreateServiceLinkedRoleRequest` contents to a `SignedRequest`.
struct CreateServiceLinkedRoleRequestSerializer;
impl CreateServiceLinkedRoleRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateServiceLinkedRoleRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "AWSServiceName"),
                   &obj.aws_service_name.replace("+", "%2B"));
        if let Some(ref field_value) = obj.custom_suffix {
            params.put(&format!("{}{}", prefix, "CustomSuffix"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.description {
            params.put(&format!("{}{}", prefix, "Description"),
                       &field_value.replace("+", "%2B"));
        }

    }
}

#[derive(Default,Debug,Clone)]
pub struct CreateServiceLinkedRoleResponse {
    #[doc="<p>A <a>Role</a> object that contains details about the newly created role.</p>"]
    pub role: Option<Role>,
}

struct CreateServiceLinkedRoleResponseDeserializer;
impl CreateServiceLinkedRoleResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>
        (tag_name: &str,
         stack: &mut T)
         -> Result<CreateServiceLinkedRoleResponse, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = CreateServiceLinkedRoleResponse::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "Role" => {
                            obj.role = Some(try!(RoleDeserializer::deserialize("Role", stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct CreateServiceSpecificCredentialRequest {
    #[doc="<p>The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials.</p>"]
    pub service_name: String,
    #[doc="<p>The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>"]
    pub user_name: String,
}


/// Serialize `CreateServiceSpecificCredentialRequest` contents to a `SignedRequest`.
struct CreateServiceSpecificCredentialRequestSerializer;
impl CreateServiceSpecificCredentialRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateServiceSpecificCredentialRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "ServiceName"),
                   &obj.service_name.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "UserName"),
                   &obj.user_name.replace("+", "%2B"));

    }
}

#[derive(Default,Debug,Clone)]
pub struct CreateServiceSpecificCredentialResponse {
    #[doc="<p>A structure that contains information about the newly created service-specific credential.</p> <important> <p>This is the only time that the password for this credential set is available. It cannot be recovered later. Instead, you will have to reset the password with <a>ResetServiceSpecificCredential</a>.</p> </important>"]
    pub service_specific_credential: Option<ServiceSpecificCredential>,
}

struct CreateServiceSpecificCredentialResponseDeserializer;
impl CreateServiceSpecificCredentialResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>
        (tag_name: &str,
         stack: &mut T)
         -> Result<CreateServiceSpecificCredentialResponse, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = CreateServiceSpecificCredentialResponse::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "ServiceSpecificCredential" => {
                            obj.service_specific_credential = Some(try!(ServiceSpecificCredentialDeserializer::deserialize("ServiceSpecificCredential", stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct CreateUserRequest {
    #[doc="<p> The path for the user name. For more information about paths, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html\">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This paramater allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes, containing any ASCII character from the ! (\\u0021) thru the DEL character (\\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>"]
    pub path: Option<String>,
    #[doc="<p>The name of the user to create.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-. User names are not distinguished by case. For example, you cannot create users named both \"TESTUSER\" and \"testuser\".</p>"]
    pub user_name: String,
}


/// Serialize `CreateUserRequest` contents to a `SignedRequest`.
struct CreateUserRequestSerializer;
impl CreateUserRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateUserRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.path {
            params.put(&format!("{}{}", prefix, "Path"),
                       &field_value.replace("+", "%2B"));
        }
        params.put(&format!("{}{}", prefix, "UserName"),
                   &obj.user_name.replace("+", "%2B"));

    }
}

#[doc="<p>Contains the response to a successful <a>CreateUser</a> request. </p>"]
#[derive(Default,Debug,Clone)]
pub struct CreateUserResponse {
    #[doc="<p>A structure with details about the new IAM user.</p>"]
    pub user: Option<User>,
}

struct CreateUserResponseDeserializer;
impl CreateUserResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<CreateUserResponse, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = CreateUserResponse::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "User" => {
                            obj.user = Some(try!(UserDeserializer::deserialize("User", stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct CreateVirtualMFADeviceRequest {
    #[doc="<p> The path for the virtual MFA device. For more information about paths, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html\">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This paramater allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes, containing any ASCII character from the ! (\\u0021) thru the DEL character (\\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>"]
    pub path: Option<String>,
    #[doc="<p>The name of the virtual MFA device. Use with path to uniquely identify a virtual MFA device.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>"]
    pub virtual_mfa_device_name: String,
}


/// Serialize `CreateVirtualMFADeviceRequest` contents to a `SignedRequest`.
struct CreateVirtualMFADeviceRequestSerializer;
impl CreateVirtualMFADeviceRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateVirtualMFADeviceRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.path {
            params.put(&format!("{}{}", prefix, "Path"),
                       &field_value.replace("+", "%2B"));
        }
        params.put(&format!("{}{}", prefix, "VirtualMFADeviceName"),
                   &obj.virtual_mfa_device_name.replace("+", "%2B"));

    }
}

#[doc="<p>Contains the response to a successful <a>CreateVirtualMFADevice</a> request. </p>"]
#[derive(Default,Debug,Clone)]
pub struct CreateVirtualMFADeviceResponse {
    #[doc="<p>A structure containing details about the new virtual MFA device.</p>"]
    pub virtual_mfa_device: VirtualMFADevice,
}

struct CreateVirtualMFADeviceResponseDeserializer;
impl CreateVirtualMFADeviceResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<CreateVirtualMFADeviceResponse, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = CreateVirtualMFADeviceResponse::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "VirtualMFADevice" => {
                            obj.virtual_mfa_device =
                                try!(VirtualMFADeviceDeserializer::deserialize("VirtualMFADevice",
                                                                               stack));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct DateTypeDeserializer;
impl DateTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<String, XmlParseError> {
        try!(start_element(tag_name, stack));
        let obj = try!(characters(stack));
        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct DeactivateMFADeviceRequest {
    #[doc="<p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>"]
    pub serial_number: String,
    #[doc="<p>The name of the user whose MFA device you want to deactivate.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>"]
    pub user_name: String,
}


/// Serialize `DeactivateMFADeviceRequest` contents to a `SignedRequest`.
struct DeactivateMFADeviceRequestSerializer;
impl DeactivateMFADeviceRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeactivateMFADeviceRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "SerialNumber"),
                   &obj.serial_number.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "UserName"),
                   &obj.user_name.replace("+", "%2B"));

    }
}

#[derive(Default,Debug,Clone)]
pub struct DeleteAccessKeyRequest {
    #[doc="<p>The access key ID for the access key ID and secret access key you want to delete.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>"]
    pub access_key_id: String,
    #[doc="<p>The name of the user whose access key pair you want to delete.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>"]
    pub user_name: Option<String>,
}


/// Serialize `DeleteAccessKeyRequest` contents to a `SignedRequest`.
struct DeleteAccessKeyRequestSerializer;
impl DeleteAccessKeyRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteAccessKeyRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "AccessKeyId"),
                   &obj.access_key_id.replace("+", "%2B"));
        if let Some(ref field_value) = obj.user_name {
            params.put(&format!("{}{}", prefix, "UserName"),
                       &field_value.replace("+", "%2B"));
        }

    }
}

#[derive(Default,Debug,Clone)]
pub struct DeleteAccountAliasRequest {
    #[doc="<p>The name of the account alias to delete.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.</p>"]
    pub account_alias: String,
}


/// Serialize `DeleteAccountAliasRequest` contents to a `SignedRequest`.
struct DeleteAccountAliasRequestSerializer;
impl DeleteAccountAliasRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteAccountAliasRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "AccountAlias"),
                   &obj.account_alias.replace("+", "%2B"));

    }
}

#[derive(Default,Debug,Clone)]
pub struct DeleteGroupPolicyRequest {
    #[doc="<p>The name (friendly name, not ARN) identifying the group that the policy is embedded in.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>"]
    pub group_name: String,
    #[doc="<p>The name identifying the policy document to delete.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>"]
    pub policy_name: String,
}


/// Serialize `DeleteGroupPolicyRequest` contents to a `SignedRequest`.
struct DeleteGroupPolicyRequestSerializer;
impl DeleteGroupPolicyRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteGroupPolicyRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "GroupName"),
                   &obj.group_name.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "PolicyName"),
                   &obj.policy_name.replace("+", "%2B"));

    }
}

#[derive(Default,Debug,Clone)]
pub struct DeleteGroupRequest {
    #[doc="<p>The name of the IAM group to delete.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>"]
    pub group_name: String,
}


/// Serialize `DeleteGroupRequest` contents to a `SignedRequest`.
struct DeleteGroupRequestSerializer;
impl DeleteGroupRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteGroupRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "GroupName"),
                   &obj.group_name.replace("+", "%2B"));

    }
}

#[derive(Default,Debug,Clone)]
pub struct DeleteInstanceProfileRequest {
    #[doc="<p>The name of the instance profile to delete.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>"]
    pub instance_profile_name: String,
}


/// Serialize `DeleteInstanceProfileRequest` contents to a `SignedRequest`.
struct DeleteInstanceProfileRequestSerializer;
impl DeleteInstanceProfileRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteInstanceProfileRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "InstanceProfileName"),
                   &obj.instance_profile_name.replace("+", "%2B"));

    }
}

#[derive(Default,Debug,Clone)]
pub struct DeleteLoginProfileRequest {
    #[doc="<p>The name of the user whose password you want to delete.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>"]
    pub user_name: String,
}


/// Serialize `DeleteLoginProfileRequest` contents to a `SignedRequest`.
struct DeleteLoginProfileRequestSerializer;
impl DeleteLoginProfileRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteLoginProfileRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "UserName"),
                   &obj.user_name.replace("+", "%2B"));

    }
}

#[derive(Default,Debug,Clone)]
pub struct DeleteOpenIDConnectProviderRequest {
    #[doc="<p>The Amazon Resource Name (ARN) of the IAM OpenID Connect provider resource object to delete. You can get a list of OpenID Connect provider resource ARNs by using the <a>ListOpenIDConnectProviders</a> action.</p>"]
    pub open_id_connect_provider_arn: String,
}


/// Serialize `DeleteOpenIDConnectProviderRequest` contents to a `SignedRequest`.
struct DeleteOpenIDConnectProviderRequestSerializer;
impl DeleteOpenIDConnectProviderRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteOpenIDConnectProviderRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "OpenIDConnectProviderArn"),
                   &obj.open_id_connect_provider_arn.replace("+", "%2B"));

    }
}

#[derive(Default,Debug,Clone)]
pub struct DeletePolicyRequest {
    #[doc="<p>The Amazon Resource Name (ARN) of the IAM policy you want to delete.</p> <p>For more information about ARNs, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>"]
    pub policy_arn: String,
}


/// Serialize `DeletePolicyRequest` contents to a `SignedRequest`.
struct DeletePolicyRequestSerializer;
impl DeletePolicyRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeletePolicyRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "PolicyArn"),
                   &obj.policy_arn.replace("+", "%2B"));

    }
}

#[derive(Default,Debug,Clone)]
pub struct DeletePolicyVersionRequest {
    #[doc="<p>The Amazon Resource Name (ARN) of the IAM policy from which you want to delete a version.</p> <p>For more information about ARNs, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>"]
    pub policy_arn: String,
    #[doc="<p>The policy version to delete.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.</p> <p>For more information about managed policy versions, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html\">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>"]
    pub version_id: String,
}


/// Serialize `DeletePolicyVersionRequest` contents to a `SignedRequest`.
struct DeletePolicyVersionRequestSerializer;
impl DeletePolicyVersionRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeletePolicyVersionRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "PolicyArn"),
                   &obj.policy_arn.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "VersionId"),
                   &obj.version_id.replace("+", "%2B"));

    }
}

#[derive(Default,Debug,Clone)]
pub struct DeleteRolePolicyRequest {
    #[doc="<p>The name of the inline policy to delete from the specified IAM role.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>"]
    pub policy_name: String,
    #[doc="<p>The name (friendly name, not ARN) identifying the role that the policy is embedded in.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>"]
    pub role_name: String,
}


/// Serialize `DeleteRolePolicyRequest` contents to a `SignedRequest`.
struct DeleteRolePolicyRequestSerializer;
impl DeleteRolePolicyRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteRolePolicyRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "PolicyName"),
                   &obj.policy_name.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "RoleName"),
                   &obj.role_name.replace("+", "%2B"));

    }
}

#[derive(Default,Debug,Clone)]
pub struct DeleteRoleRequest {
    #[doc="<p>The name of the role to delete.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>"]
    pub role_name: String,
}


/// Serialize `DeleteRoleRequest` contents to a `SignedRequest`.
struct DeleteRoleRequestSerializer;
impl DeleteRoleRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteRoleRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "RoleName"),
                   &obj.role_name.replace("+", "%2B"));

    }
}

#[derive(Default,Debug,Clone)]
pub struct DeleteSAMLProviderRequest {
    #[doc="<p>The Amazon Resource Name (ARN) of the SAML provider to delete.</p>"]
    pub saml_provider_arn: String,
}


/// Serialize `DeleteSAMLProviderRequest` contents to a `SignedRequest`.
struct DeleteSAMLProviderRequestSerializer;
impl DeleteSAMLProviderRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteSAMLProviderRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "SAMLProviderArn"),
                   &obj.saml_provider_arn.replace("+", "%2B"));

    }
}

#[derive(Default,Debug,Clone)]
pub struct DeleteSSHPublicKeyRequest {
    #[doc="<p>The unique identifier for the SSH public key.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>"]
    pub ssh_public_key_id: String,
    #[doc="<p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>"]
    pub user_name: String,
}


/// Serialize `DeleteSSHPublicKeyRequest` contents to a `SignedRequest`.
struct DeleteSSHPublicKeyRequestSerializer;
impl DeleteSSHPublicKeyRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteSSHPublicKeyRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "SSHPublicKeyId"),
                   &obj.ssh_public_key_id.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "UserName"),
                   &obj.user_name.replace("+", "%2B"));

    }
}

#[derive(Default,Debug,Clone)]
pub struct DeleteServerCertificateRequest {
    #[doc="<p>The name of the server certificate you want to delete.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>"]
    pub server_certificate_name: String,
}


/// Serialize `DeleteServerCertificateRequest` contents to a `SignedRequest`.
struct DeleteServerCertificateRequestSerializer;
impl DeleteServerCertificateRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteServerCertificateRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "ServerCertificateName"),
                   &obj.server_certificate_name.replace("+", "%2B"));

    }
}

#[derive(Default,Debug,Clone)]
pub struct DeleteServiceSpecificCredentialRequest {
    #[doc="<p>The unique identifier of the service-specific credential. You can get this value by calling <a>ListServiceSpecificCredentials</a>.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>"]
    pub service_specific_credential_id: String,
    #[doc="<p>The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>"]
    pub user_name: Option<String>,
}


/// Serialize `DeleteServiceSpecificCredentialRequest` contents to a `SignedRequest`.
struct DeleteServiceSpecificCredentialRequestSerializer;
impl DeleteServiceSpecificCredentialRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteServiceSpecificCredentialRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "ServiceSpecificCredentialId"),
                   &obj.service_specific_credential_id.replace("+", "%2B"));
        if let Some(ref field_value) = obj.user_name {
            params.put(&format!("{}{}", prefix, "UserName"),
                       &field_value.replace("+", "%2B"));
        }

    }
}

#[derive(Default,Debug,Clone)]
pub struct DeleteSigningCertificateRequest {
    #[doc="<p>The ID of the signing certificate to delete.</p> <p>The format of this parameter, as described by its <a href=\"http://wikipedia.org/wiki/regex\">regex</a> pattern, is a string of characters that can be upper- or lower-cased letters or digits.</p>"]
    pub certificate_id: String,
    #[doc="<p>The name of the user the signing certificate belongs to.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>"]
    pub user_name: Option<String>,
}


/// Serialize `DeleteSigningCertificateRequest` contents to a `SignedRequest`.
struct DeleteSigningCertificateRequestSerializer;
impl DeleteSigningCertificateRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteSigningCertificateRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "CertificateId"),
                   &obj.certificate_id.replace("+", "%2B"));
        if let Some(ref field_value) = obj.user_name {
            params.put(&format!("{}{}", prefix, "UserName"),
                       &field_value.replace("+", "%2B"));
        }

    }
}

#[derive(Default,Debug,Clone)]
pub struct DeleteUserPolicyRequest {
    #[doc="<p>The name identifying the policy document to delete.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>"]
    pub policy_name: String,
    #[doc="<p>The name (friendly name, not ARN) identifying the user that the policy is embedded in.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>"]
    pub user_name: String,
}


/// Serialize `DeleteUserPolicyRequest` contents to a `SignedRequest`.
struct DeleteUserPolicyRequestSerializer;
impl DeleteUserPolicyRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteUserPolicyRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "PolicyName"),
                   &obj.policy_name.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "UserName"),
                   &obj.user_name.replace("+", "%2B"));

    }
}

#[derive(Default,Debug,Clone)]
pub struct DeleteUserRequest {
    #[doc="<p>The name of the user to delete.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>"]
    pub user_name: String,
}


/// Serialize `DeleteUserRequest` contents to a `SignedRequest`.
struct DeleteUserRequestSerializer;
impl DeleteUserRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteUserRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "UserName"),
                   &obj.user_name.replace("+", "%2B"));

    }
}

#[derive(Default,Debug,Clone)]
pub struct DeleteVirtualMFADeviceRequest {
    #[doc="<p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the same as the ARN.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>"]
    pub serial_number: String,
}


/// Serialize `DeleteVirtualMFADeviceRequest` contents to a `SignedRequest`.
struct DeleteVirtualMFADeviceRequestSerializer;
impl DeleteVirtualMFADeviceRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteVirtualMFADeviceRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "SerialNumber"),
                   &obj.serial_number.replace("+", "%2B"));

    }
}

#[derive(Default,Debug,Clone)]
pub struct DetachGroupPolicyRequest {
    #[doc="<p>The name (friendly name, not ARN) of the IAM group to detach the policy from.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>"]
    pub group_name: String,
    #[doc="<p>The Amazon Resource Name (ARN) of the IAM policy you want to detach.</p> <p>For more information about ARNs, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>"]
    pub policy_arn: String,
}


/// Serialize `DetachGroupPolicyRequest` contents to a `SignedRequest`.
struct DetachGroupPolicyRequestSerializer;
impl DetachGroupPolicyRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DetachGroupPolicyRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "GroupName"),
                   &obj.group_name.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "PolicyArn"),
                   &obj.policy_arn.replace("+", "%2B"));

    }
}

#[derive(Default,Debug,Clone)]
pub struct DetachRolePolicyRequest {
    #[doc="<p>The Amazon Resource Name (ARN) of the IAM policy you want to detach.</p> <p>For more information about ARNs, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>"]
    pub policy_arn: String,
    #[doc="<p>The name (friendly name, not ARN) of the IAM role to detach the policy from.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>"]
    pub role_name: String,
}


/// Serialize `DetachRolePolicyRequest` contents to a `SignedRequest`.
struct DetachRolePolicyRequestSerializer;
impl DetachRolePolicyRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DetachRolePolicyRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "PolicyArn"),
                   &obj.policy_arn.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "RoleName"),
                   &obj.role_name.replace("+", "%2B"));

    }
}

#[derive(Default,Debug,Clone)]
pub struct DetachUserPolicyRequest {
    #[doc="<p>The Amazon Resource Name (ARN) of the IAM policy you want to detach.</p> <p>For more information about ARNs, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>"]
    pub policy_arn: String,
    #[doc="<p>The name (friendly name, not ARN) of the IAM user to detach the policy from.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>"]
    pub user_name: String,
}


/// Serialize `DetachUserPolicyRequest` contents to a `SignedRequest`.
struct DetachUserPolicyRequestSerializer;
impl DetachUserPolicyRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DetachUserPolicyRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "PolicyArn"),
                   &obj.policy_arn.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "UserName"),
                   &obj.user_name.replace("+", "%2B"));

    }
}

#[derive(Default,Debug,Clone)]
pub struct EnableMFADeviceRequest {
    #[doc="<p>An authentication code emitted by the device. </p> <p>The format for this parameter is a string of 6 digits.</p> <important> <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html\">resync the device</a>.</p> </important>"]
    pub authentication_code_1: String,
    #[doc="<p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a string of 6 digits.</p> <important> <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html\">resync the device</a>.</p> </important>"]
    pub authentication_code_2: String,
    #[doc="<p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>"]
    pub serial_number: String,
    #[doc="<p>The name of the IAM user for whom you want to enable the MFA device.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>"]
    pub user_name: String,
}


/// Serialize `EnableMFADeviceRequest` contents to a `SignedRequest`.
struct EnableMFADeviceRequestSerializer;
impl EnableMFADeviceRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &EnableMFADeviceRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "AuthenticationCode1"),
                   &obj.authentication_code_1.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "AuthenticationCode2"),
                   &obj.authentication_code_2.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "SerialNumber"),
                   &obj.serial_number.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "UserName"),
                   &obj.user_name.replace("+", "%2B"));

    }
}


/// Serialize `EntityListType` contents to a `SignedRequest`.
struct EntityListTypeSerializer;
impl EntityListTypeSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.member.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

struct EvalDecisionDetailsTypeDeserializer;
impl EvalDecisionDetailsTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>
        (tag_name: &str,
         stack: &mut T)
         -> Result<::std::collections::HashMap<String, String>, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = ::std::collections::HashMap::new();

        while try!(peek_at_name(stack)) == "entry" {
            try!(start_element("entry", stack));
            let key = try!(EvalDecisionSourceTypeDeserializer::deserialize("key", stack));
            let value = try!(PolicyEvaluationDecisionTypeDeserializer::deserialize("value", stack));
            obj.insert(key, value);
            try!(end_element("entry", stack));
        }

        try!(end_element(tag_name, stack));
        Ok(obj)

    }
}
struct EvalDecisionSourceTypeDeserializer;
impl EvalDecisionSourceTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<String, XmlParseError> {
        try!(start_element(tag_name, stack));
        let obj = try!(characters(stack));
        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p>Contains the results of a simulation.</p> <p>This data type is used by the return parameter of <code> <a>SimulateCustomPolicy</a> </code> and <code> <a>SimulatePrincipalPolicy</a> </code>.</p>"]
#[derive(Default,Debug,Clone)]
pub struct EvaluationResult {
    #[doc="<p>The name of the API action tested on the indicated resource.</p>"]
    pub eval_action_name: String,
    #[doc="<p>The result of the simulation.</p>"]
    pub eval_decision: String,
    #[doc="<p>Additional details about the results of the evaluation decision. When there are both IAM policies and resource policies, this parameter explains how each set of policies contributes to the final evaluation decision. When simulating cross-account access to a resource, both the resource-based policy and the caller's IAM policy must grant access. See <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_compare-resource-policies.html\">How IAM Roles Differ from Resource-based Policies</a> </p>"]
    pub eval_decision_details: Option<::std::collections::HashMap<String, String>>,
    #[doc="<p>The ARN of the resource that the indicated API action was tested on.</p>"]
    pub eval_resource_name: Option<String>,
    #[doc="<p>A list of the statements in the input policies that determine the result for this scenario. Remember that even if multiple statements allow the action on the resource, if only one statement denies that action, then the explicit deny overrides any allow, and the deny statement is the only entry included in the result.</p>"]
    pub matched_statements: Option<Vec<Statement>>,
    #[doc="<p>A list of context keys that are required by the included input policies but that were not provided by one of the input parameters. This list is used when the resource in a simulation is \"*\", either explicitly, or when the <code>ResourceArns</code> parameter blank. If you include a list of resources, then any missing context values are instead included under the <code>ResourceSpecificResults</code> section. To discover the context keys used by a set of policies, you can call <a>GetContextKeysForCustomPolicy</a> or <a>GetContextKeysForPrincipalPolicy</a>.</p>"]
    pub missing_context_values: Option<Vec<String>>,
    #[doc="<p>A structure that details how AWS Organizations and its service control policies affect the results of the simulation. Only applies if the simulated user's account is part of an organization.</p>"]
    pub organizations_decision_detail: Option<OrganizationsDecisionDetail>,
    #[doc="<p>The individual results of the simulation of the API action specified in EvalActionName on each resource.</p>"]
    pub resource_specific_results: Option<Vec<ResourceSpecificResult>>,
}

struct EvaluationResultDeserializer;
impl EvaluationResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<EvaluationResult, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = EvaluationResult::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "EvalActionName" => {
                            obj.eval_action_name =
                                try!(ActionNameTypeDeserializer::deserialize("EvalActionName",
                                                                             stack));
                        }
                        "EvalDecision" => {
                            obj.eval_decision =
                                try!(PolicyEvaluationDecisionTypeDeserializer::deserialize("EvalDecision",
                                                                                           stack));
                        }
                        "EvalDecisionDetails" => {
                            obj.eval_decision_details =
                                Some(try!(EvalDecisionDetailsTypeDeserializer::deserialize("EvalDecisionDetails",
                                                                                           stack)));
                        }
                        "EvalResourceName" => {
                            obj.eval_resource_name =
                                Some(try!(ResourceNameTypeDeserializer::deserialize("EvalResourceName",
                                                                                    stack)));
                        }
                        "MatchedStatements" => {
                            obj.matched_statements =
                                Some(try!(StatementListTypeDeserializer::deserialize("MatchedStatements",
                                                                                     stack)));
                        }
                        "MissingContextValues" => {
                            obj.missing_context_values = Some(try!(ContextKeyNamesResultListTypeDeserializer::deserialize("MissingContextValues", stack)));
                        }
                        "OrganizationsDecisionDetail" => {
                            obj.organizations_decision_detail = Some(try!(OrganizationsDecisionDetailDeserializer::deserialize("OrganizationsDecisionDetail", stack)));
                        }
                        "ResourceSpecificResults" => {
                            obj.resource_specific_results = Some(try!(ResourceSpecificResultListTypeDeserializer::deserialize("ResourceSpecificResults", stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct EvaluationResultsListTypeDeserializer;
impl EvaluationResultsListTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<EvaluationResult>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "member" {
                        obj.push(try!(EvaluationResultDeserializer::deserialize("member", stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
struct ExistingUserNameTypeDeserializer;
impl ExistingUserNameTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<String, XmlParseError> {
        try!(start_element(tag_name, stack));
        let obj = try!(characters(stack));
        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p>Contains the response to a successful <a>GenerateCredentialReport</a> request. </p>"]
#[derive(Default,Debug,Clone)]
pub struct GenerateCredentialReportResponse {
    #[doc="<p>Information about the credential report.</p>"]
    pub description: Option<String>,
    #[doc="<p>Information about the state of the credential report.</p>"]
    pub state: Option<String>,
}

struct GenerateCredentialReportResponseDeserializer;
impl GenerateCredentialReportResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>
        (tag_name: &str,
         stack: &mut T)
         -> Result<GenerateCredentialReportResponse, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = GenerateCredentialReportResponse::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "Description" => {
                            obj.description = Some(try!(ReportStateDescriptionTypeDeserializer::deserialize("Description", stack)));
                        }
                        "State" => {
                            obj.state = Some(try!(ReportStateTypeDeserializer::deserialize("State",
                                                                                           stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct GetAccessKeyLastUsedRequest {
    #[doc="<p>The identifier of an access key.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>"]
    pub access_key_id: String,
}


/// Serialize `GetAccessKeyLastUsedRequest` contents to a `SignedRequest`.
struct GetAccessKeyLastUsedRequestSerializer;
impl GetAccessKeyLastUsedRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &GetAccessKeyLastUsedRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "AccessKeyId"),
                   &obj.access_key_id.replace("+", "%2B"));

    }
}

#[doc="<p>Contains the response to a successful <a>GetAccessKeyLastUsed</a> request. It is also returned as a member of the <a>AccessKeyMetaData</a> structure returned by the <a>ListAccessKeys</a> action.</p>"]
#[derive(Default,Debug,Clone)]
pub struct GetAccessKeyLastUsedResponse {
    #[doc="<p>Contains information about the last time the access key was used.</p>"]
    pub access_key_last_used: Option<AccessKeyLastUsed>,
    #[doc="<p>The name of the AWS IAM user that owns this access key.</p> <p/>"]
    pub user_name: Option<String>,
}

struct GetAccessKeyLastUsedResponseDeserializer;
impl GetAccessKeyLastUsedResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<GetAccessKeyLastUsedResponse, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = GetAccessKeyLastUsedResponse::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "AccessKeyLastUsed" => {
                            obj.access_key_last_used =
                                Some(try!(AccessKeyLastUsedDeserializer::deserialize("AccessKeyLastUsed",
                                                                                     stack)));
                        }
                        "UserName" => {
                            obj.user_name =
                                Some(try!(ExistingUserNameTypeDeserializer::deserialize("UserName",
                                                                                        stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct GetAccountAuthorizationDetailsRequest {
    #[doc="<p>A list of entity types used to filter the results. Only the entities that match the types you specify are included in the output. Use the value <code>LocalManagedPolicy</code> to include customer managed policies.</p> <p>The format for this parameter is a comma-separated (if more than one) list of strings. Each string value in the list must be one of the valid values listed below.</p>"]
    pub filter: Option<Vec<String>>,
    #[doc="<p>Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.</p>"]
    pub marker: Option<String>,
    #[doc="<p>(Optional) Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code> and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>"]
    pub max_items: Option<i64>,
}


/// Serialize `GetAccountAuthorizationDetailsRequest` contents to a `SignedRequest`.
struct GetAccountAuthorizationDetailsRequestSerializer;
impl GetAccountAuthorizationDetailsRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &GetAccountAuthorizationDetailsRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.filter {
            EntityListTypeSerializer::serialize(params,
                                                &format!("{}{}", prefix, "Filter"),
                                                field_value);
        }
        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.max_items {
            params.put(&format!("{}{}", prefix, "MaxItems"),
                       &field_value.to_string().replace("+", "%2B"));
        }

    }
}

#[doc="<p>Contains the response to a successful <a>GetAccountAuthorizationDetails</a> request. </p>"]
#[derive(Default,Debug,Clone)]
pub struct GetAccountAuthorizationDetailsResponse {
    #[doc="<p>A list containing information about IAM groups.</p>"]
    pub group_detail_list: Option<Vec<GroupDetail>>,
    #[doc="<p>A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the <code>Marker</code> request parameter to retrieve more items. Note that IAM might return fewer than the <code>MaxItems</code> number of results even when there are more results available. We recommend that you check <code>IsTruncated</code> after every call to ensure that you receive all of your results.</p>"]
    pub is_truncated: Option<bool>,
    #[doc="<p>When <code>IsTruncated</code> is <code>true</code>, this element is present and contains the value to use for the <code>Marker</code> parameter in a subsequent pagination request.</p>"]
    pub marker: Option<String>,
    #[doc="<p>A list containing information about managed policies.</p>"]
    pub policies: Option<Vec<ManagedPolicyDetail>>,
    #[doc="<p>A list containing information about IAM roles.</p>"]
    pub role_detail_list: Option<Vec<RoleDetail>>,
    #[doc="<p>A list containing information about IAM users.</p>"]
    pub user_detail_list: Option<Vec<UserDetail>>,
}

struct GetAccountAuthorizationDetailsResponseDeserializer;
impl GetAccountAuthorizationDetailsResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>
        (tag_name: &str,
         stack: &mut T)
         -> Result<GetAccountAuthorizationDetailsResponse, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = GetAccountAuthorizationDetailsResponse::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "GroupDetailList" => {
                            obj.group_detail_list =
                                Some(try!(GroupDetailListTypeDeserializer::deserialize("GroupDetailList",
                                                                                       stack)));
                        }
                        "IsTruncated" => {
                            obj.is_truncated =
                                Some(try!(BooleanTypeDeserializer::deserialize("IsTruncated",
                                                                               stack)));
                        }
                        "Marker" => {
                            obj.marker = Some(try!(MarkerTypeDeserializer::deserialize("Marker",
                                                                                       stack)));
                        }
                        "Policies" => {
                            obj.policies = Some(try!(ManagedPolicyDetailListTypeDeserializer::deserialize("Policies", stack)));
                        }
                        "RoleDetailList" => {
                            obj.role_detail_list =
                                Some(try!(RoleDetailListTypeDeserializer::deserialize("RoleDetailList",
                                                                                      stack)));
                        }
                        "UserDetailList" => {
                            obj.user_detail_list =
                                Some(try!(UserDetailListTypeDeserializer::deserialize("UserDetailList",
                                                                                      stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p>Contains the response to a successful <a>GetAccountPasswordPolicy</a> request. </p>"]
#[derive(Default,Debug,Clone)]
pub struct GetAccountPasswordPolicyResponse {
    #[doc="<p>A structure that contains details about the account's password policy.</p>"]
    pub password_policy: PasswordPolicy,
}

struct GetAccountPasswordPolicyResponseDeserializer;
impl GetAccountPasswordPolicyResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>
        (tag_name: &str,
         stack: &mut T)
         -> Result<GetAccountPasswordPolicyResponse, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = GetAccountPasswordPolicyResponse::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "PasswordPolicy" => {
                            obj.password_policy =
                                try!(PasswordPolicyDeserializer::deserialize("PasswordPolicy",
                                                                             stack));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p>Contains the response to a successful <a>GetAccountSummary</a> request. </p>"]
#[derive(Default,Debug,Clone)]
pub struct GetAccountSummaryResponse {
    #[doc="<p>A set of key value pairs containing information about IAM entity usage and IAM quotas.</p>"]
    pub summary_map: Option<::std::collections::HashMap<String, i64>>,
}

struct GetAccountSummaryResponseDeserializer;
impl GetAccountSummaryResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<GetAccountSummaryResponse, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = GetAccountSummaryResponse::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "SummaryMap" => {
                            obj.summary_map =
                                Some(try!(SummaryMapTypeDeserializer::deserialize("SummaryMap",
                                                                                  stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct GetContextKeysForCustomPolicyRequest {
    #[doc="<p>A list of policies for which you want the list of context keys referenced in those policies. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.</p> <p>The <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a> used to validate this parameter is a string of characters consisting of any printable ASCII character ranging from the space character (\\u0020) through end of the ASCII character range as well as the printable characters in the Basic Latin and Latin-1 Supplement character set (through \\u00FF). It also includes the special characters tab (\\u0009), line feed (\\u000A), and carriage return (\\u000D).</p>"]
    pub policy_input_list: Vec<String>,
}


/// Serialize `GetContextKeysForCustomPolicyRequest` contents to a `SignedRequest`.
struct GetContextKeysForCustomPolicyRequestSerializer;
impl GetContextKeysForCustomPolicyRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &GetContextKeysForCustomPolicyRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        SimulationPolicyListTypeSerializer::serialize(params,
                                                      &format!("{}{}", prefix, "PolicyInputList"),
                                                      &obj.policy_input_list);

    }
}

#[doc="<p>Contains the response to a successful <a>GetContextKeysForPrincipalPolicy</a> or <a>GetContextKeysForCustomPolicy</a> request. </p>"]
#[derive(Default,Debug,Clone)]
pub struct GetContextKeysForPolicyResponse {
    #[doc="<p>The list of context keys that are referenced in the input policies.</p>"]
    pub context_key_names: Option<Vec<String>>,
}

struct GetContextKeysForPolicyResponseDeserializer;
impl GetContextKeysForPolicyResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>
        (tag_name: &str,
         stack: &mut T)
         -> Result<GetContextKeysForPolicyResponse, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = GetContextKeysForPolicyResponse::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "ContextKeyNames" => {
                            obj.context_key_names = Some(try!(ContextKeyNamesResultListTypeDeserializer::deserialize("ContextKeyNames", stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct GetContextKeysForPrincipalPolicyRequest {
    #[doc="<p>An optional list of additional policies for which you want the list of context keys that are referenced.</p> <p>The <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a> used to validate this parameter is a string of characters consisting of any printable ASCII character ranging from the space character (\\u0020) through end of the ASCII character range as well as the printable characters in the Basic Latin and Latin-1 Supplement character set (through \\u00FF). It also includes the special characters tab (\\u0009), line feed (\\u000A), and carriage return (\\u000D).</p>"]
    pub policy_input_list: Option<Vec<String>>,
    #[doc="<p>The ARN of a user, group, or role whose policies contain the context keys that you want listed. If you specify a user, the list includes context keys that are found in all policies attached to the user as well as to all groups that the user is a member of. If you pick a group or a role, then it includes only those context keys that are found in policies attached to that entity. Note that all parameters are shown in unencoded form here for clarity, but must be URL encoded to be included as a part of a real HTML request.</p> <p>For more information about ARNs, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>"]
    pub policy_source_arn: String,
}


/// Serialize `GetContextKeysForPrincipalPolicyRequest` contents to a `SignedRequest`.
struct GetContextKeysForPrincipalPolicyRequestSerializer;
impl GetContextKeysForPrincipalPolicyRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &GetContextKeysForPrincipalPolicyRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.policy_input_list {
            SimulationPolicyListTypeSerializer::serialize(params,
                                                          &format!("{}{}",
                                                                  prefix,
                                                                  "PolicyInputList"),
                                                          field_value);
        }
        params.put(&format!("{}{}", prefix, "PolicySourceArn"),
                   &obj.policy_source_arn.replace("+", "%2B"));

    }
}

#[doc="<p>Contains the response to a successful <a>GetCredentialReport</a> request. </p>"]
#[derive(Default,Debug,Clone)]
pub struct GetCredentialReportResponse {
    #[doc="<p>Contains the credential report. The report is Base64-encoded.</p>"]
    pub content: Option<Vec<u8>>,
    #[doc="<p> The date and time when the credential report was created, in <a href=\"http://www.iso.org/iso/iso8601\">ISO 8601 date-time format</a>.</p>"]
    pub generated_time: Option<String>,
    #[doc="<p>The format (MIME type) of the credential report.</p>"]
    pub report_format: Option<String>,
}

struct GetCredentialReportResponseDeserializer;
impl GetCredentialReportResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<GetCredentialReportResponse, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = GetCredentialReportResponse::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "Content" => {
                            obj.content =
                                Some(try!(ReportContentTypeDeserializer::deserialize("Content",
                                                                                     stack)));
                        }
                        "GeneratedTime" => {
                            obj.generated_time =
                                Some(try!(DateTypeDeserializer::deserialize("GeneratedTime",
                                                                            stack)));
                        }
                        "ReportFormat" => {
                            obj.report_format =
                                Some(try!(ReportFormatTypeDeserializer::deserialize("ReportFormat",
                                                                                    stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct GetGroupPolicyRequest {
    #[doc="<p>The name of the group the policy is associated with.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>"]
    pub group_name: String,
    #[doc="<p>The name of the policy document to get.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>"]
    pub policy_name: String,
}


/// Serialize `GetGroupPolicyRequest` contents to a `SignedRequest`.
struct GetGroupPolicyRequestSerializer;
impl GetGroupPolicyRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &GetGroupPolicyRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "GroupName"),
                   &obj.group_name.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "PolicyName"),
                   &obj.policy_name.replace("+", "%2B"));

    }
}

#[doc="<p>Contains the response to a successful <a>GetGroupPolicy</a> request. </p>"]
#[derive(Default,Debug,Clone)]
pub struct GetGroupPolicyResponse {
    #[doc="<p>The group the policy is associated with.</p>"]
    pub group_name: String,
    #[doc="<p>The policy document.</p>"]
    pub policy_document: String,
    #[doc="<p>The name of the policy.</p>"]
    pub policy_name: String,
}

struct GetGroupPolicyResponseDeserializer;
impl GetGroupPolicyResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<GetGroupPolicyResponse, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = GetGroupPolicyResponse::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "GroupName" => {
                            obj.group_name = try!(GroupNameTypeDeserializer::deserialize("GroupName",
                                                                                         stack));
                        }
                        "PolicyDocument" => {
                            obj.policy_document =
                                try!(PolicyDocumentTypeDeserializer::deserialize("PolicyDocument",
                                                                                 stack));
                        }
                        "PolicyName" => {
                            obj.policy_name = try!(PolicyNameTypeDeserializer::deserialize("PolicyName",
                                                                                           stack));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct GetGroupRequest {
    #[doc="<p>The name of the group.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>"]
    pub group_name: String,
    #[doc="<p>Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.</p>"]
    pub marker: Option<String>,
    #[doc="<p>(Optional) Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code> and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>"]
    pub max_items: Option<i64>,
}


/// Serialize `GetGroupRequest` contents to a `SignedRequest`.
struct GetGroupRequestSerializer;
impl GetGroupRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &GetGroupRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "GroupName"),
                   &obj.group_name.replace("+", "%2B"));
        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.max_items {
            params.put(&format!("{}{}", prefix, "MaxItems"),
                       &field_value.to_string().replace("+", "%2B"));
        }

    }
}

#[doc="<p>Contains the response to a successful <a>GetGroup</a> request. </p>"]
#[derive(Default,Debug,Clone)]
pub struct GetGroupResponse {
    #[doc="<p>A structure that contains details about the group.</p>"]
    pub group: Group,
    #[doc="<p>A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the <code>Marker</code> request parameter to retrieve more items. Note that IAM might return fewer than the <code>MaxItems</code> number of results even when there are more results available. We recommend that you check <code>IsTruncated</code> after every call to ensure that you receive all of your results.</p>"]
    pub is_truncated: Option<bool>,
    #[doc="<p>When <code>IsTruncated</code> is <code>true</code>, this element is present and contains the value to use for the <code>Marker</code> parameter in a subsequent pagination request.</p>"]
    pub marker: Option<String>,
    #[doc="<p>A list of users in the group.</p>"]
    pub users: Vec<User>,
}

struct GetGroupResponseDeserializer;
impl GetGroupResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<GetGroupResponse, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = GetGroupResponse::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "Group" => {
                            obj.group = try!(GroupDeserializer::deserialize("Group", stack));
                        }
                        "IsTruncated" => {
                            obj.is_truncated =
                                Some(try!(BooleanTypeDeserializer::deserialize("IsTruncated",
                                                                               stack)));
                        }
                        "Marker" => {
                            obj.marker = Some(try!(MarkerTypeDeserializer::deserialize("Marker",
                                                                                       stack)));
                        }
                        "Users" => {
                            obj.users = try!(UserListTypeDeserializer::deserialize("Users", stack));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct GetInstanceProfileRequest {
    #[doc="<p>The name of the instance profile to get information about.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>"]
    pub instance_profile_name: String,
}


/// Serialize `GetInstanceProfileRequest` contents to a `SignedRequest`.
struct GetInstanceProfileRequestSerializer;
impl GetInstanceProfileRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &GetInstanceProfileRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "InstanceProfileName"),
                   &obj.instance_profile_name.replace("+", "%2B"));

    }
}

#[doc="<p>Contains the response to a successful <a>GetInstanceProfile</a> request. </p>"]
#[derive(Default,Debug,Clone)]
pub struct GetInstanceProfileResponse {
    #[doc="<p>A structure containing details about the instance profile.</p>"]
    pub instance_profile: InstanceProfile,
}

struct GetInstanceProfileResponseDeserializer;
impl GetInstanceProfileResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<GetInstanceProfileResponse, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = GetInstanceProfileResponse::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "InstanceProfile" => {
                            obj.instance_profile =
                                try!(InstanceProfileDeserializer::deserialize("InstanceProfile",
                                                                              stack));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct GetLoginProfileRequest {
    #[doc="<p>The name of the user whose login profile you want to retrieve.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>"]
    pub user_name: String,
}


/// Serialize `GetLoginProfileRequest` contents to a `SignedRequest`.
struct GetLoginProfileRequestSerializer;
impl GetLoginProfileRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &GetLoginProfileRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "UserName"),
                   &obj.user_name.replace("+", "%2B"));

    }
}

#[doc="<p>Contains the response to a successful <a>GetLoginProfile</a> request. </p>"]
#[derive(Default,Debug,Clone)]
pub struct GetLoginProfileResponse {
    #[doc="<p>A structure containing the user name and password create date for the user.</p>"]
    pub login_profile: LoginProfile,
}

struct GetLoginProfileResponseDeserializer;
impl GetLoginProfileResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<GetLoginProfileResponse, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = GetLoginProfileResponse::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "LoginProfile" => {
                            obj.login_profile = try!(LoginProfileDeserializer::deserialize("LoginProfile",
                                                                                           stack));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct GetOpenIDConnectProviderRequest {
    #[doc="<p>The Amazon Resource Name (ARN) of the OIDC provider resource object in IAM to get information for. You can get a list of OIDC provider resource ARNs by using the <a>ListOpenIDConnectProviders</a> action.</p> <p>For more information about ARNs, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>"]
    pub open_id_connect_provider_arn: String,
}


/// Serialize `GetOpenIDConnectProviderRequest` contents to a `SignedRequest`.
struct GetOpenIDConnectProviderRequestSerializer;
impl GetOpenIDConnectProviderRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &GetOpenIDConnectProviderRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "OpenIDConnectProviderArn"),
                   &obj.open_id_connect_provider_arn.replace("+", "%2B"));

    }
}

#[doc="<p>Contains the response to a successful <a>GetOpenIDConnectProvider</a> request. </p>"]
#[derive(Default,Debug,Clone)]
pub struct GetOpenIDConnectProviderResponse {
    #[doc="<p>A list of client IDs (also known as audiences) that are associated with the specified IAM OIDC provider resource object. For more information, see <a>CreateOpenIDConnectProvider</a>.</p>"]
    pub client_id_list: Option<Vec<String>>,
    #[doc="<p>The date and time when the IAM OIDC provider resource object was created in the AWS account.</p>"]
    pub create_date: Option<String>,
    #[doc="<p>A list of certificate thumbprints that are associated with the specified IAM OIDC provider resource object. For more information, see <a>CreateOpenIDConnectProvider</a>. </p>"]
    pub thumbprint_list: Option<Vec<String>>,
    #[doc="<p>The URL that the IAM OIDC provider resource object is associated with. For more information, see <a>CreateOpenIDConnectProvider</a>.</p>"]
    pub url: Option<String>,
}

struct GetOpenIDConnectProviderResponseDeserializer;
impl GetOpenIDConnectProviderResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>
        (tag_name: &str,
         stack: &mut T)
         -> Result<GetOpenIDConnectProviderResponse, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = GetOpenIDConnectProviderResponse::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "ClientIDList" => {
                            obj.client_id_list =
                                Some(try!(ClientIDListTypeDeserializer::deserialize("ClientIDList",
                                                                                    stack)));
                        }
                        "CreateDate" => {
                            obj.create_date = Some(try!(DateTypeDeserializer::deserialize("CreateDate",
                                                                                          stack)));
                        }
                        "ThumbprintList" => {
                            obj.thumbprint_list =
                                Some(try!(ThumbprintListTypeDeserializer::deserialize("ThumbprintList",
                                                                                      stack)));
                        }
                        "Url" => {
                            obj.url = Some(try!(OpenIDConnectProviderUrlTypeDeserializer::deserialize("Url", stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct GetPolicyRequest {
    #[doc="<p>The Amazon Resource Name (ARN) of the managed policy that you want information about.</p> <p>For more information about ARNs, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>"]
    pub policy_arn: String,
}


/// Serialize `GetPolicyRequest` contents to a `SignedRequest`.
struct GetPolicyRequestSerializer;
impl GetPolicyRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &GetPolicyRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "PolicyArn"),
                   &obj.policy_arn.replace("+", "%2B"));

    }
}

#[doc="<p>Contains the response to a successful <a>GetPolicy</a> request. </p>"]
#[derive(Default,Debug,Clone)]
pub struct GetPolicyResponse {
    #[doc="<p>A structure containing details about the policy.</p>"]
    pub policy: Option<Policy>,
}

struct GetPolicyResponseDeserializer;
impl GetPolicyResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<GetPolicyResponse, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = GetPolicyResponse::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "Policy" => {
                            obj.policy = Some(try!(PolicyDeserializer::deserialize("Policy",
                                                                                   stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct GetPolicyVersionRequest {
    #[doc="<p>The Amazon Resource Name (ARN) of the managed policy that you want information about.</p> <p>For more information about ARNs, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>"]
    pub policy_arn: String,
    #[doc="<p>Identifies the policy version to retrieve.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.</p>"]
    pub version_id: String,
}


/// Serialize `GetPolicyVersionRequest` contents to a `SignedRequest`.
struct GetPolicyVersionRequestSerializer;
impl GetPolicyVersionRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &GetPolicyVersionRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "PolicyArn"),
                   &obj.policy_arn.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "VersionId"),
                   &obj.version_id.replace("+", "%2B"));

    }
}

#[doc="<p>Contains the response to a successful <a>GetPolicyVersion</a> request. </p>"]
#[derive(Default,Debug,Clone)]
pub struct GetPolicyVersionResponse {
    #[doc="<p>A structure containing details about the policy version.</p>"]
    pub policy_version: Option<PolicyVersion>,
}

struct GetPolicyVersionResponseDeserializer;
impl GetPolicyVersionResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<GetPolicyVersionResponse, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = GetPolicyVersionResponse::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "PolicyVersion" => {
                            obj.policy_version =
                                Some(try!(PolicyVersionDeserializer::deserialize("PolicyVersion",
                                                                                 stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct GetRolePolicyRequest {
    #[doc="<p>The name of the policy document to get.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>"]
    pub policy_name: String,
    #[doc="<p>The name of the role associated with the policy.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>"]
    pub role_name: String,
}


/// Serialize `GetRolePolicyRequest` contents to a `SignedRequest`.
struct GetRolePolicyRequestSerializer;
impl GetRolePolicyRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &GetRolePolicyRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "PolicyName"),
                   &obj.policy_name.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "RoleName"),
                   &obj.role_name.replace("+", "%2B"));

    }
}

#[doc="<p>Contains the response to a successful <a>GetRolePolicy</a> request. </p>"]
#[derive(Default,Debug,Clone)]
pub struct GetRolePolicyResponse {
    #[doc="<p>The policy document.</p>"]
    pub policy_document: String,
    #[doc="<p>The name of the policy.</p>"]
    pub policy_name: String,
    #[doc="<p>The role the policy is associated with.</p>"]
    pub role_name: String,
}

struct GetRolePolicyResponseDeserializer;
impl GetRolePolicyResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<GetRolePolicyResponse, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = GetRolePolicyResponse::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "PolicyDocument" => {
                            obj.policy_document =
                                try!(PolicyDocumentTypeDeserializer::deserialize("PolicyDocument",
                                                                                 stack));
                        }
                        "PolicyName" => {
                            obj.policy_name = try!(PolicyNameTypeDeserializer::deserialize("PolicyName",
                                                                                           stack));
                        }
                        "RoleName" => {
                            obj.role_name = try!(RoleNameTypeDeserializer::deserialize("RoleName",
                                                                                       stack));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct GetRoleRequest {
    #[doc="<p>The name of the IAM role to get information about.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>"]
    pub role_name: String,
}


/// Serialize `GetRoleRequest` contents to a `SignedRequest`.
struct GetRoleRequestSerializer;
impl GetRoleRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &GetRoleRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "RoleName"),
                   &obj.role_name.replace("+", "%2B"));

    }
}

#[doc="<p>Contains the response to a successful <a>GetRole</a> request. </p>"]
#[derive(Default,Debug,Clone)]
pub struct GetRoleResponse {
    #[doc="<p>A structure containing details about the IAM role.</p>"]
    pub role: Role,
}

struct GetRoleResponseDeserializer;
impl GetRoleResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<GetRoleResponse, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = GetRoleResponse::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "Role" => {
                            obj.role = try!(RoleDeserializer::deserialize("Role", stack));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct GetSAMLProviderRequest {
    #[doc="<p>The Amazon Resource Name (ARN) of the SAML provider resource object in IAM to get information about.</p> <p>For more information about ARNs, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>"]
    pub saml_provider_arn: String,
}


/// Serialize `GetSAMLProviderRequest` contents to a `SignedRequest`.
struct GetSAMLProviderRequestSerializer;
impl GetSAMLProviderRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &GetSAMLProviderRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "SAMLProviderArn"),
                   &obj.saml_provider_arn.replace("+", "%2B"));

    }
}

#[doc="<p>Contains the response to a successful <a>GetSAMLProvider</a> request. </p>"]
#[derive(Default,Debug,Clone)]
pub struct GetSAMLProviderResponse {
    #[doc="<p>The date and time when the SAML provider was created.</p>"]
    pub create_date: Option<String>,
    #[doc="<p>The XML metadata document that includes information about an identity provider.</p>"]
    pub saml_metadata_document: Option<String>,
    #[doc="<p>The expiration date and time for the SAML provider.</p>"]
    pub valid_until: Option<String>,
}

struct GetSAMLProviderResponseDeserializer;
impl GetSAMLProviderResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<GetSAMLProviderResponse, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = GetSAMLProviderResponse::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "CreateDate" => {
                            obj.create_date = Some(try!(DateTypeDeserializer::deserialize("CreateDate",
                                                                                          stack)));
                        }
                        "SAMLMetadataDocument" => {
                            obj.saml_metadata_document = Some(try!(SAMLMetadataDocumentTypeDeserializer::deserialize("SAMLMetadataDocument", stack)));
                        }
                        "ValidUntil" => {
                            obj.valid_until = Some(try!(DateTypeDeserializer::deserialize("ValidUntil",
                                                                                          stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct GetSSHPublicKeyRequest {
    #[doc="<p>Specifies the public key encoding format to use in the response. To retrieve the public key in ssh-rsa format, use <code>SSH</code>. To retrieve the public key in PEM format, use <code>PEM</code>.</p>"]
    pub encoding: String,
    #[doc="<p>The unique identifier for the SSH public key.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>"]
    pub ssh_public_key_id: String,
    #[doc="<p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>"]
    pub user_name: String,
}


/// Serialize `GetSSHPublicKeyRequest` contents to a `SignedRequest`.
struct GetSSHPublicKeyRequestSerializer;
impl GetSSHPublicKeyRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &GetSSHPublicKeyRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "Encoding"),
                   &obj.encoding.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "SSHPublicKeyId"),
                   &obj.ssh_public_key_id.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "UserName"),
                   &obj.user_name.replace("+", "%2B"));

    }
}

#[doc="<p>Contains the response to a successful <a>GetSSHPublicKey</a> request.</p>"]
#[derive(Default,Debug,Clone)]
pub struct GetSSHPublicKeyResponse {
    #[doc="<p>A structure containing details about the SSH public key.</p>"]
    pub ssh_public_key: Option<SSHPublicKey>,
}

struct GetSSHPublicKeyResponseDeserializer;
impl GetSSHPublicKeyResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<GetSSHPublicKeyResponse, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = GetSSHPublicKeyResponse::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "SSHPublicKey" => {
                            obj.ssh_public_key =
                                Some(try!(SSHPublicKeyDeserializer::deserialize("SSHPublicKey",
                                                                                stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct GetServerCertificateRequest {
    #[doc="<p>The name of the server certificate you want to retrieve information about.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>"]
    pub server_certificate_name: String,
}


/// Serialize `GetServerCertificateRequest` contents to a `SignedRequest`.
struct GetServerCertificateRequestSerializer;
impl GetServerCertificateRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &GetServerCertificateRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "ServerCertificateName"),
                   &obj.server_certificate_name.replace("+", "%2B"));

    }
}

#[doc="<p>Contains the response to a successful <a>GetServerCertificate</a> request. </p>"]
#[derive(Default,Debug,Clone)]
pub struct GetServerCertificateResponse {
    #[doc="<p>A structure containing details about the server certificate.</p>"]
    pub server_certificate: ServerCertificate,
}

struct GetServerCertificateResponseDeserializer;
impl GetServerCertificateResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<GetServerCertificateResponse, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = GetServerCertificateResponse::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "ServerCertificate" => {
                            obj.server_certificate =
                                try!(ServerCertificateDeserializer::deserialize("ServerCertificate",
                                                                                stack));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct GetUserPolicyRequest {
    #[doc="<p>The name of the policy document to get.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>"]
    pub policy_name: String,
    #[doc="<p>The name of the user who the policy is associated with.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>"]
    pub user_name: String,
}


/// Serialize `GetUserPolicyRequest` contents to a `SignedRequest`.
struct GetUserPolicyRequestSerializer;
impl GetUserPolicyRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &GetUserPolicyRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "PolicyName"),
                   &obj.policy_name.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "UserName"),
                   &obj.user_name.replace("+", "%2B"));

    }
}

#[doc="<p>Contains the response to a successful <a>GetUserPolicy</a> request. </p>"]
#[derive(Default,Debug,Clone)]
pub struct GetUserPolicyResponse {
    #[doc="<p>The policy document.</p>"]
    pub policy_document: String,
    #[doc="<p>The name of the policy.</p>"]
    pub policy_name: String,
    #[doc="<p>The user the policy is associated with.</p>"]
    pub user_name: String,
}

struct GetUserPolicyResponseDeserializer;
impl GetUserPolicyResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<GetUserPolicyResponse, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = GetUserPolicyResponse::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "PolicyDocument" => {
                            obj.policy_document =
                                try!(PolicyDocumentTypeDeserializer::deserialize("PolicyDocument",
                                                                                 stack));
                        }
                        "PolicyName" => {
                            obj.policy_name = try!(PolicyNameTypeDeserializer::deserialize("PolicyName",
                                                                                           stack));
                        }
                        "UserName" => {
                            obj.user_name =
                                try!(ExistingUserNameTypeDeserializer::deserialize("UserName",
                                                                                   stack));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct GetUserRequest {
    #[doc="<p>The name of the user to get information about.</p> <p>This parameter is optional. If it is not included, it defaults to the user making the request. This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>"]
    pub user_name: Option<String>,
}


/// Serialize `GetUserRequest` contents to a `SignedRequest`.
struct GetUserRequestSerializer;
impl GetUserRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &GetUserRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.user_name {
            params.put(&format!("{}{}", prefix, "UserName"),
                       &field_value.replace("+", "%2B"));
        }

    }
}

#[doc="<p>Contains the response to a successful <a>GetUser</a> request. </p>"]
#[derive(Default,Debug,Clone)]
pub struct GetUserResponse {
    #[doc="<p>A structure containing details about the IAM user.</p>"]
    pub user: User,
}

struct GetUserResponseDeserializer;
impl GetUserResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<GetUserResponse, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = GetUserResponse::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "User" => {
                            obj.user = try!(UserDeserializer::deserialize("User", stack));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p>Contains information about an IAM group entity.</p> <p>This data type is used as a response element in the following actions:</p> <ul> <li> <p> <a>CreateGroup</a> </p> </li> <li> <p> <a>GetGroup</a> </p> </li> <li> <p> <a>ListGroups</a> </p> </li> </ul>"]
#[derive(Default,Debug,Clone)]
pub struct Group {
    #[doc="<p> The Amazon Resource Name (ARN) specifying the group. For more information about ARNs and how to use them in policies, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html\">IAM Identifiers</a> in the <i>Using IAM</i> guide. </p>"]
    pub arn: String,
    #[doc="<p>The date and time, in <a href=\"http://www.iso.org/iso/iso8601\">ISO 8601 date-time format</a>, when the group was created.</p>"]
    pub create_date: String,
    #[doc="<p> The stable and unique string identifying the group. For more information about IDs, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html\">IAM Identifiers</a> in the <i>Using IAM</i> guide. </p>"]
    pub group_id: String,
    #[doc="<p>The friendly name that identifies the group.</p>"]
    pub group_name: String,
    #[doc="<p>The path to the group. For more information about paths, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html\">IAM Identifiers</a> in the <i>Using IAM</i> guide. </p>"]
    pub path: String,
}

struct GroupDeserializer;
impl GroupDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Group, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = Group::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "Arn" => {
                            obj.arn = try!(ArnTypeDeserializer::deserialize("Arn", stack));
                        }
                        "CreateDate" => {
                            obj.create_date = try!(DateTypeDeserializer::deserialize("CreateDate",
                                                                                     stack));
                        }
                        "GroupId" => {
                            obj.group_id = try!(IdTypeDeserializer::deserialize("GroupId", stack));
                        }
                        "GroupName" => {
                            obj.group_name = try!(GroupNameTypeDeserializer::deserialize("GroupName",
                                                                                         stack));
                        }
                        "Path" => {
                            obj.path = try!(PathTypeDeserializer::deserialize("Path", stack));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p>Contains information about an IAM group, including all of the group's policies.</p> <p>This data type is used as a response element in the <a>GetAccountAuthorizationDetails</a> action.</p>"]
#[derive(Default,Debug,Clone)]
pub struct GroupDetail {
    pub arn: Option<String>,
    #[doc="<p>A list of the managed policies attached to the group.</p>"]
    pub attached_managed_policies: Option<Vec<AttachedPolicy>>,
    #[doc="<p>The date and time, in <a href=\"http://www.iso.org/iso/iso8601\">ISO 8601 date-time format</a>, when the group was created.</p>"]
    pub create_date: Option<String>,
    #[doc="<p>The stable and unique string identifying the group. For more information about IDs, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html\">IAM Identifiers</a> in the <i>Using IAM</i> guide.</p>"]
    pub group_id: Option<String>,
    #[doc="<p>The friendly name that identifies the group.</p>"]
    pub group_name: Option<String>,
    #[doc="<p>A list of the inline policies embedded in the group.</p>"]
    pub group_policy_list: Option<Vec<PolicyDetail>>,
    #[doc="<p>The path to the group. For more information about paths, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html\">IAM Identifiers</a> in the <i>Using IAM</i> guide.</p>"]
    pub path: Option<String>,
}

struct GroupDetailDeserializer;
impl GroupDetailDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<GroupDetail, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = GroupDetail::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "Arn" => {
                            obj.arn = Some(try!(ArnTypeDeserializer::deserialize("Arn", stack)));
                        }
                        "AttachedManagedPolicies" => {
                            obj.attached_managed_policies = Some(try!(AttachedPoliciesListTypeDeserializer::deserialize("AttachedManagedPolicies", stack)));
                        }
                        "CreateDate" => {
                            obj.create_date = Some(try!(DateTypeDeserializer::deserialize("CreateDate",
                                                                                          stack)));
                        }
                        "GroupId" => {
                            obj.group_id = Some(try!(IdTypeDeserializer::deserialize("GroupId",
                                                                                     stack)));
                        }
                        "GroupName" => {
                            obj.group_name =
                                Some(try!(GroupNameTypeDeserializer::deserialize("GroupName",
                                                                                 stack)));
                        }
                        "GroupPolicyList" => {
                            obj.group_policy_list =
                                Some(try!(PolicyDetailListTypeDeserializer::deserialize("GroupPolicyList",
                                                                                        stack)));
                        }
                        "Path" => {
                            obj.path = Some(try!(PathTypeDeserializer::deserialize("Path", stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct GroupDetailListTypeDeserializer;
impl GroupDetailListTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<GroupDetail>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "member" {
                        obj.push(try!(GroupDetailDeserializer::deserialize("member", stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
struct GroupListTypeDeserializer;
impl GroupListTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<Group>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "member" {
                        obj.push(try!(GroupDeserializer::deserialize("member", stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
struct GroupNameListTypeDeserializer;
impl GroupNameListTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<String>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "member" {
                        obj.push(try!(GroupNameTypeDeserializer::deserialize("member", stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
struct GroupNameTypeDeserializer;
impl GroupNameTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<String, XmlParseError> {
        try!(start_element(tag_name, stack));
        let obj = try!(characters(stack));
        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct IdTypeDeserializer;
impl IdTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<String, XmlParseError> {
        try!(start_element(tag_name, stack));
        let obj = try!(characters(stack));
        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p>Contains information about an instance profile.</p> <p>This data type is used as a response element in the following actions:</p> <ul> <li> <p> <a>CreateInstanceProfile</a> </p> </li> <li> <p> <a>GetInstanceProfile</a> </p> </li> <li> <p> <a>ListInstanceProfiles</a> </p> </li> <li> <p> <a>ListInstanceProfilesForRole</a> </p> </li> </ul>"]
#[derive(Default,Debug,Clone)]
pub struct InstanceProfile {
    #[doc="<p> The Amazon Resource Name (ARN) specifying the instance profile. For more information about ARNs and how to use them in policies, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html\">IAM Identifiers</a> in the <i>Using IAM</i> guide. </p>"]
    pub arn: String,
    #[doc="<p>The date when the instance profile was created.</p>"]
    pub create_date: String,
    #[doc="<p> The stable and unique string identifying the instance profile. For more information about IDs, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html\">IAM Identifiers</a> in the <i>Using IAM</i> guide. </p>"]
    pub instance_profile_id: String,
    #[doc="<p>The name identifying the instance profile.</p>"]
    pub instance_profile_name: String,
    #[doc="<p> The path to the instance profile. For more information about paths, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html\">IAM Identifiers</a> in the <i>Using IAM</i> guide. </p>"]
    pub path: String,
    #[doc="<p>The role associated with the instance profile.</p>"]
    pub roles: Vec<Role>,
}

struct InstanceProfileDeserializer;
impl InstanceProfileDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<InstanceProfile, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = InstanceProfile::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "Arn" => {
                            obj.arn = try!(ArnTypeDeserializer::deserialize("Arn", stack));
                        }
                        "CreateDate" => {
                            obj.create_date = try!(DateTypeDeserializer::deserialize("CreateDate",
                                                                                     stack));
                        }
                        "InstanceProfileId" => {
                            obj.instance_profile_id = try!(IdTypeDeserializer::deserialize("InstanceProfileId",
                                                                                           stack));
                        }
                        "InstanceProfileName" => {
                            obj.instance_profile_name =
                                try!(InstanceProfileNameTypeDeserializer::deserialize("InstanceProfileName",
                                                                                      stack));
                        }
                        "Path" => {
                            obj.path = try!(PathTypeDeserializer::deserialize("Path", stack));
                        }
                        "Roles" => {
                            obj.roles = try!(RoleListTypeDeserializer::deserialize("Roles", stack));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct InstanceProfileListTypeDeserializer;
impl InstanceProfileListTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<InstanceProfile>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "member" {
                        obj.push(try!(InstanceProfileDeserializer::deserialize("member", stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
struct InstanceProfileNameTypeDeserializer;
impl InstanceProfileNameTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<String, XmlParseError> {
        try!(start_element(tag_name, stack));
        let obj = try!(characters(stack));
        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct LineNumberDeserializer;
impl LineNumberDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<i64, XmlParseError> {
        try!(start_element(tag_name, stack));
        let obj = i64::from_str(try!(characters(stack)).as_ref()).unwrap();
        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct ListAccessKeysRequest {
    #[doc="<p>Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.</p>"]
    pub marker: Option<String>,
    #[doc="<p>(Optional) Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code> and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>"]
    pub max_items: Option<i64>,
    #[doc="<p>The name of the user.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>"]
    pub user_name: Option<String>,
}


/// Serialize `ListAccessKeysRequest` contents to a `SignedRequest`.
struct ListAccessKeysRequestSerializer;
impl ListAccessKeysRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ListAccessKeysRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.max_items {
            params.put(&format!("{}{}", prefix, "MaxItems"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.user_name {
            params.put(&format!("{}{}", prefix, "UserName"),
                       &field_value.replace("+", "%2B"));
        }

    }
}

#[doc="<p>Contains the response to a successful <a>ListAccessKeys</a> request. </p>"]
#[derive(Default,Debug,Clone)]
pub struct ListAccessKeysResponse {
    #[doc="<p>A list of objects containing metadata about the access keys.</p>"]
    pub access_key_metadata: Vec<AccessKeyMetadata>,
    #[doc="<p>A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the <code>Marker</code> request parameter to retrieve more items. Note that IAM might return fewer than the <code>MaxItems</code> number of results even when there are more results available. We recommend that you check <code>IsTruncated</code> after every call to ensure that you receive all of your results.</p>"]
    pub is_truncated: Option<bool>,
    #[doc="<p>When <code>IsTruncated</code> is <code>true</code>, this element is present and contains the value to use for the <code>Marker</code> parameter in a subsequent pagination request.</p>"]
    pub marker: Option<String>,
}

struct ListAccessKeysResponseDeserializer;
impl ListAccessKeysResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<ListAccessKeysResponse, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = ListAccessKeysResponse::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "AccessKeyMetadata" => {
                            obj.access_key_metadata =
                                try!(AccessKeyMetadataListTypeDeserializer::deserialize("AccessKeyMetadata",
                                                                                        stack));
                        }
                        "IsTruncated" => {
                            obj.is_truncated =
                                Some(try!(BooleanTypeDeserializer::deserialize("IsTruncated",
                                                                               stack)));
                        }
                        "Marker" => {
                            obj.marker = Some(try!(MarkerTypeDeserializer::deserialize("Marker",
                                                                                       stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct ListAccountAliasesRequest {
    #[doc="<p>Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.</p>"]
    pub marker: Option<String>,
    #[doc="<p>(Optional) Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code> and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>"]
    pub max_items: Option<i64>,
}


/// Serialize `ListAccountAliasesRequest` contents to a `SignedRequest`.
struct ListAccountAliasesRequestSerializer;
impl ListAccountAliasesRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ListAccountAliasesRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.max_items {
            params.put(&format!("{}{}", prefix, "MaxItems"),
                       &field_value.to_string().replace("+", "%2B"));
        }

    }
}

#[doc="<p>Contains the response to a successful <a>ListAccountAliases</a> request. </p>"]
#[derive(Default,Debug,Clone)]
pub struct ListAccountAliasesResponse {
    #[doc="<p>A list of aliases associated with the account. AWS supports only one alias per account.</p>"]
    pub account_aliases: Vec<String>,
    #[doc="<p>A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the <code>Marker</code> request parameter to retrieve more items. Note that IAM might return fewer than the <code>MaxItems</code> number of results even when there are more results available. We recommend that you check <code>IsTruncated</code> after every call to ensure that you receive all of your results.</p>"]
    pub is_truncated: Option<bool>,
    #[doc="<p>When <code>IsTruncated</code> is <code>true</code>, this element is present and contains the value to use for the <code>Marker</code> parameter in a subsequent pagination request.</p>"]
    pub marker: Option<String>,
}

struct ListAccountAliasesResponseDeserializer;
impl ListAccountAliasesResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<ListAccountAliasesResponse, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = ListAccountAliasesResponse::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "AccountAliases" => {
                            obj.account_aliases =
                                try!(AccountAliasListTypeDeserializer::deserialize("AccountAliases",
                                                                                   stack));
                        }
                        "IsTruncated" => {
                            obj.is_truncated =
                                Some(try!(BooleanTypeDeserializer::deserialize("IsTruncated",
                                                                               stack)));
                        }
                        "Marker" => {
                            obj.marker = Some(try!(MarkerTypeDeserializer::deserialize("Marker",
                                                                                       stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct ListAttachedGroupPoliciesRequest {
    #[doc="<p>The name (friendly name, not ARN) of the group to list attached policies for.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>"]
    pub group_name: String,
    #[doc="<p>Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.</p>"]
    pub marker: Option<String>,
    #[doc="<p>(Optional) Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code> and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>"]
    pub max_items: Option<i64>,
    #[doc="<p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This paramater allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes, containing any ASCII character from the ! (\\u0021) thru the DEL character (\\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>"]
    pub path_prefix: Option<String>,
}


/// Serialize `ListAttachedGroupPoliciesRequest` contents to a `SignedRequest`.
struct ListAttachedGroupPoliciesRequestSerializer;
impl ListAttachedGroupPoliciesRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ListAttachedGroupPoliciesRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "GroupName"),
                   &obj.group_name.replace("+", "%2B"));
        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.max_items {
            params.put(&format!("{}{}", prefix, "MaxItems"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.path_prefix {
            params.put(&format!("{}{}", prefix, "PathPrefix"),
                       &field_value.replace("+", "%2B"));
        }

    }
}

#[doc="<p>Contains the response to a successful <a>ListAttachedGroupPolicies</a> request. </p>"]
#[derive(Default,Debug,Clone)]
pub struct ListAttachedGroupPoliciesResponse {
    #[doc="<p>A list of the attached policies.</p>"]
    pub attached_policies: Option<Vec<AttachedPolicy>>,
    #[doc="<p>A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the <code>Marker</code> request parameter to retrieve more items. Note that IAM might return fewer than the <code>MaxItems</code> number of results even when there are more results available. We recommend that you check <code>IsTruncated</code> after every call to ensure that you receive all of your results.</p>"]
    pub is_truncated: Option<bool>,
    #[doc="<p>When <code>IsTruncated</code> is <code>true</code>, this element is present and contains the value to use for the <code>Marker</code> parameter in a subsequent pagination request.</p>"]
    pub marker: Option<String>,
}

struct ListAttachedGroupPoliciesResponseDeserializer;
impl ListAttachedGroupPoliciesResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>
        (tag_name: &str,
         stack: &mut T)
         -> Result<ListAttachedGroupPoliciesResponse, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = ListAttachedGroupPoliciesResponse::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "AttachedPolicies" => {
                            obj.attached_policies = Some(try!(AttachedPoliciesListTypeDeserializer::deserialize("AttachedPolicies", stack)));
                        }
                        "IsTruncated" => {
                            obj.is_truncated =
                                Some(try!(BooleanTypeDeserializer::deserialize("IsTruncated",
                                                                               stack)));
                        }
                        "Marker" => {
                            obj.marker = Some(try!(MarkerTypeDeserializer::deserialize("Marker",
                                                                                       stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct ListAttachedRolePoliciesRequest {
    #[doc="<p>Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.</p>"]
    pub marker: Option<String>,
    #[doc="<p>(Optional) Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code> and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>"]
    pub max_items: Option<i64>,
    #[doc="<p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This paramater allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes, containing any ASCII character from the ! (\\u0021) thru the DEL character (\\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>"]
    pub path_prefix: Option<String>,
    #[doc="<p>The name (friendly name, not ARN) of the role to list attached policies for.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>"]
    pub role_name: String,
}


/// Serialize `ListAttachedRolePoliciesRequest` contents to a `SignedRequest`.
struct ListAttachedRolePoliciesRequestSerializer;
impl ListAttachedRolePoliciesRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ListAttachedRolePoliciesRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.max_items {
            params.put(&format!("{}{}", prefix, "MaxItems"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.path_prefix {
            params.put(&format!("{}{}", prefix, "PathPrefix"),
                       &field_value.replace("+", "%2B"));
        }
        params.put(&format!("{}{}", prefix, "RoleName"),
                   &obj.role_name.replace("+", "%2B"));

    }
}

#[doc="<p>Contains the response to a successful <a>ListAttachedRolePolicies</a> request. </p>"]
#[derive(Default,Debug,Clone)]
pub struct ListAttachedRolePoliciesResponse {
    #[doc="<p>A list of the attached policies.</p>"]
    pub attached_policies: Option<Vec<AttachedPolicy>>,
    #[doc="<p>A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the <code>Marker</code> request parameter to retrieve more items. Note that IAM might return fewer than the <code>MaxItems</code> number of results even when there are more results available. We recommend that you check <code>IsTruncated</code> after every call to ensure that you receive all of your results.</p>"]
    pub is_truncated: Option<bool>,
    #[doc="<p>When <code>IsTruncated</code> is <code>true</code>, this element is present and contains the value to use for the <code>Marker</code> parameter in a subsequent pagination request.</p>"]
    pub marker: Option<String>,
}

struct ListAttachedRolePoliciesResponseDeserializer;
impl ListAttachedRolePoliciesResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>
        (tag_name: &str,
         stack: &mut T)
         -> Result<ListAttachedRolePoliciesResponse, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = ListAttachedRolePoliciesResponse::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "AttachedPolicies" => {
                            obj.attached_policies = Some(try!(AttachedPoliciesListTypeDeserializer::deserialize("AttachedPolicies", stack)));
                        }
                        "IsTruncated" => {
                            obj.is_truncated =
                                Some(try!(BooleanTypeDeserializer::deserialize("IsTruncated",
                                                                               stack)));
                        }
                        "Marker" => {
                            obj.marker = Some(try!(MarkerTypeDeserializer::deserialize("Marker",
                                                                                       stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct ListAttachedUserPoliciesRequest {
    #[doc="<p>Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.</p>"]
    pub marker: Option<String>,
    #[doc="<p>(Optional) Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code> and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>"]
    pub max_items: Option<i64>,
    #[doc="<p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This paramater allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes, containing any ASCII character from the ! (\\u0021) thru the DEL character (\\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>"]
    pub path_prefix: Option<String>,
    #[doc="<p>The name (friendly name, not ARN) of the user to list attached policies for.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>"]
    pub user_name: String,
}


/// Serialize `ListAttachedUserPoliciesRequest` contents to a `SignedRequest`.
struct ListAttachedUserPoliciesRequestSerializer;
impl ListAttachedUserPoliciesRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ListAttachedUserPoliciesRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.max_items {
            params.put(&format!("{}{}", prefix, "MaxItems"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.path_prefix {
            params.put(&format!("{}{}", prefix, "PathPrefix"),
                       &field_value.replace("+", "%2B"));
        }
        params.put(&format!("{}{}", prefix, "UserName"),
                   &obj.user_name.replace("+", "%2B"));

    }
}

#[doc="<p>Contains the response to a successful <a>ListAttachedUserPolicies</a> request. </p>"]
#[derive(Default,Debug,Clone)]
pub struct ListAttachedUserPoliciesResponse {
    #[doc="<p>A list of the attached policies.</p>"]
    pub attached_policies: Option<Vec<AttachedPolicy>>,
    #[doc="<p>A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the <code>Marker</code> request parameter to retrieve more items. Note that IAM might return fewer than the <code>MaxItems</code> number of results even when there are more results available. We recommend that you check <code>IsTruncated</code> after every call to ensure that you receive all of your results.</p>"]
    pub is_truncated: Option<bool>,
    #[doc="<p>When <code>IsTruncated</code> is <code>true</code>, this element is present and contains the value to use for the <code>Marker</code> parameter in a subsequent pagination request.</p>"]
    pub marker: Option<String>,
}

struct ListAttachedUserPoliciesResponseDeserializer;
impl ListAttachedUserPoliciesResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>
        (tag_name: &str,
         stack: &mut T)
         -> Result<ListAttachedUserPoliciesResponse, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = ListAttachedUserPoliciesResponse::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "AttachedPolicies" => {
                            obj.attached_policies = Some(try!(AttachedPoliciesListTypeDeserializer::deserialize("AttachedPolicies", stack)));
                        }
                        "IsTruncated" => {
                            obj.is_truncated =
                                Some(try!(BooleanTypeDeserializer::deserialize("IsTruncated",
                                                                               stack)));
                        }
                        "Marker" => {
                            obj.marker = Some(try!(MarkerTypeDeserializer::deserialize("Marker",
                                                                                       stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct ListEntitiesForPolicyRequest {
    #[doc="<p>The entity type to use for filtering the results.</p> <p>For example, when <code>EntityFilter</code> is <code>Role</code>, only the roles that are attached to the specified policy are returned. This parameter is optional. If it is not included, all attached entities (users, groups, and roles) are returned. The argument for this parameter must be one of the valid values listed below.</p>"]
    pub entity_filter: Option<String>,
    #[doc="<p>Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.</p>"]
    pub marker: Option<String>,
    #[doc="<p>(Optional) Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code> and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>"]
    pub max_items: Option<i64>,
    #[doc="<p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all entities.</p> <p>This paramater allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes, containing any ASCII character from the ! (\\u0021) thru the DEL character (\\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>"]
    pub path_prefix: Option<String>,
    #[doc="<p>The Amazon Resource Name (ARN) of the IAM policy for which you want the versions.</p> <p>For more information about ARNs, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>"]
    pub policy_arn: String,
}


/// Serialize `ListEntitiesForPolicyRequest` contents to a `SignedRequest`.
struct ListEntitiesForPolicyRequestSerializer;
impl ListEntitiesForPolicyRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ListEntitiesForPolicyRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.entity_filter {
            params.put(&format!("{}{}", prefix, "EntityFilter"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.max_items {
            params.put(&format!("{}{}", prefix, "MaxItems"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.path_prefix {
            params.put(&format!("{}{}", prefix, "PathPrefix"),
                       &field_value.replace("+", "%2B"));
        }
        params.put(&format!("{}{}", prefix, "PolicyArn"),
                   &obj.policy_arn.replace("+", "%2B"));

    }
}

#[doc="<p>Contains the response to a successful <a>ListEntitiesForPolicy</a> request. </p>"]
#[derive(Default,Debug,Clone)]
pub struct ListEntitiesForPolicyResponse {
    #[doc="<p>A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the <code>Marker</code> request parameter to retrieve more items. Note that IAM might return fewer than the <code>MaxItems</code> number of results even when there are more results available. We recommend that you check <code>IsTruncated</code> after every call to ensure that you receive all of your results.</p>"]
    pub is_truncated: Option<bool>,
    #[doc="<p>When <code>IsTruncated</code> is <code>true</code>, this element is present and contains the value to use for the <code>Marker</code> parameter in a subsequent pagination request.</p>"]
    pub marker: Option<String>,
    #[doc="<p>A list of IAM groups that the policy is attached to.</p>"]
    pub policy_groups: Option<Vec<PolicyGroup>>,
    #[doc="<p>A list of IAM roles that the policy is attached to.</p>"]
    pub policy_roles: Option<Vec<PolicyRole>>,
    #[doc="<p>A list of IAM users that the policy is attached to.</p>"]
    pub policy_users: Option<Vec<PolicyUser>>,
}

struct ListEntitiesForPolicyResponseDeserializer;
impl ListEntitiesForPolicyResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<ListEntitiesForPolicyResponse, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = ListEntitiesForPolicyResponse::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "IsTruncated" => {
                            obj.is_truncated =
                                Some(try!(BooleanTypeDeserializer::deserialize("IsTruncated",
                                                                               stack)));
                        }
                        "Marker" => {
                            obj.marker = Some(try!(MarkerTypeDeserializer::deserialize("Marker",
                                                                                       stack)));
                        }
                        "PolicyGroups" => {
                            obj.policy_groups =
                                Some(try!(PolicyGroupListTypeDeserializer::deserialize("PolicyGroups",
                                                                                       stack)));
                        }
                        "PolicyRoles" => {
                            obj.policy_roles =
                                Some(try!(PolicyRoleListTypeDeserializer::deserialize("PolicyRoles",
                                                                                      stack)));
                        }
                        "PolicyUsers" => {
                            obj.policy_users =
                                Some(try!(PolicyUserListTypeDeserializer::deserialize("PolicyUsers",
                                                                                      stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct ListGroupPoliciesRequest {
    #[doc="<p>The name of the group to list policies for.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>"]
    pub group_name: String,
    #[doc="<p>Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.</p>"]
    pub marker: Option<String>,
    #[doc="<p>(Optional) Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code> and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>"]
    pub max_items: Option<i64>,
}


/// Serialize `ListGroupPoliciesRequest` contents to a `SignedRequest`.
struct ListGroupPoliciesRequestSerializer;
impl ListGroupPoliciesRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ListGroupPoliciesRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "GroupName"),
                   &obj.group_name.replace("+", "%2B"));
        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.max_items {
            params.put(&format!("{}{}", prefix, "MaxItems"),
                       &field_value.to_string().replace("+", "%2B"));
        }

    }
}

#[doc="<p>Contains the response to a successful <a>ListGroupPolicies</a> request. </p>"]
#[derive(Default,Debug,Clone)]
pub struct ListGroupPoliciesResponse {
    #[doc="<p>A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the <code>Marker</code> request parameter to retrieve more items. Note that IAM might return fewer than the <code>MaxItems</code> number of results even when there are more results available. We recommend that you check <code>IsTruncated</code> after every call to ensure that you receive all of your results.</p>"]
    pub is_truncated: Option<bool>,
    #[doc="<p>When <code>IsTruncated</code> is <code>true</code>, this element is present and contains the value to use for the <code>Marker</code> parameter in a subsequent pagination request.</p>"]
    pub marker: Option<String>,
    #[doc="<p>A list of policy names.</p>"]
    pub policy_names: Vec<String>,
}

struct ListGroupPoliciesResponseDeserializer;
impl ListGroupPoliciesResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<ListGroupPoliciesResponse, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = ListGroupPoliciesResponse::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "IsTruncated" => {
                            obj.is_truncated =
                                Some(try!(BooleanTypeDeserializer::deserialize("IsTruncated",
                                                                               stack)));
                        }
                        "Marker" => {
                            obj.marker = Some(try!(MarkerTypeDeserializer::deserialize("Marker",
                                                                                       stack)));
                        }
                        "PolicyNames" => {
                            obj.policy_names =
                                try!(PolicyNameListTypeDeserializer::deserialize("PolicyNames",
                                                                                 stack));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct ListGroupsForUserRequest {
    #[doc="<p>Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.</p>"]
    pub marker: Option<String>,
    #[doc="<p>(Optional) Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code> and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>"]
    pub max_items: Option<i64>,
    #[doc="<p>The name of the user to list groups for.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>"]
    pub user_name: String,
}


/// Serialize `ListGroupsForUserRequest` contents to a `SignedRequest`.
struct ListGroupsForUserRequestSerializer;
impl ListGroupsForUserRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ListGroupsForUserRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.max_items {
            params.put(&format!("{}{}", prefix, "MaxItems"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        params.put(&format!("{}{}", prefix, "UserName"),
                   &obj.user_name.replace("+", "%2B"));

    }
}

#[doc="<p>Contains the response to a successful <a>ListGroupsForUser</a> request. </p>"]
#[derive(Default,Debug,Clone)]
pub struct ListGroupsForUserResponse {
    #[doc="<p>A list of groups.</p>"]
    pub groups: Vec<Group>,
    #[doc="<p>A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the <code>Marker</code> request parameter to retrieve more items. Note that IAM might return fewer than the <code>MaxItems</code> number of results even when there are more results available. We recommend that you check <code>IsTruncated</code> after every call to ensure that you receive all of your results.</p>"]
    pub is_truncated: Option<bool>,
    #[doc="<p>When <code>IsTruncated</code> is <code>true</code>, this element is present and contains the value to use for the <code>Marker</code> parameter in a subsequent pagination request.</p>"]
    pub marker: Option<String>,
}

struct ListGroupsForUserResponseDeserializer;
impl ListGroupsForUserResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<ListGroupsForUserResponse, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = ListGroupsForUserResponse::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "Groups" => {
                            obj.groups = try!(GroupListTypeDeserializer::deserialize("Groups",
                                                                                     stack));
                        }
                        "IsTruncated" => {
                            obj.is_truncated =
                                Some(try!(BooleanTypeDeserializer::deserialize("IsTruncated",
                                                                               stack)));
                        }
                        "Marker" => {
                            obj.marker = Some(try!(MarkerTypeDeserializer::deserialize("Marker",
                                                                                       stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct ListGroupsRequest {
    #[doc="<p>Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.</p>"]
    pub marker: Option<String>,
    #[doc="<p>(Optional) Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code> and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>"]
    pub max_items: Option<i64>,
    #[doc="<p> The path prefix for filtering the results. For example, the prefix <code>/division_abc/subdivision_xyz/</code> gets all groups whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all groups. This paramater allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes, containing any ASCII character from the ! (\\u0021) thru the DEL character (\\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>"]
    pub path_prefix: Option<String>,
}


/// Serialize `ListGroupsRequest` contents to a `SignedRequest`.
struct ListGroupsRequestSerializer;
impl ListGroupsRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ListGroupsRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.max_items {
            params.put(&format!("{}{}", prefix, "MaxItems"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.path_prefix {
            params.put(&format!("{}{}", prefix, "PathPrefix"),
                       &field_value.replace("+", "%2B"));
        }

    }
}

#[doc="<p>Contains the response to a successful <a>ListGroups</a> request. </p>"]
#[derive(Default,Debug,Clone)]
pub struct ListGroupsResponse {
    #[doc="<p>A list of groups.</p>"]
    pub groups: Vec<Group>,
    #[doc="<p>A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the <code>Marker</code> request parameter to retrieve more items. Note that IAM might return fewer than the <code>MaxItems</code> number of results even when there are more results available. We recommend that you check <code>IsTruncated</code> after every call to ensure that you receive all of your results.</p>"]
    pub is_truncated: Option<bool>,
    #[doc="<p>When <code>IsTruncated</code> is <code>true</code>, this element is present and contains the value to use for the <code>Marker</code> parameter in a subsequent pagination request.</p>"]
    pub marker: Option<String>,
}

struct ListGroupsResponseDeserializer;
impl ListGroupsResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<ListGroupsResponse, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = ListGroupsResponse::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "Groups" => {
                            obj.groups = try!(GroupListTypeDeserializer::deserialize("Groups",
                                                                                     stack));
                        }
                        "IsTruncated" => {
                            obj.is_truncated =
                                Some(try!(BooleanTypeDeserializer::deserialize("IsTruncated",
                                                                               stack)));
                        }
                        "Marker" => {
                            obj.marker = Some(try!(MarkerTypeDeserializer::deserialize("Marker",
                                                                                       stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct ListInstanceProfilesForRoleRequest {
    #[doc="<p>Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.</p>"]
    pub marker: Option<String>,
    #[doc="<p>(Optional) Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code> and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>"]
    pub max_items: Option<i64>,
    #[doc="<p>The name of the role to list instance profiles for.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>"]
    pub role_name: String,
}


/// Serialize `ListInstanceProfilesForRoleRequest` contents to a `SignedRequest`.
struct ListInstanceProfilesForRoleRequestSerializer;
impl ListInstanceProfilesForRoleRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ListInstanceProfilesForRoleRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.max_items {
            params.put(&format!("{}{}", prefix, "MaxItems"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        params.put(&format!("{}{}", prefix, "RoleName"),
                   &obj.role_name.replace("+", "%2B"));

    }
}

#[doc="<p>Contains the response to a successful <a>ListInstanceProfilesForRole</a> request. </p>"]
#[derive(Default,Debug,Clone)]
pub struct ListInstanceProfilesForRoleResponse {
    #[doc="<p>A list of instance profiles.</p>"]
    pub instance_profiles: Vec<InstanceProfile>,
    #[doc="<p>A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the <code>Marker</code> request parameter to retrieve more items. Note that IAM might return fewer than the <code>MaxItems</code> number of results even when there are more results available. We recommend that you check <code>IsTruncated</code> after every call to ensure that you receive all of your results.</p>"]
    pub is_truncated: Option<bool>,
    #[doc="<p>When <code>IsTruncated</code> is <code>true</code>, this element is present and contains the value to use for the <code>Marker</code> parameter in a subsequent pagination request.</p>"]
    pub marker: Option<String>,
}

struct ListInstanceProfilesForRoleResponseDeserializer;
impl ListInstanceProfilesForRoleResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>
        (tag_name: &str,
         stack: &mut T)
         -> Result<ListInstanceProfilesForRoleResponse, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = ListInstanceProfilesForRoleResponse::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "InstanceProfiles" => {
                            obj.instance_profiles =
                                try!(InstanceProfileListTypeDeserializer::deserialize("InstanceProfiles",
                                                                                      stack));
                        }
                        "IsTruncated" => {
                            obj.is_truncated =
                                Some(try!(BooleanTypeDeserializer::deserialize("IsTruncated",
                                                                               stack)));
                        }
                        "Marker" => {
                            obj.marker = Some(try!(MarkerTypeDeserializer::deserialize("Marker",
                                                                                       stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct ListInstanceProfilesRequest {
    #[doc="<p>Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.</p>"]
    pub marker: Option<String>,
    #[doc="<p>(Optional) Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code> and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>"]
    pub max_items: Option<i64>,
    #[doc="<p> The path prefix for filtering the results. For example, the prefix <code>/application_abc/component_xyz/</code> gets all instance profiles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all instance profiles. This paramater allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes, containing any ASCII character from the ! (\\u0021) thru the DEL character (\\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>"]
    pub path_prefix: Option<String>,
}


/// Serialize `ListInstanceProfilesRequest` contents to a `SignedRequest`.
struct ListInstanceProfilesRequestSerializer;
impl ListInstanceProfilesRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ListInstanceProfilesRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.max_items {
            params.put(&format!("{}{}", prefix, "MaxItems"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.path_prefix {
            params.put(&format!("{}{}", prefix, "PathPrefix"),
                       &field_value.replace("+", "%2B"));
        }

    }
}

#[doc="<p>Contains the response to a successful <a>ListInstanceProfiles</a> request. </p>"]
#[derive(Default,Debug,Clone)]
pub struct ListInstanceProfilesResponse {
    #[doc="<p>A list of instance profiles.</p>"]
    pub instance_profiles: Vec<InstanceProfile>,
    #[doc="<p>A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the <code>Marker</code> request parameter to retrieve more items. Note that IAM might return fewer than the <code>MaxItems</code> number of results even when there are more results available. We recommend that you check <code>IsTruncated</code> after every call to ensure that you receive all of your results.</p>"]
    pub is_truncated: Option<bool>,
    #[doc="<p>When <code>IsTruncated</code> is <code>true</code>, this element is present and contains the value to use for the <code>Marker</code> parameter in a subsequent pagination request.</p>"]
    pub marker: Option<String>,
}

struct ListInstanceProfilesResponseDeserializer;
impl ListInstanceProfilesResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<ListInstanceProfilesResponse, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = ListInstanceProfilesResponse::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "InstanceProfiles" => {
                            obj.instance_profiles =
                                try!(InstanceProfileListTypeDeserializer::deserialize("InstanceProfiles",
                                                                                      stack));
                        }
                        "IsTruncated" => {
                            obj.is_truncated =
                                Some(try!(BooleanTypeDeserializer::deserialize("IsTruncated",
                                                                               stack)));
                        }
                        "Marker" => {
                            obj.marker = Some(try!(MarkerTypeDeserializer::deserialize("Marker",
                                                                                       stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct ListMFADevicesRequest {
    #[doc="<p>Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.</p>"]
    pub marker: Option<String>,
    #[doc="<p>(Optional) Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code> and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>"]
    pub max_items: Option<i64>,
    #[doc="<p>The name of the user whose MFA devices you want to list.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>"]
    pub user_name: Option<String>,
}


/// Serialize `ListMFADevicesRequest` contents to a `SignedRequest`.
struct ListMFADevicesRequestSerializer;
impl ListMFADevicesRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ListMFADevicesRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.max_items {
            params.put(&format!("{}{}", prefix, "MaxItems"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.user_name {
            params.put(&format!("{}{}", prefix, "UserName"),
                       &field_value.replace("+", "%2B"));
        }

    }
}

#[doc="<p>Contains the response to a successful <a>ListMFADevices</a> request. </p>"]
#[derive(Default,Debug,Clone)]
pub struct ListMFADevicesResponse {
    #[doc="<p>A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the <code>Marker</code> request parameter to retrieve more items. Note that IAM might return fewer than the <code>MaxItems</code> number of results even when there are more results available. We recommend that you check <code>IsTruncated</code> after every call to ensure that you receive all of your results.</p>"]
    pub is_truncated: Option<bool>,
    #[doc="<p>A list of MFA devices.</p>"]
    pub mfa_devices: Vec<MFADevice>,
    #[doc="<p>When <code>IsTruncated</code> is <code>true</code>, this element is present and contains the value to use for the <code>Marker</code> parameter in a subsequent pagination request.</p>"]
    pub marker: Option<String>,
}

struct ListMFADevicesResponseDeserializer;
impl ListMFADevicesResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<ListMFADevicesResponse, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = ListMFADevicesResponse::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "IsTruncated" => {
                            obj.is_truncated =
                                Some(try!(BooleanTypeDeserializer::deserialize("IsTruncated",
                                                                               stack)));
                        }
                        "MFADevices" => {
                            obj.mfa_devices =
                                try!(MfaDeviceListTypeDeserializer::deserialize("MFADevices",
                                                                                stack));
                        }
                        "Marker" => {
                            obj.marker = Some(try!(MarkerTypeDeserializer::deserialize("Marker",
                                                                                       stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct ListOpenIDConnectProvidersRequest;


/// Serialize `ListOpenIDConnectProvidersRequest` contents to a `SignedRequest`.
struct ListOpenIDConnectProvidersRequestSerializer;
impl ListOpenIDConnectProvidersRequestSerializer {
    fn serialize(_params: &mut Params, name: &str, _obj: &ListOpenIDConnectProvidersRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }



    }
}

#[doc="<p>Contains the response to a successful <a>ListOpenIDConnectProviders</a> request. </p>"]
#[derive(Default,Debug,Clone)]
pub struct ListOpenIDConnectProvidersResponse {
    #[doc="<p>The list of IAM OIDC provider resource objects defined in the AWS account.</p>"]
    pub open_id_connect_provider_list: Option<Vec<OpenIDConnectProviderListEntry>>,
}

struct ListOpenIDConnectProvidersResponseDeserializer;
impl ListOpenIDConnectProvidersResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>
        (tag_name: &str,
         stack: &mut T)
         -> Result<ListOpenIDConnectProvidersResponse, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = ListOpenIDConnectProvidersResponse::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "OpenIDConnectProviderList" => {
                            obj.open_id_connect_provider_list = Some(try!(OpenIDConnectProviderListTypeDeserializer::deserialize("OpenIDConnectProviderList", stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct ListPoliciesRequest {
    #[doc="<p>Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.</p>"]
    pub marker: Option<String>,
    #[doc="<p>(Optional) Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code> and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>"]
    pub max_items: Option<i64>,
    #[doc="<p>A flag to filter the results to only the attached policies.</p> <p>When <code>OnlyAttached</code> is <code>true</code>, the returned list contains only the policies that are attached to an IAM user, group, or role. When <code>OnlyAttached</code> is <code>false</code>, or when the parameter is not included, all policies are returned.</p>"]
    pub only_attached: Option<bool>,
    #[doc="<p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies. This paramater allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes, containing any ASCII character from the ! (\\u0021) thru the DEL character (\\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>"]
    pub path_prefix: Option<String>,
    #[doc="<p>The scope to use for filtering the results.</p> <p>To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>. To list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>.</p> <p>This parameter is optional. If it is not included, or if it is set to <code>All</code>, all policies are returned.</p>"]
    pub scope: Option<String>,
}


/// Serialize `ListPoliciesRequest` contents to a `SignedRequest`.
struct ListPoliciesRequestSerializer;
impl ListPoliciesRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ListPoliciesRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.max_items {
            params.put(&format!("{}{}", prefix, "MaxItems"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.only_attached {
            params.put(&format!("{}{}", prefix, "OnlyAttached"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.path_prefix {
            params.put(&format!("{}{}", prefix, "PathPrefix"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.scope {
            params.put(&format!("{}{}", prefix, "Scope"),
                       &field_value.replace("+", "%2B"));
        }

    }
}

#[doc="<p>Contains the response to a successful <a>ListPolicies</a> request. </p>"]
#[derive(Default,Debug,Clone)]
pub struct ListPoliciesResponse {
    #[doc="<p>A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the <code>Marker</code> request parameter to retrieve more items. Note that IAM might return fewer than the <code>MaxItems</code> number of results even when there are more results available. We recommend that you check <code>IsTruncated</code> after every call to ensure that you receive all of your results.</p>"]
    pub is_truncated: Option<bool>,
    #[doc="<p>When <code>IsTruncated</code> is <code>true</code>, this element is present and contains the value to use for the <code>Marker</code> parameter in a subsequent pagination request.</p>"]
    pub marker: Option<String>,
    #[doc="<p>A list of policies.</p>"]
    pub policies: Option<Vec<Policy>>,
}

struct ListPoliciesResponseDeserializer;
impl ListPoliciesResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<ListPoliciesResponse, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = ListPoliciesResponse::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "IsTruncated" => {
                            obj.is_truncated =
                                Some(try!(BooleanTypeDeserializer::deserialize("IsTruncated",
                                                                               stack)));
                        }
                        "Marker" => {
                            obj.marker = Some(try!(MarkerTypeDeserializer::deserialize("Marker",
                                                                                       stack)));
                        }
                        "Policies" => {
                            obj.policies =
                                Some(try!(PolicyListTypeDeserializer::deserialize("Policies",
                                                                                  stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct ListPolicyVersionsRequest {
    #[doc="<p>Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.</p>"]
    pub marker: Option<String>,
    #[doc="<p>(Optional) Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code> and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>"]
    pub max_items: Option<i64>,
    #[doc="<p>The Amazon Resource Name (ARN) of the IAM policy for which you want the versions.</p> <p>For more information about ARNs, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>"]
    pub policy_arn: String,
}


/// Serialize `ListPolicyVersionsRequest` contents to a `SignedRequest`.
struct ListPolicyVersionsRequestSerializer;
impl ListPolicyVersionsRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ListPolicyVersionsRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.max_items {
            params.put(&format!("{}{}", prefix, "MaxItems"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        params.put(&format!("{}{}", prefix, "PolicyArn"),
                   &obj.policy_arn.replace("+", "%2B"));

    }
}

#[doc="<p>Contains the response to a successful <a>ListPolicyVersions</a> request. </p>"]
#[derive(Default,Debug,Clone)]
pub struct ListPolicyVersionsResponse {
    #[doc="<p>A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the <code>Marker</code> request parameter to retrieve more items. Note that IAM might return fewer than the <code>MaxItems</code> number of results even when there are more results available. We recommend that you check <code>IsTruncated</code> after every call to ensure that you receive all of your results.</p>"]
    pub is_truncated: Option<bool>,
    #[doc="<p>When <code>IsTruncated</code> is <code>true</code>, this element is present and contains the value to use for the <code>Marker</code> parameter in a subsequent pagination request.</p>"]
    pub marker: Option<String>,
    #[doc="<p>A list of policy versions.</p> <p>For more information about managed policy versions, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html\">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>"]
    pub versions: Option<Vec<PolicyVersion>>,
}

struct ListPolicyVersionsResponseDeserializer;
impl ListPolicyVersionsResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<ListPolicyVersionsResponse, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = ListPolicyVersionsResponse::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "IsTruncated" => {
                            obj.is_truncated =
                                Some(try!(BooleanTypeDeserializer::deserialize("IsTruncated",
                                                                               stack)));
                        }
                        "Marker" => {
                            obj.marker = Some(try!(MarkerTypeDeserializer::deserialize("Marker",
                                                                                       stack)));
                        }
                        "Versions" => {
                            obj.versions = Some(try!(PolicyDocumentVersionListTypeDeserializer::deserialize("Versions", stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct ListRolePoliciesRequest {
    #[doc="<p>Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.</p>"]
    pub marker: Option<String>,
    #[doc="<p>(Optional) Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code> and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>"]
    pub max_items: Option<i64>,
    #[doc="<p>The name of the role to list policies for.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>"]
    pub role_name: String,
}


/// Serialize `ListRolePoliciesRequest` contents to a `SignedRequest`.
struct ListRolePoliciesRequestSerializer;
impl ListRolePoliciesRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ListRolePoliciesRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.max_items {
            params.put(&format!("{}{}", prefix, "MaxItems"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        params.put(&format!("{}{}", prefix, "RoleName"),
                   &obj.role_name.replace("+", "%2B"));

    }
}

#[doc="<p>Contains the response to a successful <a>ListRolePolicies</a> request. </p>"]
#[derive(Default,Debug,Clone)]
pub struct ListRolePoliciesResponse {
    #[doc="<p>A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the <code>Marker</code> request parameter to retrieve more items. Note that IAM might return fewer than the <code>MaxItems</code> number of results even when there are more results available. We recommend that you check <code>IsTruncated</code> after every call to ensure that you receive all of your results.</p>"]
    pub is_truncated: Option<bool>,
    #[doc="<p>When <code>IsTruncated</code> is <code>true</code>, this element is present and contains the value to use for the <code>Marker</code> parameter in a subsequent pagination request.</p>"]
    pub marker: Option<String>,
    #[doc="<p>A list of policy names.</p>"]
    pub policy_names: Vec<String>,
}

struct ListRolePoliciesResponseDeserializer;
impl ListRolePoliciesResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<ListRolePoliciesResponse, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = ListRolePoliciesResponse::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "IsTruncated" => {
                            obj.is_truncated =
                                Some(try!(BooleanTypeDeserializer::deserialize("IsTruncated",
                                                                               stack)));
                        }
                        "Marker" => {
                            obj.marker = Some(try!(MarkerTypeDeserializer::deserialize("Marker",
                                                                                       stack)));
                        }
                        "PolicyNames" => {
                            obj.policy_names =
                                try!(PolicyNameListTypeDeserializer::deserialize("PolicyNames",
                                                                                 stack));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct ListRolesRequest {
    #[doc="<p>Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.</p>"]
    pub marker: Option<String>,
    #[doc="<p>(Optional) Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code> and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>"]
    pub max_items: Option<i64>,
    #[doc="<p> The path prefix for filtering the results. For example, the prefix <code>/application_abc/component_xyz/</code> gets all roles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all roles. This paramater allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes, containing any ASCII character from the ! (\\u0021) thru the DEL character (\\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>"]
    pub path_prefix: Option<String>,
}


/// Serialize `ListRolesRequest` contents to a `SignedRequest`.
struct ListRolesRequestSerializer;
impl ListRolesRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ListRolesRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.max_items {
            params.put(&format!("{}{}", prefix, "MaxItems"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.path_prefix {
            params.put(&format!("{}{}", prefix, "PathPrefix"),
                       &field_value.replace("+", "%2B"));
        }

    }
}

#[doc="<p>Contains the response to a successful <a>ListRoles</a> request. </p>"]
#[derive(Default,Debug,Clone)]
pub struct ListRolesResponse {
    #[doc="<p>A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the <code>Marker</code> request parameter to retrieve more items. Note that IAM might return fewer than the <code>MaxItems</code> number of results even when there are more results available. We recommend that you check <code>IsTruncated</code> after every call to ensure that you receive all of your results.</p>"]
    pub is_truncated: Option<bool>,
    #[doc="<p>When <code>IsTruncated</code> is <code>true</code>, this element is present and contains the value to use for the <code>Marker</code> parameter in a subsequent pagination request.</p>"]
    pub marker: Option<String>,
    #[doc="<p>A list of roles.</p>"]
    pub roles: Vec<Role>,
}

struct ListRolesResponseDeserializer;
impl ListRolesResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<ListRolesResponse, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = ListRolesResponse::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "IsTruncated" => {
                            obj.is_truncated =
                                Some(try!(BooleanTypeDeserializer::deserialize("IsTruncated",
                                                                               stack)));
                        }
                        "Marker" => {
                            obj.marker = Some(try!(MarkerTypeDeserializer::deserialize("Marker",
                                                                                       stack)));
                        }
                        "Roles" => {
                            obj.roles = try!(RoleListTypeDeserializer::deserialize("Roles", stack));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct ListSAMLProvidersRequest;


/// Serialize `ListSAMLProvidersRequest` contents to a `SignedRequest`.
struct ListSAMLProvidersRequestSerializer;
impl ListSAMLProvidersRequestSerializer {
    fn serialize(_params: &mut Params, name: &str, _obj: &ListSAMLProvidersRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }



    }
}

#[doc="<p>Contains the response to a successful <a>ListSAMLProviders</a> request. </p>"]
#[derive(Default,Debug,Clone)]
pub struct ListSAMLProvidersResponse {
    #[doc="<p>The list of SAML provider resource objects defined in IAM for this AWS account.</p>"]
    pub saml_provider_list: Option<Vec<SAMLProviderListEntry>>,
}

struct ListSAMLProvidersResponseDeserializer;
impl ListSAMLProvidersResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<ListSAMLProvidersResponse, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = ListSAMLProvidersResponse::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "SAMLProviderList" => {
                            obj.saml_provider_list =
                                Some(try!(SAMLProviderListTypeDeserializer::deserialize("SAMLProviderList",
                                                                                        stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct ListSSHPublicKeysRequest {
    #[doc="<p>Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.</p>"]
    pub marker: Option<String>,
    #[doc="<p>(Optional) Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code> and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>"]
    pub max_items: Option<i64>,
    #[doc="<p>The name of the IAM user to list SSH public keys for. If none is specified, the UserName field is determined implicitly based on the AWS access key used to sign the request.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>"]
    pub user_name: Option<String>,
}


/// Serialize `ListSSHPublicKeysRequest` contents to a `SignedRequest`.
struct ListSSHPublicKeysRequestSerializer;
impl ListSSHPublicKeysRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ListSSHPublicKeysRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.max_items {
            params.put(&format!("{}{}", prefix, "MaxItems"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.user_name {
            params.put(&format!("{}{}", prefix, "UserName"),
                       &field_value.replace("+", "%2B"));
        }

    }
}

#[doc="<p>Contains the response to a successful <a>ListSSHPublicKeys</a> request.</p>"]
#[derive(Default,Debug,Clone)]
pub struct ListSSHPublicKeysResponse {
    #[doc="<p>A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the <code>Marker</code> request parameter to retrieve more items. Note that IAM might return fewer than the <code>MaxItems</code> number of results even when there are more results available. We recommend that you check <code>IsTruncated</code> after every call to ensure that you receive all of your results.</p>"]
    pub is_truncated: Option<bool>,
    #[doc="<p>When <code>IsTruncated</code> is <code>true</code>, this element is present and contains the value to use for the <code>Marker</code> parameter in a subsequent pagination request.</p>"]
    pub marker: Option<String>,
    #[doc="<p>A list of the SSH public keys assigned to IAM user.</p>"]
    pub ssh_public_keys: Option<Vec<SSHPublicKeyMetadata>>,
}

struct ListSSHPublicKeysResponseDeserializer;
impl ListSSHPublicKeysResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<ListSSHPublicKeysResponse, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = ListSSHPublicKeysResponse::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "IsTruncated" => {
                            obj.is_truncated =
                                Some(try!(BooleanTypeDeserializer::deserialize("IsTruncated",
                                                                               stack)));
                        }
                        "Marker" => {
                            obj.marker = Some(try!(MarkerTypeDeserializer::deserialize("Marker",
                                                                                       stack)));
                        }
                        "SSHPublicKeys" => {
                            obj.ssh_public_keys =
                                Some(try!(SSHPublicKeyListTypeDeserializer::deserialize("SSHPublicKeys",
                                                                                        stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct ListServerCertificatesRequest {
    #[doc="<p>Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.</p>"]
    pub marker: Option<String>,
    #[doc="<p>(Optional) Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code> and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>"]
    pub max_items: Option<i64>,
    #[doc="<p> The path prefix for filtering the results. For example: <code>/company/servercerts</code> would get all server certificates for which the path starts with <code>/company/servercerts</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all server certificates. This paramater allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes, containing any ASCII character from the ! (\\u0021) thru the DEL character (\\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>"]
    pub path_prefix: Option<String>,
}


/// Serialize `ListServerCertificatesRequest` contents to a `SignedRequest`.
struct ListServerCertificatesRequestSerializer;
impl ListServerCertificatesRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ListServerCertificatesRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.max_items {
            params.put(&format!("{}{}", prefix, "MaxItems"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.path_prefix {
            params.put(&format!("{}{}", prefix, "PathPrefix"),
                       &field_value.replace("+", "%2B"));
        }

    }
}

#[doc="<p>Contains the response to a successful <a>ListServerCertificates</a> request. </p>"]
#[derive(Default,Debug,Clone)]
pub struct ListServerCertificatesResponse {
    #[doc="<p>A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the <code>Marker</code> request parameter to retrieve more items. Note that IAM might return fewer than the <code>MaxItems</code> number of results even when there are more results available. We recommend that you check <code>IsTruncated</code> after every call to ensure that you receive all of your results.</p>"]
    pub is_truncated: Option<bool>,
    #[doc="<p>When <code>IsTruncated</code> is <code>true</code>, this element is present and contains the value to use for the <code>Marker</code> parameter in a subsequent pagination request.</p>"]
    pub marker: Option<String>,
    #[doc="<p>A list of server certificates.</p>"]
    pub server_certificate_metadata_list: Vec<ServerCertificateMetadata>,
}

struct ListServerCertificatesResponseDeserializer;
impl ListServerCertificatesResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<ListServerCertificatesResponse, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = ListServerCertificatesResponse::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "IsTruncated" => {
                            obj.is_truncated =
                                Some(try!(BooleanTypeDeserializer::deserialize("IsTruncated",
                                                                               stack)));
                        }
                        "Marker" => {
                            obj.marker = Some(try!(MarkerTypeDeserializer::deserialize("Marker",
                                                                                       stack)));
                        }
                        "ServerCertificateMetadataList" => {
                            obj.server_certificate_metadata_list = try!(ServerCertificateMetadataListTypeDeserializer::deserialize("ServerCertificateMetadataList", stack));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct ListServiceSpecificCredentialsRequest {
    #[doc="<p>Filters the returned results to only those for the specified AWS service. If not specified, then AWS returns service-specific credentials for all services.</p>"]
    pub service_name: Option<String>,
    #[doc="<p>The name of the user whose service-specific credentials you want information about. If this value is not specified then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>"]
    pub user_name: Option<String>,
}


/// Serialize `ListServiceSpecificCredentialsRequest` contents to a `SignedRequest`.
struct ListServiceSpecificCredentialsRequestSerializer;
impl ListServiceSpecificCredentialsRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ListServiceSpecificCredentialsRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.service_name {
            params.put(&format!("{}{}", prefix, "ServiceName"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.user_name {
            params.put(&format!("{}{}", prefix, "UserName"),
                       &field_value.replace("+", "%2B"));
        }

    }
}

#[derive(Default,Debug,Clone)]
pub struct ListServiceSpecificCredentialsResponse {
    #[doc="<p>A list of structures that each contain details about a service-specific credential.</p>"]
    pub service_specific_credentials: Option<Vec<ServiceSpecificCredentialMetadata>>,
}

struct ListServiceSpecificCredentialsResponseDeserializer;
impl ListServiceSpecificCredentialsResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>
        (tag_name: &str,
         stack: &mut T)
         -> Result<ListServiceSpecificCredentialsResponse, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = ListServiceSpecificCredentialsResponse::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "ServiceSpecificCredentials" => {
                            obj.service_specific_credentials = Some(try!(ServiceSpecificCredentialsListTypeDeserializer::deserialize("ServiceSpecificCredentials", stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct ListSigningCertificatesRequest {
    #[doc="<p>Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.</p>"]
    pub marker: Option<String>,
    #[doc="<p>(Optional) Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code> and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>"]
    pub max_items: Option<i64>,
    #[doc="<p>The name of the IAM user whose signing certificates you want to examine.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>"]
    pub user_name: Option<String>,
}


/// Serialize `ListSigningCertificatesRequest` contents to a `SignedRequest`.
struct ListSigningCertificatesRequestSerializer;
impl ListSigningCertificatesRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ListSigningCertificatesRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.max_items {
            params.put(&format!("{}{}", prefix, "MaxItems"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.user_name {
            params.put(&format!("{}{}", prefix, "UserName"),
                       &field_value.replace("+", "%2B"));
        }

    }
}

#[doc="<p>Contains the response to a successful <a>ListSigningCertificates</a> request. </p>"]
#[derive(Default,Debug,Clone)]
pub struct ListSigningCertificatesResponse {
    #[doc="<p>A list of the user's signing certificate information.</p>"]
    pub certificates: Vec<SigningCertificate>,
    #[doc="<p>A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the <code>Marker</code> request parameter to retrieve more items. Note that IAM might return fewer than the <code>MaxItems</code> number of results even when there are more results available. We recommend that you check <code>IsTruncated</code> after every call to ensure that you receive all of your results.</p>"]
    pub is_truncated: Option<bool>,
    #[doc="<p>When <code>IsTruncated</code> is <code>true</code>, this element is present and contains the value to use for the <code>Marker</code> parameter in a subsequent pagination request.</p>"]
    pub marker: Option<String>,
}

struct ListSigningCertificatesResponseDeserializer;
impl ListSigningCertificatesResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>
        (tag_name: &str,
         stack: &mut T)
         -> Result<ListSigningCertificatesResponse, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = ListSigningCertificatesResponse::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "Certificates" => {
                            obj.certificates =
                                try!(CertificateListTypeDeserializer::deserialize("Certificates",
                                                                                  stack));
                        }
                        "IsTruncated" => {
                            obj.is_truncated =
                                Some(try!(BooleanTypeDeserializer::deserialize("IsTruncated",
                                                                               stack)));
                        }
                        "Marker" => {
                            obj.marker = Some(try!(MarkerTypeDeserializer::deserialize("Marker",
                                                                                       stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct ListUserPoliciesRequest {
    #[doc="<p>Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.</p>"]
    pub marker: Option<String>,
    #[doc="<p>(Optional) Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code> and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>"]
    pub max_items: Option<i64>,
    #[doc="<p>The name of the user to list policies for.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>"]
    pub user_name: String,
}


/// Serialize `ListUserPoliciesRequest` contents to a `SignedRequest`.
struct ListUserPoliciesRequestSerializer;
impl ListUserPoliciesRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ListUserPoliciesRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.max_items {
            params.put(&format!("{}{}", prefix, "MaxItems"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        params.put(&format!("{}{}", prefix, "UserName"),
                   &obj.user_name.replace("+", "%2B"));

    }
}

#[doc="<p>Contains the response to a successful <a>ListUserPolicies</a> request. </p>"]
#[derive(Default,Debug,Clone)]
pub struct ListUserPoliciesResponse {
    #[doc="<p>A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the <code>Marker</code> request parameter to retrieve more items. Note that IAM might return fewer than the <code>MaxItems</code> number of results even when there are more results available. We recommend that you check <code>IsTruncated</code> after every call to ensure that you receive all of your results.</p>"]
    pub is_truncated: Option<bool>,
    #[doc="<p>When <code>IsTruncated</code> is <code>true</code>, this element is present and contains the value to use for the <code>Marker</code> parameter in a subsequent pagination request.</p>"]
    pub marker: Option<String>,
    #[doc="<p>A list of policy names.</p>"]
    pub policy_names: Vec<String>,
}

struct ListUserPoliciesResponseDeserializer;
impl ListUserPoliciesResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<ListUserPoliciesResponse, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = ListUserPoliciesResponse::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "IsTruncated" => {
                            obj.is_truncated =
                                Some(try!(BooleanTypeDeserializer::deserialize("IsTruncated",
                                                                               stack)));
                        }
                        "Marker" => {
                            obj.marker = Some(try!(MarkerTypeDeserializer::deserialize("Marker",
                                                                                       stack)));
                        }
                        "PolicyNames" => {
                            obj.policy_names =
                                try!(PolicyNameListTypeDeserializer::deserialize("PolicyNames",
                                                                                 stack));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct ListUsersRequest {
    #[doc="<p>Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.</p>"]
    pub marker: Option<String>,
    #[doc="<p>(Optional) Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code> and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>"]
    pub max_items: Option<i64>,
    #[doc="<p> The path prefix for filtering the results. For example: <code>/division_abc/subdivision_xyz/</code>, which would get all user names whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all user names. This paramater allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes, containing any ASCII character from the ! (\\u0021) thru the DEL character (\\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>"]
    pub path_prefix: Option<String>,
}


/// Serialize `ListUsersRequest` contents to a `SignedRequest`.
struct ListUsersRequestSerializer;
impl ListUsersRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ListUsersRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.max_items {
            params.put(&format!("{}{}", prefix, "MaxItems"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.path_prefix {
            params.put(&format!("{}{}", prefix, "PathPrefix"),
                       &field_value.replace("+", "%2B"));
        }

    }
}

#[doc="<p>Contains the response to a successful <a>ListUsers</a> request. </p>"]
#[derive(Default,Debug,Clone)]
pub struct ListUsersResponse {
    #[doc="<p>A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the <code>Marker</code> request parameter to retrieve more items. Note that IAM might return fewer than the <code>MaxItems</code> number of results even when there are more results available. We recommend that you check <code>IsTruncated</code> after every call to ensure that you receive all of your results.</p>"]
    pub is_truncated: Option<bool>,
    #[doc="<p>When <code>IsTruncated</code> is <code>true</code>, this element is present and contains the value to use for the <code>Marker</code> parameter in a subsequent pagination request.</p>"]
    pub marker: Option<String>,
    #[doc="<p>A list of users.</p>"]
    pub users: Vec<User>,
}

struct ListUsersResponseDeserializer;
impl ListUsersResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<ListUsersResponse, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = ListUsersResponse::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "IsTruncated" => {
                            obj.is_truncated =
                                Some(try!(BooleanTypeDeserializer::deserialize("IsTruncated",
                                                                               stack)));
                        }
                        "Marker" => {
                            obj.marker = Some(try!(MarkerTypeDeserializer::deserialize("Marker",
                                                                                       stack)));
                        }
                        "Users" => {
                            obj.users = try!(UserListTypeDeserializer::deserialize("Users", stack));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct ListVirtualMFADevicesRequest {
    #[doc="<p> The status (<code>Unassigned</code> or <code>Assigned</code>) of the devices to list. If you do not specify an <code>AssignmentStatus</code>, the action defaults to <code>Any</code> which lists both assigned and unassigned virtual MFA devices.</p>"]
    pub assignment_status: Option<String>,
    #[doc="<p>Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.</p>"]
    pub marker: Option<String>,
    #[doc="<p>(Optional) Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code> and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>"]
    pub max_items: Option<i64>,
}


/// Serialize `ListVirtualMFADevicesRequest` contents to a `SignedRequest`.
struct ListVirtualMFADevicesRequestSerializer;
impl ListVirtualMFADevicesRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ListVirtualMFADevicesRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.assignment_status {
            params.put(&format!("{}{}", prefix, "AssignmentStatus"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.max_items {
            params.put(&format!("{}{}", prefix, "MaxItems"),
                       &field_value.to_string().replace("+", "%2B"));
        }

    }
}

#[doc="<p>Contains the response to a successful <a>ListVirtualMFADevices</a> request. </p>"]
#[derive(Default,Debug,Clone)]
pub struct ListVirtualMFADevicesResponse {
    #[doc="<p>A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the <code>Marker</code> request parameter to retrieve more items. Note that IAM might return fewer than the <code>MaxItems</code> number of results even when there are more results available. We recommend that you check <code>IsTruncated</code> after every call to ensure that you receive all of your results.</p>"]
    pub is_truncated: Option<bool>,
    #[doc="<p>When <code>IsTruncated</code> is <code>true</code>, this element is present and contains the value to use for the <code>Marker</code> parameter in a subsequent pagination request.</p>"]
    pub marker: Option<String>,
    #[doc="<p> The list of virtual MFA devices in the current account that match the <code>AssignmentStatus</code> value that was passed in the request.</p>"]
    pub virtual_mfa_devices: Vec<VirtualMFADevice>,
}

struct ListVirtualMFADevicesResponseDeserializer;
impl ListVirtualMFADevicesResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<ListVirtualMFADevicesResponse, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = ListVirtualMFADevicesResponse::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "IsTruncated" => {
                            obj.is_truncated =
                                Some(try!(BooleanTypeDeserializer::deserialize("IsTruncated",
                                                                               stack)));
                        }
                        "Marker" => {
                            obj.marker = Some(try!(MarkerTypeDeserializer::deserialize("Marker",
                                                                                       stack)));
                        }
                        "VirtualMFADevices" => {
                            obj.virtual_mfa_devices =
                                try!(VirtualMFADeviceListTypeDeserializer::deserialize("VirtualMFADevices",
                                                                                       stack));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p>Contains the user name and password create date for a user.</p> <p> This data type is used as a response element in the <a>CreateLoginProfile</a> and <a>GetLoginProfile</a> actions. </p>"]
#[derive(Default,Debug,Clone)]
pub struct LoginProfile {
    #[doc="<p>The date when the password for the user was created.</p>"]
    pub create_date: String,
    #[doc="<p>Specifies whether the user is required to set a new password on next sign-in.</p>"]
    pub password_reset_required: Option<bool>,
    #[doc="<p>The name of the user, which can be used for signing in to the AWS Management Console.</p>"]
    pub user_name: String,
}

struct LoginProfileDeserializer;
impl LoginProfileDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<LoginProfile, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = LoginProfile::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "CreateDate" => {
                            obj.create_date = try!(DateTypeDeserializer::deserialize("CreateDate",
                                                                                     stack));
                        }
                        "PasswordResetRequired" => {
                            obj.password_reset_required =
                                Some(try!(BooleanTypeDeserializer::deserialize("PasswordResetRequired",
                                                                               stack)));
                        }
                        "UserName" => {
                            obj.user_name = try!(UserNameTypeDeserializer::deserialize("UserName",
                                                                                       stack));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p>Contains information about an MFA device.</p> <p>This data type is used as a response element in the <a>ListMFADevices</a> action.</p>"]
#[derive(Default,Debug,Clone)]
pub struct MFADevice {
    #[doc="<p>The date when the MFA device was enabled for the user.</p>"]
    pub enable_date: String,
    #[doc="<p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p>"]
    pub serial_number: String,
    #[doc="<p>The user with whom the MFA device is associated.</p>"]
    pub user_name: String,
}

struct MFADeviceDeserializer;
impl MFADeviceDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<MFADevice, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = MFADevice::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "EnableDate" => {
                            obj.enable_date = try!(DateTypeDeserializer::deserialize("EnableDate",
                                                                                     stack));
                        }
                        "SerialNumber" => {
                            obj.serial_number =
                                try!(SerialNumberTypeDeserializer::deserialize("SerialNumber",
                                                                               stack));
                        }
                        "UserName" => {
                            obj.user_name = try!(UserNameTypeDeserializer::deserialize("UserName",
                                                                                       stack));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p>Contains information about a managed policy, including the policy's ARN, versions, and the number of principal entities (users, groups, and roles) that the policy is attached to.</p> <p>This data type is used as a response element in the <a>GetAccountAuthorizationDetails</a> action.</p> <p>For more information about managed policies, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html\">Managed Policies and Inline Policies</a> in the <i>Using IAM</i> guide. </p>"]
#[derive(Default,Debug,Clone)]
pub struct ManagedPolicyDetail {
    pub arn: Option<String>,
    #[doc="<p>The number of principal entities (users, groups, and roles) that the policy is attached to.</p>"]
    pub attachment_count: Option<i64>,
    #[doc="<p>The date and time, in <a href=\"http://www.iso.org/iso/iso8601\">ISO 8601 date-time format</a>, when the policy was created.</p>"]
    pub create_date: Option<String>,
    #[doc="<p>The identifier for the version of the policy that is set as the default (operative) version.</p> <p>For more information about policy versions, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html\">Versioning for Managed Policies</a> in the <i>Using IAM</i> guide. </p>"]
    pub default_version_id: Option<String>,
    #[doc="<p>A friendly description of the policy.</p>"]
    pub description: Option<String>,
    #[doc="<p>Specifies whether the policy can be attached to an IAM user, group, or role.</p>"]
    pub is_attachable: Option<bool>,
    #[doc="<p>The path to the policy.</p> <p>For more information about paths, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html\">IAM Identifiers</a> in the <i>Using IAM</i> guide.</p>"]
    pub path: Option<String>,
    #[doc="<p>The stable and unique string identifying the policy.</p> <p>For more information about IDs, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html\">IAM Identifiers</a> in the <i>Using IAM</i> guide.</p>"]
    pub policy_id: Option<String>,
    #[doc="<p>The friendly name (not ARN) identifying the policy.</p>"]
    pub policy_name: Option<String>,
    #[doc="<p>A list containing information about the versions of the policy.</p>"]
    pub policy_version_list: Option<Vec<PolicyVersion>>,
    #[doc="<p>The date and time, in <a href=\"http://www.iso.org/iso/iso8601\">ISO 8601 date-time format</a>, when the policy was last updated.</p> <p>When a policy has only one version, this field contains the date and time when the policy was created. When a policy has more than one version, this field contains the date and time when the most recent policy version was created.</p>"]
    pub update_date: Option<String>,
}

struct ManagedPolicyDetailDeserializer;
impl ManagedPolicyDetailDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<ManagedPolicyDetail, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = ManagedPolicyDetail::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "Arn" => {
                            obj.arn = Some(try!(ArnTypeDeserializer::deserialize("Arn", stack)));
                        }
                        "AttachmentCount" => {
                            obj.attachment_count =
                                Some(try!(AttachmentCountTypeDeserializer::deserialize("AttachmentCount",
                                                                                       stack)));
                        }
                        "CreateDate" => {
                            obj.create_date = Some(try!(DateTypeDeserializer::deserialize("CreateDate",
                                                                                          stack)));
                        }
                        "DefaultVersionId" => {
                            obj.default_version_id =
                                Some(try!(PolicyVersionIdTypeDeserializer::deserialize("DefaultVersionId",
                                                                                       stack)));
                        }
                        "Description" => {
                            obj.description =
                                Some(try!(PolicyDescriptionTypeDeserializer::deserialize("Description",
                                                                                         stack)));
                        }
                        "IsAttachable" => {
                            obj.is_attachable =
                                Some(try!(BooleanTypeDeserializer::deserialize("IsAttachable",
                                                                               stack)));
                        }
                        "Path" => {
                            obj.path = Some(try!(PolicyPathTypeDeserializer::deserialize("Path",
                                                                                         stack)));
                        }
                        "PolicyId" => {
                            obj.policy_id = Some(try!(IdTypeDeserializer::deserialize("PolicyId",
                                                                                      stack)));
                        }
                        "PolicyName" => {
                            obj.policy_name =
                                Some(try!(PolicyNameTypeDeserializer::deserialize("PolicyName",
                                                                                  stack)));
                        }
                        "PolicyVersionList" => {
                            obj.policy_version_list = Some(try!(PolicyDocumentVersionListTypeDeserializer::deserialize("PolicyVersionList", stack)));
                        }
                        "UpdateDate" => {
                            obj.update_date = Some(try!(DateTypeDeserializer::deserialize("UpdateDate",
                                                                                          stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct ManagedPolicyDetailListTypeDeserializer;
impl ManagedPolicyDetailListTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<ManagedPolicyDetail>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "member" {
                        obj.push(try!(ManagedPolicyDetailDeserializer::deserialize("member",
                                                                                   stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
struct MarkerTypeDeserializer;
impl MarkerTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<String, XmlParseError> {
        try!(start_element(tag_name, stack));
        let obj = try!(characters(stack));
        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct MaxPasswordAgeTypeDeserializer;
impl MaxPasswordAgeTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<i64, XmlParseError> {
        try!(start_element(tag_name, stack));
        let obj = i64::from_str(try!(characters(stack)).as_ref()).unwrap();
        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct MfaDeviceListTypeDeserializer;
impl MfaDeviceListTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<MFADevice>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "member" {
                        obj.push(try!(MFADeviceDeserializer::deserialize("member", stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
struct MinimumPasswordLengthTypeDeserializer;
impl MinimumPasswordLengthTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<i64, XmlParseError> {
        try!(start_element(tag_name, stack));
        let obj = i64::from_str(try!(characters(stack)).as_ref()).unwrap();
        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p>Contains the Amazon Resource Name (ARN) for an IAM OpenID Connect provider.</p>"]
#[derive(Default,Debug,Clone)]
pub struct OpenIDConnectProviderListEntry {
    pub arn: Option<String>,
}

struct OpenIDConnectProviderListEntryDeserializer;
impl OpenIDConnectProviderListEntryDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<OpenIDConnectProviderListEntry, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = OpenIDConnectProviderListEntry::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "Arn" => {
                            obj.arn = Some(try!(ArnTypeDeserializer::deserialize("Arn", stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct OpenIDConnectProviderListTypeDeserializer;
impl OpenIDConnectProviderListTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>
        (tag_name: &str,
         stack: &mut T)
         -> Result<Vec<OpenIDConnectProviderListEntry>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "member" {
                        obj.push(try!(OpenIDConnectProviderListEntryDeserializer::deserialize("member", stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
struct OpenIDConnectProviderUrlTypeDeserializer;
impl OpenIDConnectProviderUrlTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<String, XmlParseError> {
        try!(start_element(tag_name, stack));
        let obj = try!(characters(stack));
        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p>Contains information about AWS Organizations's affect on a policy simulation.</p>"]
#[derive(Default,Debug,Clone)]
pub struct OrganizationsDecisionDetail {
    #[doc="<p>Specifies whether the simulated action is allowed by the AWS Organizations service control policies that impact the simulated user's account.</p>"]
    pub allowed_by_organizations: Option<bool>,
}

struct OrganizationsDecisionDetailDeserializer;
impl OrganizationsDecisionDetailDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<OrganizationsDecisionDetail, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = OrganizationsDecisionDetail::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "AllowedByOrganizations" => {
                            obj.allowed_by_organizations =
                                Some(try!(BooleanTypeDeserializer::deserialize("AllowedByOrganizations",
                                                                               stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p>Contains information about the account password policy.</p> <p> This data type is used as a response element in the <a>GetAccountPasswordPolicy</a> action. </p>"]
#[derive(Default,Debug,Clone)]
pub struct PasswordPolicy {
    #[doc="<p>Specifies whether IAM users are allowed to change their own password.</p>"]
    pub allow_users_to_change_password: Option<bool>,
    #[doc="<p>Indicates whether passwords in the account expire. Returns true if MaxPasswordAge is contains a value greater than 0. Returns false if MaxPasswordAge is 0 or not present.</p>"]
    pub expire_passwords: Option<bool>,
    #[doc="<p>Specifies whether IAM users are prevented from setting a new password after their password has expired.</p>"]
    pub hard_expiry: Option<bool>,
    #[doc="<p>The number of days that an IAM user password is valid.</p>"]
    pub max_password_age: Option<i64>,
    #[doc="<p>Minimum length to require for IAM user passwords.</p>"]
    pub minimum_password_length: Option<i64>,
    #[doc="<p>Specifies the number of previous passwords that IAM users are prevented from reusing.</p>"]
    pub password_reuse_prevention: Option<i64>,
    #[doc="<p>Specifies whether to require lowercase characters for IAM user passwords.</p>"]
    pub require_lowercase_characters: Option<bool>,
    #[doc="<p>Specifies whether to require numbers for IAM user passwords.</p>"]
    pub require_numbers: Option<bool>,
    #[doc="<p>Specifies whether to require symbols for IAM user passwords.</p>"]
    pub require_symbols: Option<bool>,
    #[doc="<p>Specifies whether to require uppercase characters for IAM user passwords.</p>"]
    pub require_uppercase_characters: Option<bool>,
}

struct PasswordPolicyDeserializer;
impl PasswordPolicyDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<PasswordPolicy, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = PasswordPolicy::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "AllowUsersToChangePassword" => {
                            obj.allow_users_to_change_password =
                                Some(try!(BooleanTypeDeserializer::deserialize("AllowUsersToChangePassword",
                                                                               stack)));
                        }
                        "ExpirePasswords" => {
                            obj.expire_passwords =
                                Some(try!(BooleanTypeDeserializer::deserialize("ExpirePasswords",
                                                                               stack)));
                        }
                        "HardExpiry" => {
                            obj.hard_expiry =
                                Some(try!(BooleanObjectTypeDeserializer::deserialize("HardExpiry",
                                                                                     stack)));
                        }
                        "MaxPasswordAge" => {
                            obj.max_password_age =
                                Some(try!(MaxPasswordAgeTypeDeserializer::deserialize("MaxPasswordAge",
                                                                                      stack)));
                        }
                        "MinimumPasswordLength" => {
                            obj.minimum_password_length = Some(try!(MinimumPasswordLengthTypeDeserializer::deserialize("MinimumPasswordLength", stack)));
                        }
                        "PasswordReusePrevention" => {
                            obj.password_reuse_prevention = Some(try!(PasswordReusePreventionTypeDeserializer::deserialize("PasswordReusePrevention", stack)));
                        }
                        "RequireLowercaseCharacters" => {
                            obj.require_lowercase_characters =
                                Some(try!(BooleanTypeDeserializer::deserialize("RequireLowercaseCharacters",
                                                                               stack)));
                        }
                        "RequireNumbers" => {
                            obj.require_numbers =
                                Some(try!(BooleanTypeDeserializer::deserialize("RequireNumbers",
                                                                               stack)));
                        }
                        "RequireSymbols" => {
                            obj.require_symbols =
                                Some(try!(BooleanTypeDeserializer::deserialize("RequireSymbols",
                                                                               stack)));
                        }
                        "RequireUppercaseCharacters" => {
                            obj.require_uppercase_characters =
                                Some(try!(BooleanTypeDeserializer::deserialize("RequireUppercaseCharacters",
                                                                               stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct PasswordReusePreventionTypeDeserializer;
impl PasswordReusePreventionTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<i64, XmlParseError> {
        try!(start_element(tag_name, stack));
        let obj = i64::from_str(try!(characters(stack)).as_ref()).unwrap();
        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct PathTypeDeserializer;
impl PathTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<String, XmlParseError> {
        try!(start_element(tag_name, stack));
        let obj = try!(characters(stack));
        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p>Contains information about a managed policy.</p> <p>This data type is used as a response element in the <a>CreatePolicy</a>, <a>GetPolicy</a>, and <a>ListPolicies</a> actions. </p> <p>For more information about managed policies, refer to <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html\">Managed Policies and Inline Policies</a> in the <i>Using IAM</i> guide. </p>"]
#[derive(Default,Debug,Clone)]
pub struct Policy {
    pub arn: Option<String>,
    #[doc="<p>The number of entities (users, groups, and roles) that the policy is attached to.</p>"]
    pub attachment_count: Option<i64>,
    #[doc="<p>The date and time, in <a href=\"http://www.iso.org/iso/iso8601\">ISO 8601 date-time format</a>, when the policy was created.</p>"]
    pub create_date: Option<String>,
    #[doc="<p>The identifier for the version of the policy that is set as the default version.</p>"]
    pub default_version_id: Option<String>,
    #[doc="<p>A friendly description of the policy.</p> <p>This element is included in the response to the <a>GetPolicy</a> operation. It is not included in the response to the <a>ListPolicies</a> operation. </p>"]
    pub description: Option<String>,
    #[doc="<p>Specifies whether the policy can be attached to an IAM user, group, or role.</p>"]
    pub is_attachable: Option<bool>,
    #[doc="<p>The path to the policy.</p> <p>For more information about paths, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html\">IAM Identifiers</a> in the <i>Using IAM</i> guide.</p>"]
    pub path: Option<String>,
    #[doc="<p>The stable and unique string identifying the policy.</p> <p>For more information about IDs, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html\">IAM Identifiers</a> in the <i>Using IAM</i> guide.</p>"]
    pub policy_id: Option<String>,
    #[doc="<p>The friendly name (not ARN) identifying the policy.</p>"]
    pub policy_name: Option<String>,
    #[doc="<p>The date and time, in <a href=\"http://www.iso.org/iso/iso8601\">ISO 8601 date-time format</a>, when the policy was last updated.</p> <p>When a policy has only one version, this field contains the date and time when the policy was created. When a policy has more than one version, this field contains the date and time when the most recent policy version was created.</p>"]
    pub update_date: Option<String>,
}

struct PolicyDeserializer;
impl PolicyDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Policy, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = Policy::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "Arn" => {
                            obj.arn = Some(try!(ArnTypeDeserializer::deserialize("Arn", stack)));
                        }
                        "AttachmentCount" => {
                            obj.attachment_count =
                                Some(try!(AttachmentCountTypeDeserializer::deserialize("AttachmentCount",
                                                                                       stack)));
                        }
                        "CreateDate" => {
                            obj.create_date = Some(try!(DateTypeDeserializer::deserialize("CreateDate",
                                                                                          stack)));
                        }
                        "DefaultVersionId" => {
                            obj.default_version_id =
                                Some(try!(PolicyVersionIdTypeDeserializer::deserialize("DefaultVersionId",
                                                                                       stack)));
                        }
                        "Description" => {
                            obj.description =
                                Some(try!(PolicyDescriptionTypeDeserializer::deserialize("Description",
                                                                                         stack)));
                        }
                        "IsAttachable" => {
                            obj.is_attachable =
                                Some(try!(BooleanTypeDeserializer::deserialize("IsAttachable",
                                                                               stack)));
                        }
                        "Path" => {
                            obj.path = Some(try!(PolicyPathTypeDeserializer::deserialize("Path",
                                                                                         stack)));
                        }
                        "PolicyId" => {
                            obj.policy_id = Some(try!(IdTypeDeserializer::deserialize("PolicyId",
                                                                                      stack)));
                        }
                        "PolicyName" => {
                            obj.policy_name =
                                Some(try!(PolicyNameTypeDeserializer::deserialize("PolicyName",
                                                                                  stack)));
                        }
                        "UpdateDate" => {
                            obj.update_date = Some(try!(DateTypeDeserializer::deserialize("UpdateDate",
                                                                                          stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct PolicyDescriptionTypeDeserializer;
impl PolicyDescriptionTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<String, XmlParseError> {
        try!(start_element(tag_name, stack));
        let obj = try!(characters(stack));
        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p>Contains information about an IAM policy, including the policy document.</p> <p>This data type is used as a response element in the <a>GetAccountAuthorizationDetails</a> action.</p>"]
#[derive(Default,Debug,Clone)]
pub struct PolicyDetail {
    #[doc="<p>The policy document.</p>"]
    pub policy_document: Option<String>,
    #[doc="<p>The name of the policy.</p>"]
    pub policy_name: Option<String>,
}

struct PolicyDetailDeserializer;
impl PolicyDetailDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<PolicyDetail, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = PolicyDetail::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "PolicyDocument" => {
                            obj.policy_document =
                                Some(try!(PolicyDocumentTypeDeserializer::deserialize("PolicyDocument",
                                                                                      stack)));
                        }
                        "PolicyName" => {
                            obj.policy_name =
                                Some(try!(PolicyNameTypeDeserializer::deserialize("PolicyName",
                                                                                  stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct PolicyDetailListTypeDeserializer;
impl PolicyDetailListTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<PolicyDetail>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "member" {
                        obj.push(try!(PolicyDetailDeserializer::deserialize("member", stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
struct PolicyDocumentTypeDeserializer;
impl PolicyDocumentTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<String, XmlParseError> {
        try!(start_element(tag_name, stack));
        let obj = try!(characters(stack));
        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct PolicyDocumentVersionListTypeDeserializer;
impl PolicyDocumentVersionListTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<PolicyVersion>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "member" {
                        obj.push(try!(PolicyVersionDeserializer::deserialize("member", stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
struct PolicyEvaluationDecisionTypeDeserializer;
impl PolicyEvaluationDecisionTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<String, XmlParseError> {
        try!(start_element(tag_name, stack));
        let obj = try!(characters(stack));
        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p>Contains information about a group that a managed policy is attached to.</p> <p>This data type is used as a response element in the <a>ListEntitiesForPolicy</a> action. </p> <p>For more information about managed policies, refer to <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html\">Managed Policies and Inline Policies</a> in the <i>Using IAM</i> guide. </p>"]
#[derive(Default,Debug,Clone)]
pub struct PolicyGroup {
    #[doc="<p>The stable and unique string identifying the group. For more information about IDs, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html\">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p>"]
    pub group_id: Option<String>,
    #[doc="<p>The name (friendly name, not ARN) identifying the group.</p>"]
    pub group_name: Option<String>,
}

struct PolicyGroupDeserializer;
impl PolicyGroupDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<PolicyGroup, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = PolicyGroup::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "GroupId" => {
                            obj.group_id = Some(try!(IdTypeDeserializer::deserialize("GroupId",
                                                                                     stack)));
                        }
                        "GroupName" => {
                            obj.group_name =
                                Some(try!(GroupNameTypeDeserializer::deserialize("GroupName",
                                                                                 stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct PolicyGroupListTypeDeserializer;
impl PolicyGroupListTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<PolicyGroup>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "member" {
                        obj.push(try!(PolicyGroupDeserializer::deserialize("member", stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
struct PolicyIdentifierTypeDeserializer;
impl PolicyIdentifierTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<String, XmlParseError> {
        try!(start_element(tag_name, stack));
        let obj = try!(characters(stack));
        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct PolicyListTypeDeserializer;
impl PolicyListTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<Policy>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "member" {
                        obj.push(try!(PolicyDeserializer::deserialize("member", stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
struct PolicyNameListTypeDeserializer;
impl PolicyNameListTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<String>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "member" {
                        obj.push(try!(PolicyNameTypeDeserializer::deserialize("member", stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
struct PolicyNameTypeDeserializer;
impl PolicyNameTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<String, XmlParseError> {
        try!(start_element(tag_name, stack));
        let obj = try!(characters(stack));
        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct PolicyPathTypeDeserializer;
impl PolicyPathTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<String, XmlParseError> {
        try!(start_element(tag_name, stack));
        let obj = try!(characters(stack));
        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p>Contains information about a role that a managed policy is attached to.</p> <p>This data type is used as a response element in the <a>ListEntitiesForPolicy</a> action. </p> <p>For more information about managed policies, refer to <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html\">Managed Policies and Inline Policies</a> in the <i>Using IAM</i> guide. </p>"]
#[derive(Default,Debug,Clone)]
pub struct PolicyRole {
    #[doc="<p>The stable and unique string identifying the role. For more information about IDs, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html\">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p>"]
    pub role_id: Option<String>,
    #[doc="<p>The name (friendly name, not ARN) identifying the role.</p>"]
    pub role_name: Option<String>,
}

struct PolicyRoleDeserializer;
impl PolicyRoleDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<PolicyRole, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = PolicyRole::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "RoleId" => {
                            obj.role_id = Some(try!(IdTypeDeserializer::deserialize("RoleId",
                                                                                    stack)));
                        }
                        "RoleName" => {
                            obj.role_name =
                                Some(try!(RoleNameTypeDeserializer::deserialize("RoleName",
                                                                                stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct PolicyRoleListTypeDeserializer;
impl PolicyRoleListTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<PolicyRole>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "member" {
                        obj.push(try!(PolicyRoleDeserializer::deserialize("member", stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
struct PolicySourceTypeDeserializer;
impl PolicySourceTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<String, XmlParseError> {
        try!(start_element(tag_name, stack));
        let obj = try!(characters(stack));
        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p>Contains information about a user that a managed policy is attached to.</p> <p>This data type is used as a response element in the <a>ListEntitiesForPolicy</a> action. </p> <p>For more information about managed policies, refer to <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html\">Managed Policies and Inline Policies</a> in the <i>Using IAM</i> guide. </p>"]
#[derive(Default,Debug,Clone)]
pub struct PolicyUser {
    #[doc="<p>The stable and unique string identifying the user. For more information about IDs, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html\">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p>"]
    pub user_id: Option<String>,
    #[doc="<p>The name (friendly name, not ARN) identifying the user.</p>"]
    pub user_name: Option<String>,
}

struct PolicyUserDeserializer;
impl PolicyUserDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<PolicyUser, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = PolicyUser::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "UserId" => {
                            obj.user_id = Some(try!(IdTypeDeserializer::deserialize("UserId",
                                                                                    stack)));
                        }
                        "UserName" => {
                            obj.user_name =
                                Some(try!(UserNameTypeDeserializer::deserialize("UserName",
                                                                                stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct PolicyUserListTypeDeserializer;
impl PolicyUserListTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<PolicyUser>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "member" {
                        obj.push(try!(PolicyUserDeserializer::deserialize("member", stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
#[doc="<p>Contains information about a version of a managed policy.</p> <p>This data type is used as a response element in the <a>CreatePolicyVersion</a>, <a>GetPolicyVersion</a>, <a>ListPolicyVersions</a>, and <a>GetAccountAuthorizationDetails</a> actions. </p> <p>For more information about managed policies, refer to <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html\">Managed Policies and Inline Policies</a> in the <i>Using IAM</i> guide. </p>"]
#[derive(Default,Debug,Clone)]
pub struct PolicyVersion {
    #[doc="<p>The date and time, in <a href=\"http://www.iso.org/iso/iso8601\">ISO 8601 date-time format</a>, when the policy version was created.</p>"]
    pub create_date: Option<String>,
    #[doc="<p>The policy document.</p> <p>The policy document is returned in the response to the <a>GetPolicyVersion</a> and <a>GetAccountAuthorizationDetails</a> operations. It is not returned in the response to the <a>CreatePolicyVersion</a> or <a>ListPolicyVersions</a> operations. </p>"]
    pub document: Option<String>,
    #[doc="<p>Specifies whether the policy version is set as the policy's default version.</p>"]
    pub is_default_version: Option<bool>,
    #[doc="<p>The identifier for the policy version.</p> <p>Policy version identifiers always begin with <code>v</code> (always lowercase). When a policy is created, the first policy version is <code>v1</code>. </p>"]
    pub version_id: Option<String>,
}

struct PolicyVersionDeserializer;
impl PolicyVersionDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<PolicyVersion, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = PolicyVersion::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "CreateDate" => {
                            obj.create_date = Some(try!(DateTypeDeserializer::deserialize("CreateDate",
                                                                                          stack)));
                        }
                        "Document" => {
                            obj.document =
                                Some(try!(PolicyDocumentTypeDeserializer::deserialize("Document",
                                                                                      stack)));
                        }
                        "IsDefaultVersion" => {
                            obj.is_default_version =
                                Some(try!(BooleanTypeDeserializer::deserialize("IsDefaultVersion",
                                                                               stack)));
                        }
                        "VersionId" => {
                            obj.version_id =
                                Some(try!(PolicyVersionIdTypeDeserializer::deserialize("VersionId",
                                                                                       stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct PolicyVersionIdTypeDeserializer;
impl PolicyVersionIdTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<String, XmlParseError> {
        try!(start_element(tag_name, stack));
        let obj = try!(characters(stack));
        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p>Contains the row and column of a location of a <code>Statement</code> element in a policy document.</p> <p>This data type is used as a member of the <code> <a>Statement</a> </code> type.</p>"]
#[derive(Default,Debug,Clone)]
pub struct Position {
    #[doc="<p>The column in the line containing the specified position in the document.</p>"]
    pub column: Option<i64>,
    #[doc="<p>The line containing the specified position in the document.</p>"]
    pub line: Option<i64>,
}

struct PositionDeserializer;
impl PositionDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Position, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = Position::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "Column" => {
                            obj.column = Some(try!(ColumnNumberDeserializer::deserialize("Column",
                                                                                         stack)));
                        }
                        "Line" => {
                            obj.line = Some(try!(LineNumberDeserializer::deserialize("Line",
                                                                                     stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct PublicKeyFingerprintTypeDeserializer;
impl PublicKeyFingerprintTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<String, XmlParseError> {
        try!(start_element(tag_name, stack));
        let obj = try!(characters(stack));
        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct PublicKeyIdTypeDeserializer;
impl PublicKeyIdTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<String, XmlParseError> {
        try!(start_element(tag_name, stack));
        let obj = try!(characters(stack));
        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct PublicKeyMaterialTypeDeserializer;
impl PublicKeyMaterialTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<String, XmlParseError> {
        try!(start_element(tag_name, stack));
        let obj = try!(characters(stack));
        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct PutGroupPolicyRequest {
    #[doc="<p>The name of the group to associate the policy with.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>"]
    pub group_name: String,
    #[doc="<p>The policy document.</p> <p>The <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a> used to validate this parameter is a string of characters consisting of any printable ASCII character ranging from the space character (\\u0020) through end of the ASCII character range as well as the printable characters in the Basic Latin and Latin-1 Supplement character set (through \\u00FF). It also includes the special characters tab (\\u0009), line feed (\\u000A), and carriage return (\\u000D).</p>"]
    pub policy_document: String,
    #[doc="<p>The name of the policy document.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>"]
    pub policy_name: String,
}


/// Serialize `PutGroupPolicyRequest` contents to a `SignedRequest`.
struct PutGroupPolicyRequestSerializer;
impl PutGroupPolicyRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &PutGroupPolicyRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "GroupName"),
                   &obj.group_name.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "PolicyDocument"),
                   &obj.policy_document.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "PolicyName"),
                   &obj.policy_name.replace("+", "%2B"));

    }
}

#[derive(Default,Debug,Clone)]
pub struct PutRolePolicyRequest {
    #[doc="<p>The policy document.</p> <p>The <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a> used to validate this parameter is a string of characters consisting of any printable ASCII character ranging from the space character (\\u0020) through end of the ASCII character range as well as the printable characters in the Basic Latin and Latin-1 Supplement character set (through \\u00FF). It also includes the special characters tab (\\u0009), line feed (\\u000A), and carriage return (\\u000D).</p>"]
    pub policy_document: String,
    #[doc="<p>The name of the policy document.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>"]
    pub policy_name: String,
    #[doc="<p>The name of the role to associate the policy with.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>"]
    pub role_name: String,
}


/// Serialize `PutRolePolicyRequest` contents to a `SignedRequest`.
struct PutRolePolicyRequestSerializer;
impl PutRolePolicyRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &PutRolePolicyRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "PolicyDocument"),
                   &obj.policy_document.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "PolicyName"),
                   &obj.policy_name.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "RoleName"),
                   &obj.role_name.replace("+", "%2B"));

    }
}

#[derive(Default,Debug,Clone)]
pub struct PutUserPolicyRequest {
    #[doc="<p>The policy document.</p> <p>The <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a> used to validate this parameter is a string of characters consisting of any printable ASCII character ranging from the space character (\\u0020) through end of the ASCII character range as well as the printable characters in the Basic Latin and Latin-1 Supplement character set (through \\u00FF). It also includes the special characters tab (\\u0009), line feed (\\u000A), and carriage return (\\u000D).</p>"]
    pub policy_document: String,
    #[doc="<p>The name of the policy document.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>"]
    pub policy_name: String,
    #[doc="<p>The name of the user to associate the policy with.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>"]
    pub user_name: String,
}


/// Serialize `PutUserPolicyRequest` contents to a `SignedRequest`.
struct PutUserPolicyRequestSerializer;
impl PutUserPolicyRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &PutUserPolicyRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "PolicyDocument"),
                   &obj.policy_document.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "PolicyName"),
                   &obj.policy_name.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "UserName"),
                   &obj.user_name.replace("+", "%2B"));

    }
}

#[derive(Default,Debug,Clone)]
pub struct RemoveClientIDFromOpenIDConnectProviderRequest {
    #[doc="<p>The client ID (also known as audience) to remove from the IAM OIDC provider resource. For more information about client IDs, see <a>CreateOpenIDConnectProvider</a>.</p>"]
    pub client_id: String,
    #[doc="<p>The Amazon Resource Name (ARN) of the IAM OIDC provider resource to remove the client ID from. You can get a list of OIDC provider ARNs by using the <a>ListOpenIDConnectProviders</a> action.</p> <p>For more information about ARNs, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>"]
    pub open_id_connect_provider_arn: String,
}


/// Serialize `RemoveClientIDFromOpenIDConnectProviderRequest` contents to a `SignedRequest`.
struct RemoveClientIDFromOpenIDConnectProviderRequestSerializer;
impl RemoveClientIDFromOpenIDConnectProviderRequestSerializer {
    fn serialize(params: &mut Params,
                 name: &str,
                 obj: &RemoveClientIDFromOpenIDConnectProviderRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "ClientID"),
                   &obj.client_id.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "OpenIDConnectProviderArn"),
                   &obj.open_id_connect_provider_arn.replace("+", "%2B"));

    }
}

#[derive(Default,Debug,Clone)]
pub struct RemoveRoleFromInstanceProfileRequest {
    #[doc="<p>The name of the instance profile to update.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>"]
    pub instance_profile_name: String,
    #[doc="<p>The name of the role to remove.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>"]
    pub role_name: String,
}


/// Serialize `RemoveRoleFromInstanceProfileRequest` contents to a `SignedRequest`.
struct RemoveRoleFromInstanceProfileRequestSerializer;
impl RemoveRoleFromInstanceProfileRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &RemoveRoleFromInstanceProfileRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "InstanceProfileName"),
                   &obj.instance_profile_name.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "RoleName"),
                   &obj.role_name.replace("+", "%2B"));

    }
}

#[derive(Default,Debug,Clone)]
pub struct RemoveUserFromGroupRequest {
    #[doc="<p>The name of the group to update.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>"]
    pub group_name: String,
    #[doc="<p>The name of the user to remove.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>"]
    pub user_name: String,
}


/// Serialize `RemoveUserFromGroupRequest` contents to a `SignedRequest`.
struct RemoveUserFromGroupRequestSerializer;
impl RemoveUserFromGroupRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &RemoveUserFromGroupRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "GroupName"),
                   &obj.group_name.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "UserName"),
                   &obj.user_name.replace("+", "%2B"));

    }
}

struct ReportContentTypeDeserializer;
impl ReportContentTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<u8>, XmlParseError> {
        try!(start_element(tag_name, stack));
        let obj = try!(characters(stack)).into_bytes();
        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct ReportFormatTypeDeserializer;
impl ReportFormatTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<String, XmlParseError> {
        try!(start_element(tag_name, stack));
        let obj = try!(characters(stack));
        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct ReportStateDescriptionTypeDeserializer;
impl ReportStateDescriptionTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<String, XmlParseError> {
        try!(start_element(tag_name, stack));
        let obj = try!(characters(stack));
        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct ReportStateTypeDeserializer;
impl ReportStateTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<String, XmlParseError> {
        try!(start_element(tag_name, stack));
        let obj = try!(characters(stack));
        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct ResetServiceSpecificCredentialRequest {
    #[doc="<p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>"]
    pub service_specific_credential_id: String,
    #[doc="<p>The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>"]
    pub user_name: Option<String>,
}


/// Serialize `ResetServiceSpecificCredentialRequest` contents to a `SignedRequest`.
struct ResetServiceSpecificCredentialRequestSerializer;
impl ResetServiceSpecificCredentialRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ResetServiceSpecificCredentialRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "ServiceSpecificCredentialId"),
                   &obj.service_specific_credential_id.replace("+", "%2B"));
        if let Some(ref field_value) = obj.user_name {
            params.put(&format!("{}{}", prefix, "UserName"),
                       &field_value.replace("+", "%2B"));
        }

    }
}

#[derive(Default,Debug,Clone)]
pub struct ResetServiceSpecificCredentialResponse {
    #[doc="<p>A structure with details about the updated service-specific credential, including the new password.</p> <important> <p>This is the <b>only</b> time that you can access the password. You cannot recover the password later, but you can reset it again.</p> </important>"]
    pub service_specific_credential: Option<ServiceSpecificCredential>,
}

struct ResetServiceSpecificCredentialResponseDeserializer;
impl ResetServiceSpecificCredentialResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>
        (tag_name: &str,
         stack: &mut T)
         -> Result<ResetServiceSpecificCredentialResponse, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = ResetServiceSpecificCredentialResponse::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "ServiceSpecificCredential" => {
                            obj.service_specific_credential = Some(try!(ServiceSpecificCredentialDeserializer::deserialize("ServiceSpecificCredential", stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}

/// Serialize `ResourceNameListType` contents to a `SignedRequest`.
struct ResourceNameListTypeSerializer;
impl ResourceNameListTypeSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.member.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

struct ResourceNameTypeDeserializer;
impl ResourceNameTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<String, XmlParseError> {
        try!(start_element(tag_name, stack));
        let obj = try!(characters(stack));
        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p>Contains the result of the simulation of a single API action call on a single resource.</p> <p>This data type is used by a member of the <a>EvaluationResult</a> data type.</p>"]
#[derive(Default,Debug,Clone)]
pub struct ResourceSpecificResult {
    #[doc="<p>Additional details about the results of the evaluation decision. When there are both IAM policies and resource policies, this parameter explains how each set of policies contributes to the final evaluation decision. When simulating cross-account access to a resource, both the resource-based policy and the caller's IAM policy must grant access.</p>"]
    pub eval_decision_details: Option<::std::collections::HashMap<String, String>>,
    #[doc="<p>The result of the simulation of the simulated API action on the resource specified in <code>EvalResourceName</code>.</p>"]
    pub eval_resource_decision: String,
    #[doc="<p>The name of the simulated resource, in Amazon Resource Name (ARN) format.</p>"]
    pub eval_resource_name: String,
    #[doc="<p>A list of the statements in the input policies that determine the result for this part of the simulation. Remember that even if multiple statements allow the action on the resource, if <i>any</i> statement denies that action, then the explicit deny overrides any allow, and the deny statement is the only entry included in the result.</p>"]
    pub matched_statements: Option<Vec<Statement>>,
    #[doc="<p>A list of context keys that are required by the included input policies but that were not provided by one of the input parameters. This list is used when a list of ARNs is included in the <code>ResourceArns</code> parameter instead of \"*\". If you do not specify individual resources, by setting <code>ResourceArns</code> to \"*\" or by not including the <code>ResourceArns</code> parameter, then any missing context values are instead included under the <code>EvaluationResults</code> section. To discover the context keys used by a set of policies, you can call <a>GetContextKeysForCustomPolicy</a> or <a>GetContextKeysForPrincipalPolicy</a>.</p>"]
    pub missing_context_values: Option<Vec<String>>,
}

struct ResourceSpecificResultDeserializer;
impl ResourceSpecificResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<ResourceSpecificResult, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = ResourceSpecificResult::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "EvalDecisionDetails" => {
                            obj.eval_decision_details =
                                Some(try!(EvalDecisionDetailsTypeDeserializer::deserialize("EvalDecisionDetails",
                                                                                           stack)));
                        }
                        "EvalResourceDecision" => {
                            obj.eval_resource_decision =
                                try!(PolicyEvaluationDecisionTypeDeserializer::deserialize("EvalResourceDecision",
                                                                                           stack));
                        }
                        "EvalResourceName" => {
                            obj.eval_resource_name =
                                try!(ResourceNameTypeDeserializer::deserialize("EvalResourceName",
                                                                               stack));
                        }
                        "MatchedStatements" => {
                            obj.matched_statements =
                                Some(try!(StatementListTypeDeserializer::deserialize("MatchedStatements",
                                                                                     stack)));
                        }
                        "MissingContextValues" => {
                            obj.missing_context_values = Some(try!(ContextKeyNamesResultListTypeDeserializer::deserialize("MissingContextValues", stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct ResourceSpecificResultListTypeDeserializer;
impl ResourceSpecificResultListTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<ResourceSpecificResult>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "member" {
                        obj.push(try!(ResourceSpecificResultDeserializer::deserialize("member",
                                                                                      stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct ResyncMFADeviceRequest {
    #[doc="<p>An authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p>"]
    pub authentication_code_1: String,
    #[doc="<p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p>"]
    pub authentication_code_2: String,
    #[doc="<p>Serial number that uniquely identifies the MFA device.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>"]
    pub serial_number: String,
    #[doc="<p>The name of the user whose MFA device you want to resynchronize.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>"]
    pub user_name: String,
}


/// Serialize `ResyncMFADeviceRequest` contents to a `SignedRequest`.
struct ResyncMFADeviceRequestSerializer;
impl ResyncMFADeviceRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ResyncMFADeviceRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "AuthenticationCode1"),
                   &obj.authentication_code_1.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "AuthenticationCode2"),
                   &obj.authentication_code_2.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "SerialNumber"),
                   &obj.serial_number.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "UserName"),
                   &obj.user_name.replace("+", "%2B"));

    }
}

#[doc="<p>Contains information about an IAM role. This structure is returned as a response element in several APIs that interact with roles.</p>"]
#[derive(Default,Debug,Clone)]
pub struct Role {
    #[doc="<p> The Amazon Resource Name (ARN) specifying the role. For more information about ARNs and how to use them in policies, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html\">IAM Identifiers</a> in the <i>IAM User Guide</i> guide. </p>"]
    pub arn: String,
    #[doc="<p>The policy that grants an entity permission to assume the role.</p>"]
    pub assume_role_policy_document: Option<String>,
    #[doc="<p>The date and time, in <a href=\"http://www.iso.org/iso/iso8601\">ISO 8601 date-time format</a>, when the role was created.</p>"]
    pub create_date: String,
    #[doc="<p>A description of the role that you provide.</p>"]
    pub description: Option<String>,
    #[doc="<p> The path to the role. For more information about paths, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html\">IAM Identifiers</a> in the <i>Using IAM</i> guide. </p>"]
    pub path: String,
    #[doc="<p> The stable and unique string identifying the role. For more information about IDs, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html\">IAM Identifiers</a> in the <i>Using IAM</i> guide. </p>"]
    pub role_id: String,
    #[doc="<p>The friendly name that identifies the role.</p>"]
    pub role_name: String,
}

struct RoleDeserializer;
impl RoleDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Role, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = Role::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "Arn" => {
                            obj.arn = try!(ArnTypeDeserializer::deserialize("Arn", stack));
                        }
                        "AssumeRolePolicyDocument" => {
                            obj.assume_role_policy_document =
                                Some(try!(PolicyDocumentTypeDeserializer::deserialize("AssumeRolePolicyDocument",
                                                                                      stack)));
                        }
                        "CreateDate" => {
                            obj.create_date = try!(DateTypeDeserializer::deserialize("CreateDate",
                                                                                     stack));
                        }
                        "Description" => {
                            obj.description =
                                Some(try!(RoleDescriptionTypeDeserializer::deserialize("Description",
                                                                                       stack)));
                        }
                        "Path" => {
                            obj.path = try!(PathTypeDeserializer::deserialize("Path", stack));
                        }
                        "RoleId" => {
                            obj.role_id = try!(IdTypeDeserializer::deserialize("RoleId", stack));
                        }
                        "RoleName" => {
                            obj.role_name = try!(RoleNameTypeDeserializer::deserialize("RoleName",
                                                                                       stack));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct RoleDescriptionTypeDeserializer;
impl RoleDescriptionTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<String, XmlParseError> {
        try!(start_element(tag_name, stack));
        let obj = try!(characters(stack));
        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p>Contains information about an IAM role, including all of the role's policies.</p> <p>This data type is used as a response element in the <a>GetAccountAuthorizationDetails</a> action.</p>"]
#[derive(Default,Debug,Clone)]
pub struct RoleDetail {
    pub arn: Option<String>,
    #[doc="<p>The trust policy that grants permission to assume the role.</p>"]
    pub assume_role_policy_document: Option<String>,
    #[doc="<p>A list of managed policies attached to the role. These policies are the role's access (permissions) policies.</p>"]
    pub attached_managed_policies: Option<Vec<AttachedPolicy>>,
    #[doc="<p>The date and time, in <a href=\"http://www.iso.org/iso/iso8601\">ISO 8601 date-time format</a>, when the role was created.</p>"]
    pub create_date: Option<String>,
    #[doc="<p>A list of instance profiles that contain this role.</p>"]
    pub instance_profile_list: Option<Vec<InstanceProfile>>,
    #[doc="<p>The path to the role. For more information about paths, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html\">IAM Identifiers</a> in the <i>Using IAM</i> guide.</p>"]
    pub path: Option<String>,
    #[doc="<p>The stable and unique string identifying the role. For more information about IDs, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html\">IAM Identifiers</a> in the <i>Using IAM</i> guide.</p>"]
    pub role_id: Option<String>,
    #[doc="<p>The friendly name that identifies the role.</p>"]
    pub role_name: Option<String>,
    #[doc="<p>A list of inline policies embedded in the role. These policies are the role's access (permissions) policies.</p>"]
    pub role_policy_list: Option<Vec<PolicyDetail>>,
}

struct RoleDetailDeserializer;
impl RoleDetailDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<RoleDetail, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = RoleDetail::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "Arn" => {
                            obj.arn = Some(try!(ArnTypeDeserializer::deserialize("Arn", stack)));
                        }
                        "AssumeRolePolicyDocument" => {
                            obj.assume_role_policy_document =
                                Some(try!(PolicyDocumentTypeDeserializer::deserialize("AssumeRolePolicyDocument",
                                                                                      stack)));
                        }
                        "AttachedManagedPolicies" => {
                            obj.attached_managed_policies = Some(try!(AttachedPoliciesListTypeDeserializer::deserialize("AttachedManagedPolicies", stack)));
                        }
                        "CreateDate" => {
                            obj.create_date = Some(try!(DateTypeDeserializer::deserialize("CreateDate",
                                                                                          stack)));
                        }
                        "InstanceProfileList" => {
                            obj.instance_profile_list =
                                Some(try!(InstanceProfileListTypeDeserializer::deserialize("InstanceProfileList",
                                                                                           stack)));
                        }
                        "Path" => {
                            obj.path = Some(try!(PathTypeDeserializer::deserialize("Path", stack)));
                        }
                        "RoleId" => {
                            obj.role_id = Some(try!(IdTypeDeserializer::deserialize("RoleId",
                                                                                    stack)));
                        }
                        "RoleName" => {
                            obj.role_name =
                                Some(try!(RoleNameTypeDeserializer::deserialize("RoleName",
                                                                                stack)));
                        }
                        "RolePolicyList" => {
                            obj.role_policy_list =
                                Some(try!(PolicyDetailListTypeDeserializer::deserialize("RolePolicyList",
                                                                                        stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct RoleDetailListTypeDeserializer;
impl RoleDetailListTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<RoleDetail>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "member" {
                        obj.push(try!(RoleDetailDeserializer::deserialize("member", stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
struct RoleListTypeDeserializer;
impl RoleListTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<Role>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "member" {
                        obj.push(try!(RoleDeserializer::deserialize("member", stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
struct RoleNameTypeDeserializer;
impl RoleNameTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<String, XmlParseError> {
        try!(start_element(tag_name, stack));
        let obj = try!(characters(stack));
        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct SAMLMetadataDocumentTypeDeserializer;
impl SAMLMetadataDocumentTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<String, XmlParseError> {
        try!(start_element(tag_name, stack));
        let obj = try!(characters(stack));
        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p>Contains the list of SAML providers for this account.</p>"]
#[derive(Default,Debug,Clone)]
pub struct SAMLProviderListEntry {
    #[doc="<p>The Amazon Resource Name (ARN) of the SAML provider.</p>"]
    pub arn: Option<String>,
    #[doc="<p>The date and time when the SAML provider was created.</p>"]
    pub create_date: Option<String>,
    #[doc="<p>The expiration date and time for the SAML provider.</p>"]
    pub valid_until: Option<String>,
}

struct SAMLProviderListEntryDeserializer;
impl SAMLProviderListEntryDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<SAMLProviderListEntry, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = SAMLProviderListEntry::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "Arn" => {
                            obj.arn = Some(try!(ArnTypeDeserializer::deserialize("Arn", stack)));
                        }
                        "CreateDate" => {
                            obj.create_date = Some(try!(DateTypeDeserializer::deserialize("CreateDate",
                                                                                          stack)));
                        }
                        "ValidUntil" => {
                            obj.valid_until = Some(try!(DateTypeDeserializer::deserialize("ValidUntil",
                                                                                          stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct SAMLProviderListTypeDeserializer;
impl SAMLProviderListTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<SAMLProviderListEntry>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "member" {
                        obj.push(try!(SAMLProviderListEntryDeserializer::deserialize("member",
                                                                                     stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
#[doc="<p>Contains information about an SSH public key.</p> <p>This data type is used as a response element in the <a>GetSSHPublicKey</a> and <a>UploadSSHPublicKey</a> actions. </p>"]
#[derive(Default,Debug,Clone)]
pub struct SSHPublicKey {
    #[doc="<p>The MD5 message digest of the SSH public key.</p>"]
    pub fingerprint: String,
    #[doc="<p>The SSH public key.</p>"]
    pub ssh_public_key_body: String,
    #[doc="<p>The unique identifier for the SSH public key.</p>"]
    pub ssh_public_key_id: String,
    #[doc="<p>The status of the SSH public key. <code>Active</code> means the key can be used for authentication with an AWS CodeCommit repository. <code>Inactive</code> means the key cannot be used.</p>"]
    pub status: String,
    #[doc="<p>The date and time, in <a href=\"http://www.iso.org/iso/iso8601\">ISO 8601 date-time format</a>, when the SSH public key was uploaded.</p>"]
    pub upload_date: Option<String>,
    #[doc="<p>The name of the IAM user associated with the SSH public key.</p>"]
    pub user_name: String,
}

struct SSHPublicKeyDeserializer;
impl SSHPublicKeyDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<SSHPublicKey, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = SSHPublicKey::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "Fingerprint" => {
                            obj.fingerprint =
                                try!(PublicKeyFingerprintTypeDeserializer::deserialize("Fingerprint",
                                                                                       stack));
                        }
                        "SSHPublicKeyBody" => {
                            obj.ssh_public_key_body =
                                try!(PublicKeyMaterialTypeDeserializer::deserialize("SSHPublicKeyBody",
                                                                                    stack));
                        }
                        "SSHPublicKeyId" => {
                            obj.ssh_public_key_id =
                                try!(PublicKeyIdTypeDeserializer::deserialize("SSHPublicKeyId",
                                                                              stack));
                        }
                        "Status" => {
                            obj.status = try!(StatusTypeDeserializer::deserialize("Status", stack));
                        }
                        "UploadDate" => {
                            obj.upload_date = Some(try!(DateTypeDeserializer::deserialize("UploadDate",
                                                                                          stack)));
                        }
                        "UserName" => {
                            obj.user_name = try!(UserNameTypeDeserializer::deserialize("UserName",
                                                                                       stack));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct SSHPublicKeyListTypeDeserializer;
impl SSHPublicKeyListTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<SSHPublicKeyMetadata>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "member" {
                        obj.push(try!(SSHPublicKeyMetadataDeserializer::deserialize("member",
                                                                                    stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
#[doc="<p>Contains information about an SSH public key, without the key's body or fingerprint.</p> <p>This data type is used as a response element in the <a>ListSSHPublicKeys</a> action.</p>"]
#[derive(Default,Debug,Clone)]
pub struct SSHPublicKeyMetadata {
    #[doc="<p>The unique identifier for the SSH public key.</p>"]
    pub ssh_public_key_id: String,
    #[doc="<p>The status of the SSH public key. <code>Active</code> means the key can be used for authentication with an AWS CodeCommit repository. <code>Inactive</code> means the key cannot be used.</p>"]
    pub status: String,
    #[doc="<p>The date and time, in <a href=\"http://www.iso.org/iso/iso8601\">ISO 8601 date-time format</a>, when the SSH public key was uploaded.</p>"]
    pub upload_date: String,
    #[doc="<p>The name of the IAM user associated with the SSH public key.</p>"]
    pub user_name: String,
}

struct SSHPublicKeyMetadataDeserializer;
impl SSHPublicKeyMetadataDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<SSHPublicKeyMetadata, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = SSHPublicKeyMetadata::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "SSHPublicKeyId" => {
                            obj.ssh_public_key_id =
                                try!(PublicKeyIdTypeDeserializer::deserialize("SSHPublicKeyId",
                                                                              stack));
                        }
                        "Status" => {
                            obj.status = try!(StatusTypeDeserializer::deserialize("Status", stack));
                        }
                        "UploadDate" => {
                            obj.upload_date = try!(DateTypeDeserializer::deserialize("UploadDate",
                                                                                     stack));
                        }
                        "UserName" => {
                            obj.user_name = try!(UserNameTypeDeserializer::deserialize("UserName",
                                                                                       stack));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct SerialNumberTypeDeserializer;
impl SerialNumberTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<String, XmlParseError> {
        try!(start_element(tag_name, stack));
        let obj = try!(characters(stack));
        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p>Contains information about a server certificate.</p> <p> This data type is used as a response element in the <a>GetServerCertificate</a> action. </p>"]
#[derive(Default,Debug,Clone)]
pub struct ServerCertificate {
    #[doc="<p>The contents of the public key certificate.</p>"]
    pub certificate_body: String,
    #[doc="<p>The contents of the public key certificate chain.</p>"]
    pub certificate_chain: Option<String>,
    #[doc="<p>The meta information of the server certificate, such as its name, path, ID, and ARN.</p>"]
    pub server_certificate_metadata: ServerCertificateMetadata,
}

struct ServerCertificateDeserializer;
impl ServerCertificateDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<ServerCertificate, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = ServerCertificate::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "CertificateBody" => {
                            obj.certificate_body =
                                try!(CertificateBodyTypeDeserializer::deserialize("CertificateBody",
                                                                                  stack));
                        }
                        "CertificateChain" => {
                            obj.certificate_chain =
                                Some(try!(CertificateChainTypeDeserializer::deserialize("CertificateChain",
                                                                                        stack)));
                        }
                        "ServerCertificateMetadata" => {
                            obj.server_certificate_metadata =
                                try!(ServerCertificateMetadataDeserializer::deserialize("ServerCertificateMetadata",
                                                                                        stack));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p>Contains information about a server certificate without its certificate body, certificate chain, and private key.</p> <p> This data type is used as a response element in the <a>UploadServerCertificate</a> and <a>ListServerCertificates</a> actions. </p>"]
#[derive(Default,Debug,Clone)]
pub struct ServerCertificateMetadata {
    #[doc="<p> The Amazon Resource Name (ARN) specifying the server certificate. For more information about ARNs and how to use them in policies, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html\">IAM Identifiers</a> in the <i>Using IAM</i> guide. </p>"]
    pub arn: String,
    #[doc="<p>The date on which the certificate is set to expire.</p>"]
    pub expiration: Option<String>,
    #[doc="<p> The path to the server certificate. For more information about paths, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html\">IAM Identifiers</a> in the <i>Using IAM</i> guide. </p>"]
    pub path: String,
    #[doc="<p> The stable and unique string identifying the server certificate. For more information about IDs, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html\">IAM Identifiers</a> in the <i>Using IAM</i> guide. </p>"]
    pub server_certificate_id: String,
    #[doc="<p>The name that identifies the server certificate.</p>"]
    pub server_certificate_name: String,
    #[doc="<p>The date when the server certificate was uploaded.</p>"]
    pub upload_date: Option<String>,
}

struct ServerCertificateMetadataDeserializer;
impl ServerCertificateMetadataDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<ServerCertificateMetadata, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = ServerCertificateMetadata::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "Arn" => {
                            obj.arn = try!(ArnTypeDeserializer::deserialize("Arn", stack));
                        }
                        "Expiration" => {
                            obj.expiration = Some(try!(DateTypeDeserializer::deserialize("Expiration",
                                                                                         stack)));
                        }
                        "Path" => {
                            obj.path = try!(PathTypeDeserializer::deserialize("Path", stack));
                        }
                        "ServerCertificateId" => {
                            obj.server_certificate_id =
                                try!(IdTypeDeserializer::deserialize("ServerCertificateId", stack));
                        }
                        "ServerCertificateName" => {
                            obj.server_certificate_name =
                                try!(ServerCertificateNameTypeDeserializer::deserialize("ServerCertificateName",
                                                                                        stack));
                        }
                        "UploadDate" => {
                            obj.upload_date = Some(try!(DateTypeDeserializer::deserialize("UploadDate",
                                                                                          stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct ServerCertificateMetadataListTypeDeserializer;
impl ServerCertificateMetadataListTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<ServerCertificateMetadata>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "member" {
                        obj.push(try!(ServerCertificateMetadataDeserializer::deserialize("member",
                                                                                         stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
struct ServerCertificateNameTypeDeserializer;
impl ServerCertificateNameTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<String, XmlParseError> {
        try!(start_element(tag_name, stack));
        let obj = try!(characters(stack));
        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct ServiceNameDeserializer;
impl ServiceNameDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<String, XmlParseError> {
        try!(start_element(tag_name, stack));
        let obj = try!(characters(stack));
        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct ServicePasswordDeserializer;
impl ServicePasswordDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<String, XmlParseError> {
        try!(start_element(tag_name, stack));
        let obj = try!(characters(stack));
        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p>Contains the details of a service specific credential.</p>"]
#[derive(Default,Debug,Clone)]
pub struct ServiceSpecificCredential {
    #[doc="<p>The date and time, in <a href=\"http://www.iso.org/iso/iso8601\">ISO 8601 date-time format</a>, when the service-specific credential were created.</p>"]
    pub create_date: String,
    #[doc="<p>The name of the service associated with the service-specific credential.</p>"]
    pub service_name: String,
    #[doc="<p>The generated password for the service-specific credential.</p>"]
    pub service_password: String,
    #[doc="<p>The unique identifier for the service-specific credential.</p>"]
    pub service_specific_credential_id: String,
    #[doc="<p>The generated user name for the service-specific credential. This value is generated by combining the IAM user's name combined with the ID number of the AWS account, as in <code>jane-at-123456789012</code>, for example. This value cannot be configured by the user.</p>"]
    pub service_user_name: String,
    #[doc="<p>The status of the service-specific credential. <code>Active</code> means the key is valid for API calls, while <code>Inactive</code> means it is not.</p>"]
    pub status: String,
    #[doc="<p>The name of the IAM user associated with the service-specific credential.</p>"]
    pub user_name: String,
}

struct ServiceSpecificCredentialDeserializer;
impl ServiceSpecificCredentialDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<ServiceSpecificCredential, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = ServiceSpecificCredential::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "CreateDate" => {
                            obj.create_date = try!(DateTypeDeserializer::deserialize("CreateDate",
                                                                                     stack));
                        }
                        "ServiceName" => {
                            obj.service_name = try!(ServiceNameDeserializer::deserialize("ServiceName",
                                                                                         stack));
                        }
                        "ServicePassword" => {
                            obj.service_password =
                                try!(ServicePasswordDeserializer::deserialize("ServicePassword",
                                                                              stack));
                        }
                        "ServiceSpecificCredentialId" => {
                            obj.service_specific_credential_id =
                                try!(ServiceSpecificCredentialIdDeserializer::deserialize("ServiceSpecificCredentialId",
                                                                                          stack));
                        }
                        "ServiceUserName" => {
                            obj.service_user_name =
                                try!(ServiceUserNameDeserializer::deserialize("ServiceUserName",
                                                                              stack));
                        }
                        "Status" => {
                            obj.status = try!(StatusTypeDeserializer::deserialize("Status", stack));
                        }
                        "UserName" => {
                            obj.user_name = try!(UserNameTypeDeserializer::deserialize("UserName",
                                                                                       stack));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct ServiceSpecificCredentialIdDeserializer;
impl ServiceSpecificCredentialIdDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<String, XmlParseError> {
        try!(start_element(tag_name, stack));
        let obj = try!(characters(stack));
        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p>Contains additional details about a service-specific credential.</p>"]
#[derive(Default,Debug,Clone)]
pub struct ServiceSpecificCredentialMetadata {
    #[doc="<p>The date and time, in <a href=\"http://www.iso.org/iso/iso8601\">ISO 8601 date-time format</a>, when the service-specific credential were created.</p>"]
    pub create_date: String,
    #[doc="<p>The name of the service associated with the service-specific credential.</p>"]
    pub service_name: String,
    #[doc="<p>The unique identifier for the service-specific credential.</p>"]
    pub service_specific_credential_id: String,
    #[doc="<p>The generated user name for the service-specific credential.</p>"]
    pub service_user_name: String,
    #[doc="<p>The status of the service-specific credential. <code>Active</code> means the key is valid for API calls, while <code>Inactive</code> means it is not.</p>"]
    pub status: String,
    #[doc="<p>The name of the IAM user associated with the service-specific credential.</p>"]
    pub user_name: String,
}

struct ServiceSpecificCredentialMetadataDeserializer;
impl ServiceSpecificCredentialMetadataDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>
        (tag_name: &str,
         stack: &mut T)
         -> Result<ServiceSpecificCredentialMetadata, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = ServiceSpecificCredentialMetadata::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "CreateDate" => {
                            obj.create_date = try!(DateTypeDeserializer::deserialize("CreateDate",
                                                                                     stack));
                        }
                        "ServiceName" => {
                            obj.service_name = try!(ServiceNameDeserializer::deserialize("ServiceName",
                                                                                         stack));
                        }
                        "ServiceSpecificCredentialId" => {
                            obj.service_specific_credential_id =
                                try!(ServiceSpecificCredentialIdDeserializer::deserialize("ServiceSpecificCredentialId",
                                                                                          stack));
                        }
                        "ServiceUserName" => {
                            obj.service_user_name =
                                try!(ServiceUserNameDeserializer::deserialize("ServiceUserName",
                                                                              stack));
                        }
                        "Status" => {
                            obj.status = try!(StatusTypeDeserializer::deserialize("Status", stack));
                        }
                        "UserName" => {
                            obj.user_name = try!(UserNameTypeDeserializer::deserialize("UserName",
                                                                                       stack));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct ServiceSpecificCredentialsListTypeDeserializer;
impl ServiceSpecificCredentialsListTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>
        (tag_name: &str,
         stack: &mut T)
         -> Result<Vec<ServiceSpecificCredentialMetadata>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "member" {
                        obj.push(try!(ServiceSpecificCredentialMetadataDeserializer::deserialize("member", stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
struct ServiceUserNameDeserializer;
impl ServiceUserNameDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<String, XmlParseError> {
        try!(start_element(tag_name, stack));
        let obj = try!(characters(stack));
        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct SetDefaultPolicyVersionRequest {
    #[doc="<p>The Amazon Resource Name (ARN) of the IAM policy whose default version you want to set.</p> <p>For more information about ARNs, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>"]
    pub policy_arn: String,
    #[doc="<p>The version of the policy to set as the default (operative) version.</p> <p>For more information about managed policy versions, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html\">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>"]
    pub version_id: String,
}


/// Serialize `SetDefaultPolicyVersionRequest` contents to a `SignedRequest`.
struct SetDefaultPolicyVersionRequestSerializer;
impl SetDefaultPolicyVersionRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &SetDefaultPolicyVersionRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "PolicyArn"),
                   &obj.policy_arn.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "VersionId"),
                   &obj.version_id.replace("+", "%2B"));

    }
}

#[doc="<p>Contains information about an X.509 signing certificate.</p> <p>This data type is used as a response element in the <a>UploadSigningCertificate</a> and <a>ListSigningCertificates</a> actions. </p>"]
#[derive(Default,Debug,Clone)]
pub struct SigningCertificate {
    #[doc="<p>The contents of the signing certificate.</p>"]
    pub certificate_body: String,
    #[doc="<p>The ID for the signing certificate.</p>"]
    pub certificate_id: String,
    #[doc="<p>The status of the signing certificate. <code>Active</code> means the key is valid for API calls, while <code>Inactive</code> means it is not.</p>"]
    pub status: String,
    #[doc="<p>The date when the signing certificate was uploaded.</p>"]
    pub upload_date: Option<String>,
    #[doc="<p>The name of the user the signing certificate is associated with.</p>"]
    pub user_name: String,
}

struct SigningCertificateDeserializer;
impl SigningCertificateDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<SigningCertificate, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = SigningCertificate::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "CertificateBody" => {
                            obj.certificate_body =
                                try!(CertificateBodyTypeDeserializer::deserialize("CertificateBody",
                                                                                  stack));
                        }
                        "CertificateId" => {
                            obj.certificate_id =
                                try!(CertificateIdTypeDeserializer::deserialize("CertificateId",
                                                                                stack));
                        }
                        "Status" => {
                            obj.status = try!(StatusTypeDeserializer::deserialize("Status", stack));
                        }
                        "UploadDate" => {
                            obj.upload_date = Some(try!(DateTypeDeserializer::deserialize("UploadDate",
                                                                                          stack)));
                        }
                        "UserName" => {
                            obj.user_name = try!(UserNameTypeDeserializer::deserialize("UserName",
                                                                                       stack));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct SimulateCustomPolicyRequest {
    #[doc="<p>A list of names of API actions to evaluate in the simulation. Each action is evaluated against each resource. Each action must include the service identifier, such as <code>iam:CreateUser</code>.</p>"]
    pub action_names: Vec<String>,
    #[doc="<p>The ARN of the IAM user that you want to use as the simulated caller of the APIs. <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> so that the policy's <code>Principal</code> element has a value to use in evaluating the policy.</p> <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.</p>"]
    pub caller_arn: Option<String>,
    #[doc="<p>A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permission policies, the corresponding value is supplied.</p>"]
    pub context_entries: Option<Vec<ContextEntry>>,
    #[doc="<p>Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.</p>"]
    pub marker: Option<String>,
    #[doc="<p>(Optional) Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code> and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>"]
    pub max_items: Option<i64>,
    #[doc="<p>A list of policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy. Do not include any resource-based policies in this parameter. Any resource-based policy must be submitted with the <code>ResourcePolicy</code> parameter. The policies cannot be \"scope-down\" policies, such as you could include in a call to <a href=\"http://docs.aws.amazon.com/IAM/latest/APIReference/API_GetFederationToken.html\">GetFederationToken</a> or one of the <a href=\"http://docs.aws.amazon.com/IAM/latest/APIReference/API_AssumeRole.html\">AssumeRole</a> APIs to restrict what a user can do while using the temporary credentials.</p> <p>The <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a> used to validate this parameter is a string of characters consisting of any printable ASCII character ranging from the space character (\\u0020) through end of the ASCII character range as well as the printable characters in the Basic Latin and Latin-1 Supplement character set (through \\u00FF). It also includes the special characters tab (\\u0009), line feed (\\u000A), and carriage return (\\u000D).</p>"]
    pub policy_input_list: Vec<String>,
    #[doc="<p>A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided then the value defaults to <code>*</code> (all resources). Each API in the <code>ActionNames</code> parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response.</p> <p>The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the <code>ResourcePolicy</code> parameter.</p> <p>If you include a <code>ResourcePolicy</code>, then it must be applicable to all of the resources included in the simulation or you receive an invalid input error.</p> <p>For more information about ARNs, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>"]
    pub resource_arns: Option<Vec<String>>,
    #[doc="<p>Specifies the type of simulation to run. Different APIs that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.</p> <p>Each of the EC2 scenarios requires that you specify instance, image, and security-group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network-interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see <a href=\"http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html\">Supported Platforms</a> in the <i>AWS EC2 User Guide</i>.</p> <ul> <li> <p> <b>EC2-Classic-InstanceStore</b> </p> <p>instance, image, security-group</p> </li> <li> <p> <b>EC2-Classic-EBS</b> </p> <p>instance, image, security-group, volume</p> </li> <li> <p> <b>EC2-VPC-InstanceStore</b> </p> <p>instance, image, security-group, network-interface</p> </li> <li> <p> <b>EC2-VPC-InstanceStore-Subnet</b> </p> <p>instance, image, security-group, network-interface, subnet</p> </li> <li> <p> <b>EC2-VPC-EBS</b> </p> <p>instance, image, security-group, network-interface, volume</p> </li> <li> <p> <b>EC2-VPC-EBS-Subnet</b> </p> <p>instance, image, security-group, network-interface, subnet, volume</p> </li> </ul>"]
    pub resource_handling_option: Option<String>,
    #[doc="<p>An AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN, such as an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also used as the account owner of any <code>ResourcePolicy</code> included in the simulation. If the <code>ResourceOwner</code> parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in <code>CallerArn</code>. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user <code>CallerArn</code>.</p>"]
    pub resource_owner: Option<String>,
    #[doc="<p>A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.</p> <p>The <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a> used to validate this parameter is a string of characters consisting of any printable ASCII character ranging from the space character (\\u0020) through end of the ASCII character range as well as the printable characters in the Basic Latin and Latin-1 Supplement character set (through \\u00FF). It also includes the special characters tab (\\u0009), line feed (\\u000A), and carriage return (\\u000D).</p>"]
    pub resource_policy: Option<String>,
}


/// Serialize `SimulateCustomPolicyRequest` contents to a `SignedRequest`.
struct SimulateCustomPolicyRequestSerializer;
impl SimulateCustomPolicyRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &SimulateCustomPolicyRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        ActionNameListTypeSerializer::serialize(params,
                                                &format!("{}{}", prefix, "ActionNames"),
                                                &obj.action_names);
        if let Some(ref field_value) = obj.caller_arn {
            params.put(&format!("{}{}", prefix, "CallerArn"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.context_entries {
            ContextEntryListTypeSerializer::serialize(params,
                                                      &format!("{}{}", prefix, "ContextEntries"),
                                                      field_value);
        }
        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.max_items {
            params.put(&format!("{}{}", prefix, "MaxItems"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        SimulationPolicyListTypeSerializer::serialize(params,
                                                      &format!("{}{}", prefix, "PolicyInputList"),
                                                      &obj.policy_input_list);
        if let Some(ref field_value) = obj.resource_arns {
            ResourceNameListTypeSerializer::serialize(params,
                                                      &format!("{}{}", prefix, "ResourceArns"),
                                                      field_value);
        }
        if let Some(ref field_value) = obj.resource_handling_option {
            params.put(&format!("{}{}", prefix, "ResourceHandlingOption"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.resource_owner {
            params.put(&format!("{}{}", prefix, "ResourceOwner"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.resource_policy {
            params.put(&format!("{}{}", prefix, "ResourcePolicy"),
                       &field_value.replace("+", "%2B"));
        }

    }
}

#[doc="<p>Contains the response to a successful <a>SimulatePrincipalPolicy</a> or <a>SimulateCustomPolicy</a> request.</p>"]
#[derive(Default,Debug,Clone)]
pub struct SimulatePolicyResponse {
    #[doc="<p>The results of the simulation.</p>"]
    pub evaluation_results: Option<Vec<EvaluationResult>>,
    #[doc="<p>A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the <code>Marker</code> request parameter to retrieve more items. Note that IAM might return fewer than the <code>MaxItems</code> number of results even when there are more results available. We recommend that you check <code>IsTruncated</code> after every call to ensure that you receive all of your results.</p>"]
    pub is_truncated: Option<bool>,
    #[doc="<p>When <code>IsTruncated</code> is <code>true</code>, this element is present and contains the value to use for the <code>Marker</code> parameter in a subsequent pagination request.</p>"]
    pub marker: Option<String>,
}

struct SimulatePolicyResponseDeserializer;
impl SimulatePolicyResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<SimulatePolicyResponse, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = SimulatePolicyResponse::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "EvaluationResults" => {
                            obj.evaluation_results = Some(try!(EvaluationResultsListTypeDeserializer::deserialize("EvaluationResults", stack)));
                        }
                        "IsTruncated" => {
                            obj.is_truncated =
                                Some(try!(BooleanTypeDeserializer::deserialize("IsTruncated",
                                                                               stack)));
                        }
                        "Marker" => {
                            obj.marker = Some(try!(MarkerTypeDeserializer::deserialize("Marker",
                                                                                       stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct SimulatePrincipalPolicyRequest {
    #[doc="<p>A list of names of API actions to evaluate in the simulation. Each action is evaluated for each resource. Each action must include the service identifier, such as <code>iam:CreateUser</code>.</p>"]
    pub action_names: Vec<String>,
    #[doc="<p>The ARN of the IAM user that you want to specify as the simulated caller of the APIs. If you do not specify a <code>CallerArn</code>, it defaults to the ARN of the user that you specify in <code>PolicySourceArn</code>, if you specified a user. If you include both a <code>PolicySourceArn</code> (for example, <code>arn:aws:iam::123456789012:user/David</code>) and a <code>CallerArn</code> (for example, <code>arn:aws:iam::123456789012:user/Bob</code>), the result is that you simulate calling the APIs as Bob, as if Bob had David's policies.</p> <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.</p> <p> <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> and the <code>PolicySourceArn</code> is not the ARN for an IAM user. This is required so that the resource-based policy's <code>Principal</code> element has a value to use in evaluating the policy.</p> <p>For more information about ARNs, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>"]
    pub caller_arn: Option<String>,
    #[doc="<p>A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permission policies, the corresponding value is supplied.</p>"]
    pub context_entries: Option<Vec<ContextEntry>>,
    #[doc="<p>Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.</p>"]
    pub marker: Option<String>,
    #[doc="<p>(Optional) Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code> and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>"]
    pub max_items: Option<i64>,
    #[doc="<p>An optional list of additional policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.</p> <p>The <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a> used to validate this parameter is a string of characters consisting of any printable ASCII character ranging from the space character (\\u0020) through end of the ASCII character range as well as the printable characters in the Basic Latin and Latin-1 Supplement character set (through \\u00FF). It also includes the special characters tab (\\u0009), line feed (\\u000A), and carriage return (\\u000D).</p>"]
    pub policy_input_list: Option<Vec<String>>,
    #[doc="<p>The Amazon Resource Name (ARN) of a user, group, or role whose policies you want to include in the simulation. If you specify a user, group, or role, the simulation includes all policies that are associated with that entity. If you specify a user, the simulation also includes all policies that are attached to any groups the user belongs to.</p> <p>For more information about ARNs, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>"]
    pub policy_source_arn: String,
    #[doc="<p>A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided then the value defaults to <code>*</code> (all resources). Each API in the <code>ActionNames</code> parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response.</p> <p>The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the <code>ResourcePolicy</code> parameter.</p> <p>For more information about ARNs, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>"]
    pub resource_arns: Option<Vec<String>>,
    #[doc="<p>Specifies the type of simulation to run. Different APIs that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.</p> <p>Each of the EC2 scenarios requires that you specify instance, image, and security-group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network-interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see <a href=\"http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html\">Supported Platforms</a> in the <i>AWS EC2 User Guide</i>.</p> <ul> <li> <p> <b>EC2-Classic-InstanceStore</b> </p> <p>instance, image, security-group</p> </li> <li> <p> <b>EC2-Classic-EBS</b> </p> <p>instance, image, security-group, volume</p> </li> <li> <p> <b>EC2-VPC-InstanceStore</b> </p> <p>instance, image, security-group, network-interface</p> </li> <li> <p> <b>EC2-VPC-InstanceStore-Subnet</b> </p> <p>instance, image, security-group, network-interface, subnet</p> </li> <li> <p> <b>EC2-VPC-EBS</b> </p> <p>instance, image, security-group, network-interface, volume</p> </li> <li> <p> <b>EC2-VPC-EBS-Subnet</b> </p> <p>instance, image, security-group, network-interface, subnet, volume</p> </li> </ul>"]
    pub resource_handling_option: Option<String>,
    #[doc="<p>An AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN, such as an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also used as the account owner of any <code>ResourcePolicy</code> included in the simulation. If the <code>ResourceOwner</code> parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in <code>CallerArn</code>. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user <code>CallerArn</code>.</p>"]
    pub resource_owner: Option<String>,
    #[doc="<p>A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.</p> <p>The <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a> used to validate this parameter is a string of characters consisting of any printable ASCII character ranging from the space character (\\u0020) through end of the ASCII character range as well as the printable characters in the Basic Latin and Latin-1 Supplement character set (through \\u00FF). It also includes the special characters tab (\\u0009), line feed (\\u000A), and carriage return (\\u000D).</p>"]
    pub resource_policy: Option<String>,
}


/// Serialize `SimulatePrincipalPolicyRequest` contents to a `SignedRequest`.
struct SimulatePrincipalPolicyRequestSerializer;
impl SimulatePrincipalPolicyRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &SimulatePrincipalPolicyRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        ActionNameListTypeSerializer::serialize(params,
                                                &format!("{}{}", prefix, "ActionNames"),
                                                &obj.action_names);
        if let Some(ref field_value) = obj.caller_arn {
            params.put(&format!("{}{}", prefix, "CallerArn"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.context_entries {
            ContextEntryListTypeSerializer::serialize(params,
                                                      &format!("{}{}", prefix, "ContextEntries"),
                                                      field_value);
        }
        if let Some(ref field_value) = obj.marker {
            params.put(&format!("{}{}", prefix, "Marker"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.max_items {
            params.put(&format!("{}{}", prefix, "MaxItems"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.policy_input_list {
            SimulationPolicyListTypeSerializer::serialize(params,
                                                          &format!("{}{}",
                                                                  prefix,
                                                                  "PolicyInputList"),
                                                          field_value);
        }
        params.put(&format!("{}{}", prefix, "PolicySourceArn"),
                   &obj.policy_source_arn.replace("+", "%2B"));
        if let Some(ref field_value) = obj.resource_arns {
            ResourceNameListTypeSerializer::serialize(params,
                                                      &format!("{}{}", prefix, "ResourceArns"),
                                                      field_value);
        }
        if let Some(ref field_value) = obj.resource_handling_option {
            params.put(&format!("{}{}", prefix, "ResourceHandlingOption"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.resource_owner {
            params.put(&format!("{}{}", prefix, "ResourceOwner"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.resource_policy {
            params.put(&format!("{}{}", prefix, "ResourcePolicy"),
                       &field_value.replace("+", "%2B"));
        }

    }
}


/// Serialize `SimulationPolicyListType` contents to a `SignedRequest`.
struct SimulationPolicyListTypeSerializer;
impl SimulationPolicyListTypeSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.member.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

#[doc="<p>Contains a reference to a <code>Statement</code> element in a policy document that determines the result of the simulation.</p> <p>This data type is used by the <code>MatchedStatements</code> member of the <code> <a>EvaluationResult</a> </code> type.</p>"]
#[derive(Default,Debug,Clone)]
pub struct Statement {
    #[doc="<p>The row and column of the end of a <code>Statement</code> in an IAM policy.</p>"]
    pub end_position: Option<Position>,
    #[doc="<p>The identifier of the policy that was provided as an input.</p>"]
    pub source_policy_id: Option<String>,
    #[doc="<p>The type of the policy.</p>"]
    pub source_policy_type: Option<String>,
    #[doc="<p>The row and column of the beginning of the <code>Statement</code> in an IAM policy.</p>"]
    pub start_position: Option<Position>,
}

struct StatementDeserializer;
impl StatementDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Statement, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = Statement::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "EndPosition" => {
                            obj.end_position = Some(try!(PositionDeserializer::deserialize("EndPosition",
                                                                                           stack)));
                        }
                        "SourcePolicyId" => {
                            obj.source_policy_id =
                                Some(try!(PolicyIdentifierTypeDeserializer::deserialize("SourcePolicyId",
                                                                                        stack)));
                        }
                        "SourcePolicyType" => {
                            obj.source_policy_type =
                                Some(try!(PolicySourceTypeDeserializer::deserialize("SourcePolicyType",
                                                                                    stack)));
                        }
                        "StartPosition" => {
                            obj.start_position =
                                Some(try!(PositionDeserializer::deserialize("StartPosition",
                                                                            stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct StatementListTypeDeserializer;
impl StatementListTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<Statement>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "member" {
                        obj.push(try!(StatementDeserializer::deserialize("member", stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
struct StatusTypeDeserializer;
impl StatusTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<String, XmlParseError> {
        try!(start_element(tag_name, stack));
        let obj = try!(characters(stack));
        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct StringTypeDeserializer;
impl StringTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<String, XmlParseError> {
        try!(start_element(tag_name, stack));
        let obj = try!(characters(stack));
        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct SummaryKeyTypeDeserializer;
impl SummaryKeyTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<String, XmlParseError> {
        try!(start_element(tag_name, stack));
        let obj = try!(characters(stack));
        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct SummaryMapTypeDeserializer;
impl SummaryMapTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>
        (tag_name: &str,
         stack: &mut T)
         -> Result<::std::collections::HashMap<String, i64>, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = ::std::collections::HashMap::new();

        while try!(peek_at_name(stack)) == "entry" {
            try!(start_element("entry", stack));
            let key = try!(SummaryKeyTypeDeserializer::deserialize("key", stack));
            let value = try!(SummaryValueTypeDeserializer::deserialize("value", stack));
            obj.insert(key, value);
            try!(end_element("entry", stack));
        }

        try!(end_element(tag_name, stack));
        Ok(obj)

    }
}
struct SummaryValueTypeDeserializer;
impl SummaryValueTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<i64, XmlParseError> {
        try!(start_element(tag_name, stack));
        let obj = i64::from_str(try!(characters(stack)).as_ref()).unwrap();
        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct ThumbprintListTypeDeserializer;
impl ThumbprintListTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<String>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "member" {
                        obj.push(try!(ThumbprintTypeDeserializer::deserialize("member", stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}

/// Serialize `ThumbprintListType` contents to a `SignedRequest`.
struct ThumbprintListTypeSerializer;
impl ThumbprintListTypeSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.member.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

struct ThumbprintTypeDeserializer;
impl ThumbprintTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<String, XmlParseError> {
        try!(start_element(tag_name, stack));
        let obj = try!(characters(stack));
        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct UpdateAccessKeyRequest {
    #[doc="<p>The access key ID of the secret access key you want to update.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>"]
    pub access_key_id: String,
    #[doc="<p> The status you want to assign to the secret access key. <code>Active</code> means the key can be used for API calls to AWS, while <code>Inactive</code> means the key cannot be used.</p>"]
    pub status: String,
    #[doc="<p>The name of the user whose key you want to update.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>"]
    pub user_name: Option<String>,
}


/// Serialize `UpdateAccessKeyRequest` contents to a `SignedRequest`.
struct UpdateAccessKeyRequestSerializer;
impl UpdateAccessKeyRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &UpdateAccessKeyRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "AccessKeyId"),
                   &obj.access_key_id.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "Status"),
                   &obj.status.replace("+", "%2B"));
        if let Some(ref field_value) = obj.user_name {
            params.put(&format!("{}{}", prefix, "UserName"),
                       &field_value.replace("+", "%2B"));
        }

    }
}

#[derive(Default,Debug,Clone)]
pub struct UpdateAccountPasswordPolicyRequest {
    #[doc="<p> Allows all IAM users in your account to use the AWS Management Console to change their own passwords. For more information, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/HowToPwdIAMUser.html\">Letting IAM Users Change Their Own Passwords</a> in the <i>IAM User Guide</i>.</p> <p>Default value: false</p>"]
    pub allow_users_to_change_password: Option<bool>,
    #[doc="<p>Prevents IAM users from setting a new password after their password has expired.</p> <p>Default value: false</p>"]
    pub hard_expiry: Option<bool>,
    #[doc="<p>The number of days that an IAM user password is valid. The default value of 0 means IAM user passwords never expire.</p> <p>Default value: 0</p>"]
    pub max_password_age: Option<i64>,
    #[doc="<p>The minimum number of characters allowed in an IAM user password.</p> <p>Default value: 6</p>"]
    pub minimum_password_length: Option<i64>,
    #[doc="<p>Specifies the number of previous passwords that IAM users are prevented from reusing. The default value of 0 means IAM users are not prevented from reusing previous passwords.</p> <p>Default value: 0</p>"]
    pub password_reuse_prevention: Option<i64>,
    #[doc="<p>Specifies whether IAM user passwords must contain at least one lowercase character from the ISO basic Latin alphabet (a to z).</p> <p>Default value: false</p>"]
    pub require_lowercase_characters: Option<bool>,
    #[doc="<p>Specifies whether IAM user passwords must contain at least one numeric character (0 to 9).</p> <p>Default value: false</p>"]
    pub require_numbers: Option<bool>,
    #[doc="<p>Specifies whether IAM user passwords must contain at least one of the following non-alphanumeric characters:</p> <p>! @ # $ % ^ &amp;amp; * ( ) _ + - = [ ] { } | '</p> <p>Default value: false</p>"]
    pub require_symbols: Option<bool>,
    #[doc="<p>Specifies whether IAM user passwords must contain at least one uppercase character from the ISO basic Latin alphabet (A to Z).</p> <p>Default value: false</p>"]
    pub require_uppercase_characters: Option<bool>,
}


/// Serialize `UpdateAccountPasswordPolicyRequest` contents to a `SignedRequest`.
struct UpdateAccountPasswordPolicyRequestSerializer;
impl UpdateAccountPasswordPolicyRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &UpdateAccountPasswordPolicyRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.allow_users_to_change_password {
            params.put(&format!("{}{}", prefix, "AllowUsersToChangePassword"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.hard_expiry {
            params.put(&format!("{}{}", prefix, "HardExpiry"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.max_password_age {
            params.put(&format!("{}{}", prefix, "MaxPasswordAge"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.minimum_password_length {
            params.put(&format!("{}{}", prefix, "MinimumPasswordLength"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.password_reuse_prevention {
            params.put(&format!("{}{}", prefix, "PasswordReusePrevention"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.require_lowercase_characters {
            params.put(&format!("{}{}", prefix, "RequireLowercaseCharacters"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.require_numbers {
            params.put(&format!("{}{}", prefix, "RequireNumbers"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.require_symbols {
            params.put(&format!("{}{}", prefix, "RequireSymbols"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.require_uppercase_characters {
            params.put(&format!("{}{}", prefix, "RequireUppercaseCharacters"),
                       &field_value.to_string().replace("+", "%2B"));
        }

    }
}

#[derive(Default,Debug,Clone)]
pub struct UpdateAssumeRolePolicyRequest {
    #[doc="<p>The policy that grants an entity permission to assume the role.</p> <p>The <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a> used to validate this parameter is a string of characters consisting of any printable ASCII character ranging from the space character (\\u0020) through end of the ASCII character range as well as the printable characters in the Basic Latin and Latin-1 Supplement character set (through \\u00FF). It also includes the special characters tab (\\u0009), line feed (\\u000A), and carriage return (\\u000D).</p>"]
    pub policy_document: String,
    #[doc="<p>The name of the role to update with the new policy.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>"]
    pub role_name: String,
}


/// Serialize `UpdateAssumeRolePolicyRequest` contents to a `SignedRequest`.
struct UpdateAssumeRolePolicyRequestSerializer;
impl UpdateAssumeRolePolicyRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &UpdateAssumeRolePolicyRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "PolicyDocument"),
                   &obj.policy_document.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "RoleName"),
                   &obj.role_name.replace("+", "%2B"));

    }
}

#[derive(Default,Debug,Clone)]
pub struct UpdateGroupRequest {
    #[doc="<p>Name of the IAM group to update. If you're changing the name of the group, this is the original name.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>"]
    pub group_name: String,
    #[doc="<p>New name for the IAM group. Only include this if changing the group's name.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>"]
    pub new_group_name: Option<String>,
    #[doc="<p>New path for the IAM group. Only include this if changing the group's path.</p> <p>This paramater allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes, containing any ASCII character from the ! (\\u0021) thru the DEL character (\\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>"]
    pub new_path: Option<String>,
}


/// Serialize `UpdateGroupRequest` contents to a `SignedRequest`.
struct UpdateGroupRequestSerializer;
impl UpdateGroupRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &UpdateGroupRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "GroupName"),
                   &obj.group_name.replace("+", "%2B"));
        if let Some(ref field_value) = obj.new_group_name {
            params.put(&format!("{}{}", prefix, "NewGroupName"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.new_path {
            params.put(&format!("{}{}", prefix, "NewPath"),
                       &field_value.replace("+", "%2B"));
        }

    }
}

#[derive(Default,Debug,Clone)]
pub struct UpdateLoginProfileRequest {
    #[doc="<p>The new password for the specified IAM user.</p> <p>The <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a> used to validate this parameter is a string of characters consisting of any printable ASCII character ranging from the space character (\\u0020) through end of the ASCII character range as well as the printable characters in the Basic Latin and Latin-1 Supplement character set (through \\u00FF). It also includes the special characters tab (\\u0009), line feed (\\u000A), and carriage return (\\u000D). However, the format can be further restricted by the account administrator by setting a password policy on the AWS account. For more information, see <a>UpdateAccountPasswordPolicy</a>.</p>"]
    pub password: Option<String>,
    #[doc="<p>Allows this new password to be used only once by requiring the specified IAM user to set a new password on next sign-in.</p>"]
    pub password_reset_required: Option<bool>,
    #[doc="<p>The name of the user whose password you want to update.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>"]
    pub user_name: String,
}


/// Serialize `UpdateLoginProfileRequest` contents to a `SignedRequest`.
struct UpdateLoginProfileRequestSerializer;
impl UpdateLoginProfileRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &UpdateLoginProfileRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.password {
            params.put(&format!("{}{}", prefix, "Password"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.password_reset_required {
            params.put(&format!("{}{}", prefix, "PasswordResetRequired"),
                       &field_value.to_string().replace("+", "%2B"));
        }
        params.put(&format!("{}{}", prefix, "UserName"),
                   &obj.user_name.replace("+", "%2B"));

    }
}

#[derive(Default,Debug,Clone)]
pub struct UpdateOpenIDConnectProviderThumbprintRequest {
    #[doc="<p>The Amazon Resource Name (ARN) of the IAM OIDC provider resource object for which you want to update the thumbprint. You can get a list of OIDC provider ARNs by using the <a>ListOpenIDConnectProviders</a> action.</p> <p>For more information about ARNs, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>"]
    pub open_id_connect_provider_arn: String,
    #[doc="<p>A list of certificate thumbprints that are associated with the specified IAM OpenID Connect provider. For more information, see <a>CreateOpenIDConnectProvider</a>. </p>"]
    pub thumbprint_list: Vec<String>,
}


/// Serialize `UpdateOpenIDConnectProviderThumbprintRequest` contents to a `SignedRequest`.
struct UpdateOpenIDConnectProviderThumbprintRequestSerializer;
impl UpdateOpenIDConnectProviderThumbprintRequestSerializer {
    fn serialize(params: &mut Params,
                 name: &str,
                 obj: &UpdateOpenIDConnectProviderThumbprintRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "OpenIDConnectProviderArn"),
                   &obj.open_id_connect_provider_arn.replace("+", "%2B"));
        ThumbprintListTypeSerializer::serialize(params,
                                                &format!("{}{}", prefix, "ThumbprintList"),
                                                &obj.thumbprint_list);

    }
}

#[derive(Default,Debug,Clone)]
pub struct UpdateRoleDescriptionRequest {
    #[doc="<p>The new description that you want to apply to the specified role.</p>"]
    pub description: String,
    #[doc="<p>The name of the role that you want to modify.</p>"]
    pub role_name: String,
}


/// Serialize `UpdateRoleDescriptionRequest` contents to a `SignedRequest`.
struct UpdateRoleDescriptionRequestSerializer;
impl UpdateRoleDescriptionRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &UpdateRoleDescriptionRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "Description"),
                   &obj.description.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "RoleName"),
                   &obj.role_name.replace("+", "%2B"));

    }
}

#[derive(Default,Debug,Clone)]
pub struct UpdateRoleDescriptionResponse {
    #[doc="<p>A structure that contains details about the modified role.</p>"]
    pub role: Option<Role>,
}

struct UpdateRoleDescriptionResponseDeserializer;
impl UpdateRoleDescriptionResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<UpdateRoleDescriptionResponse, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = UpdateRoleDescriptionResponse::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "Role" => {
                            obj.role = Some(try!(RoleDeserializer::deserialize("Role", stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct UpdateSAMLProviderRequest {
    #[doc="<p>An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p>"]
    pub saml_metadata_document: String,
    #[doc="<p>The Amazon Resource Name (ARN) of the SAML provider to update.</p> <p>For more information about ARNs, see <a href=\"http://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>"]
    pub saml_provider_arn: String,
}


/// Serialize `UpdateSAMLProviderRequest` contents to a `SignedRequest`.
struct UpdateSAMLProviderRequestSerializer;
impl UpdateSAMLProviderRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &UpdateSAMLProviderRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "SAMLMetadataDocument"),
                   &obj.saml_metadata_document.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "SAMLProviderArn"),
                   &obj.saml_provider_arn.replace("+", "%2B"));

    }
}

#[doc="<p>Contains the response to a successful <a>UpdateSAMLProvider</a> request. </p>"]
#[derive(Default,Debug,Clone)]
pub struct UpdateSAMLProviderResponse {
    #[doc="<p>The Amazon Resource Name (ARN) of the SAML provider that was updated.</p>"]
    pub saml_provider_arn: Option<String>,
}

struct UpdateSAMLProviderResponseDeserializer;
impl UpdateSAMLProviderResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<UpdateSAMLProviderResponse, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = UpdateSAMLProviderResponse::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "SAMLProviderArn" => {
                            obj.saml_provider_arn =
                                Some(try!(ArnTypeDeserializer::deserialize("SAMLProviderArn",
                                                                           stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct UpdateSSHPublicKeyRequest {
    #[doc="<p>The unique identifier for the SSH public key.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>"]
    pub ssh_public_key_id: String,
    #[doc="<p>The status to assign to the SSH public key. <code>Active</code> means the key can be used for authentication with an AWS CodeCommit repository. <code>Inactive</code> means the key cannot be used.</p>"]
    pub status: String,
    #[doc="<p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>"]
    pub user_name: String,
}


/// Serialize `UpdateSSHPublicKeyRequest` contents to a `SignedRequest`.
struct UpdateSSHPublicKeyRequestSerializer;
impl UpdateSSHPublicKeyRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &UpdateSSHPublicKeyRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "SSHPublicKeyId"),
                   &obj.ssh_public_key_id.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "Status"),
                   &obj.status.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "UserName"),
                   &obj.user_name.replace("+", "%2B"));

    }
}

#[derive(Default,Debug,Clone)]
pub struct UpdateServerCertificateRequest {
    #[doc="<p>The new path for the server certificate. Include this only if you are updating the server certificate's path.</p> <p>This paramater allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes, containing any ASCII character from the ! (\\u0021) thru the DEL character (\\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>"]
    pub new_path: Option<String>,
    #[doc="<p>The new name for the server certificate. Include this only if you are updating the server certificate's name. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>"]
    pub new_server_certificate_name: Option<String>,
    #[doc="<p>The name of the server certificate that you want to update.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>"]
    pub server_certificate_name: String,
}


/// Serialize `UpdateServerCertificateRequest` contents to a `SignedRequest`.
struct UpdateServerCertificateRequestSerializer;
impl UpdateServerCertificateRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &UpdateServerCertificateRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.new_path {
            params.put(&format!("{}{}", prefix, "NewPath"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.new_server_certificate_name {
            params.put(&format!("{}{}", prefix, "NewServerCertificateName"),
                       &field_value.replace("+", "%2B"));
        }
        params.put(&format!("{}{}", prefix, "ServerCertificateName"),
                   &obj.server_certificate_name.replace("+", "%2B"));

    }
}

#[derive(Default,Debug,Clone)]
pub struct UpdateServiceSpecificCredentialRequest {
    #[doc="<p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>"]
    pub service_specific_credential_id: String,
    #[doc="<p>The status to be assigned to the service-specific credential.</p>"]
    pub status: String,
    #[doc="<p>The name of the IAM user associated with the service-specific credential. If you do not specify this value, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>"]
    pub user_name: Option<String>,
}


/// Serialize `UpdateServiceSpecificCredentialRequest` contents to a `SignedRequest`.
struct UpdateServiceSpecificCredentialRequestSerializer;
impl UpdateServiceSpecificCredentialRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &UpdateServiceSpecificCredentialRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "ServiceSpecificCredentialId"),
                   &obj.service_specific_credential_id.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "Status"),
                   &obj.status.replace("+", "%2B"));
        if let Some(ref field_value) = obj.user_name {
            params.put(&format!("{}{}", prefix, "UserName"),
                       &field_value.replace("+", "%2B"));
        }

    }
}

#[derive(Default,Debug,Clone)]
pub struct UpdateSigningCertificateRequest {
    #[doc="<p>The ID of the signing certificate you want to update.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>"]
    pub certificate_id: String,
    #[doc="<p> The status you want to assign to the certificate. <code>Active</code> means the certificate can be used for API calls to AWS, while <code>Inactive</code> means the certificate cannot be used.</p>"]
    pub status: String,
    #[doc="<p>The name of the IAM user the signing certificate belongs to.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>"]
    pub user_name: Option<String>,
}


/// Serialize `UpdateSigningCertificateRequest` contents to a `SignedRequest`.
struct UpdateSigningCertificateRequestSerializer;
impl UpdateSigningCertificateRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &UpdateSigningCertificateRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "CertificateId"),
                   &obj.certificate_id.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "Status"),
                   &obj.status.replace("+", "%2B"));
        if let Some(ref field_value) = obj.user_name {
            params.put(&format!("{}{}", prefix, "UserName"),
                       &field_value.replace("+", "%2B"));
        }

    }
}

#[derive(Default,Debug,Clone)]
pub struct UpdateUserRequest {
    #[doc="<p>New path for the IAM user. Include this parameter only if you're changing the user's path.</p> <p>This paramater allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes, containing any ASCII character from the ! (\\u0021) thru the DEL character (\\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>"]
    pub new_path: Option<String>,
    #[doc="<p>New name for the user. Include this parameter only if you're changing the user's name.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>"]
    pub new_user_name: Option<String>,
    #[doc="<p>Name of the user to update. If you're changing the name of the user, this is the original user name.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>"]
    pub user_name: String,
}


/// Serialize `UpdateUserRequest` contents to a `SignedRequest`.
struct UpdateUserRequestSerializer;
impl UpdateUserRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &UpdateUserRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.new_path {
            params.put(&format!("{}{}", prefix, "NewPath"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.new_user_name {
            params.put(&format!("{}{}", prefix, "NewUserName"),
                       &field_value.replace("+", "%2B"));
        }
        params.put(&format!("{}{}", prefix, "UserName"),
                   &obj.user_name.replace("+", "%2B"));

    }
}

#[derive(Default,Debug,Clone)]
pub struct UploadSSHPublicKeyRequest {
    #[doc="<p>The SSH public key. The public key must be encoded in ssh-rsa format or PEM format.</p> <p>The <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a> used to validate this parameter is a string of characters consisting of any printable ASCII character ranging from the space character (\\u0020) through end of the ASCII character range as well as the printable characters in the Basic Latin and Latin-1 Supplement character set (through \\u00FF). It also includes the special characters tab (\\u0009), line feed (\\u000A), and carriage return (\\u000D).</p>"]
    pub ssh_public_key_body: String,
    #[doc="<p>The name of the IAM user to associate the SSH public key with.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>"]
    pub user_name: String,
}


/// Serialize `UploadSSHPublicKeyRequest` contents to a `SignedRequest`.
struct UploadSSHPublicKeyRequestSerializer;
impl UploadSSHPublicKeyRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &UploadSSHPublicKeyRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "SSHPublicKeyBody"),
                   &obj.ssh_public_key_body.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "UserName"),
                   &obj.user_name.replace("+", "%2B"));

    }
}

#[doc="<p>Contains the response to a successful <a>UploadSSHPublicKey</a> request.</p>"]
#[derive(Default,Debug,Clone)]
pub struct UploadSSHPublicKeyResponse {
    #[doc="<p>Contains information about the SSH public key.</p>"]
    pub ssh_public_key: Option<SSHPublicKey>,
}

struct UploadSSHPublicKeyResponseDeserializer;
impl UploadSSHPublicKeyResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<UploadSSHPublicKeyResponse, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = UploadSSHPublicKeyResponse::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "SSHPublicKey" => {
                            obj.ssh_public_key =
                                Some(try!(SSHPublicKeyDeserializer::deserialize("SSHPublicKey",
                                                                                stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct UploadServerCertificateRequest {
    #[doc="<p>The contents of the public key certificate in PEM-encoded format.</p> <p>The <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a> used to validate this parameter is a string of characters consisting of any printable ASCII character ranging from the space character (\\u0020) through end of the ASCII character range as well as the printable characters in the Basic Latin and Latin-1 Supplement character set (through \\u00FF). It also includes the special characters tab (\\u0009), line feed (\\u000A), and carriage return (\\u000D).</p>"]
    pub certificate_body: String,
    #[doc="<p>The contents of the certificate chain. This is typically a concatenation of the PEM-encoded public key certificates of the chain.</p> <p>The <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a> used to validate this parameter is a string of characters consisting of any printable ASCII character ranging from the space character (\\u0020) through end of the ASCII character range as well as the printable characters in the Basic Latin and Latin-1 Supplement character set (through \\u00FF). It also includes the special characters tab (\\u0009), line feed (\\u000A), and carriage return (\\u000D).</p>"]
    pub certificate_chain: Option<String>,
    #[doc="<p>The path for the server certificate. For more information about paths, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html\">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/). This paramater allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes, containing any ASCII character from the ! (\\u0021) thru the DEL character (\\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p> <note> <p> If you are uploading a server certificate specifically for use with Amazon CloudFront distributions, you must specify a path using the <code>--path</code> option. The path must begin with <code>/cloudfront</code> and must include a trailing slash (for example, <code>/cloudfront/test/</code>).</p> </note>"]
    pub path: Option<String>,
    #[doc="<p>The contents of the private key in PEM-encoded format.</p> <p>The <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a> used to validate this parameter is a string of characters consisting of any printable ASCII character ranging from the space character (\\u0020) through end of the ASCII character range as well as the printable characters in the Basic Latin and Latin-1 Supplement character set (through \\u00FF). It also includes the special characters tab (\\u0009), line feed (\\u000A), and carriage return (\\u000D).</p>"]
    pub private_key: String,
    #[doc="<p>The name for the server certificate. Do not include the path in this value. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>"]
    pub server_certificate_name: String,
}


/// Serialize `UploadServerCertificateRequest` contents to a `SignedRequest`.
struct UploadServerCertificateRequestSerializer;
impl UploadServerCertificateRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &UploadServerCertificateRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "CertificateBody"),
                   &obj.certificate_body.replace("+", "%2B"));
        if let Some(ref field_value) = obj.certificate_chain {
            params.put(&format!("{}{}", prefix, "CertificateChain"),
                       &field_value.replace("+", "%2B"));
        }
        if let Some(ref field_value) = obj.path {
            params.put(&format!("{}{}", prefix, "Path"),
                       &field_value.replace("+", "%2B"));
        }
        params.put(&format!("{}{}", prefix, "PrivateKey"),
                   &obj.private_key.replace("+", "%2B"));
        params.put(&format!("{}{}", prefix, "ServerCertificateName"),
                   &obj.server_certificate_name.replace("+", "%2B"));

    }
}

#[doc="<p>Contains the response to a successful <a>UploadServerCertificate</a> request. </p>"]
#[derive(Default,Debug,Clone)]
pub struct UploadServerCertificateResponse {
    #[doc="<p>The meta information of the uploaded server certificate without its certificate body, certificate chain, and private key.</p>"]
    pub server_certificate_metadata: Option<ServerCertificateMetadata>,
}

struct UploadServerCertificateResponseDeserializer;
impl UploadServerCertificateResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>
        (tag_name: &str,
         stack: &mut T)
         -> Result<UploadServerCertificateResponse, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = UploadServerCertificateResponse::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "ServerCertificateMetadata" => {
                            obj.server_certificate_metadata = Some(try!(ServerCertificateMetadataDeserializer::deserialize("ServerCertificateMetadata", stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[derive(Default,Debug,Clone)]
pub struct UploadSigningCertificateRequest {
    #[doc="<p>The contents of the signing certificate.</p> <p>The <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a> used to validate this parameter is a string of characters consisting of any printable ASCII character ranging from the space character (\\u0020) through end of the ASCII character range as well as the printable characters in the Basic Latin and Latin-1 Supplement character set (through \\u00FF). It also includes the special characters tab (\\u0009), line feed (\\u000A), and carriage return (\\u000D).</p>"]
    pub certificate_body: String,
    #[doc="<p>The name of the user the signing certificate is for.</p> <p>This parameter allows (per its <a href=\"http://wikipedia.org/wiki/regex\">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>"]
    pub user_name: Option<String>,
}


/// Serialize `UploadSigningCertificateRequest` contents to a `SignedRequest`.
struct UploadSigningCertificateRequestSerializer;
impl UploadSigningCertificateRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &UploadSigningCertificateRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "CertificateBody"),
                   &obj.certificate_body.replace("+", "%2B"));
        if let Some(ref field_value) = obj.user_name {
            params.put(&format!("{}{}", prefix, "UserName"),
                       &field_value.replace("+", "%2B"));
        }

    }
}

#[doc="<p>Contains the response to a successful <a>UploadSigningCertificate</a> request. </p>"]
#[derive(Default,Debug,Clone)]
pub struct UploadSigningCertificateResponse {
    #[doc="<p>Information about the certificate.</p>"]
    pub certificate: SigningCertificate,
}

struct UploadSigningCertificateResponseDeserializer;
impl UploadSigningCertificateResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>
        (tag_name: &str,
         stack: &mut T)
         -> Result<UploadSigningCertificateResponse, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = UploadSigningCertificateResponse::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "Certificate" => {
                            obj.certificate =
                                try!(SigningCertificateDeserializer::deserialize("Certificate",
                                                                                 stack));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p>Contains information about an IAM user entity.</p> <p>This data type is used as a response element in the following actions:</p> <ul> <li> <p> <a>CreateUser</a> </p> </li> <li> <p> <a>GetUser</a> </p> </li> <li> <p> <a>ListUsers</a> </p> </li> </ul>"]
#[derive(Default,Debug,Clone)]
pub struct User {
    #[doc="<p>The Amazon Resource Name (ARN) that identifies the user. For more information about ARNs and how to use ARNs in policies, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html\">IAM Identifiers</a> in the <i>Using IAM</i> guide. </p>"]
    pub arn: String,
    #[doc="<p>The date and time, in <a href=\"http://www.iso.org/iso/iso8601\">ISO 8601 date-time format</a>, when the user was created.</p>"]
    pub create_date: String,
    #[doc="<p>The date and time, in <a href=\"http://www.iso.org/iso/iso8601\">ISO 8601 date-time format</a>, when the user's password was last used to sign in to an AWS website. For a list of AWS websites that capture a user's last sign-in time, see the <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html\">Credential Reports</a> topic in the <i>Using IAM</i> guide. If a password is used more than once in a five-minute span, only the first use is returned in this field. This field is null (not present) when:</p> <ul> <li> <p>The user does not have a password</p> </li> <li> <p>The password exists but has never been used (at least not since IAM started tracking this information on October 20th, 2014</p> </li> <li> <p>there is no sign-in data associated with the user</p> </li> </ul> <p>This value is returned only in the <a>GetUser</a> and <a>ListUsers</a> actions. </p>"]
    pub password_last_used: Option<String>,
    #[doc="<p>The path to the user. For more information about paths, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html\">IAM Identifiers</a> in the <i>Using IAM</i> guide.</p>"]
    pub path: String,
    #[doc="<p>The stable and unique string identifying the user. For more information about IDs, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html\">IAM Identifiers</a> in the <i>Using IAM</i> guide.</p>"]
    pub user_id: String,
    #[doc="<p>The friendly name identifying the user.</p>"]
    pub user_name: String,
}

struct UserDeserializer;
impl UserDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<User, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = User::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "Arn" => {
                            obj.arn = try!(ArnTypeDeserializer::deserialize("Arn", stack));
                        }
                        "CreateDate" => {
                            obj.create_date = try!(DateTypeDeserializer::deserialize("CreateDate",
                                                                                     stack));
                        }
                        "PasswordLastUsed" => {
                            obj.password_last_used =
                                Some(try!(DateTypeDeserializer::deserialize("PasswordLastUsed",
                                                                            stack)));
                        }
                        "Path" => {
                            obj.path = try!(PathTypeDeserializer::deserialize("Path", stack));
                        }
                        "UserId" => {
                            obj.user_id = try!(IdTypeDeserializer::deserialize("UserId", stack));
                        }
                        "UserName" => {
                            obj.user_name = try!(UserNameTypeDeserializer::deserialize("UserName",
                                                                                       stack));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p>Contains information about an IAM user, including all the user's policies and all the IAM groups the user is in.</p> <p>This data type is used as a response element in the <a>GetAccountAuthorizationDetails</a> action.</p>"]
#[derive(Default,Debug,Clone)]
pub struct UserDetail {
    pub arn: Option<String>,
    #[doc="<p>A list of the managed policies attached to the user.</p>"]
    pub attached_managed_policies: Option<Vec<AttachedPolicy>>,
    #[doc="<p>The date and time, in <a href=\"http://www.iso.org/iso/iso8601\">ISO 8601 date-time format</a>, when the user was created.</p>"]
    pub create_date: Option<String>,
    #[doc="<p>A list of IAM groups that the user is in.</p>"]
    pub group_list: Option<Vec<String>>,
    #[doc="<p>The path to the user. For more information about paths, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html\">IAM Identifiers</a> in the <i>Using IAM</i> guide.</p>"]
    pub path: Option<String>,
    #[doc="<p>The stable and unique string identifying the user. For more information about IDs, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html\">IAM Identifiers</a> in the <i>Using IAM</i> guide.</p>"]
    pub user_id: Option<String>,
    #[doc="<p>The friendly name identifying the user.</p>"]
    pub user_name: Option<String>,
    #[doc="<p>A list of the inline policies embedded in the user.</p>"]
    pub user_policy_list: Option<Vec<PolicyDetail>>,
}

struct UserDetailDeserializer;
impl UserDetailDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<UserDetail, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = UserDetail::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "Arn" => {
                            obj.arn = Some(try!(ArnTypeDeserializer::deserialize("Arn", stack)));
                        }
                        "AttachedManagedPolicies" => {
                            obj.attached_managed_policies = Some(try!(AttachedPoliciesListTypeDeserializer::deserialize("AttachedManagedPolicies", stack)));
                        }
                        "CreateDate" => {
                            obj.create_date = Some(try!(DateTypeDeserializer::deserialize("CreateDate",
                                                                                          stack)));
                        }
                        "GroupList" => {
                            obj.group_list =
                                Some(try!(GroupNameListTypeDeserializer::deserialize("GroupList",
                                                                                     stack)));
                        }
                        "Path" => {
                            obj.path = Some(try!(PathTypeDeserializer::deserialize("Path", stack)));
                        }
                        "UserId" => {
                            obj.user_id = Some(try!(IdTypeDeserializer::deserialize("UserId",
                                                                                    stack)));
                        }
                        "UserName" => {
                            obj.user_name =
                                Some(try!(UserNameTypeDeserializer::deserialize("UserName",
                                                                                stack)));
                        }
                        "UserPolicyList" => {
                            obj.user_policy_list =
                                Some(try!(PolicyDetailListTypeDeserializer::deserialize("UserPolicyList",
                                                                                        stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct UserDetailListTypeDeserializer;
impl UserDetailListTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<UserDetail>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "member" {
                        obj.push(try!(UserDetailDeserializer::deserialize("member", stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
struct UserListTypeDeserializer;
impl UserListTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<User>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "member" {
                        obj.push(try!(UserDeserializer::deserialize("member", stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
struct UserNameTypeDeserializer;
impl UserNameTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<String, XmlParseError> {
        try!(start_element(tag_name, stack));
        let obj = try!(characters(stack));
        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
#[doc="<p>Contains information about a virtual MFA device.</p>"]
#[derive(Default,Debug,Clone)]
pub struct VirtualMFADevice {
    #[doc="<p> The Base32 seed defined as specified in <a href=\"https://tools.ietf.org/html/rfc3548.txt\">RFC3548</a>. The <code>Base32StringSeed</code> is Base64-encoded. </p>"]
    pub base_32_string_seed: Option<Vec<u8>>,
    #[doc="<p>The date and time on which the virtual MFA device was enabled.</p>"]
    pub enable_date: Option<String>,
    #[doc="<p> A QR code PNG image that encodes <code>otpauth://totp/$virtualMFADeviceName@$AccountName?secret=$Base32String</code> where <code>$virtualMFADeviceName</code> is one of the create call arguments, <code>AccountName</code> is the user name if set (otherwise, the account ID otherwise), and <code>Base32String</code> is the seed in Base32 format. The <code>Base32String</code> value is Base64-encoded. </p>"]
    pub qr_code_png: Option<Vec<u8>>,
    #[doc="<p>The serial number associated with <code>VirtualMFADevice</code>.</p>"]
    pub serial_number: String,
    #[doc="<p>The IAM user associated with this virtual MFA device.</p>"]
    pub user: Option<User>,
}

struct VirtualMFADeviceDeserializer;
impl VirtualMFADeviceDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<VirtualMFADevice, XmlParseError> {
        try!(start_element(tag_name, stack));

        let mut obj = VirtualMFADevice::default();

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { ref name, .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    match &name[..] {
                        "Base32StringSeed" => {
                            obj.base_32_string_seed =
                                Some(try!(BootstrapDatumDeserializer::deserialize("Base32StringSeed",
                                                                                  stack)));
                        }
                        "EnableDate" => {
                            obj.enable_date = Some(try!(DateTypeDeserializer::deserialize("EnableDate",
                                                                                          stack)));
                        }
                        "QRCodePNG" => {
                            obj.qr_code_png =
                                Some(try!(BootstrapDatumDeserializer::deserialize("QRCodePNG",
                                                                                  stack)));
                        }
                        "SerialNumber" => {
                            obj.serial_number =
                                try!(SerialNumberTypeDeserializer::deserialize("SerialNumber",
                                                                               stack));
                        }
                        "User" => {
                            obj.user = Some(try!(UserDeserializer::deserialize("User", stack)));
                        }
                        _ => skip_tree(stack),
                    }
                }
                DeserializerNext::Close => break,
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        try!(end_element(tag_name, stack));

        Ok(obj)

    }
}
struct VirtualMFADeviceListTypeDeserializer;
impl VirtualMFADeviceListTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<'a, T: Peek + Next>(tag_name: &str,
                                       stack: &mut T)
                                       -> Result<Vec<VirtualMFADevice>, XmlParseError> {

        let mut obj = vec![];
        try!(start_element(tag_name, stack));

        loop {
            let next_event = match stack.peek() {
                Some(&Ok(XmlEvent::EndElement { .. })) => DeserializerNext::Close,
                Some(&Ok(XmlEvent::StartElement { ref name, .. })) => {
                    DeserializerNext::Element(name.local_name.to_owned())
                }
                _ => DeserializerNext::Skip,
            };

            match next_event {
                DeserializerNext::Element(name) => {
                    if name == "member" {
                        obj.push(try!(VirtualMFADeviceDeserializer::deserialize("member", stack)));
                    } else {
                        skip_tree(stack);
                    }
                }
                DeserializerNext::Close => {
                    try!(end_element(tag_name, stack));
                    break;
                }
                DeserializerNext::Skip => {
                    stack.next();
                }
            }
        }

        Ok(obj)

    }
}
/// Errors returned by AddClientIDToOpenIDConnectProvider
#[derive(Debug, PartialEq)]
pub enum AddClientIDToOpenIDConnectProviderError {
    ///<p>The request was rejected because an invalid or out-of-range value was supplied for an input parameter.</p>
    InvalidInput(String),
    ///<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>
    LimitExceeded(String),
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl AddClientIDToOpenIDConnectProviderError {
    pub fn from_body(body: &str) -> AddClientIDToOpenIDConnectProviderError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "InvalidInputException" => AddClientIDToOpenIDConnectProviderError::InvalidInput(String::from(parsed_error.message)),
                    "LimitExceededException" => AddClientIDToOpenIDConnectProviderError::LimitExceeded(String::from(parsed_error.message)),
                    "NoSuchEntityException" => AddClientIDToOpenIDConnectProviderError::NoSuchEntity(String::from(parsed_error.message)),
                    "ServiceFailureException" => AddClientIDToOpenIDConnectProviderError::ServiceFailure(String::from(parsed_error.message)),
                    _ => AddClientIDToOpenIDConnectProviderError::Unknown(String::from(body)),
                }
            }
            Err(_) => AddClientIDToOpenIDConnectProviderError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for AddClientIDToOpenIDConnectProviderError {
    fn from(err: XmlParseError) -> AddClientIDToOpenIDConnectProviderError {
        let XmlParseError(message) = err;
        AddClientIDToOpenIDConnectProviderError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for AddClientIDToOpenIDConnectProviderError {
    fn from(err: CredentialsError) -> AddClientIDToOpenIDConnectProviderError {
        AddClientIDToOpenIDConnectProviderError::Credentials(err)
    }
}
impl From<HttpDispatchError> for AddClientIDToOpenIDConnectProviderError {
    fn from(err: HttpDispatchError) -> AddClientIDToOpenIDConnectProviderError {
        AddClientIDToOpenIDConnectProviderError::HttpDispatch(err)
    }
}
impl From<io::Error> for AddClientIDToOpenIDConnectProviderError {
    fn from(err: io::Error) -> AddClientIDToOpenIDConnectProviderError {
        AddClientIDToOpenIDConnectProviderError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for AddClientIDToOpenIDConnectProviderError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for AddClientIDToOpenIDConnectProviderError {
    fn description(&self) -> &str {
        match *self {
            AddClientIDToOpenIDConnectProviderError::InvalidInput(ref cause) => cause,
            AddClientIDToOpenIDConnectProviderError::LimitExceeded(ref cause) => cause,
            AddClientIDToOpenIDConnectProviderError::NoSuchEntity(ref cause) => cause,
            AddClientIDToOpenIDConnectProviderError::ServiceFailure(ref cause) => cause,
            AddClientIDToOpenIDConnectProviderError::Validation(ref cause) => cause,
            AddClientIDToOpenIDConnectProviderError::Credentials(ref err) => err.description(),
            AddClientIDToOpenIDConnectProviderError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            AddClientIDToOpenIDConnectProviderError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by AddRoleToInstanceProfile
#[derive(Debug, PartialEq)]
pub enum AddRoleToInstanceProfileError {
    ///<p>The request was rejected because it attempted to create a resource that already exists.</p>
    EntityAlreadyExists(String),
    ///<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>
    LimitExceeded(String),
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    ///<p>The request was rejected because only the service that depends on the service-linked role can modify or delete the role on your behalf. The error message includes the name of the service that depends on this service-linked role. You must request the change through that service.</p>
    UnmodifiableEntity(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl AddRoleToInstanceProfileError {
    pub fn from_body(body: &str) -> AddRoleToInstanceProfileError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "EntityAlreadyExistsException" => AddRoleToInstanceProfileError::EntityAlreadyExists(String::from(parsed_error.message)),
                    "LimitExceededException" => AddRoleToInstanceProfileError::LimitExceeded(String::from(parsed_error.message)),
                    "NoSuchEntityException" => AddRoleToInstanceProfileError::NoSuchEntity(String::from(parsed_error.message)),
                    "ServiceFailureException" => AddRoleToInstanceProfileError::ServiceFailure(String::from(parsed_error.message)),
                    "UnmodifiableEntityException" => AddRoleToInstanceProfileError::UnmodifiableEntity(String::from(parsed_error.message)),
                    _ => AddRoleToInstanceProfileError::Unknown(String::from(body)),
                }
            }
            Err(_) => AddRoleToInstanceProfileError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for AddRoleToInstanceProfileError {
    fn from(err: XmlParseError) -> AddRoleToInstanceProfileError {
        let XmlParseError(message) = err;
        AddRoleToInstanceProfileError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for AddRoleToInstanceProfileError {
    fn from(err: CredentialsError) -> AddRoleToInstanceProfileError {
        AddRoleToInstanceProfileError::Credentials(err)
    }
}
impl From<HttpDispatchError> for AddRoleToInstanceProfileError {
    fn from(err: HttpDispatchError) -> AddRoleToInstanceProfileError {
        AddRoleToInstanceProfileError::HttpDispatch(err)
    }
}
impl From<io::Error> for AddRoleToInstanceProfileError {
    fn from(err: io::Error) -> AddRoleToInstanceProfileError {
        AddRoleToInstanceProfileError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for AddRoleToInstanceProfileError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for AddRoleToInstanceProfileError {
    fn description(&self) -> &str {
        match *self {
            AddRoleToInstanceProfileError::EntityAlreadyExists(ref cause) => cause,
            AddRoleToInstanceProfileError::LimitExceeded(ref cause) => cause,
            AddRoleToInstanceProfileError::NoSuchEntity(ref cause) => cause,
            AddRoleToInstanceProfileError::ServiceFailure(ref cause) => cause,
            AddRoleToInstanceProfileError::UnmodifiableEntity(ref cause) => cause,
            AddRoleToInstanceProfileError::Validation(ref cause) => cause,
            AddRoleToInstanceProfileError::Credentials(ref err) => err.description(),
            AddRoleToInstanceProfileError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            AddRoleToInstanceProfileError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by AddUserToGroup
#[derive(Debug, PartialEq)]
pub enum AddUserToGroupError {
    ///<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>
    LimitExceeded(String),
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl AddUserToGroupError {
    pub fn from_body(body: &str) -> AddUserToGroupError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "LimitExceededException" => {
                        AddUserToGroupError::LimitExceeded(String::from(parsed_error.message))
                    }
                    "NoSuchEntityException" => {
                        AddUserToGroupError::NoSuchEntity(String::from(parsed_error.message))
                    }
                    "ServiceFailureException" => {
                        AddUserToGroupError::ServiceFailure(String::from(parsed_error.message))
                    }
                    _ => AddUserToGroupError::Unknown(String::from(body)),
                }
            }
            Err(_) => AddUserToGroupError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for AddUserToGroupError {
    fn from(err: XmlParseError) -> AddUserToGroupError {
        let XmlParseError(message) = err;
        AddUserToGroupError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for AddUserToGroupError {
    fn from(err: CredentialsError) -> AddUserToGroupError {
        AddUserToGroupError::Credentials(err)
    }
}
impl From<HttpDispatchError> for AddUserToGroupError {
    fn from(err: HttpDispatchError) -> AddUserToGroupError {
        AddUserToGroupError::HttpDispatch(err)
    }
}
impl From<io::Error> for AddUserToGroupError {
    fn from(err: io::Error) -> AddUserToGroupError {
        AddUserToGroupError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for AddUserToGroupError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for AddUserToGroupError {
    fn description(&self) -> &str {
        match *self {
            AddUserToGroupError::LimitExceeded(ref cause) => cause,
            AddUserToGroupError::NoSuchEntity(ref cause) => cause,
            AddUserToGroupError::ServiceFailure(ref cause) => cause,
            AddUserToGroupError::Validation(ref cause) => cause,
            AddUserToGroupError::Credentials(ref err) => err.description(),
            AddUserToGroupError::HttpDispatch(ref dispatch_error) => dispatch_error.description(),
            AddUserToGroupError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by AttachGroupPolicy
#[derive(Debug, PartialEq)]
pub enum AttachGroupPolicyError {
    ///<p>The request was rejected because an invalid or out-of-range value was supplied for an input parameter.</p>
    InvalidInput(String),
    ///<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>
    LimitExceeded(String),
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl AttachGroupPolicyError {
    pub fn from_body(body: &str) -> AttachGroupPolicyError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "InvalidInputException" => {
                        AttachGroupPolicyError::InvalidInput(String::from(parsed_error.message))
                    }
                    "LimitExceededException" => {
                        AttachGroupPolicyError::LimitExceeded(String::from(parsed_error.message))
                    }
                    "NoSuchEntityException" => {
                        AttachGroupPolicyError::NoSuchEntity(String::from(parsed_error.message))
                    }
                    "ServiceFailureException" => {
                        AttachGroupPolicyError::ServiceFailure(String::from(parsed_error.message))
                    }
                    _ => AttachGroupPolicyError::Unknown(String::from(body)),
                }
            }
            Err(_) => AttachGroupPolicyError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for AttachGroupPolicyError {
    fn from(err: XmlParseError) -> AttachGroupPolicyError {
        let XmlParseError(message) = err;
        AttachGroupPolicyError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for AttachGroupPolicyError {
    fn from(err: CredentialsError) -> AttachGroupPolicyError {
        AttachGroupPolicyError::Credentials(err)
    }
}
impl From<HttpDispatchError> for AttachGroupPolicyError {
    fn from(err: HttpDispatchError) -> AttachGroupPolicyError {
        AttachGroupPolicyError::HttpDispatch(err)
    }
}
impl From<io::Error> for AttachGroupPolicyError {
    fn from(err: io::Error) -> AttachGroupPolicyError {
        AttachGroupPolicyError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for AttachGroupPolicyError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for AttachGroupPolicyError {
    fn description(&self) -> &str {
        match *self {
            AttachGroupPolicyError::InvalidInput(ref cause) => cause,
            AttachGroupPolicyError::LimitExceeded(ref cause) => cause,
            AttachGroupPolicyError::NoSuchEntity(ref cause) => cause,
            AttachGroupPolicyError::ServiceFailure(ref cause) => cause,
            AttachGroupPolicyError::Validation(ref cause) => cause,
            AttachGroupPolicyError::Credentials(ref err) => err.description(),
            AttachGroupPolicyError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            AttachGroupPolicyError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by AttachRolePolicy
#[derive(Debug, PartialEq)]
pub enum AttachRolePolicyError {
    ///<p>The request was rejected because an invalid or out-of-range value was supplied for an input parameter.</p>
    InvalidInput(String),
    ///<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>
    LimitExceeded(String),
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    ///<p>The request was rejected because only the service that depends on the service-linked role can modify or delete the role on your behalf. The error message includes the name of the service that depends on this service-linked role. You must request the change through that service.</p>
    UnmodifiableEntity(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl AttachRolePolicyError {
    pub fn from_body(body: &str) -> AttachRolePolicyError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "InvalidInputException" => {
                        AttachRolePolicyError::InvalidInput(String::from(parsed_error.message))
                    }
                    "LimitExceededException" => {
                        AttachRolePolicyError::LimitExceeded(String::from(parsed_error.message))
                    }
                    "NoSuchEntityException" => {
                        AttachRolePolicyError::NoSuchEntity(String::from(parsed_error.message))
                    }
                    "ServiceFailureException" => {
                        AttachRolePolicyError::ServiceFailure(String::from(parsed_error.message))
                    }
                    "UnmodifiableEntityException" => AttachRolePolicyError::UnmodifiableEntity(String::from(parsed_error.message)),
                    _ => AttachRolePolicyError::Unknown(String::from(body)),
                }
            }
            Err(_) => AttachRolePolicyError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for AttachRolePolicyError {
    fn from(err: XmlParseError) -> AttachRolePolicyError {
        let XmlParseError(message) = err;
        AttachRolePolicyError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for AttachRolePolicyError {
    fn from(err: CredentialsError) -> AttachRolePolicyError {
        AttachRolePolicyError::Credentials(err)
    }
}
impl From<HttpDispatchError> for AttachRolePolicyError {
    fn from(err: HttpDispatchError) -> AttachRolePolicyError {
        AttachRolePolicyError::HttpDispatch(err)
    }
}
impl From<io::Error> for AttachRolePolicyError {
    fn from(err: io::Error) -> AttachRolePolicyError {
        AttachRolePolicyError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for AttachRolePolicyError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for AttachRolePolicyError {
    fn description(&self) -> &str {
        match *self {
            AttachRolePolicyError::InvalidInput(ref cause) => cause,
            AttachRolePolicyError::LimitExceeded(ref cause) => cause,
            AttachRolePolicyError::NoSuchEntity(ref cause) => cause,
            AttachRolePolicyError::ServiceFailure(ref cause) => cause,
            AttachRolePolicyError::UnmodifiableEntity(ref cause) => cause,
            AttachRolePolicyError::Validation(ref cause) => cause,
            AttachRolePolicyError::Credentials(ref err) => err.description(),
            AttachRolePolicyError::HttpDispatch(ref dispatch_error) => dispatch_error.description(),
            AttachRolePolicyError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by AttachUserPolicy
#[derive(Debug, PartialEq)]
pub enum AttachUserPolicyError {
    ///<p>The request was rejected because an invalid or out-of-range value was supplied for an input parameter.</p>
    InvalidInput(String),
    ///<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>
    LimitExceeded(String),
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl AttachUserPolicyError {
    pub fn from_body(body: &str) -> AttachUserPolicyError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "InvalidInputException" => {
                        AttachUserPolicyError::InvalidInput(String::from(parsed_error.message))
                    }
                    "LimitExceededException" => {
                        AttachUserPolicyError::LimitExceeded(String::from(parsed_error.message))
                    }
                    "NoSuchEntityException" => {
                        AttachUserPolicyError::NoSuchEntity(String::from(parsed_error.message))
                    }
                    "ServiceFailureException" => {
                        AttachUserPolicyError::ServiceFailure(String::from(parsed_error.message))
                    }
                    _ => AttachUserPolicyError::Unknown(String::from(body)),
                }
            }
            Err(_) => AttachUserPolicyError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for AttachUserPolicyError {
    fn from(err: XmlParseError) -> AttachUserPolicyError {
        let XmlParseError(message) = err;
        AttachUserPolicyError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for AttachUserPolicyError {
    fn from(err: CredentialsError) -> AttachUserPolicyError {
        AttachUserPolicyError::Credentials(err)
    }
}
impl From<HttpDispatchError> for AttachUserPolicyError {
    fn from(err: HttpDispatchError) -> AttachUserPolicyError {
        AttachUserPolicyError::HttpDispatch(err)
    }
}
impl From<io::Error> for AttachUserPolicyError {
    fn from(err: io::Error) -> AttachUserPolicyError {
        AttachUserPolicyError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for AttachUserPolicyError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for AttachUserPolicyError {
    fn description(&self) -> &str {
        match *self {
            AttachUserPolicyError::InvalidInput(ref cause) => cause,
            AttachUserPolicyError::LimitExceeded(ref cause) => cause,
            AttachUserPolicyError::NoSuchEntity(ref cause) => cause,
            AttachUserPolicyError::ServiceFailure(ref cause) => cause,
            AttachUserPolicyError::Validation(ref cause) => cause,
            AttachUserPolicyError::Credentials(ref err) => err.description(),
            AttachUserPolicyError::HttpDispatch(ref dispatch_error) => dispatch_error.description(),
            AttachUserPolicyError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by ChangePassword
#[derive(Debug, PartialEq)]
pub enum ChangePasswordError {
    ///<p>The request was rejected because it referenced an entity that is temporarily unmodifiable, such as a user name that was deleted and then recreated. The error indicates that the request is likely to succeed if you try again after waiting several minutes. The error message describes the entity.</p>
    EntityTemporarilyUnmodifiable(String),
    ///<p>The request was rejected because the type of user for the transaction was incorrect.</p>
    InvalidUserType(String),
    ///<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>
    LimitExceeded(String),
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request was rejected because the provided password did not meet the requirements imposed by the account password policy.</p>
    PasswordPolicyViolation(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl ChangePasswordError {
    pub fn from_body(body: &str) -> ChangePasswordError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "EntityTemporarilyUnmodifiableException" => ChangePasswordError::EntityTemporarilyUnmodifiable(String::from(parsed_error.message)),
                    "InvalidUserTypeException" => {
                        ChangePasswordError::InvalidUserType(String::from(parsed_error.message))
                    }
                    "LimitExceededException" => {
                        ChangePasswordError::LimitExceeded(String::from(parsed_error.message))
                    }
                    "NoSuchEntityException" => {
                        ChangePasswordError::NoSuchEntity(String::from(parsed_error.message))
                    }
                    "PasswordPolicyViolationException" => ChangePasswordError::PasswordPolicyViolation(String::from(parsed_error.message)),
                    "ServiceFailureException" => {
                        ChangePasswordError::ServiceFailure(String::from(parsed_error.message))
                    }
                    _ => ChangePasswordError::Unknown(String::from(body)),
                }
            }
            Err(_) => ChangePasswordError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for ChangePasswordError {
    fn from(err: XmlParseError) -> ChangePasswordError {
        let XmlParseError(message) = err;
        ChangePasswordError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for ChangePasswordError {
    fn from(err: CredentialsError) -> ChangePasswordError {
        ChangePasswordError::Credentials(err)
    }
}
impl From<HttpDispatchError> for ChangePasswordError {
    fn from(err: HttpDispatchError) -> ChangePasswordError {
        ChangePasswordError::HttpDispatch(err)
    }
}
impl From<io::Error> for ChangePasswordError {
    fn from(err: io::Error) -> ChangePasswordError {
        ChangePasswordError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for ChangePasswordError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ChangePasswordError {
    fn description(&self) -> &str {
        match *self {
            ChangePasswordError::EntityTemporarilyUnmodifiable(ref cause) => cause,
            ChangePasswordError::InvalidUserType(ref cause) => cause,
            ChangePasswordError::LimitExceeded(ref cause) => cause,
            ChangePasswordError::NoSuchEntity(ref cause) => cause,
            ChangePasswordError::PasswordPolicyViolation(ref cause) => cause,
            ChangePasswordError::ServiceFailure(ref cause) => cause,
            ChangePasswordError::Validation(ref cause) => cause,
            ChangePasswordError::Credentials(ref err) => err.description(),
            ChangePasswordError::HttpDispatch(ref dispatch_error) => dispatch_error.description(),
            ChangePasswordError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by CreateAccessKey
#[derive(Debug, PartialEq)]
pub enum CreateAccessKeyError {
    ///<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>
    LimitExceeded(String),
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl CreateAccessKeyError {
    pub fn from_body(body: &str) -> CreateAccessKeyError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "LimitExceededException" => {
                        CreateAccessKeyError::LimitExceeded(String::from(parsed_error.message))
                    }
                    "NoSuchEntityException" => {
                        CreateAccessKeyError::NoSuchEntity(String::from(parsed_error.message))
                    }
                    "ServiceFailureException" => {
                        CreateAccessKeyError::ServiceFailure(String::from(parsed_error.message))
                    }
                    _ => CreateAccessKeyError::Unknown(String::from(body)),
                }
            }
            Err(_) => CreateAccessKeyError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for CreateAccessKeyError {
    fn from(err: XmlParseError) -> CreateAccessKeyError {
        let XmlParseError(message) = err;
        CreateAccessKeyError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for CreateAccessKeyError {
    fn from(err: CredentialsError) -> CreateAccessKeyError {
        CreateAccessKeyError::Credentials(err)
    }
}
impl From<HttpDispatchError> for CreateAccessKeyError {
    fn from(err: HttpDispatchError) -> CreateAccessKeyError {
        CreateAccessKeyError::HttpDispatch(err)
    }
}
impl From<io::Error> for CreateAccessKeyError {
    fn from(err: io::Error) -> CreateAccessKeyError {
        CreateAccessKeyError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for CreateAccessKeyError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CreateAccessKeyError {
    fn description(&self) -> &str {
        match *self {
            CreateAccessKeyError::LimitExceeded(ref cause) => cause,
            CreateAccessKeyError::NoSuchEntity(ref cause) => cause,
            CreateAccessKeyError::ServiceFailure(ref cause) => cause,
            CreateAccessKeyError::Validation(ref cause) => cause,
            CreateAccessKeyError::Credentials(ref err) => err.description(),
            CreateAccessKeyError::HttpDispatch(ref dispatch_error) => dispatch_error.description(),
            CreateAccessKeyError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by CreateAccountAlias
#[derive(Debug, PartialEq)]
pub enum CreateAccountAliasError {
    ///<p>The request was rejected because it attempted to create a resource that already exists.</p>
    EntityAlreadyExists(String),
    ///<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>
    LimitExceeded(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl CreateAccountAliasError {
    pub fn from_body(body: &str) -> CreateAccountAliasError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "EntityAlreadyExistsException" => CreateAccountAliasError::EntityAlreadyExists(String::from(parsed_error.message)),
                    "LimitExceededException" => {
                        CreateAccountAliasError::LimitExceeded(String::from(parsed_error.message))
                    }
                    "ServiceFailureException" => {
                        CreateAccountAliasError::ServiceFailure(String::from(parsed_error.message))
                    }
                    _ => CreateAccountAliasError::Unknown(String::from(body)),
                }
            }
            Err(_) => CreateAccountAliasError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for CreateAccountAliasError {
    fn from(err: XmlParseError) -> CreateAccountAliasError {
        let XmlParseError(message) = err;
        CreateAccountAliasError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for CreateAccountAliasError {
    fn from(err: CredentialsError) -> CreateAccountAliasError {
        CreateAccountAliasError::Credentials(err)
    }
}
impl From<HttpDispatchError> for CreateAccountAliasError {
    fn from(err: HttpDispatchError) -> CreateAccountAliasError {
        CreateAccountAliasError::HttpDispatch(err)
    }
}
impl From<io::Error> for CreateAccountAliasError {
    fn from(err: io::Error) -> CreateAccountAliasError {
        CreateAccountAliasError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for CreateAccountAliasError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CreateAccountAliasError {
    fn description(&self) -> &str {
        match *self {
            CreateAccountAliasError::EntityAlreadyExists(ref cause) => cause,
            CreateAccountAliasError::LimitExceeded(ref cause) => cause,
            CreateAccountAliasError::ServiceFailure(ref cause) => cause,
            CreateAccountAliasError::Validation(ref cause) => cause,
            CreateAccountAliasError::Credentials(ref err) => err.description(),
            CreateAccountAliasError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            CreateAccountAliasError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by CreateGroup
#[derive(Debug, PartialEq)]
pub enum CreateGroupError {
    ///<p>The request was rejected because it attempted to create a resource that already exists.</p>
    EntityAlreadyExists(String),
    ///<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>
    LimitExceeded(String),
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl CreateGroupError {
    pub fn from_body(body: &str) -> CreateGroupError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "EntityAlreadyExistsException" => {
                        CreateGroupError::EntityAlreadyExists(String::from(parsed_error.message))
                    }
                    "LimitExceededException" => {
                        CreateGroupError::LimitExceeded(String::from(parsed_error.message))
                    }
                    "NoSuchEntityException" => {
                        CreateGroupError::NoSuchEntity(String::from(parsed_error.message))
                    }
                    "ServiceFailureException" => {
                        CreateGroupError::ServiceFailure(String::from(parsed_error.message))
                    }
                    _ => CreateGroupError::Unknown(String::from(body)),
                }
            }
            Err(_) => CreateGroupError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for CreateGroupError {
    fn from(err: XmlParseError) -> CreateGroupError {
        let XmlParseError(message) = err;
        CreateGroupError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for CreateGroupError {
    fn from(err: CredentialsError) -> CreateGroupError {
        CreateGroupError::Credentials(err)
    }
}
impl From<HttpDispatchError> for CreateGroupError {
    fn from(err: HttpDispatchError) -> CreateGroupError {
        CreateGroupError::HttpDispatch(err)
    }
}
impl From<io::Error> for CreateGroupError {
    fn from(err: io::Error) -> CreateGroupError {
        CreateGroupError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for CreateGroupError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CreateGroupError {
    fn description(&self) -> &str {
        match *self {
            CreateGroupError::EntityAlreadyExists(ref cause) => cause,
            CreateGroupError::LimitExceeded(ref cause) => cause,
            CreateGroupError::NoSuchEntity(ref cause) => cause,
            CreateGroupError::ServiceFailure(ref cause) => cause,
            CreateGroupError::Validation(ref cause) => cause,
            CreateGroupError::Credentials(ref err) => err.description(),
            CreateGroupError::HttpDispatch(ref dispatch_error) => dispatch_error.description(),
            CreateGroupError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by CreateInstanceProfile
#[derive(Debug, PartialEq)]
pub enum CreateInstanceProfileError {
    ///<p>The request was rejected because it attempted to create a resource that already exists.</p>
    EntityAlreadyExists(String),
    ///<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>
    LimitExceeded(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl CreateInstanceProfileError {
    pub fn from_body(body: &str) -> CreateInstanceProfileError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "EntityAlreadyExistsException" => CreateInstanceProfileError::EntityAlreadyExists(String::from(parsed_error.message)),
                    "LimitExceededException" => CreateInstanceProfileError::LimitExceeded(String::from(parsed_error.message)),
                    "ServiceFailureException" => CreateInstanceProfileError::ServiceFailure(String::from(parsed_error.message)),
                    _ => CreateInstanceProfileError::Unknown(String::from(body)),
                }
            }
            Err(_) => CreateInstanceProfileError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for CreateInstanceProfileError {
    fn from(err: XmlParseError) -> CreateInstanceProfileError {
        let XmlParseError(message) = err;
        CreateInstanceProfileError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for CreateInstanceProfileError {
    fn from(err: CredentialsError) -> CreateInstanceProfileError {
        CreateInstanceProfileError::Credentials(err)
    }
}
impl From<HttpDispatchError> for CreateInstanceProfileError {
    fn from(err: HttpDispatchError) -> CreateInstanceProfileError {
        CreateInstanceProfileError::HttpDispatch(err)
    }
}
impl From<io::Error> for CreateInstanceProfileError {
    fn from(err: io::Error) -> CreateInstanceProfileError {
        CreateInstanceProfileError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for CreateInstanceProfileError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CreateInstanceProfileError {
    fn description(&self) -> &str {
        match *self {
            CreateInstanceProfileError::EntityAlreadyExists(ref cause) => cause,
            CreateInstanceProfileError::LimitExceeded(ref cause) => cause,
            CreateInstanceProfileError::ServiceFailure(ref cause) => cause,
            CreateInstanceProfileError::Validation(ref cause) => cause,
            CreateInstanceProfileError::Credentials(ref err) => err.description(),
            CreateInstanceProfileError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            CreateInstanceProfileError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by CreateLoginProfile
#[derive(Debug, PartialEq)]
pub enum CreateLoginProfileError {
    ///<p>The request was rejected because it attempted to create a resource that already exists.</p>
    EntityAlreadyExists(String),
    ///<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>
    LimitExceeded(String),
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request was rejected because the provided password did not meet the requirements imposed by the account password policy.</p>
    PasswordPolicyViolation(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl CreateLoginProfileError {
    pub fn from_body(body: &str) -> CreateLoginProfileError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "EntityAlreadyExistsException" => CreateLoginProfileError::EntityAlreadyExists(String::from(parsed_error.message)),
                    "LimitExceededException" => {
                        CreateLoginProfileError::LimitExceeded(String::from(parsed_error.message))
                    }
                    "NoSuchEntityException" => {
                        CreateLoginProfileError::NoSuchEntity(String::from(parsed_error.message))
                    }
                    "PasswordPolicyViolationException" => CreateLoginProfileError::PasswordPolicyViolation(String::from(parsed_error.message)),
                    "ServiceFailureException" => {
                        CreateLoginProfileError::ServiceFailure(String::from(parsed_error.message))
                    }
                    _ => CreateLoginProfileError::Unknown(String::from(body)),
                }
            }
            Err(_) => CreateLoginProfileError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for CreateLoginProfileError {
    fn from(err: XmlParseError) -> CreateLoginProfileError {
        let XmlParseError(message) = err;
        CreateLoginProfileError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for CreateLoginProfileError {
    fn from(err: CredentialsError) -> CreateLoginProfileError {
        CreateLoginProfileError::Credentials(err)
    }
}
impl From<HttpDispatchError> for CreateLoginProfileError {
    fn from(err: HttpDispatchError) -> CreateLoginProfileError {
        CreateLoginProfileError::HttpDispatch(err)
    }
}
impl From<io::Error> for CreateLoginProfileError {
    fn from(err: io::Error) -> CreateLoginProfileError {
        CreateLoginProfileError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for CreateLoginProfileError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CreateLoginProfileError {
    fn description(&self) -> &str {
        match *self {
            CreateLoginProfileError::EntityAlreadyExists(ref cause) => cause,
            CreateLoginProfileError::LimitExceeded(ref cause) => cause,
            CreateLoginProfileError::NoSuchEntity(ref cause) => cause,
            CreateLoginProfileError::PasswordPolicyViolation(ref cause) => cause,
            CreateLoginProfileError::ServiceFailure(ref cause) => cause,
            CreateLoginProfileError::Validation(ref cause) => cause,
            CreateLoginProfileError::Credentials(ref err) => err.description(),
            CreateLoginProfileError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            CreateLoginProfileError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by CreateOpenIDConnectProvider
#[derive(Debug, PartialEq)]
pub enum CreateOpenIDConnectProviderError {
    ///<p>The request was rejected because it attempted to create a resource that already exists.</p>
    EntityAlreadyExists(String),
    ///<p>The request was rejected because an invalid or out-of-range value was supplied for an input parameter.</p>
    InvalidInput(String),
    ///<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>
    LimitExceeded(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl CreateOpenIDConnectProviderError {
    pub fn from_body(body: &str) -> CreateOpenIDConnectProviderError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "EntityAlreadyExistsException" => CreateOpenIDConnectProviderError::EntityAlreadyExists(String::from(parsed_error.message)),
                    "InvalidInputException" => CreateOpenIDConnectProviderError::InvalidInput(String::from(parsed_error.message)),
                    "LimitExceededException" => CreateOpenIDConnectProviderError::LimitExceeded(String::from(parsed_error.message)),
                    "ServiceFailureException" => CreateOpenIDConnectProviderError::ServiceFailure(String::from(parsed_error.message)),
                    _ => CreateOpenIDConnectProviderError::Unknown(String::from(body)),
                }
            }
            Err(_) => CreateOpenIDConnectProviderError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for CreateOpenIDConnectProviderError {
    fn from(err: XmlParseError) -> CreateOpenIDConnectProviderError {
        let XmlParseError(message) = err;
        CreateOpenIDConnectProviderError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for CreateOpenIDConnectProviderError {
    fn from(err: CredentialsError) -> CreateOpenIDConnectProviderError {
        CreateOpenIDConnectProviderError::Credentials(err)
    }
}
impl From<HttpDispatchError> for CreateOpenIDConnectProviderError {
    fn from(err: HttpDispatchError) -> CreateOpenIDConnectProviderError {
        CreateOpenIDConnectProviderError::HttpDispatch(err)
    }
}
impl From<io::Error> for CreateOpenIDConnectProviderError {
    fn from(err: io::Error) -> CreateOpenIDConnectProviderError {
        CreateOpenIDConnectProviderError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for CreateOpenIDConnectProviderError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CreateOpenIDConnectProviderError {
    fn description(&self) -> &str {
        match *self {
            CreateOpenIDConnectProviderError::EntityAlreadyExists(ref cause) => cause,
            CreateOpenIDConnectProviderError::InvalidInput(ref cause) => cause,
            CreateOpenIDConnectProviderError::LimitExceeded(ref cause) => cause,
            CreateOpenIDConnectProviderError::ServiceFailure(ref cause) => cause,
            CreateOpenIDConnectProviderError::Validation(ref cause) => cause,
            CreateOpenIDConnectProviderError::Credentials(ref err) => err.description(),
            CreateOpenIDConnectProviderError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            CreateOpenIDConnectProviderError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by CreatePolicy
#[derive(Debug, PartialEq)]
pub enum CreatePolicyError {
    ///<p>The request was rejected because it attempted to create a resource that already exists.</p>
    EntityAlreadyExists(String),
    ///<p>The request was rejected because an invalid or out-of-range value was supplied for an input parameter.</p>
    InvalidInput(String),
    ///<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>
    LimitExceeded(String),
    ///<p>The request was rejected because the policy document was malformed. The error message describes the specific error.</p>
    MalformedPolicyDocument(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl CreatePolicyError {
    pub fn from_body(body: &str) -> CreatePolicyError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "EntityAlreadyExistsException" => {
                        CreatePolicyError::EntityAlreadyExists(String::from(parsed_error.message))
                    }
                    "InvalidInputException" => {
                        CreatePolicyError::InvalidInput(String::from(parsed_error.message))
                    }
                    "LimitExceededException" => {
                        CreatePolicyError::LimitExceeded(String::from(parsed_error.message))
                    }
                    "MalformedPolicyDocumentException" => CreatePolicyError::MalformedPolicyDocument(String::from(parsed_error.message)),
                    "ServiceFailureException" => {
                        CreatePolicyError::ServiceFailure(String::from(parsed_error.message))
                    }
                    _ => CreatePolicyError::Unknown(String::from(body)),
                }
            }
            Err(_) => CreatePolicyError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for CreatePolicyError {
    fn from(err: XmlParseError) -> CreatePolicyError {
        let XmlParseError(message) = err;
        CreatePolicyError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for CreatePolicyError {
    fn from(err: CredentialsError) -> CreatePolicyError {
        CreatePolicyError::Credentials(err)
    }
}
impl From<HttpDispatchError> for CreatePolicyError {
    fn from(err: HttpDispatchError) -> CreatePolicyError {
        CreatePolicyError::HttpDispatch(err)
    }
}
impl From<io::Error> for CreatePolicyError {
    fn from(err: io::Error) -> CreatePolicyError {
        CreatePolicyError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for CreatePolicyError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CreatePolicyError {
    fn description(&self) -> &str {
        match *self {
            CreatePolicyError::EntityAlreadyExists(ref cause) => cause,
            CreatePolicyError::InvalidInput(ref cause) => cause,
            CreatePolicyError::LimitExceeded(ref cause) => cause,
            CreatePolicyError::MalformedPolicyDocument(ref cause) => cause,
            CreatePolicyError::ServiceFailure(ref cause) => cause,
            CreatePolicyError::Validation(ref cause) => cause,
            CreatePolicyError::Credentials(ref err) => err.description(),
            CreatePolicyError::HttpDispatch(ref dispatch_error) => dispatch_error.description(),
            CreatePolicyError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by CreatePolicyVersion
#[derive(Debug, PartialEq)]
pub enum CreatePolicyVersionError {
    ///<p>The request was rejected because an invalid or out-of-range value was supplied for an input parameter.</p>
    InvalidInput(String),
    ///<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>
    LimitExceeded(String),
    ///<p>The request was rejected because the policy document was malformed. The error message describes the specific error.</p>
    MalformedPolicyDocument(String),
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl CreatePolicyVersionError {
    pub fn from_body(body: &str) -> CreatePolicyVersionError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "InvalidInputException" => {
                        CreatePolicyVersionError::InvalidInput(String::from(parsed_error.message))
                    }
                    "LimitExceededException" => {
                        CreatePolicyVersionError::LimitExceeded(String::from(parsed_error.message))
                    }
                    "MalformedPolicyDocumentException" => CreatePolicyVersionError::MalformedPolicyDocument(String::from(parsed_error.message)),
                    "NoSuchEntityException" => {
                        CreatePolicyVersionError::NoSuchEntity(String::from(parsed_error.message))
                    }
                    "ServiceFailureException" => {
                        CreatePolicyVersionError::ServiceFailure(String::from(parsed_error.message))
                    }
                    _ => CreatePolicyVersionError::Unknown(String::from(body)),
                }
            }
            Err(_) => CreatePolicyVersionError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for CreatePolicyVersionError {
    fn from(err: XmlParseError) -> CreatePolicyVersionError {
        let XmlParseError(message) = err;
        CreatePolicyVersionError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for CreatePolicyVersionError {
    fn from(err: CredentialsError) -> CreatePolicyVersionError {
        CreatePolicyVersionError::Credentials(err)
    }
}
impl From<HttpDispatchError> for CreatePolicyVersionError {
    fn from(err: HttpDispatchError) -> CreatePolicyVersionError {
        CreatePolicyVersionError::HttpDispatch(err)
    }
}
impl From<io::Error> for CreatePolicyVersionError {
    fn from(err: io::Error) -> CreatePolicyVersionError {
        CreatePolicyVersionError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for CreatePolicyVersionError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CreatePolicyVersionError {
    fn description(&self) -> &str {
        match *self {
            CreatePolicyVersionError::InvalidInput(ref cause) => cause,
            CreatePolicyVersionError::LimitExceeded(ref cause) => cause,
            CreatePolicyVersionError::MalformedPolicyDocument(ref cause) => cause,
            CreatePolicyVersionError::NoSuchEntity(ref cause) => cause,
            CreatePolicyVersionError::ServiceFailure(ref cause) => cause,
            CreatePolicyVersionError::Validation(ref cause) => cause,
            CreatePolicyVersionError::Credentials(ref err) => err.description(),
            CreatePolicyVersionError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            CreatePolicyVersionError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by CreateRole
#[derive(Debug, PartialEq)]
pub enum CreateRoleError {
    ///<p>The request was rejected because it attempted to create a resource that already exists.</p>
    EntityAlreadyExists(String),
    ///<p>The request was rejected because an invalid or out-of-range value was supplied for an input parameter.</p>
    InvalidInput(String),
    ///<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>
    LimitExceeded(String),
    ///<p>The request was rejected because the policy document was malformed. The error message describes the specific error.</p>
    MalformedPolicyDocument(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl CreateRoleError {
    pub fn from_body(body: &str) -> CreateRoleError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "EntityAlreadyExistsException" => {
                        CreateRoleError::EntityAlreadyExists(String::from(parsed_error.message))
                    }
                    "InvalidInputException" => {
                        CreateRoleError::InvalidInput(String::from(parsed_error.message))
                    }
                    "LimitExceededException" => {
                        CreateRoleError::LimitExceeded(String::from(parsed_error.message))
                    }
                    "MalformedPolicyDocumentException" => {
                        CreateRoleError::MalformedPolicyDocument(String::from(parsed_error.message))
                    }
                    "ServiceFailureException" => {
                        CreateRoleError::ServiceFailure(String::from(parsed_error.message))
                    }
                    _ => CreateRoleError::Unknown(String::from(body)),
                }
            }
            Err(_) => CreateRoleError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for CreateRoleError {
    fn from(err: XmlParseError) -> CreateRoleError {
        let XmlParseError(message) = err;
        CreateRoleError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for CreateRoleError {
    fn from(err: CredentialsError) -> CreateRoleError {
        CreateRoleError::Credentials(err)
    }
}
impl From<HttpDispatchError> for CreateRoleError {
    fn from(err: HttpDispatchError) -> CreateRoleError {
        CreateRoleError::HttpDispatch(err)
    }
}
impl From<io::Error> for CreateRoleError {
    fn from(err: io::Error) -> CreateRoleError {
        CreateRoleError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for CreateRoleError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CreateRoleError {
    fn description(&self) -> &str {
        match *self {
            CreateRoleError::EntityAlreadyExists(ref cause) => cause,
            CreateRoleError::InvalidInput(ref cause) => cause,
            CreateRoleError::LimitExceeded(ref cause) => cause,
            CreateRoleError::MalformedPolicyDocument(ref cause) => cause,
            CreateRoleError::ServiceFailure(ref cause) => cause,
            CreateRoleError::Validation(ref cause) => cause,
            CreateRoleError::Credentials(ref err) => err.description(),
            CreateRoleError::HttpDispatch(ref dispatch_error) => dispatch_error.description(),
            CreateRoleError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by CreateSAMLProvider
#[derive(Debug, PartialEq)]
pub enum CreateSAMLProviderError {
    ///<p>The request was rejected because it attempted to create a resource that already exists.</p>
    EntityAlreadyExists(String),
    ///<p>The request was rejected because an invalid or out-of-range value was supplied for an input parameter.</p>
    InvalidInput(String),
    ///<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>
    LimitExceeded(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl CreateSAMLProviderError {
    pub fn from_body(body: &str) -> CreateSAMLProviderError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "EntityAlreadyExistsException" => CreateSAMLProviderError::EntityAlreadyExists(String::from(parsed_error.message)),
                    "InvalidInputException" => {
                        CreateSAMLProviderError::InvalidInput(String::from(parsed_error.message))
                    }
                    "LimitExceededException" => {
                        CreateSAMLProviderError::LimitExceeded(String::from(parsed_error.message))
                    }
                    "ServiceFailureException" => {
                        CreateSAMLProviderError::ServiceFailure(String::from(parsed_error.message))
                    }
                    _ => CreateSAMLProviderError::Unknown(String::from(body)),
                }
            }
            Err(_) => CreateSAMLProviderError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for CreateSAMLProviderError {
    fn from(err: XmlParseError) -> CreateSAMLProviderError {
        let XmlParseError(message) = err;
        CreateSAMLProviderError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for CreateSAMLProviderError {
    fn from(err: CredentialsError) -> CreateSAMLProviderError {
        CreateSAMLProviderError::Credentials(err)
    }
}
impl From<HttpDispatchError> for CreateSAMLProviderError {
    fn from(err: HttpDispatchError) -> CreateSAMLProviderError {
        CreateSAMLProviderError::HttpDispatch(err)
    }
}
impl From<io::Error> for CreateSAMLProviderError {
    fn from(err: io::Error) -> CreateSAMLProviderError {
        CreateSAMLProviderError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for CreateSAMLProviderError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CreateSAMLProviderError {
    fn description(&self) -> &str {
        match *self {
            CreateSAMLProviderError::EntityAlreadyExists(ref cause) => cause,
            CreateSAMLProviderError::InvalidInput(ref cause) => cause,
            CreateSAMLProviderError::LimitExceeded(ref cause) => cause,
            CreateSAMLProviderError::ServiceFailure(ref cause) => cause,
            CreateSAMLProviderError::Validation(ref cause) => cause,
            CreateSAMLProviderError::Credentials(ref err) => err.description(),
            CreateSAMLProviderError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            CreateSAMLProviderError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by CreateServiceLinkedRole
#[derive(Debug, PartialEq)]
pub enum CreateServiceLinkedRoleError {
    ///<p>The request was rejected because an invalid or out-of-range value was supplied for an input parameter.</p>
    InvalidInput(String),
    ///<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>
    LimitExceeded(String),
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl CreateServiceLinkedRoleError {
    pub fn from_body(body: &str) -> CreateServiceLinkedRoleError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "InvalidInputException" => CreateServiceLinkedRoleError::InvalidInput(String::from(parsed_error.message)),
                    "LimitExceededException" => CreateServiceLinkedRoleError::LimitExceeded(String::from(parsed_error.message)),
                    "NoSuchEntityException" => CreateServiceLinkedRoleError::NoSuchEntity(String::from(parsed_error.message)),
                    "ServiceFailureException" => CreateServiceLinkedRoleError::ServiceFailure(String::from(parsed_error.message)),
                    _ => CreateServiceLinkedRoleError::Unknown(String::from(body)),
                }
            }
            Err(_) => CreateServiceLinkedRoleError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for CreateServiceLinkedRoleError {
    fn from(err: XmlParseError) -> CreateServiceLinkedRoleError {
        let XmlParseError(message) = err;
        CreateServiceLinkedRoleError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for CreateServiceLinkedRoleError {
    fn from(err: CredentialsError) -> CreateServiceLinkedRoleError {
        CreateServiceLinkedRoleError::Credentials(err)
    }
}
impl From<HttpDispatchError> for CreateServiceLinkedRoleError {
    fn from(err: HttpDispatchError) -> CreateServiceLinkedRoleError {
        CreateServiceLinkedRoleError::HttpDispatch(err)
    }
}
impl From<io::Error> for CreateServiceLinkedRoleError {
    fn from(err: io::Error) -> CreateServiceLinkedRoleError {
        CreateServiceLinkedRoleError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for CreateServiceLinkedRoleError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CreateServiceLinkedRoleError {
    fn description(&self) -> &str {
        match *self {
            CreateServiceLinkedRoleError::InvalidInput(ref cause) => cause,
            CreateServiceLinkedRoleError::LimitExceeded(ref cause) => cause,
            CreateServiceLinkedRoleError::NoSuchEntity(ref cause) => cause,
            CreateServiceLinkedRoleError::ServiceFailure(ref cause) => cause,
            CreateServiceLinkedRoleError::Validation(ref cause) => cause,
            CreateServiceLinkedRoleError::Credentials(ref err) => err.description(),
            CreateServiceLinkedRoleError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            CreateServiceLinkedRoleError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by CreateServiceSpecificCredential
#[derive(Debug, PartialEq)]
pub enum CreateServiceSpecificCredentialError {
    ///<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>
    LimitExceeded(String),
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The specified service does not support service-specific credentials.</p>
    ServiceNotSupported(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl CreateServiceSpecificCredentialError {
    pub fn from_body(body: &str) -> CreateServiceSpecificCredentialError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "LimitExceededException" => CreateServiceSpecificCredentialError::LimitExceeded(String::from(parsed_error.message)),
                    "NoSuchEntityException" => CreateServiceSpecificCredentialError::NoSuchEntity(String::from(parsed_error.message)),
                    "ServiceNotSupportedException" => CreateServiceSpecificCredentialError::ServiceNotSupported(String::from(parsed_error.message)),
                    _ => CreateServiceSpecificCredentialError::Unknown(String::from(body)),
                }
            }
            Err(_) => CreateServiceSpecificCredentialError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for CreateServiceSpecificCredentialError {
    fn from(err: XmlParseError) -> CreateServiceSpecificCredentialError {
        let XmlParseError(message) = err;
        CreateServiceSpecificCredentialError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for CreateServiceSpecificCredentialError {
    fn from(err: CredentialsError) -> CreateServiceSpecificCredentialError {
        CreateServiceSpecificCredentialError::Credentials(err)
    }
}
impl From<HttpDispatchError> for CreateServiceSpecificCredentialError {
    fn from(err: HttpDispatchError) -> CreateServiceSpecificCredentialError {
        CreateServiceSpecificCredentialError::HttpDispatch(err)
    }
}
impl From<io::Error> for CreateServiceSpecificCredentialError {
    fn from(err: io::Error) -> CreateServiceSpecificCredentialError {
        CreateServiceSpecificCredentialError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for CreateServiceSpecificCredentialError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CreateServiceSpecificCredentialError {
    fn description(&self) -> &str {
        match *self {
            CreateServiceSpecificCredentialError::LimitExceeded(ref cause) => cause,
            CreateServiceSpecificCredentialError::NoSuchEntity(ref cause) => cause,
            CreateServiceSpecificCredentialError::ServiceNotSupported(ref cause) => cause,
            CreateServiceSpecificCredentialError::Validation(ref cause) => cause,
            CreateServiceSpecificCredentialError::Credentials(ref err) => err.description(),
            CreateServiceSpecificCredentialError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            CreateServiceSpecificCredentialError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by CreateUser
#[derive(Debug, PartialEq)]
pub enum CreateUserError {
    ///<p>The request was rejected because it attempted to create a resource that already exists.</p>
    EntityAlreadyExists(String),
    ///<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>
    LimitExceeded(String),
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl CreateUserError {
    pub fn from_body(body: &str) -> CreateUserError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "EntityAlreadyExistsException" => {
                        CreateUserError::EntityAlreadyExists(String::from(parsed_error.message))
                    }
                    "LimitExceededException" => {
                        CreateUserError::LimitExceeded(String::from(parsed_error.message))
                    }
                    "NoSuchEntityException" => {
                        CreateUserError::NoSuchEntity(String::from(parsed_error.message))
                    }
                    "ServiceFailureException" => {
                        CreateUserError::ServiceFailure(String::from(parsed_error.message))
                    }
                    _ => CreateUserError::Unknown(String::from(body)),
                }
            }
            Err(_) => CreateUserError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for CreateUserError {
    fn from(err: XmlParseError) -> CreateUserError {
        let XmlParseError(message) = err;
        CreateUserError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for CreateUserError {
    fn from(err: CredentialsError) -> CreateUserError {
        CreateUserError::Credentials(err)
    }
}
impl From<HttpDispatchError> for CreateUserError {
    fn from(err: HttpDispatchError) -> CreateUserError {
        CreateUserError::HttpDispatch(err)
    }
}
impl From<io::Error> for CreateUserError {
    fn from(err: io::Error) -> CreateUserError {
        CreateUserError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for CreateUserError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CreateUserError {
    fn description(&self) -> &str {
        match *self {
            CreateUserError::EntityAlreadyExists(ref cause) => cause,
            CreateUserError::LimitExceeded(ref cause) => cause,
            CreateUserError::NoSuchEntity(ref cause) => cause,
            CreateUserError::ServiceFailure(ref cause) => cause,
            CreateUserError::Validation(ref cause) => cause,
            CreateUserError::Credentials(ref err) => err.description(),
            CreateUserError::HttpDispatch(ref dispatch_error) => dispatch_error.description(),
            CreateUserError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by CreateVirtualMFADevice
#[derive(Debug, PartialEq)]
pub enum CreateVirtualMFADeviceError {
    ///<p>The request was rejected because it attempted to create a resource that already exists.</p>
    EntityAlreadyExists(String),
    ///<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>
    LimitExceeded(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl CreateVirtualMFADeviceError {
    pub fn from_body(body: &str) -> CreateVirtualMFADeviceError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "EntityAlreadyExistsException" => CreateVirtualMFADeviceError::EntityAlreadyExists(String::from(parsed_error.message)),
                    "LimitExceededException" => CreateVirtualMFADeviceError::LimitExceeded(String::from(parsed_error.message)),
                    "ServiceFailureException" => CreateVirtualMFADeviceError::ServiceFailure(String::from(parsed_error.message)),
                    _ => CreateVirtualMFADeviceError::Unknown(String::from(body)),
                }
            }
            Err(_) => CreateVirtualMFADeviceError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for CreateVirtualMFADeviceError {
    fn from(err: XmlParseError) -> CreateVirtualMFADeviceError {
        let XmlParseError(message) = err;
        CreateVirtualMFADeviceError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for CreateVirtualMFADeviceError {
    fn from(err: CredentialsError) -> CreateVirtualMFADeviceError {
        CreateVirtualMFADeviceError::Credentials(err)
    }
}
impl From<HttpDispatchError> for CreateVirtualMFADeviceError {
    fn from(err: HttpDispatchError) -> CreateVirtualMFADeviceError {
        CreateVirtualMFADeviceError::HttpDispatch(err)
    }
}
impl From<io::Error> for CreateVirtualMFADeviceError {
    fn from(err: io::Error) -> CreateVirtualMFADeviceError {
        CreateVirtualMFADeviceError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for CreateVirtualMFADeviceError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CreateVirtualMFADeviceError {
    fn description(&self) -> &str {
        match *self {
            CreateVirtualMFADeviceError::EntityAlreadyExists(ref cause) => cause,
            CreateVirtualMFADeviceError::LimitExceeded(ref cause) => cause,
            CreateVirtualMFADeviceError::ServiceFailure(ref cause) => cause,
            CreateVirtualMFADeviceError::Validation(ref cause) => cause,
            CreateVirtualMFADeviceError::Credentials(ref err) => err.description(),
            CreateVirtualMFADeviceError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            CreateVirtualMFADeviceError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by DeactivateMFADevice
#[derive(Debug, PartialEq)]
pub enum DeactivateMFADeviceError {
    ///<p>The request was rejected because it referenced an entity that is temporarily unmodifiable, such as a user name that was deleted and then recreated. The error indicates that the request is likely to succeed if you try again after waiting several minutes. The error message describes the entity.</p>
    EntityTemporarilyUnmodifiable(String),
    ///<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>
    LimitExceeded(String),
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl DeactivateMFADeviceError {
    pub fn from_body(body: &str) -> DeactivateMFADeviceError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "EntityTemporarilyUnmodifiableException" => DeactivateMFADeviceError::EntityTemporarilyUnmodifiable(String::from(parsed_error.message)),
                    "LimitExceededException" => {
                        DeactivateMFADeviceError::LimitExceeded(String::from(parsed_error.message))
                    }
                    "NoSuchEntityException" => {
                        DeactivateMFADeviceError::NoSuchEntity(String::from(parsed_error.message))
                    }
                    "ServiceFailureException" => {
                        DeactivateMFADeviceError::ServiceFailure(String::from(parsed_error.message))
                    }
                    _ => DeactivateMFADeviceError::Unknown(String::from(body)),
                }
            }
            Err(_) => DeactivateMFADeviceError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for DeactivateMFADeviceError {
    fn from(err: XmlParseError) -> DeactivateMFADeviceError {
        let XmlParseError(message) = err;
        DeactivateMFADeviceError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for DeactivateMFADeviceError {
    fn from(err: CredentialsError) -> DeactivateMFADeviceError {
        DeactivateMFADeviceError::Credentials(err)
    }
}
impl From<HttpDispatchError> for DeactivateMFADeviceError {
    fn from(err: HttpDispatchError) -> DeactivateMFADeviceError {
        DeactivateMFADeviceError::HttpDispatch(err)
    }
}
impl From<io::Error> for DeactivateMFADeviceError {
    fn from(err: io::Error) -> DeactivateMFADeviceError {
        DeactivateMFADeviceError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for DeactivateMFADeviceError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DeactivateMFADeviceError {
    fn description(&self) -> &str {
        match *self {
            DeactivateMFADeviceError::EntityTemporarilyUnmodifiable(ref cause) => cause,
            DeactivateMFADeviceError::LimitExceeded(ref cause) => cause,
            DeactivateMFADeviceError::NoSuchEntity(ref cause) => cause,
            DeactivateMFADeviceError::ServiceFailure(ref cause) => cause,
            DeactivateMFADeviceError::Validation(ref cause) => cause,
            DeactivateMFADeviceError::Credentials(ref err) => err.description(),
            DeactivateMFADeviceError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            DeactivateMFADeviceError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by DeleteAccessKey
#[derive(Debug, PartialEq)]
pub enum DeleteAccessKeyError {
    ///<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>
    LimitExceeded(String),
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl DeleteAccessKeyError {
    pub fn from_body(body: &str) -> DeleteAccessKeyError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "LimitExceededException" => {
                        DeleteAccessKeyError::LimitExceeded(String::from(parsed_error.message))
                    }
                    "NoSuchEntityException" => {
                        DeleteAccessKeyError::NoSuchEntity(String::from(parsed_error.message))
                    }
                    "ServiceFailureException" => {
                        DeleteAccessKeyError::ServiceFailure(String::from(parsed_error.message))
                    }
                    _ => DeleteAccessKeyError::Unknown(String::from(body)),
                }
            }
            Err(_) => DeleteAccessKeyError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for DeleteAccessKeyError {
    fn from(err: XmlParseError) -> DeleteAccessKeyError {
        let XmlParseError(message) = err;
        DeleteAccessKeyError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for DeleteAccessKeyError {
    fn from(err: CredentialsError) -> DeleteAccessKeyError {
        DeleteAccessKeyError::Credentials(err)
    }
}
impl From<HttpDispatchError> for DeleteAccessKeyError {
    fn from(err: HttpDispatchError) -> DeleteAccessKeyError {
        DeleteAccessKeyError::HttpDispatch(err)
    }
}
impl From<io::Error> for DeleteAccessKeyError {
    fn from(err: io::Error) -> DeleteAccessKeyError {
        DeleteAccessKeyError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for DeleteAccessKeyError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DeleteAccessKeyError {
    fn description(&self) -> &str {
        match *self {
            DeleteAccessKeyError::LimitExceeded(ref cause) => cause,
            DeleteAccessKeyError::NoSuchEntity(ref cause) => cause,
            DeleteAccessKeyError::ServiceFailure(ref cause) => cause,
            DeleteAccessKeyError::Validation(ref cause) => cause,
            DeleteAccessKeyError::Credentials(ref err) => err.description(),
            DeleteAccessKeyError::HttpDispatch(ref dispatch_error) => dispatch_error.description(),
            DeleteAccessKeyError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by DeleteAccountAlias
#[derive(Debug, PartialEq)]
pub enum DeleteAccountAliasError {
    ///<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>
    LimitExceeded(String),
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl DeleteAccountAliasError {
    pub fn from_body(body: &str) -> DeleteAccountAliasError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "LimitExceededException" => {
                        DeleteAccountAliasError::LimitExceeded(String::from(parsed_error.message))
                    }
                    "NoSuchEntityException" => {
                        DeleteAccountAliasError::NoSuchEntity(String::from(parsed_error.message))
                    }
                    "ServiceFailureException" => {
                        DeleteAccountAliasError::ServiceFailure(String::from(parsed_error.message))
                    }
                    _ => DeleteAccountAliasError::Unknown(String::from(body)),
                }
            }
            Err(_) => DeleteAccountAliasError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for DeleteAccountAliasError {
    fn from(err: XmlParseError) -> DeleteAccountAliasError {
        let XmlParseError(message) = err;
        DeleteAccountAliasError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for DeleteAccountAliasError {
    fn from(err: CredentialsError) -> DeleteAccountAliasError {
        DeleteAccountAliasError::Credentials(err)
    }
}
impl From<HttpDispatchError> for DeleteAccountAliasError {
    fn from(err: HttpDispatchError) -> DeleteAccountAliasError {
        DeleteAccountAliasError::HttpDispatch(err)
    }
}
impl From<io::Error> for DeleteAccountAliasError {
    fn from(err: io::Error) -> DeleteAccountAliasError {
        DeleteAccountAliasError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for DeleteAccountAliasError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DeleteAccountAliasError {
    fn description(&self) -> &str {
        match *self {
            DeleteAccountAliasError::LimitExceeded(ref cause) => cause,
            DeleteAccountAliasError::NoSuchEntity(ref cause) => cause,
            DeleteAccountAliasError::ServiceFailure(ref cause) => cause,
            DeleteAccountAliasError::Validation(ref cause) => cause,
            DeleteAccountAliasError::Credentials(ref err) => err.description(),
            DeleteAccountAliasError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            DeleteAccountAliasError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by DeleteAccountPasswordPolicy
#[derive(Debug, PartialEq)]
pub enum DeleteAccountPasswordPolicyError {
    ///<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>
    LimitExceeded(String),
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl DeleteAccountPasswordPolicyError {
    pub fn from_body(body: &str) -> DeleteAccountPasswordPolicyError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "LimitExceededException" => DeleteAccountPasswordPolicyError::LimitExceeded(String::from(parsed_error.message)),
                    "NoSuchEntityException" => DeleteAccountPasswordPolicyError::NoSuchEntity(String::from(parsed_error.message)),
                    "ServiceFailureException" => DeleteAccountPasswordPolicyError::ServiceFailure(String::from(parsed_error.message)),
                    _ => DeleteAccountPasswordPolicyError::Unknown(String::from(body)),
                }
            }
            Err(_) => DeleteAccountPasswordPolicyError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for DeleteAccountPasswordPolicyError {
    fn from(err: XmlParseError) -> DeleteAccountPasswordPolicyError {
        let XmlParseError(message) = err;
        DeleteAccountPasswordPolicyError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for DeleteAccountPasswordPolicyError {
    fn from(err: CredentialsError) -> DeleteAccountPasswordPolicyError {
        DeleteAccountPasswordPolicyError::Credentials(err)
    }
}
impl From<HttpDispatchError> for DeleteAccountPasswordPolicyError {
    fn from(err: HttpDispatchError) -> DeleteAccountPasswordPolicyError {
        DeleteAccountPasswordPolicyError::HttpDispatch(err)
    }
}
impl From<io::Error> for DeleteAccountPasswordPolicyError {
    fn from(err: io::Error) -> DeleteAccountPasswordPolicyError {
        DeleteAccountPasswordPolicyError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for DeleteAccountPasswordPolicyError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DeleteAccountPasswordPolicyError {
    fn description(&self) -> &str {
        match *self {
            DeleteAccountPasswordPolicyError::LimitExceeded(ref cause) => cause,
            DeleteAccountPasswordPolicyError::NoSuchEntity(ref cause) => cause,
            DeleteAccountPasswordPolicyError::ServiceFailure(ref cause) => cause,
            DeleteAccountPasswordPolicyError::Validation(ref cause) => cause,
            DeleteAccountPasswordPolicyError::Credentials(ref err) => err.description(),
            DeleteAccountPasswordPolicyError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            DeleteAccountPasswordPolicyError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by DeleteGroup
#[derive(Debug, PartialEq)]
pub enum DeleteGroupError {
    ///<p>The request was rejected because it attempted to delete a resource that has attached subordinate entities. The error message describes these entities.</p>
    DeleteConflict(String),
    ///<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>
    LimitExceeded(String),
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl DeleteGroupError {
    pub fn from_body(body: &str) -> DeleteGroupError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "DeleteConflictException" => {
                        DeleteGroupError::DeleteConflict(String::from(parsed_error.message))
                    }
                    "LimitExceededException" => {
                        DeleteGroupError::LimitExceeded(String::from(parsed_error.message))
                    }
                    "NoSuchEntityException" => {
                        DeleteGroupError::NoSuchEntity(String::from(parsed_error.message))
                    }
                    "ServiceFailureException" => {
                        DeleteGroupError::ServiceFailure(String::from(parsed_error.message))
                    }
                    _ => DeleteGroupError::Unknown(String::from(body)),
                }
            }
            Err(_) => DeleteGroupError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for DeleteGroupError {
    fn from(err: XmlParseError) -> DeleteGroupError {
        let XmlParseError(message) = err;
        DeleteGroupError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for DeleteGroupError {
    fn from(err: CredentialsError) -> DeleteGroupError {
        DeleteGroupError::Credentials(err)
    }
}
impl From<HttpDispatchError> for DeleteGroupError {
    fn from(err: HttpDispatchError) -> DeleteGroupError {
        DeleteGroupError::HttpDispatch(err)
    }
}
impl From<io::Error> for DeleteGroupError {
    fn from(err: io::Error) -> DeleteGroupError {
        DeleteGroupError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for DeleteGroupError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DeleteGroupError {
    fn description(&self) -> &str {
        match *self {
            DeleteGroupError::DeleteConflict(ref cause) => cause,
            DeleteGroupError::LimitExceeded(ref cause) => cause,
            DeleteGroupError::NoSuchEntity(ref cause) => cause,
            DeleteGroupError::ServiceFailure(ref cause) => cause,
            DeleteGroupError::Validation(ref cause) => cause,
            DeleteGroupError::Credentials(ref err) => err.description(),
            DeleteGroupError::HttpDispatch(ref dispatch_error) => dispatch_error.description(),
            DeleteGroupError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by DeleteGroupPolicy
#[derive(Debug, PartialEq)]
pub enum DeleteGroupPolicyError {
    ///<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>
    LimitExceeded(String),
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl DeleteGroupPolicyError {
    pub fn from_body(body: &str) -> DeleteGroupPolicyError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "LimitExceededException" => {
                        DeleteGroupPolicyError::LimitExceeded(String::from(parsed_error.message))
                    }
                    "NoSuchEntityException" => {
                        DeleteGroupPolicyError::NoSuchEntity(String::from(parsed_error.message))
                    }
                    "ServiceFailureException" => {
                        DeleteGroupPolicyError::ServiceFailure(String::from(parsed_error.message))
                    }
                    _ => DeleteGroupPolicyError::Unknown(String::from(body)),
                }
            }
            Err(_) => DeleteGroupPolicyError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for DeleteGroupPolicyError {
    fn from(err: XmlParseError) -> DeleteGroupPolicyError {
        let XmlParseError(message) = err;
        DeleteGroupPolicyError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for DeleteGroupPolicyError {
    fn from(err: CredentialsError) -> DeleteGroupPolicyError {
        DeleteGroupPolicyError::Credentials(err)
    }
}
impl From<HttpDispatchError> for DeleteGroupPolicyError {
    fn from(err: HttpDispatchError) -> DeleteGroupPolicyError {
        DeleteGroupPolicyError::HttpDispatch(err)
    }
}
impl From<io::Error> for DeleteGroupPolicyError {
    fn from(err: io::Error) -> DeleteGroupPolicyError {
        DeleteGroupPolicyError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for DeleteGroupPolicyError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DeleteGroupPolicyError {
    fn description(&self) -> &str {
        match *self {
            DeleteGroupPolicyError::LimitExceeded(ref cause) => cause,
            DeleteGroupPolicyError::NoSuchEntity(ref cause) => cause,
            DeleteGroupPolicyError::ServiceFailure(ref cause) => cause,
            DeleteGroupPolicyError::Validation(ref cause) => cause,
            DeleteGroupPolicyError::Credentials(ref err) => err.description(),
            DeleteGroupPolicyError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            DeleteGroupPolicyError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by DeleteInstanceProfile
#[derive(Debug, PartialEq)]
pub enum DeleteInstanceProfileError {
    ///<p>The request was rejected because it attempted to delete a resource that has attached subordinate entities. The error message describes these entities.</p>
    DeleteConflict(String),
    ///<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>
    LimitExceeded(String),
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl DeleteInstanceProfileError {
    pub fn from_body(body: &str) -> DeleteInstanceProfileError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "DeleteConflictException" => DeleteInstanceProfileError::DeleteConflict(String::from(parsed_error.message)),
                    "LimitExceededException" => DeleteInstanceProfileError::LimitExceeded(String::from(parsed_error.message)),
                    "NoSuchEntityException" => {
                        DeleteInstanceProfileError::NoSuchEntity(String::from(parsed_error.message))
                    }
                    "ServiceFailureException" => DeleteInstanceProfileError::ServiceFailure(String::from(parsed_error.message)),
                    _ => DeleteInstanceProfileError::Unknown(String::from(body)),
                }
            }
            Err(_) => DeleteInstanceProfileError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for DeleteInstanceProfileError {
    fn from(err: XmlParseError) -> DeleteInstanceProfileError {
        let XmlParseError(message) = err;
        DeleteInstanceProfileError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for DeleteInstanceProfileError {
    fn from(err: CredentialsError) -> DeleteInstanceProfileError {
        DeleteInstanceProfileError::Credentials(err)
    }
}
impl From<HttpDispatchError> for DeleteInstanceProfileError {
    fn from(err: HttpDispatchError) -> DeleteInstanceProfileError {
        DeleteInstanceProfileError::HttpDispatch(err)
    }
}
impl From<io::Error> for DeleteInstanceProfileError {
    fn from(err: io::Error) -> DeleteInstanceProfileError {
        DeleteInstanceProfileError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for DeleteInstanceProfileError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DeleteInstanceProfileError {
    fn description(&self) -> &str {
        match *self {
            DeleteInstanceProfileError::DeleteConflict(ref cause) => cause,
            DeleteInstanceProfileError::LimitExceeded(ref cause) => cause,
            DeleteInstanceProfileError::NoSuchEntity(ref cause) => cause,
            DeleteInstanceProfileError::ServiceFailure(ref cause) => cause,
            DeleteInstanceProfileError::Validation(ref cause) => cause,
            DeleteInstanceProfileError::Credentials(ref err) => err.description(),
            DeleteInstanceProfileError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            DeleteInstanceProfileError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by DeleteLoginProfile
#[derive(Debug, PartialEq)]
pub enum DeleteLoginProfileError {
    ///<p>The request was rejected because it referenced an entity that is temporarily unmodifiable, such as a user name that was deleted and then recreated. The error indicates that the request is likely to succeed if you try again after waiting several minutes. The error message describes the entity.</p>
    EntityTemporarilyUnmodifiable(String),
    ///<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>
    LimitExceeded(String),
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl DeleteLoginProfileError {
    pub fn from_body(body: &str) -> DeleteLoginProfileError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "EntityTemporarilyUnmodifiableException" => DeleteLoginProfileError::EntityTemporarilyUnmodifiable(String::from(parsed_error.message)),
                    "LimitExceededException" => {
                        DeleteLoginProfileError::LimitExceeded(String::from(parsed_error.message))
                    }
                    "NoSuchEntityException" => {
                        DeleteLoginProfileError::NoSuchEntity(String::from(parsed_error.message))
                    }
                    "ServiceFailureException" => {
                        DeleteLoginProfileError::ServiceFailure(String::from(parsed_error.message))
                    }
                    _ => DeleteLoginProfileError::Unknown(String::from(body)),
                }
            }
            Err(_) => DeleteLoginProfileError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for DeleteLoginProfileError {
    fn from(err: XmlParseError) -> DeleteLoginProfileError {
        let XmlParseError(message) = err;
        DeleteLoginProfileError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for DeleteLoginProfileError {
    fn from(err: CredentialsError) -> DeleteLoginProfileError {
        DeleteLoginProfileError::Credentials(err)
    }
}
impl From<HttpDispatchError> for DeleteLoginProfileError {
    fn from(err: HttpDispatchError) -> DeleteLoginProfileError {
        DeleteLoginProfileError::HttpDispatch(err)
    }
}
impl From<io::Error> for DeleteLoginProfileError {
    fn from(err: io::Error) -> DeleteLoginProfileError {
        DeleteLoginProfileError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for DeleteLoginProfileError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DeleteLoginProfileError {
    fn description(&self) -> &str {
        match *self {
            DeleteLoginProfileError::EntityTemporarilyUnmodifiable(ref cause) => cause,
            DeleteLoginProfileError::LimitExceeded(ref cause) => cause,
            DeleteLoginProfileError::NoSuchEntity(ref cause) => cause,
            DeleteLoginProfileError::ServiceFailure(ref cause) => cause,
            DeleteLoginProfileError::Validation(ref cause) => cause,
            DeleteLoginProfileError::Credentials(ref err) => err.description(),
            DeleteLoginProfileError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            DeleteLoginProfileError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by DeleteOpenIDConnectProvider
#[derive(Debug, PartialEq)]
pub enum DeleteOpenIDConnectProviderError {
    ///<p>The request was rejected because an invalid or out-of-range value was supplied for an input parameter.</p>
    InvalidInput(String),
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl DeleteOpenIDConnectProviderError {
    pub fn from_body(body: &str) -> DeleteOpenIDConnectProviderError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "InvalidInputException" => DeleteOpenIDConnectProviderError::InvalidInput(String::from(parsed_error.message)),
                    "NoSuchEntityException" => DeleteOpenIDConnectProviderError::NoSuchEntity(String::from(parsed_error.message)),
                    "ServiceFailureException" => DeleteOpenIDConnectProviderError::ServiceFailure(String::from(parsed_error.message)),
                    _ => DeleteOpenIDConnectProviderError::Unknown(String::from(body)),
                }
            }
            Err(_) => DeleteOpenIDConnectProviderError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for DeleteOpenIDConnectProviderError {
    fn from(err: XmlParseError) -> DeleteOpenIDConnectProviderError {
        let XmlParseError(message) = err;
        DeleteOpenIDConnectProviderError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for DeleteOpenIDConnectProviderError {
    fn from(err: CredentialsError) -> DeleteOpenIDConnectProviderError {
        DeleteOpenIDConnectProviderError::Credentials(err)
    }
}
impl From<HttpDispatchError> for DeleteOpenIDConnectProviderError {
    fn from(err: HttpDispatchError) -> DeleteOpenIDConnectProviderError {
        DeleteOpenIDConnectProviderError::HttpDispatch(err)
    }
}
impl From<io::Error> for DeleteOpenIDConnectProviderError {
    fn from(err: io::Error) -> DeleteOpenIDConnectProviderError {
        DeleteOpenIDConnectProviderError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for DeleteOpenIDConnectProviderError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DeleteOpenIDConnectProviderError {
    fn description(&self) -> &str {
        match *self {
            DeleteOpenIDConnectProviderError::InvalidInput(ref cause) => cause,
            DeleteOpenIDConnectProviderError::NoSuchEntity(ref cause) => cause,
            DeleteOpenIDConnectProviderError::ServiceFailure(ref cause) => cause,
            DeleteOpenIDConnectProviderError::Validation(ref cause) => cause,
            DeleteOpenIDConnectProviderError::Credentials(ref err) => err.description(),
            DeleteOpenIDConnectProviderError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            DeleteOpenIDConnectProviderError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by DeletePolicy
#[derive(Debug, PartialEq)]
pub enum DeletePolicyError {
    ///<p>The request was rejected because it attempted to delete a resource that has attached subordinate entities. The error message describes these entities.</p>
    DeleteConflict(String),
    ///<p>The request was rejected because an invalid or out-of-range value was supplied for an input parameter.</p>
    InvalidInput(String),
    ///<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>
    LimitExceeded(String),
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl DeletePolicyError {
    pub fn from_body(body: &str) -> DeletePolicyError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "DeleteConflictException" => {
                        DeletePolicyError::DeleteConflict(String::from(parsed_error.message))
                    }
                    "InvalidInputException" => {
                        DeletePolicyError::InvalidInput(String::from(parsed_error.message))
                    }
                    "LimitExceededException" => {
                        DeletePolicyError::LimitExceeded(String::from(parsed_error.message))
                    }
                    "NoSuchEntityException" => {
                        DeletePolicyError::NoSuchEntity(String::from(parsed_error.message))
                    }
                    "ServiceFailureException" => {
                        DeletePolicyError::ServiceFailure(String::from(parsed_error.message))
                    }
                    _ => DeletePolicyError::Unknown(String::from(body)),
                }
            }
            Err(_) => DeletePolicyError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for DeletePolicyError {
    fn from(err: XmlParseError) -> DeletePolicyError {
        let XmlParseError(message) = err;
        DeletePolicyError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for DeletePolicyError {
    fn from(err: CredentialsError) -> DeletePolicyError {
        DeletePolicyError::Credentials(err)
    }
}
impl From<HttpDispatchError> for DeletePolicyError {
    fn from(err: HttpDispatchError) -> DeletePolicyError {
        DeletePolicyError::HttpDispatch(err)
    }
}
impl From<io::Error> for DeletePolicyError {
    fn from(err: io::Error) -> DeletePolicyError {
        DeletePolicyError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for DeletePolicyError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DeletePolicyError {
    fn description(&self) -> &str {
        match *self {
            DeletePolicyError::DeleteConflict(ref cause) => cause,
            DeletePolicyError::InvalidInput(ref cause) => cause,
            DeletePolicyError::LimitExceeded(ref cause) => cause,
            DeletePolicyError::NoSuchEntity(ref cause) => cause,
            DeletePolicyError::ServiceFailure(ref cause) => cause,
            DeletePolicyError::Validation(ref cause) => cause,
            DeletePolicyError::Credentials(ref err) => err.description(),
            DeletePolicyError::HttpDispatch(ref dispatch_error) => dispatch_error.description(),
            DeletePolicyError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by DeletePolicyVersion
#[derive(Debug, PartialEq)]
pub enum DeletePolicyVersionError {
    ///<p>The request was rejected because it attempted to delete a resource that has attached subordinate entities. The error message describes these entities.</p>
    DeleteConflict(String),
    ///<p>The request was rejected because an invalid or out-of-range value was supplied for an input parameter.</p>
    InvalidInput(String),
    ///<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>
    LimitExceeded(String),
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl DeletePolicyVersionError {
    pub fn from_body(body: &str) -> DeletePolicyVersionError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "DeleteConflictException" => {
                        DeletePolicyVersionError::DeleteConflict(String::from(parsed_error.message))
                    }
                    "InvalidInputException" => {
                        DeletePolicyVersionError::InvalidInput(String::from(parsed_error.message))
                    }
                    "LimitExceededException" => {
                        DeletePolicyVersionError::LimitExceeded(String::from(parsed_error.message))
                    }
                    "NoSuchEntityException" => {
                        DeletePolicyVersionError::NoSuchEntity(String::from(parsed_error.message))
                    }
                    "ServiceFailureException" => {
                        DeletePolicyVersionError::ServiceFailure(String::from(parsed_error.message))
                    }
                    _ => DeletePolicyVersionError::Unknown(String::from(body)),
                }
            }
            Err(_) => DeletePolicyVersionError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for DeletePolicyVersionError {
    fn from(err: XmlParseError) -> DeletePolicyVersionError {
        let XmlParseError(message) = err;
        DeletePolicyVersionError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for DeletePolicyVersionError {
    fn from(err: CredentialsError) -> DeletePolicyVersionError {
        DeletePolicyVersionError::Credentials(err)
    }
}
impl From<HttpDispatchError> for DeletePolicyVersionError {
    fn from(err: HttpDispatchError) -> DeletePolicyVersionError {
        DeletePolicyVersionError::HttpDispatch(err)
    }
}
impl From<io::Error> for DeletePolicyVersionError {
    fn from(err: io::Error) -> DeletePolicyVersionError {
        DeletePolicyVersionError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for DeletePolicyVersionError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DeletePolicyVersionError {
    fn description(&self) -> &str {
        match *self {
            DeletePolicyVersionError::DeleteConflict(ref cause) => cause,
            DeletePolicyVersionError::InvalidInput(ref cause) => cause,
            DeletePolicyVersionError::LimitExceeded(ref cause) => cause,
            DeletePolicyVersionError::NoSuchEntity(ref cause) => cause,
            DeletePolicyVersionError::ServiceFailure(ref cause) => cause,
            DeletePolicyVersionError::Validation(ref cause) => cause,
            DeletePolicyVersionError::Credentials(ref err) => err.description(),
            DeletePolicyVersionError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            DeletePolicyVersionError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by DeleteRole
#[derive(Debug, PartialEq)]
pub enum DeleteRoleError {
    ///<p>The request was rejected because it attempted to delete a resource that has attached subordinate entities. The error message describes these entities.</p>
    DeleteConflict(String),
    ///<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>
    LimitExceeded(String),
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    ///<p>The request was rejected because only the service that depends on the service-linked role can modify or delete the role on your behalf. The error message includes the name of the service that depends on this service-linked role. You must request the change through that service.</p>
    UnmodifiableEntity(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl DeleteRoleError {
    pub fn from_body(body: &str) -> DeleteRoleError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "DeleteConflictException" => {
                        DeleteRoleError::DeleteConflict(String::from(parsed_error.message))
                    }
                    "LimitExceededException" => {
                        DeleteRoleError::LimitExceeded(String::from(parsed_error.message))
                    }
                    "NoSuchEntityException" => {
                        DeleteRoleError::NoSuchEntity(String::from(parsed_error.message))
                    }
                    "ServiceFailureException" => {
                        DeleteRoleError::ServiceFailure(String::from(parsed_error.message))
                    }
                    "UnmodifiableEntityException" => {
                        DeleteRoleError::UnmodifiableEntity(String::from(parsed_error.message))
                    }
                    _ => DeleteRoleError::Unknown(String::from(body)),
                }
            }
            Err(_) => DeleteRoleError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for DeleteRoleError {
    fn from(err: XmlParseError) -> DeleteRoleError {
        let XmlParseError(message) = err;
        DeleteRoleError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for DeleteRoleError {
    fn from(err: CredentialsError) -> DeleteRoleError {
        DeleteRoleError::Credentials(err)
    }
}
impl From<HttpDispatchError> for DeleteRoleError {
    fn from(err: HttpDispatchError) -> DeleteRoleError {
        DeleteRoleError::HttpDispatch(err)
    }
}
impl From<io::Error> for DeleteRoleError {
    fn from(err: io::Error) -> DeleteRoleError {
        DeleteRoleError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for DeleteRoleError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DeleteRoleError {
    fn description(&self) -> &str {
        match *self {
            DeleteRoleError::DeleteConflict(ref cause) => cause,
            DeleteRoleError::LimitExceeded(ref cause) => cause,
            DeleteRoleError::NoSuchEntity(ref cause) => cause,
            DeleteRoleError::ServiceFailure(ref cause) => cause,
            DeleteRoleError::UnmodifiableEntity(ref cause) => cause,
            DeleteRoleError::Validation(ref cause) => cause,
            DeleteRoleError::Credentials(ref err) => err.description(),
            DeleteRoleError::HttpDispatch(ref dispatch_error) => dispatch_error.description(),
            DeleteRoleError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by DeleteRolePolicy
#[derive(Debug, PartialEq)]
pub enum DeleteRolePolicyError {
    ///<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>
    LimitExceeded(String),
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    ///<p>The request was rejected because only the service that depends on the service-linked role can modify or delete the role on your behalf. The error message includes the name of the service that depends on this service-linked role. You must request the change through that service.</p>
    UnmodifiableEntity(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl DeleteRolePolicyError {
    pub fn from_body(body: &str) -> DeleteRolePolicyError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "LimitExceededException" => {
                        DeleteRolePolicyError::LimitExceeded(String::from(parsed_error.message))
                    }
                    "NoSuchEntityException" => {
                        DeleteRolePolicyError::NoSuchEntity(String::from(parsed_error.message))
                    }
                    "ServiceFailureException" => {
                        DeleteRolePolicyError::ServiceFailure(String::from(parsed_error.message))
                    }
                    "UnmodifiableEntityException" => DeleteRolePolicyError::UnmodifiableEntity(String::from(parsed_error.message)),
                    _ => DeleteRolePolicyError::Unknown(String::from(body)),
                }
            }
            Err(_) => DeleteRolePolicyError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for DeleteRolePolicyError {
    fn from(err: XmlParseError) -> DeleteRolePolicyError {
        let XmlParseError(message) = err;
        DeleteRolePolicyError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for DeleteRolePolicyError {
    fn from(err: CredentialsError) -> DeleteRolePolicyError {
        DeleteRolePolicyError::Credentials(err)
    }
}
impl From<HttpDispatchError> for DeleteRolePolicyError {
    fn from(err: HttpDispatchError) -> DeleteRolePolicyError {
        DeleteRolePolicyError::HttpDispatch(err)
    }
}
impl From<io::Error> for DeleteRolePolicyError {
    fn from(err: io::Error) -> DeleteRolePolicyError {
        DeleteRolePolicyError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for DeleteRolePolicyError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DeleteRolePolicyError {
    fn description(&self) -> &str {
        match *self {
            DeleteRolePolicyError::LimitExceeded(ref cause) => cause,
            DeleteRolePolicyError::NoSuchEntity(ref cause) => cause,
            DeleteRolePolicyError::ServiceFailure(ref cause) => cause,
            DeleteRolePolicyError::UnmodifiableEntity(ref cause) => cause,
            DeleteRolePolicyError::Validation(ref cause) => cause,
            DeleteRolePolicyError::Credentials(ref err) => err.description(),
            DeleteRolePolicyError::HttpDispatch(ref dispatch_error) => dispatch_error.description(),
            DeleteRolePolicyError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by DeleteSAMLProvider
#[derive(Debug, PartialEq)]
pub enum DeleteSAMLProviderError {
    ///<p>The request was rejected because an invalid or out-of-range value was supplied for an input parameter.</p>
    InvalidInput(String),
    ///<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>
    LimitExceeded(String),
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl DeleteSAMLProviderError {
    pub fn from_body(body: &str) -> DeleteSAMLProviderError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "InvalidInputException" => {
                        DeleteSAMLProviderError::InvalidInput(String::from(parsed_error.message))
                    }
                    "LimitExceededException" => {
                        DeleteSAMLProviderError::LimitExceeded(String::from(parsed_error.message))
                    }
                    "NoSuchEntityException" => {
                        DeleteSAMLProviderError::NoSuchEntity(String::from(parsed_error.message))
                    }
                    "ServiceFailureException" => {
                        DeleteSAMLProviderError::ServiceFailure(String::from(parsed_error.message))
                    }
                    _ => DeleteSAMLProviderError::Unknown(String::from(body)),
                }
            }
            Err(_) => DeleteSAMLProviderError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for DeleteSAMLProviderError {
    fn from(err: XmlParseError) -> DeleteSAMLProviderError {
        let XmlParseError(message) = err;
        DeleteSAMLProviderError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for DeleteSAMLProviderError {
    fn from(err: CredentialsError) -> DeleteSAMLProviderError {
        DeleteSAMLProviderError::Credentials(err)
    }
}
impl From<HttpDispatchError> for DeleteSAMLProviderError {
    fn from(err: HttpDispatchError) -> DeleteSAMLProviderError {
        DeleteSAMLProviderError::HttpDispatch(err)
    }
}
impl From<io::Error> for DeleteSAMLProviderError {
    fn from(err: io::Error) -> DeleteSAMLProviderError {
        DeleteSAMLProviderError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for DeleteSAMLProviderError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DeleteSAMLProviderError {
    fn description(&self) -> &str {
        match *self {
            DeleteSAMLProviderError::InvalidInput(ref cause) => cause,
            DeleteSAMLProviderError::LimitExceeded(ref cause) => cause,
            DeleteSAMLProviderError::NoSuchEntity(ref cause) => cause,
            DeleteSAMLProviderError::ServiceFailure(ref cause) => cause,
            DeleteSAMLProviderError::Validation(ref cause) => cause,
            DeleteSAMLProviderError::Credentials(ref err) => err.description(),
            DeleteSAMLProviderError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            DeleteSAMLProviderError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by DeleteSSHPublicKey
#[derive(Debug, PartialEq)]
pub enum DeleteSSHPublicKeyError {
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl DeleteSSHPublicKeyError {
    pub fn from_body(body: &str) -> DeleteSSHPublicKeyError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "NoSuchEntityException" => {
                        DeleteSSHPublicKeyError::NoSuchEntity(String::from(parsed_error.message))
                    }
                    _ => DeleteSSHPublicKeyError::Unknown(String::from(body)),
                }
            }
            Err(_) => DeleteSSHPublicKeyError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for DeleteSSHPublicKeyError {
    fn from(err: XmlParseError) -> DeleteSSHPublicKeyError {
        let XmlParseError(message) = err;
        DeleteSSHPublicKeyError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for DeleteSSHPublicKeyError {
    fn from(err: CredentialsError) -> DeleteSSHPublicKeyError {
        DeleteSSHPublicKeyError::Credentials(err)
    }
}
impl From<HttpDispatchError> for DeleteSSHPublicKeyError {
    fn from(err: HttpDispatchError) -> DeleteSSHPublicKeyError {
        DeleteSSHPublicKeyError::HttpDispatch(err)
    }
}
impl From<io::Error> for DeleteSSHPublicKeyError {
    fn from(err: io::Error) -> DeleteSSHPublicKeyError {
        DeleteSSHPublicKeyError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for DeleteSSHPublicKeyError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DeleteSSHPublicKeyError {
    fn description(&self) -> &str {
        match *self {
            DeleteSSHPublicKeyError::NoSuchEntity(ref cause) => cause,
            DeleteSSHPublicKeyError::Validation(ref cause) => cause,
            DeleteSSHPublicKeyError::Credentials(ref err) => err.description(),
            DeleteSSHPublicKeyError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            DeleteSSHPublicKeyError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by DeleteServerCertificate
#[derive(Debug, PartialEq)]
pub enum DeleteServerCertificateError {
    ///<p>The request was rejected because it attempted to delete a resource that has attached subordinate entities. The error message describes these entities.</p>
    DeleteConflict(String),
    ///<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>
    LimitExceeded(String),
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl DeleteServerCertificateError {
    pub fn from_body(body: &str) -> DeleteServerCertificateError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "DeleteConflictException" => DeleteServerCertificateError::DeleteConflict(String::from(parsed_error.message)),
                    "LimitExceededException" => DeleteServerCertificateError::LimitExceeded(String::from(parsed_error.message)),
                    "NoSuchEntityException" => DeleteServerCertificateError::NoSuchEntity(String::from(parsed_error.message)),
                    "ServiceFailureException" => DeleteServerCertificateError::ServiceFailure(String::from(parsed_error.message)),
                    _ => DeleteServerCertificateError::Unknown(String::from(body)),
                }
            }
            Err(_) => DeleteServerCertificateError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for DeleteServerCertificateError {
    fn from(err: XmlParseError) -> DeleteServerCertificateError {
        let XmlParseError(message) = err;
        DeleteServerCertificateError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for DeleteServerCertificateError {
    fn from(err: CredentialsError) -> DeleteServerCertificateError {
        DeleteServerCertificateError::Credentials(err)
    }
}
impl From<HttpDispatchError> for DeleteServerCertificateError {
    fn from(err: HttpDispatchError) -> DeleteServerCertificateError {
        DeleteServerCertificateError::HttpDispatch(err)
    }
}
impl From<io::Error> for DeleteServerCertificateError {
    fn from(err: io::Error) -> DeleteServerCertificateError {
        DeleteServerCertificateError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for DeleteServerCertificateError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DeleteServerCertificateError {
    fn description(&self) -> &str {
        match *self {
            DeleteServerCertificateError::DeleteConflict(ref cause) => cause,
            DeleteServerCertificateError::LimitExceeded(ref cause) => cause,
            DeleteServerCertificateError::NoSuchEntity(ref cause) => cause,
            DeleteServerCertificateError::ServiceFailure(ref cause) => cause,
            DeleteServerCertificateError::Validation(ref cause) => cause,
            DeleteServerCertificateError::Credentials(ref err) => err.description(),
            DeleteServerCertificateError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            DeleteServerCertificateError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by DeleteServiceSpecificCredential
#[derive(Debug, PartialEq)]
pub enum DeleteServiceSpecificCredentialError {
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl DeleteServiceSpecificCredentialError {
    pub fn from_body(body: &str) -> DeleteServiceSpecificCredentialError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "NoSuchEntityException" => DeleteServiceSpecificCredentialError::NoSuchEntity(String::from(parsed_error.message)),
                    _ => DeleteServiceSpecificCredentialError::Unknown(String::from(body)),
                }
            }
            Err(_) => DeleteServiceSpecificCredentialError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for DeleteServiceSpecificCredentialError {
    fn from(err: XmlParseError) -> DeleteServiceSpecificCredentialError {
        let XmlParseError(message) = err;
        DeleteServiceSpecificCredentialError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for DeleteServiceSpecificCredentialError {
    fn from(err: CredentialsError) -> DeleteServiceSpecificCredentialError {
        DeleteServiceSpecificCredentialError::Credentials(err)
    }
}
impl From<HttpDispatchError> for DeleteServiceSpecificCredentialError {
    fn from(err: HttpDispatchError) -> DeleteServiceSpecificCredentialError {
        DeleteServiceSpecificCredentialError::HttpDispatch(err)
    }
}
impl From<io::Error> for DeleteServiceSpecificCredentialError {
    fn from(err: io::Error) -> DeleteServiceSpecificCredentialError {
        DeleteServiceSpecificCredentialError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for DeleteServiceSpecificCredentialError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DeleteServiceSpecificCredentialError {
    fn description(&self) -> &str {
        match *self {
            DeleteServiceSpecificCredentialError::NoSuchEntity(ref cause) => cause,
            DeleteServiceSpecificCredentialError::Validation(ref cause) => cause,
            DeleteServiceSpecificCredentialError::Credentials(ref err) => err.description(),
            DeleteServiceSpecificCredentialError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            DeleteServiceSpecificCredentialError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by DeleteSigningCertificate
#[derive(Debug, PartialEq)]
pub enum DeleteSigningCertificateError {
    ///<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>
    LimitExceeded(String),
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl DeleteSigningCertificateError {
    pub fn from_body(body: &str) -> DeleteSigningCertificateError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "LimitExceededException" => DeleteSigningCertificateError::LimitExceeded(String::from(parsed_error.message)),
                    "NoSuchEntityException" => DeleteSigningCertificateError::NoSuchEntity(String::from(parsed_error.message)),
                    "ServiceFailureException" => DeleteSigningCertificateError::ServiceFailure(String::from(parsed_error.message)),
                    _ => DeleteSigningCertificateError::Unknown(String::from(body)),
                }
            }
            Err(_) => DeleteSigningCertificateError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for DeleteSigningCertificateError {
    fn from(err: XmlParseError) -> DeleteSigningCertificateError {
        let XmlParseError(message) = err;
        DeleteSigningCertificateError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for DeleteSigningCertificateError {
    fn from(err: CredentialsError) -> DeleteSigningCertificateError {
        DeleteSigningCertificateError::Credentials(err)
    }
}
impl From<HttpDispatchError> for DeleteSigningCertificateError {
    fn from(err: HttpDispatchError) -> DeleteSigningCertificateError {
        DeleteSigningCertificateError::HttpDispatch(err)
    }
}
impl From<io::Error> for DeleteSigningCertificateError {
    fn from(err: io::Error) -> DeleteSigningCertificateError {
        DeleteSigningCertificateError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for DeleteSigningCertificateError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DeleteSigningCertificateError {
    fn description(&self) -> &str {
        match *self {
            DeleteSigningCertificateError::LimitExceeded(ref cause) => cause,
            DeleteSigningCertificateError::NoSuchEntity(ref cause) => cause,
            DeleteSigningCertificateError::ServiceFailure(ref cause) => cause,
            DeleteSigningCertificateError::Validation(ref cause) => cause,
            DeleteSigningCertificateError::Credentials(ref err) => err.description(),
            DeleteSigningCertificateError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            DeleteSigningCertificateError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by DeleteUser
#[derive(Debug, PartialEq)]
pub enum DeleteUserError {
    ///<p>The request was rejected because it attempted to delete a resource that has attached subordinate entities. The error message describes these entities.</p>
    DeleteConflict(String),
    ///<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>
    LimitExceeded(String),
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl DeleteUserError {
    pub fn from_body(body: &str) -> DeleteUserError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "DeleteConflictException" => {
                        DeleteUserError::DeleteConflict(String::from(parsed_error.message))
                    }
                    "LimitExceededException" => {
                        DeleteUserError::LimitExceeded(String::from(parsed_error.message))
                    }
                    "NoSuchEntityException" => {
                        DeleteUserError::NoSuchEntity(String::from(parsed_error.message))
                    }
                    "ServiceFailureException" => {
                        DeleteUserError::ServiceFailure(String::from(parsed_error.message))
                    }
                    _ => DeleteUserError::Unknown(String::from(body)),
                }
            }
            Err(_) => DeleteUserError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for DeleteUserError {
    fn from(err: XmlParseError) -> DeleteUserError {
        let XmlParseError(message) = err;
        DeleteUserError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for DeleteUserError {
    fn from(err: CredentialsError) -> DeleteUserError {
        DeleteUserError::Credentials(err)
    }
}
impl From<HttpDispatchError> for DeleteUserError {
    fn from(err: HttpDispatchError) -> DeleteUserError {
        DeleteUserError::HttpDispatch(err)
    }
}
impl From<io::Error> for DeleteUserError {
    fn from(err: io::Error) -> DeleteUserError {
        DeleteUserError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for DeleteUserError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DeleteUserError {
    fn description(&self) -> &str {
        match *self {
            DeleteUserError::DeleteConflict(ref cause) => cause,
            DeleteUserError::LimitExceeded(ref cause) => cause,
            DeleteUserError::NoSuchEntity(ref cause) => cause,
            DeleteUserError::ServiceFailure(ref cause) => cause,
            DeleteUserError::Validation(ref cause) => cause,
            DeleteUserError::Credentials(ref err) => err.description(),
            DeleteUserError::HttpDispatch(ref dispatch_error) => dispatch_error.description(),
            DeleteUserError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by DeleteUserPolicy
#[derive(Debug, PartialEq)]
pub enum DeleteUserPolicyError {
    ///<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>
    LimitExceeded(String),
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl DeleteUserPolicyError {
    pub fn from_body(body: &str) -> DeleteUserPolicyError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "LimitExceededException" => {
                        DeleteUserPolicyError::LimitExceeded(String::from(parsed_error.message))
                    }
                    "NoSuchEntityException" => {
                        DeleteUserPolicyError::NoSuchEntity(String::from(parsed_error.message))
                    }
                    "ServiceFailureException" => {
                        DeleteUserPolicyError::ServiceFailure(String::from(parsed_error.message))
                    }
                    _ => DeleteUserPolicyError::Unknown(String::from(body)),
                }
            }
            Err(_) => DeleteUserPolicyError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for DeleteUserPolicyError {
    fn from(err: XmlParseError) -> DeleteUserPolicyError {
        let XmlParseError(message) = err;
        DeleteUserPolicyError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for DeleteUserPolicyError {
    fn from(err: CredentialsError) -> DeleteUserPolicyError {
        DeleteUserPolicyError::Credentials(err)
    }
}
impl From<HttpDispatchError> for DeleteUserPolicyError {
    fn from(err: HttpDispatchError) -> DeleteUserPolicyError {
        DeleteUserPolicyError::HttpDispatch(err)
    }
}
impl From<io::Error> for DeleteUserPolicyError {
    fn from(err: io::Error) -> DeleteUserPolicyError {
        DeleteUserPolicyError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for DeleteUserPolicyError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DeleteUserPolicyError {
    fn description(&self) -> &str {
        match *self {
            DeleteUserPolicyError::LimitExceeded(ref cause) => cause,
            DeleteUserPolicyError::NoSuchEntity(ref cause) => cause,
            DeleteUserPolicyError::ServiceFailure(ref cause) => cause,
            DeleteUserPolicyError::Validation(ref cause) => cause,
            DeleteUserPolicyError::Credentials(ref err) => err.description(),
            DeleteUserPolicyError::HttpDispatch(ref dispatch_error) => dispatch_error.description(),
            DeleteUserPolicyError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by DeleteVirtualMFADevice
#[derive(Debug, PartialEq)]
pub enum DeleteVirtualMFADeviceError {
    ///<p>The request was rejected because it attempted to delete a resource that has attached subordinate entities. The error message describes these entities.</p>
    DeleteConflict(String),
    ///<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>
    LimitExceeded(String),
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl DeleteVirtualMFADeviceError {
    pub fn from_body(body: &str) -> DeleteVirtualMFADeviceError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "DeleteConflictException" => DeleteVirtualMFADeviceError::DeleteConflict(String::from(parsed_error.message)),
                    "LimitExceededException" => DeleteVirtualMFADeviceError::LimitExceeded(String::from(parsed_error.message)),
                    "NoSuchEntityException" => DeleteVirtualMFADeviceError::NoSuchEntity(String::from(parsed_error.message)),
                    "ServiceFailureException" => DeleteVirtualMFADeviceError::ServiceFailure(String::from(parsed_error.message)),
                    _ => DeleteVirtualMFADeviceError::Unknown(String::from(body)),
                }
            }
            Err(_) => DeleteVirtualMFADeviceError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for DeleteVirtualMFADeviceError {
    fn from(err: XmlParseError) -> DeleteVirtualMFADeviceError {
        let XmlParseError(message) = err;
        DeleteVirtualMFADeviceError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for DeleteVirtualMFADeviceError {
    fn from(err: CredentialsError) -> DeleteVirtualMFADeviceError {
        DeleteVirtualMFADeviceError::Credentials(err)
    }
}
impl From<HttpDispatchError> for DeleteVirtualMFADeviceError {
    fn from(err: HttpDispatchError) -> DeleteVirtualMFADeviceError {
        DeleteVirtualMFADeviceError::HttpDispatch(err)
    }
}
impl From<io::Error> for DeleteVirtualMFADeviceError {
    fn from(err: io::Error) -> DeleteVirtualMFADeviceError {
        DeleteVirtualMFADeviceError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for DeleteVirtualMFADeviceError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DeleteVirtualMFADeviceError {
    fn description(&self) -> &str {
        match *self {
            DeleteVirtualMFADeviceError::DeleteConflict(ref cause) => cause,
            DeleteVirtualMFADeviceError::LimitExceeded(ref cause) => cause,
            DeleteVirtualMFADeviceError::NoSuchEntity(ref cause) => cause,
            DeleteVirtualMFADeviceError::ServiceFailure(ref cause) => cause,
            DeleteVirtualMFADeviceError::Validation(ref cause) => cause,
            DeleteVirtualMFADeviceError::Credentials(ref err) => err.description(),
            DeleteVirtualMFADeviceError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            DeleteVirtualMFADeviceError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by DetachGroupPolicy
#[derive(Debug, PartialEq)]
pub enum DetachGroupPolicyError {
    ///<p>The request was rejected because an invalid or out-of-range value was supplied for an input parameter.</p>
    InvalidInput(String),
    ///<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>
    LimitExceeded(String),
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl DetachGroupPolicyError {
    pub fn from_body(body: &str) -> DetachGroupPolicyError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "InvalidInputException" => {
                        DetachGroupPolicyError::InvalidInput(String::from(parsed_error.message))
                    }
                    "LimitExceededException" => {
                        DetachGroupPolicyError::LimitExceeded(String::from(parsed_error.message))
                    }
                    "NoSuchEntityException" => {
                        DetachGroupPolicyError::NoSuchEntity(String::from(parsed_error.message))
                    }
                    "ServiceFailureException" => {
                        DetachGroupPolicyError::ServiceFailure(String::from(parsed_error.message))
                    }
                    _ => DetachGroupPolicyError::Unknown(String::from(body)),
                }
            }
            Err(_) => DetachGroupPolicyError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for DetachGroupPolicyError {
    fn from(err: XmlParseError) -> DetachGroupPolicyError {
        let XmlParseError(message) = err;
        DetachGroupPolicyError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for DetachGroupPolicyError {
    fn from(err: CredentialsError) -> DetachGroupPolicyError {
        DetachGroupPolicyError::Credentials(err)
    }
}
impl From<HttpDispatchError> for DetachGroupPolicyError {
    fn from(err: HttpDispatchError) -> DetachGroupPolicyError {
        DetachGroupPolicyError::HttpDispatch(err)
    }
}
impl From<io::Error> for DetachGroupPolicyError {
    fn from(err: io::Error) -> DetachGroupPolicyError {
        DetachGroupPolicyError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for DetachGroupPolicyError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DetachGroupPolicyError {
    fn description(&self) -> &str {
        match *self {
            DetachGroupPolicyError::InvalidInput(ref cause) => cause,
            DetachGroupPolicyError::LimitExceeded(ref cause) => cause,
            DetachGroupPolicyError::NoSuchEntity(ref cause) => cause,
            DetachGroupPolicyError::ServiceFailure(ref cause) => cause,
            DetachGroupPolicyError::Validation(ref cause) => cause,
            DetachGroupPolicyError::Credentials(ref err) => err.description(),
            DetachGroupPolicyError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            DetachGroupPolicyError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by DetachRolePolicy
#[derive(Debug, PartialEq)]
pub enum DetachRolePolicyError {
    ///<p>The request was rejected because an invalid or out-of-range value was supplied for an input parameter.</p>
    InvalidInput(String),
    ///<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>
    LimitExceeded(String),
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    ///<p>The request was rejected because only the service that depends on the service-linked role can modify or delete the role on your behalf. The error message includes the name of the service that depends on this service-linked role. You must request the change through that service.</p>
    UnmodifiableEntity(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl DetachRolePolicyError {
    pub fn from_body(body: &str) -> DetachRolePolicyError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "InvalidInputException" => {
                        DetachRolePolicyError::InvalidInput(String::from(parsed_error.message))
                    }
                    "LimitExceededException" => {
                        DetachRolePolicyError::LimitExceeded(String::from(parsed_error.message))
                    }
                    "NoSuchEntityException" => {
                        DetachRolePolicyError::NoSuchEntity(String::from(parsed_error.message))
                    }
                    "ServiceFailureException" => {
                        DetachRolePolicyError::ServiceFailure(String::from(parsed_error.message))
                    }
                    "UnmodifiableEntityException" => DetachRolePolicyError::UnmodifiableEntity(String::from(parsed_error.message)),
                    _ => DetachRolePolicyError::Unknown(String::from(body)),
                }
            }
            Err(_) => DetachRolePolicyError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for DetachRolePolicyError {
    fn from(err: XmlParseError) -> DetachRolePolicyError {
        let XmlParseError(message) = err;
        DetachRolePolicyError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for DetachRolePolicyError {
    fn from(err: CredentialsError) -> DetachRolePolicyError {
        DetachRolePolicyError::Credentials(err)
    }
}
impl From<HttpDispatchError> for DetachRolePolicyError {
    fn from(err: HttpDispatchError) -> DetachRolePolicyError {
        DetachRolePolicyError::HttpDispatch(err)
    }
}
impl From<io::Error> for DetachRolePolicyError {
    fn from(err: io::Error) -> DetachRolePolicyError {
        DetachRolePolicyError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for DetachRolePolicyError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DetachRolePolicyError {
    fn description(&self) -> &str {
        match *self {
            DetachRolePolicyError::InvalidInput(ref cause) => cause,
            DetachRolePolicyError::LimitExceeded(ref cause) => cause,
            DetachRolePolicyError::NoSuchEntity(ref cause) => cause,
            DetachRolePolicyError::ServiceFailure(ref cause) => cause,
            DetachRolePolicyError::UnmodifiableEntity(ref cause) => cause,
            DetachRolePolicyError::Validation(ref cause) => cause,
            DetachRolePolicyError::Credentials(ref err) => err.description(),
            DetachRolePolicyError::HttpDispatch(ref dispatch_error) => dispatch_error.description(),
            DetachRolePolicyError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by DetachUserPolicy
#[derive(Debug, PartialEq)]
pub enum DetachUserPolicyError {
    ///<p>The request was rejected because an invalid or out-of-range value was supplied for an input parameter.</p>
    InvalidInput(String),
    ///<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>
    LimitExceeded(String),
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl DetachUserPolicyError {
    pub fn from_body(body: &str) -> DetachUserPolicyError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "InvalidInputException" => {
                        DetachUserPolicyError::InvalidInput(String::from(parsed_error.message))
                    }
                    "LimitExceededException" => {
                        DetachUserPolicyError::LimitExceeded(String::from(parsed_error.message))
                    }
                    "NoSuchEntityException" => {
                        DetachUserPolicyError::NoSuchEntity(String::from(parsed_error.message))
                    }
                    "ServiceFailureException" => {
                        DetachUserPolicyError::ServiceFailure(String::from(parsed_error.message))
                    }
                    _ => DetachUserPolicyError::Unknown(String::from(body)),
                }
            }
            Err(_) => DetachUserPolicyError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for DetachUserPolicyError {
    fn from(err: XmlParseError) -> DetachUserPolicyError {
        let XmlParseError(message) = err;
        DetachUserPolicyError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for DetachUserPolicyError {
    fn from(err: CredentialsError) -> DetachUserPolicyError {
        DetachUserPolicyError::Credentials(err)
    }
}
impl From<HttpDispatchError> for DetachUserPolicyError {
    fn from(err: HttpDispatchError) -> DetachUserPolicyError {
        DetachUserPolicyError::HttpDispatch(err)
    }
}
impl From<io::Error> for DetachUserPolicyError {
    fn from(err: io::Error) -> DetachUserPolicyError {
        DetachUserPolicyError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for DetachUserPolicyError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DetachUserPolicyError {
    fn description(&self) -> &str {
        match *self {
            DetachUserPolicyError::InvalidInput(ref cause) => cause,
            DetachUserPolicyError::LimitExceeded(ref cause) => cause,
            DetachUserPolicyError::NoSuchEntity(ref cause) => cause,
            DetachUserPolicyError::ServiceFailure(ref cause) => cause,
            DetachUserPolicyError::Validation(ref cause) => cause,
            DetachUserPolicyError::Credentials(ref err) => err.description(),
            DetachUserPolicyError::HttpDispatch(ref dispatch_error) => dispatch_error.description(),
            DetachUserPolicyError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by EnableMFADevice
#[derive(Debug, PartialEq)]
pub enum EnableMFADeviceError {
    ///<p>The request was rejected because it attempted to create a resource that already exists.</p>
    EntityAlreadyExists(String),
    ///<p>The request was rejected because it referenced an entity that is temporarily unmodifiable, such as a user name that was deleted and then recreated. The error indicates that the request is likely to succeed if you try again after waiting several minutes. The error message describes the entity.</p>
    EntityTemporarilyUnmodifiable(String),
    ///<p>The request was rejected because the authentication code was not recognized. The error message describes the specific error.</p>
    InvalidAuthenticationCode(String),
    ///<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>
    LimitExceeded(String),
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl EnableMFADeviceError {
    pub fn from_body(body: &str) -> EnableMFADeviceError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "EntityAlreadyExistsException" => EnableMFADeviceError::EntityAlreadyExists(String::from(parsed_error.message)),
                    "EntityTemporarilyUnmodifiableException" => EnableMFADeviceError::EntityTemporarilyUnmodifiable(String::from(parsed_error.message)),
                    "InvalidAuthenticationCodeException" => EnableMFADeviceError::InvalidAuthenticationCode(String::from(parsed_error.message)),
                    "LimitExceededException" => {
                        EnableMFADeviceError::LimitExceeded(String::from(parsed_error.message))
                    }
                    "NoSuchEntityException" => {
                        EnableMFADeviceError::NoSuchEntity(String::from(parsed_error.message))
                    }
                    "ServiceFailureException" => {
                        EnableMFADeviceError::ServiceFailure(String::from(parsed_error.message))
                    }
                    _ => EnableMFADeviceError::Unknown(String::from(body)),
                }
            }
            Err(_) => EnableMFADeviceError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for EnableMFADeviceError {
    fn from(err: XmlParseError) -> EnableMFADeviceError {
        let XmlParseError(message) = err;
        EnableMFADeviceError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for EnableMFADeviceError {
    fn from(err: CredentialsError) -> EnableMFADeviceError {
        EnableMFADeviceError::Credentials(err)
    }
}
impl From<HttpDispatchError> for EnableMFADeviceError {
    fn from(err: HttpDispatchError) -> EnableMFADeviceError {
        EnableMFADeviceError::HttpDispatch(err)
    }
}
impl From<io::Error> for EnableMFADeviceError {
    fn from(err: io::Error) -> EnableMFADeviceError {
        EnableMFADeviceError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for EnableMFADeviceError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for EnableMFADeviceError {
    fn description(&self) -> &str {
        match *self {
            EnableMFADeviceError::EntityAlreadyExists(ref cause) => cause,
            EnableMFADeviceError::EntityTemporarilyUnmodifiable(ref cause) => cause,
            EnableMFADeviceError::InvalidAuthenticationCode(ref cause) => cause,
            EnableMFADeviceError::LimitExceeded(ref cause) => cause,
            EnableMFADeviceError::NoSuchEntity(ref cause) => cause,
            EnableMFADeviceError::ServiceFailure(ref cause) => cause,
            EnableMFADeviceError::Validation(ref cause) => cause,
            EnableMFADeviceError::Credentials(ref err) => err.description(),
            EnableMFADeviceError::HttpDispatch(ref dispatch_error) => dispatch_error.description(),
            EnableMFADeviceError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by GenerateCredentialReport
#[derive(Debug, PartialEq)]
pub enum GenerateCredentialReportError {
    ///<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>
    LimitExceeded(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl GenerateCredentialReportError {
    pub fn from_body(body: &str) -> GenerateCredentialReportError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "LimitExceededException" => GenerateCredentialReportError::LimitExceeded(String::from(parsed_error.message)),
                    "ServiceFailureException" => GenerateCredentialReportError::ServiceFailure(String::from(parsed_error.message)),
                    _ => GenerateCredentialReportError::Unknown(String::from(body)),
                }
            }
            Err(_) => GenerateCredentialReportError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for GenerateCredentialReportError {
    fn from(err: XmlParseError) -> GenerateCredentialReportError {
        let XmlParseError(message) = err;
        GenerateCredentialReportError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for GenerateCredentialReportError {
    fn from(err: CredentialsError) -> GenerateCredentialReportError {
        GenerateCredentialReportError::Credentials(err)
    }
}
impl From<HttpDispatchError> for GenerateCredentialReportError {
    fn from(err: HttpDispatchError) -> GenerateCredentialReportError {
        GenerateCredentialReportError::HttpDispatch(err)
    }
}
impl From<io::Error> for GenerateCredentialReportError {
    fn from(err: io::Error) -> GenerateCredentialReportError {
        GenerateCredentialReportError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for GenerateCredentialReportError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for GenerateCredentialReportError {
    fn description(&self) -> &str {
        match *self {
            GenerateCredentialReportError::LimitExceeded(ref cause) => cause,
            GenerateCredentialReportError::ServiceFailure(ref cause) => cause,
            GenerateCredentialReportError::Validation(ref cause) => cause,
            GenerateCredentialReportError::Credentials(ref err) => err.description(),
            GenerateCredentialReportError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            GenerateCredentialReportError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by GetAccessKeyLastUsed
#[derive(Debug, PartialEq)]
pub enum GetAccessKeyLastUsedError {
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl GetAccessKeyLastUsedError {
    pub fn from_body(body: &str) -> GetAccessKeyLastUsedError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "NoSuchEntityException" => {
                        GetAccessKeyLastUsedError::NoSuchEntity(String::from(parsed_error.message))
                    }
                    _ => GetAccessKeyLastUsedError::Unknown(String::from(body)),
                }
            }
            Err(_) => GetAccessKeyLastUsedError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for GetAccessKeyLastUsedError {
    fn from(err: XmlParseError) -> GetAccessKeyLastUsedError {
        let XmlParseError(message) = err;
        GetAccessKeyLastUsedError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for GetAccessKeyLastUsedError {
    fn from(err: CredentialsError) -> GetAccessKeyLastUsedError {
        GetAccessKeyLastUsedError::Credentials(err)
    }
}
impl From<HttpDispatchError> for GetAccessKeyLastUsedError {
    fn from(err: HttpDispatchError) -> GetAccessKeyLastUsedError {
        GetAccessKeyLastUsedError::HttpDispatch(err)
    }
}
impl From<io::Error> for GetAccessKeyLastUsedError {
    fn from(err: io::Error) -> GetAccessKeyLastUsedError {
        GetAccessKeyLastUsedError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for GetAccessKeyLastUsedError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for GetAccessKeyLastUsedError {
    fn description(&self) -> &str {
        match *self {
            GetAccessKeyLastUsedError::NoSuchEntity(ref cause) => cause,
            GetAccessKeyLastUsedError::Validation(ref cause) => cause,
            GetAccessKeyLastUsedError::Credentials(ref err) => err.description(),
            GetAccessKeyLastUsedError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            GetAccessKeyLastUsedError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by GetAccountAuthorizationDetails
#[derive(Debug, PartialEq)]
pub enum GetAccountAuthorizationDetailsError {
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl GetAccountAuthorizationDetailsError {
    pub fn from_body(body: &str) -> GetAccountAuthorizationDetailsError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "ServiceFailureException" => GetAccountAuthorizationDetailsError::ServiceFailure(String::from(parsed_error.message)),
                    _ => GetAccountAuthorizationDetailsError::Unknown(String::from(body)),
                }
            }
            Err(_) => GetAccountAuthorizationDetailsError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for GetAccountAuthorizationDetailsError {
    fn from(err: XmlParseError) -> GetAccountAuthorizationDetailsError {
        let XmlParseError(message) = err;
        GetAccountAuthorizationDetailsError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for GetAccountAuthorizationDetailsError {
    fn from(err: CredentialsError) -> GetAccountAuthorizationDetailsError {
        GetAccountAuthorizationDetailsError::Credentials(err)
    }
}
impl From<HttpDispatchError> for GetAccountAuthorizationDetailsError {
    fn from(err: HttpDispatchError) -> GetAccountAuthorizationDetailsError {
        GetAccountAuthorizationDetailsError::HttpDispatch(err)
    }
}
impl From<io::Error> for GetAccountAuthorizationDetailsError {
    fn from(err: io::Error) -> GetAccountAuthorizationDetailsError {
        GetAccountAuthorizationDetailsError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for GetAccountAuthorizationDetailsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for GetAccountAuthorizationDetailsError {
    fn description(&self) -> &str {
        match *self {
            GetAccountAuthorizationDetailsError::ServiceFailure(ref cause) => cause,
            GetAccountAuthorizationDetailsError::Validation(ref cause) => cause,
            GetAccountAuthorizationDetailsError::Credentials(ref err) => err.description(),
            GetAccountAuthorizationDetailsError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            GetAccountAuthorizationDetailsError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by GetAccountPasswordPolicy
#[derive(Debug, PartialEq)]
pub enum GetAccountPasswordPolicyError {
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl GetAccountPasswordPolicyError {
    pub fn from_body(body: &str) -> GetAccountPasswordPolicyError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "NoSuchEntityException" => GetAccountPasswordPolicyError::NoSuchEntity(String::from(parsed_error.message)),
                    "ServiceFailureException" => GetAccountPasswordPolicyError::ServiceFailure(String::from(parsed_error.message)),
                    _ => GetAccountPasswordPolicyError::Unknown(String::from(body)),
                }
            }
            Err(_) => GetAccountPasswordPolicyError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for GetAccountPasswordPolicyError {
    fn from(err: XmlParseError) -> GetAccountPasswordPolicyError {
        let XmlParseError(message) = err;
        GetAccountPasswordPolicyError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for GetAccountPasswordPolicyError {
    fn from(err: CredentialsError) -> GetAccountPasswordPolicyError {
        GetAccountPasswordPolicyError::Credentials(err)
    }
}
impl From<HttpDispatchError> for GetAccountPasswordPolicyError {
    fn from(err: HttpDispatchError) -> GetAccountPasswordPolicyError {
        GetAccountPasswordPolicyError::HttpDispatch(err)
    }
}
impl From<io::Error> for GetAccountPasswordPolicyError {
    fn from(err: io::Error) -> GetAccountPasswordPolicyError {
        GetAccountPasswordPolicyError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for GetAccountPasswordPolicyError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for GetAccountPasswordPolicyError {
    fn description(&self) -> &str {
        match *self {
            GetAccountPasswordPolicyError::NoSuchEntity(ref cause) => cause,
            GetAccountPasswordPolicyError::ServiceFailure(ref cause) => cause,
            GetAccountPasswordPolicyError::Validation(ref cause) => cause,
            GetAccountPasswordPolicyError::Credentials(ref err) => err.description(),
            GetAccountPasswordPolicyError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            GetAccountPasswordPolicyError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by GetAccountSummary
#[derive(Debug, PartialEq)]
pub enum GetAccountSummaryError {
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl GetAccountSummaryError {
    pub fn from_body(body: &str) -> GetAccountSummaryError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "ServiceFailureException" => {
                        GetAccountSummaryError::ServiceFailure(String::from(parsed_error.message))
                    }
                    _ => GetAccountSummaryError::Unknown(String::from(body)),
                }
            }
            Err(_) => GetAccountSummaryError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for GetAccountSummaryError {
    fn from(err: XmlParseError) -> GetAccountSummaryError {
        let XmlParseError(message) = err;
        GetAccountSummaryError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for GetAccountSummaryError {
    fn from(err: CredentialsError) -> GetAccountSummaryError {
        GetAccountSummaryError::Credentials(err)
    }
}
impl From<HttpDispatchError> for GetAccountSummaryError {
    fn from(err: HttpDispatchError) -> GetAccountSummaryError {
        GetAccountSummaryError::HttpDispatch(err)
    }
}
impl From<io::Error> for GetAccountSummaryError {
    fn from(err: io::Error) -> GetAccountSummaryError {
        GetAccountSummaryError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for GetAccountSummaryError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for GetAccountSummaryError {
    fn description(&self) -> &str {
        match *self {
            GetAccountSummaryError::ServiceFailure(ref cause) => cause,
            GetAccountSummaryError::Validation(ref cause) => cause,
            GetAccountSummaryError::Credentials(ref err) => err.description(),
            GetAccountSummaryError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            GetAccountSummaryError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by GetContextKeysForCustomPolicy
#[derive(Debug, PartialEq)]
pub enum GetContextKeysForCustomPolicyError {
    ///<p>The request was rejected because an invalid or out-of-range value was supplied for an input parameter.</p>
    InvalidInput(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl GetContextKeysForCustomPolicyError {
    pub fn from_body(body: &str) -> GetContextKeysForCustomPolicyError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "InvalidInputException" => GetContextKeysForCustomPolicyError::InvalidInput(String::from(parsed_error.message)),
                    _ => GetContextKeysForCustomPolicyError::Unknown(String::from(body)),
                }
            }
            Err(_) => GetContextKeysForCustomPolicyError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for GetContextKeysForCustomPolicyError {
    fn from(err: XmlParseError) -> GetContextKeysForCustomPolicyError {
        let XmlParseError(message) = err;
        GetContextKeysForCustomPolicyError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for GetContextKeysForCustomPolicyError {
    fn from(err: CredentialsError) -> GetContextKeysForCustomPolicyError {
        GetContextKeysForCustomPolicyError::Credentials(err)
    }
}
impl From<HttpDispatchError> for GetContextKeysForCustomPolicyError {
    fn from(err: HttpDispatchError) -> GetContextKeysForCustomPolicyError {
        GetContextKeysForCustomPolicyError::HttpDispatch(err)
    }
}
impl From<io::Error> for GetContextKeysForCustomPolicyError {
    fn from(err: io::Error) -> GetContextKeysForCustomPolicyError {
        GetContextKeysForCustomPolicyError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for GetContextKeysForCustomPolicyError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for GetContextKeysForCustomPolicyError {
    fn description(&self) -> &str {
        match *self {
            GetContextKeysForCustomPolicyError::InvalidInput(ref cause) => cause,
            GetContextKeysForCustomPolicyError::Validation(ref cause) => cause,
            GetContextKeysForCustomPolicyError::Credentials(ref err) => err.description(),
            GetContextKeysForCustomPolicyError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            GetContextKeysForCustomPolicyError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by GetContextKeysForPrincipalPolicy
#[derive(Debug, PartialEq)]
pub enum GetContextKeysForPrincipalPolicyError {
    ///<p>The request was rejected because an invalid or out-of-range value was supplied for an input parameter.</p>
    InvalidInput(String),
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl GetContextKeysForPrincipalPolicyError {
    pub fn from_body(body: &str) -> GetContextKeysForPrincipalPolicyError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "InvalidInputException" => GetContextKeysForPrincipalPolicyError::InvalidInput(String::from(parsed_error.message)),
                    "NoSuchEntityException" => GetContextKeysForPrincipalPolicyError::NoSuchEntity(String::from(parsed_error.message)),
                    _ => GetContextKeysForPrincipalPolicyError::Unknown(String::from(body)),
                }
            }
            Err(_) => GetContextKeysForPrincipalPolicyError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for GetContextKeysForPrincipalPolicyError {
    fn from(err: XmlParseError) -> GetContextKeysForPrincipalPolicyError {
        let XmlParseError(message) = err;
        GetContextKeysForPrincipalPolicyError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for GetContextKeysForPrincipalPolicyError {
    fn from(err: CredentialsError) -> GetContextKeysForPrincipalPolicyError {
        GetContextKeysForPrincipalPolicyError::Credentials(err)
    }
}
impl From<HttpDispatchError> for GetContextKeysForPrincipalPolicyError {
    fn from(err: HttpDispatchError) -> GetContextKeysForPrincipalPolicyError {
        GetContextKeysForPrincipalPolicyError::HttpDispatch(err)
    }
}
impl From<io::Error> for GetContextKeysForPrincipalPolicyError {
    fn from(err: io::Error) -> GetContextKeysForPrincipalPolicyError {
        GetContextKeysForPrincipalPolicyError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for GetContextKeysForPrincipalPolicyError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for GetContextKeysForPrincipalPolicyError {
    fn description(&self) -> &str {
        match *self {
            GetContextKeysForPrincipalPolicyError::InvalidInput(ref cause) => cause,
            GetContextKeysForPrincipalPolicyError::NoSuchEntity(ref cause) => cause,
            GetContextKeysForPrincipalPolicyError::Validation(ref cause) => cause,
            GetContextKeysForPrincipalPolicyError::Credentials(ref err) => err.description(),
            GetContextKeysForPrincipalPolicyError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            GetContextKeysForPrincipalPolicyError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by GetCredentialReport
#[derive(Debug, PartialEq)]
pub enum GetCredentialReportError {
    ///<p>The request was rejected because the most recent credential report has expired. To generate a new credential report, use <a>GenerateCredentialReport</a>. For more information about credential report expiration, see <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.</p>
    CredentialReportExpired(String),
    ///<p>The request was rejected because the credential report does not exist. To generate a credential report, use <a>GenerateCredentialReport</a>.</p>
    CredentialReportNotPresent(String),
    ///<p>The request was rejected because the credential report is still being generated.</p>
    CredentialReportNotReady(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl GetCredentialReportError {
    pub fn from_body(body: &str) -> GetCredentialReportError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "CredentialReportExpiredException" => GetCredentialReportError::CredentialReportExpired(String::from(parsed_error.message)),
                    "CredentialReportNotPresentException" => GetCredentialReportError::CredentialReportNotPresent(String::from(parsed_error.message)),
                    "CredentialReportNotReadyException" => GetCredentialReportError::CredentialReportNotReady(String::from(parsed_error.message)),
                    "ServiceFailureException" => {
                        GetCredentialReportError::ServiceFailure(String::from(parsed_error.message))
                    }
                    _ => GetCredentialReportError::Unknown(String::from(body)),
                }
            }
            Err(_) => GetCredentialReportError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for GetCredentialReportError {
    fn from(err: XmlParseError) -> GetCredentialReportError {
        let XmlParseError(message) = err;
        GetCredentialReportError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for GetCredentialReportError {
    fn from(err: CredentialsError) -> GetCredentialReportError {
        GetCredentialReportError::Credentials(err)
    }
}
impl From<HttpDispatchError> for GetCredentialReportError {
    fn from(err: HttpDispatchError) -> GetCredentialReportError {
        GetCredentialReportError::HttpDispatch(err)
    }
}
impl From<io::Error> for GetCredentialReportError {
    fn from(err: io::Error) -> GetCredentialReportError {
        GetCredentialReportError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for GetCredentialReportError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for GetCredentialReportError {
    fn description(&self) -> &str {
        match *self {
            GetCredentialReportError::CredentialReportExpired(ref cause) => cause,
            GetCredentialReportError::CredentialReportNotPresent(ref cause) => cause,
            GetCredentialReportError::CredentialReportNotReady(ref cause) => cause,
            GetCredentialReportError::ServiceFailure(ref cause) => cause,
            GetCredentialReportError::Validation(ref cause) => cause,
            GetCredentialReportError::Credentials(ref err) => err.description(),
            GetCredentialReportError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            GetCredentialReportError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by GetGroup
#[derive(Debug, PartialEq)]
pub enum GetGroupError {
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl GetGroupError {
    pub fn from_body(body: &str) -> GetGroupError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "NoSuchEntityException" => {
                        GetGroupError::NoSuchEntity(String::from(parsed_error.message))
                    }
                    "ServiceFailureException" => {
                        GetGroupError::ServiceFailure(String::from(parsed_error.message))
                    }
                    _ => GetGroupError::Unknown(String::from(body)),
                }
            }
            Err(_) => GetGroupError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for GetGroupError {
    fn from(err: XmlParseError) -> GetGroupError {
        let XmlParseError(message) = err;
        GetGroupError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for GetGroupError {
    fn from(err: CredentialsError) -> GetGroupError {
        GetGroupError::Credentials(err)
    }
}
impl From<HttpDispatchError> for GetGroupError {
    fn from(err: HttpDispatchError) -> GetGroupError {
        GetGroupError::HttpDispatch(err)
    }
}
impl From<io::Error> for GetGroupError {
    fn from(err: io::Error) -> GetGroupError {
        GetGroupError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for GetGroupError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for GetGroupError {
    fn description(&self) -> &str {
        match *self {
            GetGroupError::NoSuchEntity(ref cause) => cause,
            GetGroupError::ServiceFailure(ref cause) => cause,
            GetGroupError::Validation(ref cause) => cause,
            GetGroupError::Credentials(ref err) => err.description(),
            GetGroupError::HttpDispatch(ref dispatch_error) => dispatch_error.description(),
            GetGroupError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by GetGroupPolicy
#[derive(Debug, PartialEq)]
pub enum GetGroupPolicyError {
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl GetGroupPolicyError {
    pub fn from_body(body: &str) -> GetGroupPolicyError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "NoSuchEntityException" => {
                        GetGroupPolicyError::NoSuchEntity(String::from(parsed_error.message))
                    }
                    "ServiceFailureException" => {
                        GetGroupPolicyError::ServiceFailure(String::from(parsed_error.message))
                    }
                    _ => GetGroupPolicyError::Unknown(String::from(body)),
                }
            }
            Err(_) => GetGroupPolicyError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for GetGroupPolicyError {
    fn from(err: XmlParseError) -> GetGroupPolicyError {
        let XmlParseError(message) = err;
        GetGroupPolicyError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for GetGroupPolicyError {
    fn from(err: CredentialsError) -> GetGroupPolicyError {
        GetGroupPolicyError::Credentials(err)
    }
}
impl From<HttpDispatchError> for GetGroupPolicyError {
    fn from(err: HttpDispatchError) -> GetGroupPolicyError {
        GetGroupPolicyError::HttpDispatch(err)
    }
}
impl From<io::Error> for GetGroupPolicyError {
    fn from(err: io::Error) -> GetGroupPolicyError {
        GetGroupPolicyError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for GetGroupPolicyError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for GetGroupPolicyError {
    fn description(&self) -> &str {
        match *self {
            GetGroupPolicyError::NoSuchEntity(ref cause) => cause,
            GetGroupPolicyError::ServiceFailure(ref cause) => cause,
            GetGroupPolicyError::Validation(ref cause) => cause,
            GetGroupPolicyError::Credentials(ref err) => err.description(),
            GetGroupPolicyError::HttpDispatch(ref dispatch_error) => dispatch_error.description(),
            GetGroupPolicyError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by GetInstanceProfile
#[derive(Debug, PartialEq)]
pub enum GetInstanceProfileError {
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl GetInstanceProfileError {
    pub fn from_body(body: &str) -> GetInstanceProfileError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "NoSuchEntityException" => {
                        GetInstanceProfileError::NoSuchEntity(String::from(parsed_error.message))
                    }
                    "ServiceFailureException" => {
                        GetInstanceProfileError::ServiceFailure(String::from(parsed_error.message))
                    }
                    _ => GetInstanceProfileError::Unknown(String::from(body)),
                }
            }
            Err(_) => GetInstanceProfileError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for GetInstanceProfileError {
    fn from(err: XmlParseError) -> GetInstanceProfileError {
        let XmlParseError(message) = err;
        GetInstanceProfileError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for GetInstanceProfileError {
    fn from(err: CredentialsError) -> GetInstanceProfileError {
        GetInstanceProfileError::Credentials(err)
    }
}
impl From<HttpDispatchError> for GetInstanceProfileError {
    fn from(err: HttpDispatchError) -> GetInstanceProfileError {
        GetInstanceProfileError::HttpDispatch(err)
    }
}
impl From<io::Error> for GetInstanceProfileError {
    fn from(err: io::Error) -> GetInstanceProfileError {
        GetInstanceProfileError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for GetInstanceProfileError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for GetInstanceProfileError {
    fn description(&self) -> &str {
        match *self {
            GetInstanceProfileError::NoSuchEntity(ref cause) => cause,
            GetInstanceProfileError::ServiceFailure(ref cause) => cause,
            GetInstanceProfileError::Validation(ref cause) => cause,
            GetInstanceProfileError::Credentials(ref err) => err.description(),
            GetInstanceProfileError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            GetInstanceProfileError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by GetLoginProfile
#[derive(Debug, PartialEq)]
pub enum GetLoginProfileError {
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl GetLoginProfileError {
    pub fn from_body(body: &str) -> GetLoginProfileError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "NoSuchEntityException" => {
                        GetLoginProfileError::NoSuchEntity(String::from(parsed_error.message))
                    }
                    "ServiceFailureException" => {
                        GetLoginProfileError::ServiceFailure(String::from(parsed_error.message))
                    }
                    _ => GetLoginProfileError::Unknown(String::from(body)),
                }
            }
            Err(_) => GetLoginProfileError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for GetLoginProfileError {
    fn from(err: XmlParseError) -> GetLoginProfileError {
        let XmlParseError(message) = err;
        GetLoginProfileError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for GetLoginProfileError {
    fn from(err: CredentialsError) -> GetLoginProfileError {
        GetLoginProfileError::Credentials(err)
    }
}
impl From<HttpDispatchError> for GetLoginProfileError {
    fn from(err: HttpDispatchError) -> GetLoginProfileError {
        GetLoginProfileError::HttpDispatch(err)
    }
}
impl From<io::Error> for GetLoginProfileError {
    fn from(err: io::Error) -> GetLoginProfileError {
        GetLoginProfileError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for GetLoginProfileError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for GetLoginProfileError {
    fn description(&self) -> &str {
        match *self {
            GetLoginProfileError::NoSuchEntity(ref cause) => cause,
            GetLoginProfileError::ServiceFailure(ref cause) => cause,
            GetLoginProfileError::Validation(ref cause) => cause,
            GetLoginProfileError::Credentials(ref err) => err.description(),
            GetLoginProfileError::HttpDispatch(ref dispatch_error) => dispatch_error.description(),
            GetLoginProfileError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by GetOpenIDConnectProvider
#[derive(Debug, PartialEq)]
pub enum GetOpenIDConnectProviderError {
    ///<p>The request was rejected because an invalid or out-of-range value was supplied for an input parameter.</p>
    InvalidInput(String),
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl GetOpenIDConnectProviderError {
    pub fn from_body(body: &str) -> GetOpenIDConnectProviderError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "InvalidInputException" => GetOpenIDConnectProviderError::InvalidInput(String::from(parsed_error.message)),
                    "NoSuchEntityException" => GetOpenIDConnectProviderError::NoSuchEntity(String::from(parsed_error.message)),
                    "ServiceFailureException" => GetOpenIDConnectProviderError::ServiceFailure(String::from(parsed_error.message)),
                    _ => GetOpenIDConnectProviderError::Unknown(String::from(body)),
                }
            }
            Err(_) => GetOpenIDConnectProviderError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for GetOpenIDConnectProviderError {
    fn from(err: XmlParseError) -> GetOpenIDConnectProviderError {
        let XmlParseError(message) = err;
        GetOpenIDConnectProviderError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for GetOpenIDConnectProviderError {
    fn from(err: CredentialsError) -> GetOpenIDConnectProviderError {
        GetOpenIDConnectProviderError::Credentials(err)
    }
}
impl From<HttpDispatchError> for GetOpenIDConnectProviderError {
    fn from(err: HttpDispatchError) -> GetOpenIDConnectProviderError {
        GetOpenIDConnectProviderError::HttpDispatch(err)
    }
}
impl From<io::Error> for GetOpenIDConnectProviderError {
    fn from(err: io::Error) -> GetOpenIDConnectProviderError {
        GetOpenIDConnectProviderError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for GetOpenIDConnectProviderError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for GetOpenIDConnectProviderError {
    fn description(&self) -> &str {
        match *self {
            GetOpenIDConnectProviderError::InvalidInput(ref cause) => cause,
            GetOpenIDConnectProviderError::NoSuchEntity(ref cause) => cause,
            GetOpenIDConnectProviderError::ServiceFailure(ref cause) => cause,
            GetOpenIDConnectProviderError::Validation(ref cause) => cause,
            GetOpenIDConnectProviderError::Credentials(ref err) => err.description(),
            GetOpenIDConnectProviderError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            GetOpenIDConnectProviderError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by GetPolicy
#[derive(Debug, PartialEq)]
pub enum GetPolicyError {
    ///<p>The request was rejected because an invalid or out-of-range value was supplied for an input parameter.</p>
    InvalidInput(String),
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl GetPolicyError {
    pub fn from_body(body: &str) -> GetPolicyError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "InvalidInputException" => {
                        GetPolicyError::InvalidInput(String::from(parsed_error.message))
                    }
                    "NoSuchEntityException" => {
                        GetPolicyError::NoSuchEntity(String::from(parsed_error.message))
                    }
                    "ServiceFailureException" => {
                        GetPolicyError::ServiceFailure(String::from(parsed_error.message))
                    }
                    _ => GetPolicyError::Unknown(String::from(body)),
                }
            }
            Err(_) => GetPolicyError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for GetPolicyError {
    fn from(err: XmlParseError) -> GetPolicyError {
        let XmlParseError(message) = err;
        GetPolicyError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for GetPolicyError {
    fn from(err: CredentialsError) -> GetPolicyError {
        GetPolicyError::Credentials(err)
    }
}
impl From<HttpDispatchError> for GetPolicyError {
    fn from(err: HttpDispatchError) -> GetPolicyError {
        GetPolicyError::HttpDispatch(err)
    }
}
impl From<io::Error> for GetPolicyError {
    fn from(err: io::Error) -> GetPolicyError {
        GetPolicyError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for GetPolicyError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for GetPolicyError {
    fn description(&self) -> &str {
        match *self {
            GetPolicyError::InvalidInput(ref cause) => cause,
            GetPolicyError::NoSuchEntity(ref cause) => cause,
            GetPolicyError::ServiceFailure(ref cause) => cause,
            GetPolicyError::Validation(ref cause) => cause,
            GetPolicyError::Credentials(ref err) => err.description(),
            GetPolicyError::HttpDispatch(ref dispatch_error) => dispatch_error.description(),
            GetPolicyError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by GetPolicyVersion
#[derive(Debug, PartialEq)]
pub enum GetPolicyVersionError {
    ///<p>The request was rejected because an invalid or out-of-range value was supplied for an input parameter.</p>
    InvalidInput(String),
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl GetPolicyVersionError {
    pub fn from_body(body: &str) -> GetPolicyVersionError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "InvalidInputException" => {
                        GetPolicyVersionError::InvalidInput(String::from(parsed_error.message))
                    }
                    "NoSuchEntityException" => {
                        GetPolicyVersionError::NoSuchEntity(String::from(parsed_error.message))
                    }
                    "ServiceFailureException" => {
                        GetPolicyVersionError::ServiceFailure(String::from(parsed_error.message))
                    }
                    _ => GetPolicyVersionError::Unknown(String::from(body)),
                }
            }
            Err(_) => GetPolicyVersionError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for GetPolicyVersionError {
    fn from(err: XmlParseError) -> GetPolicyVersionError {
        let XmlParseError(message) = err;
        GetPolicyVersionError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for GetPolicyVersionError {
    fn from(err: CredentialsError) -> GetPolicyVersionError {
        GetPolicyVersionError::Credentials(err)
    }
}
impl From<HttpDispatchError> for GetPolicyVersionError {
    fn from(err: HttpDispatchError) -> GetPolicyVersionError {
        GetPolicyVersionError::HttpDispatch(err)
    }
}
impl From<io::Error> for GetPolicyVersionError {
    fn from(err: io::Error) -> GetPolicyVersionError {
        GetPolicyVersionError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for GetPolicyVersionError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for GetPolicyVersionError {
    fn description(&self) -> &str {
        match *self {
            GetPolicyVersionError::InvalidInput(ref cause) => cause,
            GetPolicyVersionError::NoSuchEntity(ref cause) => cause,
            GetPolicyVersionError::ServiceFailure(ref cause) => cause,
            GetPolicyVersionError::Validation(ref cause) => cause,
            GetPolicyVersionError::Credentials(ref err) => err.description(),
            GetPolicyVersionError::HttpDispatch(ref dispatch_error) => dispatch_error.description(),
            GetPolicyVersionError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by GetRole
#[derive(Debug, PartialEq)]
pub enum GetRoleError {
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl GetRoleError {
    pub fn from_body(body: &str) -> GetRoleError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "NoSuchEntityException" => {
                        GetRoleError::NoSuchEntity(String::from(parsed_error.message))
                    }
                    "ServiceFailureException" => {
                        GetRoleError::ServiceFailure(String::from(parsed_error.message))
                    }
                    _ => GetRoleError::Unknown(String::from(body)),
                }
            }
            Err(_) => GetRoleError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for GetRoleError {
    fn from(err: XmlParseError) -> GetRoleError {
        let XmlParseError(message) = err;
        GetRoleError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for GetRoleError {
    fn from(err: CredentialsError) -> GetRoleError {
        GetRoleError::Credentials(err)
    }
}
impl From<HttpDispatchError> for GetRoleError {
    fn from(err: HttpDispatchError) -> GetRoleError {
        GetRoleError::HttpDispatch(err)
    }
}
impl From<io::Error> for GetRoleError {
    fn from(err: io::Error) -> GetRoleError {
        GetRoleError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for GetRoleError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for GetRoleError {
    fn description(&self) -> &str {
        match *self {
            GetRoleError::NoSuchEntity(ref cause) => cause,
            GetRoleError::ServiceFailure(ref cause) => cause,
            GetRoleError::Validation(ref cause) => cause,
            GetRoleError::Credentials(ref err) => err.description(),
            GetRoleError::HttpDispatch(ref dispatch_error) => dispatch_error.description(),
            GetRoleError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by GetRolePolicy
#[derive(Debug, PartialEq)]
pub enum GetRolePolicyError {
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl GetRolePolicyError {
    pub fn from_body(body: &str) -> GetRolePolicyError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "NoSuchEntityException" => {
                        GetRolePolicyError::NoSuchEntity(String::from(parsed_error.message))
                    }
                    "ServiceFailureException" => {
                        GetRolePolicyError::ServiceFailure(String::from(parsed_error.message))
                    }
                    _ => GetRolePolicyError::Unknown(String::from(body)),
                }
            }
            Err(_) => GetRolePolicyError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for GetRolePolicyError {
    fn from(err: XmlParseError) -> GetRolePolicyError {
        let XmlParseError(message) = err;
        GetRolePolicyError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for GetRolePolicyError {
    fn from(err: CredentialsError) -> GetRolePolicyError {
        GetRolePolicyError::Credentials(err)
    }
}
impl From<HttpDispatchError> for GetRolePolicyError {
    fn from(err: HttpDispatchError) -> GetRolePolicyError {
        GetRolePolicyError::HttpDispatch(err)
    }
}
impl From<io::Error> for GetRolePolicyError {
    fn from(err: io::Error) -> GetRolePolicyError {
        GetRolePolicyError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for GetRolePolicyError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for GetRolePolicyError {
    fn description(&self) -> &str {
        match *self {
            GetRolePolicyError::NoSuchEntity(ref cause) => cause,
            GetRolePolicyError::ServiceFailure(ref cause) => cause,
            GetRolePolicyError::Validation(ref cause) => cause,
            GetRolePolicyError::Credentials(ref err) => err.description(),
            GetRolePolicyError::HttpDispatch(ref dispatch_error) => dispatch_error.description(),
            GetRolePolicyError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by GetSAMLProvider
#[derive(Debug, PartialEq)]
pub enum GetSAMLProviderError {
    ///<p>The request was rejected because an invalid or out-of-range value was supplied for an input parameter.</p>
    InvalidInput(String),
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl GetSAMLProviderError {
    pub fn from_body(body: &str) -> GetSAMLProviderError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "InvalidInputException" => {
                        GetSAMLProviderError::InvalidInput(String::from(parsed_error.message))
                    }
                    "NoSuchEntityException" => {
                        GetSAMLProviderError::NoSuchEntity(String::from(parsed_error.message))
                    }
                    "ServiceFailureException" => {
                        GetSAMLProviderError::ServiceFailure(String::from(parsed_error.message))
                    }
                    _ => GetSAMLProviderError::Unknown(String::from(body)),
                }
            }
            Err(_) => GetSAMLProviderError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for GetSAMLProviderError {
    fn from(err: XmlParseError) -> GetSAMLProviderError {
        let XmlParseError(message) = err;
        GetSAMLProviderError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for GetSAMLProviderError {
    fn from(err: CredentialsError) -> GetSAMLProviderError {
        GetSAMLProviderError::Credentials(err)
    }
}
impl From<HttpDispatchError> for GetSAMLProviderError {
    fn from(err: HttpDispatchError) -> GetSAMLProviderError {
        GetSAMLProviderError::HttpDispatch(err)
    }
}
impl From<io::Error> for GetSAMLProviderError {
    fn from(err: io::Error) -> GetSAMLProviderError {
        GetSAMLProviderError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for GetSAMLProviderError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for GetSAMLProviderError {
    fn description(&self) -> &str {
        match *self {
            GetSAMLProviderError::InvalidInput(ref cause) => cause,
            GetSAMLProviderError::NoSuchEntity(ref cause) => cause,
            GetSAMLProviderError::ServiceFailure(ref cause) => cause,
            GetSAMLProviderError::Validation(ref cause) => cause,
            GetSAMLProviderError::Credentials(ref err) => err.description(),
            GetSAMLProviderError::HttpDispatch(ref dispatch_error) => dispatch_error.description(),
            GetSAMLProviderError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by GetSSHPublicKey
#[derive(Debug, PartialEq)]
pub enum GetSSHPublicKeyError {
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request was rejected because the public key encoding format is unsupported or unrecognized.</p>
    UnrecognizedPublicKeyEncoding(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl GetSSHPublicKeyError {
    pub fn from_body(body: &str) -> GetSSHPublicKeyError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "NoSuchEntityException" => {
                        GetSSHPublicKeyError::NoSuchEntity(String::from(parsed_error.message))
                    }
                    "UnrecognizedPublicKeyEncodingException" => GetSSHPublicKeyError::UnrecognizedPublicKeyEncoding(String::from(parsed_error.message)),
                    _ => GetSSHPublicKeyError::Unknown(String::from(body)),
                }
            }
            Err(_) => GetSSHPublicKeyError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for GetSSHPublicKeyError {
    fn from(err: XmlParseError) -> GetSSHPublicKeyError {
        let XmlParseError(message) = err;
        GetSSHPublicKeyError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for GetSSHPublicKeyError {
    fn from(err: CredentialsError) -> GetSSHPublicKeyError {
        GetSSHPublicKeyError::Credentials(err)
    }
}
impl From<HttpDispatchError> for GetSSHPublicKeyError {
    fn from(err: HttpDispatchError) -> GetSSHPublicKeyError {
        GetSSHPublicKeyError::HttpDispatch(err)
    }
}
impl From<io::Error> for GetSSHPublicKeyError {
    fn from(err: io::Error) -> GetSSHPublicKeyError {
        GetSSHPublicKeyError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for GetSSHPublicKeyError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for GetSSHPublicKeyError {
    fn description(&self) -> &str {
        match *self {
            GetSSHPublicKeyError::NoSuchEntity(ref cause) => cause,
            GetSSHPublicKeyError::UnrecognizedPublicKeyEncoding(ref cause) => cause,
            GetSSHPublicKeyError::Validation(ref cause) => cause,
            GetSSHPublicKeyError::Credentials(ref err) => err.description(),
            GetSSHPublicKeyError::HttpDispatch(ref dispatch_error) => dispatch_error.description(),
            GetSSHPublicKeyError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by GetServerCertificate
#[derive(Debug, PartialEq)]
pub enum GetServerCertificateError {
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl GetServerCertificateError {
    pub fn from_body(body: &str) -> GetServerCertificateError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "NoSuchEntityException" => {
                        GetServerCertificateError::NoSuchEntity(String::from(parsed_error.message))
                    }
                    "ServiceFailureException" => GetServerCertificateError::ServiceFailure(String::from(parsed_error.message)),
                    _ => GetServerCertificateError::Unknown(String::from(body)),
                }
            }
            Err(_) => GetServerCertificateError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for GetServerCertificateError {
    fn from(err: XmlParseError) -> GetServerCertificateError {
        let XmlParseError(message) = err;
        GetServerCertificateError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for GetServerCertificateError {
    fn from(err: CredentialsError) -> GetServerCertificateError {
        GetServerCertificateError::Credentials(err)
    }
}
impl From<HttpDispatchError> for GetServerCertificateError {
    fn from(err: HttpDispatchError) -> GetServerCertificateError {
        GetServerCertificateError::HttpDispatch(err)
    }
}
impl From<io::Error> for GetServerCertificateError {
    fn from(err: io::Error) -> GetServerCertificateError {
        GetServerCertificateError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for GetServerCertificateError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for GetServerCertificateError {
    fn description(&self) -> &str {
        match *self {
            GetServerCertificateError::NoSuchEntity(ref cause) => cause,
            GetServerCertificateError::ServiceFailure(ref cause) => cause,
            GetServerCertificateError::Validation(ref cause) => cause,
            GetServerCertificateError::Credentials(ref err) => err.description(),
            GetServerCertificateError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            GetServerCertificateError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by GetUser
#[derive(Debug, PartialEq)]
pub enum GetUserError {
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl GetUserError {
    pub fn from_body(body: &str) -> GetUserError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "NoSuchEntityException" => {
                        GetUserError::NoSuchEntity(String::from(parsed_error.message))
                    }
                    "ServiceFailureException" => {
                        GetUserError::ServiceFailure(String::from(parsed_error.message))
                    }
                    _ => GetUserError::Unknown(String::from(body)),
                }
            }
            Err(_) => GetUserError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for GetUserError {
    fn from(err: XmlParseError) -> GetUserError {
        let XmlParseError(message) = err;
        GetUserError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for GetUserError {
    fn from(err: CredentialsError) -> GetUserError {
        GetUserError::Credentials(err)
    }
}
impl From<HttpDispatchError> for GetUserError {
    fn from(err: HttpDispatchError) -> GetUserError {
        GetUserError::HttpDispatch(err)
    }
}
impl From<io::Error> for GetUserError {
    fn from(err: io::Error) -> GetUserError {
        GetUserError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for GetUserError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for GetUserError {
    fn description(&self) -> &str {
        match *self {
            GetUserError::NoSuchEntity(ref cause) => cause,
            GetUserError::ServiceFailure(ref cause) => cause,
            GetUserError::Validation(ref cause) => cause,
            GetUserError::Credentials(ref err) => err.description(),
            GetUserError::HttpDispatch(ref dispatch_error) => dispatch_error.description(),
            GetUserError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by GetUserPolicy
#[derive(Debug, PartialEq)]
pub enum GetUserPolicyError {
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl GetUserPolicyError {
    pub fn from_body(body: &str) -> GetUserPolicyError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "NoSuchEntityException" => {
                        GetUserPolicyError::NoSuchEntity(String::from(parsed_error.message))
                    }
                    "ServiceFailureException" => {
                        GetUserPolicyError::ServiceFailure(String::from(parsed_error.message))
                    }
                    _ => GetUserPolicyError::Unknown(String::from(body)),
                }
            }
            Err(_) => GetUserPolicyError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for GetUserPolicyError {
    fn from(err: XmlParseError) -> GetUserPolicyError {
        let XmlParseError(message) = err;
        GetUserPolicyError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for GetUserPolicyError {
    fn from(err: CredentialsError) -> GetUserPolicyError {
        GetUserPolicyError::Credentials(err)
    }
}
impl From<HttpDispatchError> for GetUserPolicyError {
    fn from(err: HttpDispatchError) -> GetUserPolicyError {
        GetUserPolicyError::HttpDispatch(err)
    }
}
impl From<io::Error> for GetUserPolicyError {
    fn from(err: io::Error) -> GetUserPolicyError {
        GetUserPolicyError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for GetUserPolicyError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for GetUserPolicyError {
    fn description(&self) -> &str {
        match *self {
            GetUserPolicyError::NoSuchEntity(ref cause) => cause,
            GetUserPolicyError::ServiceFailure(ref cause) => cause,
            GetUserPolicyError::Validation(ref cause) => cause,
            GetUserPolicyError::Credentials(ref err) => err.description(),
            GetUserPolicyError::HttpDispatch(ref dispatch_error) => dispatch_error.description(),
            GetUserPolicyError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by ListAccessKeys
#[derive(Debug, PartialEq)]
pub enum ListAccessKeysError {
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl ListAccessKeysError {
    pub fn from_body(body: &str) -> ListAccessKeysError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "NoSuchEntityException" => {
                        ListAccessKeysError::NoSuchEntity(String::from(parsed_error.message))
                    }
                    "ServiceFailureException" => {
                        ListAccessKeysError::ServiceFailure(String::from(parsed_error.message))
                    }
                    _ => ListAccessKeysError::Unknown(String::from(body)),
                }
            }
            Err(_) => ListAccessKeysError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for ListAccessKeysError {
    fn from(err: XmlParseError) -> ListAccessKeysError {
        let XmlParseError(message) = err;
        ListAccessKeysError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for ListAccessKeysError {
    fn from(err: CredentialsError) -> ListAccessKeysError {
        ListAccessKeysError::Credentials(err)
    }
}
impl From<HttpDispatchError> for ListAccessKeysError {
    fn from(err: HttpDispatchError) -> ListAccessKeysError {
        ListAccessKeysError::HttpDispatch(err)
    }
}
impl From<io::Error> for ListAccessKeysError {
    fn from(err: io::Error) -> ListAccessKeysError {
        ListAccessKeysError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for ListAccessKeysError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ListAccessKeysError {
    fn description(&self) -> &str {
        match *self {
            ListAccessKeysError::NoSuchEntity(ref cause) => cause,
            ListAccessKeysError::ServiceFailure(ref cause) => cause,
            ListAccessKeysError::Validation(ref cause) => cause,
            ListAccessKeysError::Credentials(ref err) => err.description(),
            ListAccessKeysError::HttpDispatch(ref dispatch_error) => dispatch_error.description(),
            ListAccessKeysError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by ListAccountAliases
#[derive(Debug, PartialEq)]
pub enum ListAccountAliasesError {
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl ListAccountAliasesError {
    pub fn from_body(body: &str) -> ListAccountAliasesError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "ServiceFailureException" => {
                        ListAccountAliasesError::ServiceFailure(String::from(parsed_error.message))
                    }
                    _ => ListAccountAliasesError::Unknown(String::from(body)),
                }
            }
            Err(_) => ListAccountAliasesError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for ListAccountAliasesError {
    fn from(err: XmlParseError) -> ListAccountAliasesError {
        let XmlParseError(message) = err;
        ListAccountAliasesError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for ListAccountAliasesError {
    fn from(err: CredentialsError) -> ListAccountAliasesError {
        ListAccountAliasesError::Credentials(err)
    }
}
impl From<HttpDispatchError> for ListAccountAliasesError {
    fn from(err: HttpDispatchError) -> ListAccountAliasesError {
        ListAccountAliasesError::HttpDispatch(err)
    }
}
impl From<io::Error> for ListAccountAliasesError {
    fn from(err: io::Error) -> ListAccountAliasesError {
        ListAccountAliasesError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for ListAccountAliasesError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ListAccountAliasesError {
    fn description(&self) -> &str {
        match *self {
            ListAccountAliasesError::ServiceFailure(ref cause) => cause,
            ListAccountAliasesError::Validation(ref cause) => cause,
            ListAccountAliasesError::Credentials(ref err) => err.description(),
            ListAccountAliasesError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            ListAccountAliasesError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by ListAttachedGroupPolicies
#[derive(Debug, PartialEq)]
pub enum ListAttachedGroupPoliciesError {
    ///<p>The request was rejected because an invalid or out-of-range value was supplied for an input parameter.</p>
    InvalidInput(String),
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl ListAttachedGroupPoliciesError {
    pub fn from_body(body: &str) -> ListAttachedGroupPoliciesError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "InvalidInputException" => ListAttachedGroupPoliciesError::InvalidInput(String::from(parsed_error.message)),
                    "NoSuchEntityException" => ListAttachedGroupPoliciesError::NoSuchEntity(String::from(parsed_error.message)),
                    "ServiceFailureException" => ListAttachedGroupPoliciesError::ServiceFailure(String::from(parsed_error.message)),
                    _ => ListAttachedGroupPoliciesError::Unknown(String::from(body)),
                }
            }
            Err(_) => ListAttachedGroupPoliciesError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for ListAttachedGroupPoliciesError {
    fn from(err: XmlParseError) -> ListAttachedGroupPoliciesError {
        let XmlParseError(message) = err;
        ListAttachedGroupPoliciesError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for ListAttachedGroupPoliciesError {
    fn from(err: CredentialsError) -> ListAttachedGroupPoliciesError {
        ListAttachedGroupPoliciesError::Credentials(err)
    }
}
impl From<HttpDispatchError> for ListAttachedGroupPoliciesError {
    fn from(err: HttpDispatchError) -> ListAttachedGroupPoliciesError {
        ListAttachedGroupPoliciesError::HttpDispatch(err)
    }
}
impl From<io::Error> for ListAttachedGroupPoliciesError {
    fn from(err: io::Error) -> ListAttachedGroupPoliciesError {
        ListAttachedGroupPoliciesError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for ListAttachedGroupPoliciesError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ListAttachedGroupPoliciesError {
    fn description(&self) -> &str {
        match *self {
            ListAttachedGroupPoliciesError::InvalidInput(ref cause) => cause,
            ListAttachedGroupPoliciesError::NoSuchEntity(ref cause) => cause,
            ListAttachedGroupPoliciesError::ServiceFailure(ref cause) => cause,
            ListAttachedGroupPoliciesError::Validation(ref cause) => cause,
            ListAttachedGroupPoliciesError::Credentials(ref err) => err.description(),
            ListAttachedGroupPoliciesError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            ListAttachedGroupPoliciesError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by ListAttachedRolePolicies
#[derive(Debug, PartialEq)]
pub enum ListAttachedRolePoliciesError {
    ///<p>The request was rejected because an invalid or out-of-range value was supplied for an input parameter.</p>
    InvalidInput(String),
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl ListAttachedRolePoliciesError {
    pub fn from_body(body: &str) -> ListAttachedRolePoliciesError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "InvalidInputException" => ListAttachedRolePoliciesError::InvalidInput(String::from(parsed_error.message)),
                    "NoSuchEntityException" => ListAttachedRolePoliciesError::NoSuchEntity(String::from(parsed_error.message)),
                    "ServiceFailureException" => ListAttachedRolePoliciesError::ServiceFailure(String::from(parsed_error.message)),
                    _ => ListAttachedRolePoliciesError::Unknown(String::from(body)),
                }
            }
            Err(_) => ListAttachedRolePoliciesError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for ListAttachedRolePoliciesError {
    fn from(err: XmlParseError) -> ListAttachedRolePoliciesError {
        let XmlParseError(message) = err;
        ListAttachedRolePoliciesError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for ListAttachedRolePoliciesError {
    fn from(err: CredentialsError) -> ListAttachedRolePoliciesError {
        ListAttachedRolePoliciesError::Credentials(err)
    }
}
impl From<HttpDispatchError> for ListAttachedRolePoliciesError {
    fn from(err: HttpDispatchError) -> ListAttachedRolePoliciesError {
        ListAttachedRolePoliciesError::HttpDispatch(err)
    }
}
impl From<io::Error> for ListAttachedRolePoliciesError {
    fn from(err: io::Error) -> ListAttachedRolePoliciesError {
        ListAttachedRolePoliciesError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for ListAttachedRolePoliciesError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ListAttachedRolePoliciesError {
    fn description(&self) -> &str {
        match *self {
            ListAttachedRolePoliciesError::InvalidInput(ref cause) => cause,
            ListAttachedRolePoliciesError::NoSuchEntity(ref cause) => cause,
            ListAttachedRolePoliciesError::ServiceFailure(ref cause) => cause,
            ListAttachedRolePoliciesError::Validation(ref cause) => cause,
            ListAttachedRolePoliciesError::Credentials(ref err) => err.description(),
            ListAttachedRolePoliciesError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            ListAttachedRolePoliciesError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by ListAttachedUserPolicies
#[derive(Debug, PartialEq)]
pub enum ListAttachedUserPoliciesError {
    ///<p>The request was rejected because an invalid or out-of-range value was supplied for an input parameter.</p>
    InvalidInput(String),
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl ListAttachedUserPoliciesError {
    pub fn from_body(body: &str) -> ListAttachedUserPoliciesError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "InvalidInputException" => ListAttachedUserPoliciesError::InvalidInput(String::from(parsed_error.message)),
                    "NoSuchEntityException" => ListAttachedUserPoliciesError::NoSuchEntity(String::from(parsed_error.message)),
                    "ServiceFailureException" => ListAttachedUserPoliciesError::ServiceFailure(String::from(parsed_error.message)),
                    _ => ListAttachedUserPoliciesError::Unknown(String::from(body)),
                }
            }
            Err(_) => ListAttachedUserPoliciesError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for ListAttachedUserPoliciesError {
    fn from(err: XmlParseError) -> ListAttachedUserPoliciesError {
        let XmlParseError(message) = err;
        ListAttachedUserPoliciesError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for ListAttachedUserPoliciesError {
    fn from(err: CredentialsError) -> ListAttachedUserPoliciesError {
        ListAttachedUserPoliciesError::Credentials(err)
    }
}
impl From<HttpDispatchError> for ListAttachedUserPoliciesError {
    fn from(err: HttpDispatchError) -> ListAttachedUserPoliciesError {
        ListAttachedUserPoliciesError::HttpDispatch(err)
    }
}
impl From<io::Error> for ListAttachedUserPoliciesError {
    fn from(err: io::Error) -> ListAttachedUserPoliciesError {
        ListAttachedUserPoliciesError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for ListAttachedUserPoliciesError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ListAttachedUserPoliciesError {
    fn description(&self) -> &str {
        match *self {
            ListAttachedUserPoliciesError::InvalidInput(ref cause) => cause,
            ListAttachedUserPoliciesError::NoSuchEntity(ref cause) => cause,
            ListAttachedUserPoliciesError::ServiceFailure(ref cause) => cause,
            ListAttachedUserPoliciesError::Validation(ref cause) => cause,
            ListAttachedUserPoliciesError::Credentials(ref err) => err.description(),
            ListAttachedUserPoliciesError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            ListAttachedUserPoliciesError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by ListEntitiesForPolicy
#[derive(Debug, PartialEq)]
pub enum ListEntitiesForPolicyError {
    ///<p>The request was rejected because an invalid or out-of-range value was supplied for an input parameter.</p>
    InvalidInput(String),
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl ListEntitiesForPolicyError {
    pub fn from_body(body: &str) -> ListEntitiesForPolicyError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "InvalidInputException" => {
                        ListEntitiesForPolicyError::InvalidInput(String::from(parsed_error.message))
                    }
                    "NoSuchEntityException" => {
                        ListEntitiesForPolicyError::NoSuchEntity(String::from(parsed_error.message))
                    }
                    "ServiceFailureException" => ListEntitiesForPolicyError::ServiceFailure(String::from(parsed_error.message)),
                    _ => ListEntitiesForPolicyError::Unknown(String::from(body)),
                }
            }
            Err(_) => ListEntitiesForPolicyError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for ListEntitiesForPolicyError {
    fn from(err: XmlParseError) -> ListEntitiesForPolicyError {
        let XmlParseError(message) = err;
        ListEntitiesForPolicyError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for ListEntitiesForPolicyError {
    fn from(err: CredentialsError) -> ListEntitiesForPolicyError {
        ListEntitiesForPolicyError::Credentials(err)
    }
}
impl From<HttpDispatchError> for ListEntitiesForPolicyError {
    fn from(err: HttpDispatchError) -> ListEntitiesForPolicyError {
        ListEntitiesForPolicyError::HttpDispatch(err)
    }
}
impl From<io::Error> for ListEntitiesForPolicyError {
    fn from(err: io::Error) -> ListEntitiesForPolicyError {
        ListEntitiesForPolicyError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for ListEntitiesForPolicyError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ListEntitiesForPolicyError {
    fn description(&self) -> &str {
        match *self {
            ListEntitiesForPolicyError::InvalidInput(ref cause) => cause,
            ListEntitiesForPolicyError::NoSuchEntity(ref cause) => cause,
            ListEntitiesForPolicyError::ServiceFailure(ref cause) => cause,
            ListEntitiesForPolicyError::Validation(ref cause) => cause,
            ListEntitiesForPolicyError::Credentials(ref err) => err.description(),
            ListEntitiesForPolicyError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            ListEntitiesForPolicyError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by ListGroupPolicies
#[derive(Debug, PartialEq)]
pub enum ListGroupPoliciesError {
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl ListGroupPoliciesError {
    pub fn from_body(body: &str) -> ListGroupPoliciesError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "NoSuchEntityException" => {
                        ListGroupPoliciesError::NoSuchEntity(String::from(parsed_error.message))
                    }
                    "ServiceFailureException" => {
                        ListGroupPoliciesError::ServiceFailure(String::from(parsed_error.message))
                    }
                    _ => ListGroupPoliciesError::Unknown(String::from(body)),
                }
            }
            Err(_) => ListGroupPoliciesError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for ListGroupPoliciesError {
    fn from(err: XmlParseError) -> ListGroupPoliciesError {
        let XmlParseError(message) = err;
        ListGroupPoliciesError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for ListGroupPoliciesError {
    fn from(err: CredentialsError) -> ListGroupPoliciesError {
        ListGroupPoliciesError::Credentials(err)
    }
}
impl From<HttpDispatchError> for ListGroupPoliciesError {
    fn from(err: HttpDispatchError) -> ListGroupPoliciesError {
        ListGroupPoliciesError::HttpDispatch(err)
    }
}
impl From<io::Error> for ListGroupPoliciesError {
    fn from(err: io::Error) -> ListGroupPoliciesError {
        ListGroupPoliciesError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for ListGroupPoliciesError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ListGroupPoliciesError {
    fn description(&self) -> &str {
        match *self {
            ListGroupPoliciesError::NoSuchEntity(ref cause) => cause,
            ListGroupPoliciesError::ServiceFailure(ref cause) => cause,
            ListGroupPoliciesError::Validation(ref cause) => cause,
            ListGroupPoliciesError::Credentials(ref err) => err.description(),
            ListGroupPoliciesError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            ListGroupPoliciesError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by ListGroups
#[derive(Debug, PartialEq)]
pub enum ListGroupsError {
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl ListGroupsError {
    pub fn from_body(body: &str) -> ListGroupsError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "ServiceFailureException" => {
                        ListGroupsError::ServiceFailure(String::from(parsed_error.message))
                    }
                    _ => ListGroupsError::Unknown(String::from(body)),
                }
            }
            Err(_) => ListGroupsError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for ListGroupsError {
    fn from(err: XmlParseError) -> ListGroupsError {
        let XmlParseError(message) = err;
        ListGroupsError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for ListGroupsError {
    fn from(err: CredentialsError) -> ListGroupsError {
        ListGroupsError::Credentials(err)
    }
}
impl From<HttpDispatchError> for ListGroupsError {
    fn from(err: HttpDispatchError) -> ListGroupsError {
        ListGroupsError::HttpDispatch(err)
    }
}
impl From<io::Error> for ListGroupsError {
    fn from(err: io::Error) -> ListGroupsError {
        ListGroupsError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for ListGroupsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ListGroupsError {
    fn description(&self) -> &str {
        match *self {
            ListGroupsError::ServiceFailure(ref cause) => cause,
            ListGroupsError::Validation(ref cause) => cause,
            ListGroupsError::Credentials(ref err) => err.description(),
            ListGroupsError::HttpDispatch(ref dispatch_error) => dispatch_error.description(),
            ListGroupsError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by ListGroupsForUser
#[derive(Debug, PartialEq)]
pub enum ListGroupsForUserError {
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl ListGroupsForUserError {
    pub fn from_body(body: &str) -> ListGroupsForUserError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "NoSuchEntityException" => {
                        ListGroupsForUserError::NoSuchEntity(String::from(parsed_error.message))
                    }
                    "ServiceFailureException" => {
                        ListGroupsForUserError::ServiceFailure(String::from(parsed_error.message))
                    }
                    _ => ListGroupsForUserError::Unknown(String::from(body)),
                }
            }
            Err(_) => ListGroupsForUserError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for ListGroupsForUserError {
    fn from(err: XmlParseError) -> ListGroupsForUserError {
        let XmlParseError(message) = err;
        ListGroupsForUserError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for ListGroupsForUserError {
    fn from(err: CredentialsError) -> ListGroupsForUserError {
        ListGroupsForUserError::Credentials(err)
    }
}
impl From<HttpDispatchError> for ListGroupsForUserError {
    fn from(err: HttpDispatchError) -> ListGroupsForUserError {
        ListGroupsForUserError::HttpDispatch(err)
    }
}
impl From<io::Error> for ListGroupsForUserError {
    fn from(err: io::Error) -> ListGroupsForUserError {
        ListGroupsForUserError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for ListGroupsForUserError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ListGroupsForUserError {
    fn description(&self) -> &str {
        match *self {
            ListGroupsForUserError::NoSuchEntity(ref cause) => cause,
            ListGroupsForUserError::ServiceFailure(ref cause) => cause,
            ListGroupsForUserError::Validation(ref cause) => cause,
            ListGroupsForUserError::Credentials(ref err) => err.description(),
            ListGroupsForUserError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            ListGroupsForUserError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by ListInstanceProfiles
#[derive(Debug, PartialEq)]
pub enum ListInstanceProfilesError {
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl ListInstanceProfilesError {
    pub fn from_body(body: &str) -> ListInstanceProfilesError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "ServiceFailureException" => ListInstanceProfilesError::ServiceFailure(String::from(parsed_error.message)),
                    _ => ListInstanceProfilesError::Unknown(String::from(body)),
                }
            }
            Err(_) => ListInstanceProfilesError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for ListInstanceProfilesError {
    fn from(err: XmlParseError) -> ListInstanceProfilesError {
        let XmlParseError(message) = err;
        ListInstanceProfilesError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for ListInstanceProfilesError {
    fn from(err: CredentialsError) -> ListInstanceProfilesError {
        ListInstanceProfilesError::Credentials(err)
    }
}
impl From<HttpDispatchError> for ListInstanceProfilesError {
    fn from(err: HttpDispatchError) -> ListInstanceProfilesError {
        ListInstanceProfilesError::HttpDispatch(err)
    }
}
impl From<io::Error> for ListInstanceProfilesError {
    fn from(err: io::Error) -> ListInstanceProfilesError {
        ListInstanceProfilesError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for ListInstanceProfilesError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ListInstanceProfilesError {
    fn description(&self) -> &str {
        match *self {
            ListInstanceProfilesError::ServiceFailure(ref cause) => cause,
            ListInstanceProfilesError::Validation(ref cause) => cause,
            ListInstanceProfilesError::Credentials(ref err) => err.description(),
            ListInstanceProfilesError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            ListInstanceProfilesError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by ListInstanceProfilesForRole
#[derive(Debug, PartialEq)]
pub enum ListInstanceProfilesForRoleError {
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl ListInstanceProfilesForRoleError {
    pub fn from_body(body: &str) -> ListInstanceProfilesForRoleError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "NoSuchEntityException" => ListInstanceProfilesForRoleError::NoSuchEntity(String::from(parsed_error.message)),
                    "ServiceFailureException" => ListInstanceProfilesForRoleError::ServiceFailure(String::from(parsed_error.message)),
                    _ => ListInstanceProfilesForRoleError::Unknown(String::from(body)),
                }
            }
            Err(_) => ListInstanceProfilesForRoleError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for ListInstanceProfilesForRoleError {
    fn from(err: XmlParseError) -> ListInstanceProfilesForRoleError {
        let XmlParseError(message) = err;
        ListInstanceProfilesForRoleError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for ListInstanceProfilesForRoleError {
    fn from(err: CredentialsError) -> ListInstanceProfilesForRoleError {
        ListInstanceProfilesForRoleError::Credentials(err)
    }
}
impl From<HttpDispatchError> for ListInstanceProfilesForRoleError {
    fn from(err: HttpDispatchError) -> ListInstanceProfilesForRoleError {
        ListInstanceProfilesForRoleError::HttpDispatch(err)
    }
}
impl From<io::Error> for ListInstanceProfilesForRoleError {
    fn from(err: io::Error) -> ListInstanceProfilesForRoleError {
        ListInstanceProfilesForRoleError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for ListInstanceProfilesForRoleError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ListInstanceProfilesForRoleError {
    fn description(&self) -> &str {
        match *self {
            ListInstanceProfilesForRoleError::NoSuchEntity(ref cause) => cause,
            ListInstanceProfilesForRoleError::ServiceFailure(ref cause) => cause,
            ListInstanceProfilesForRoleError::Validation(ref cause) => cause,
            ListInstanceProfilesForRoleError::Credentials(ref err) => err.description(),
            ListInstanceProfilesForRoleError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            ListInstanceProfilesForRoleError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by ListMFADevices
#[derive(Debug, PartialEq)]
pub enum ListMFADevicesError {
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl ListMFADevicesError {
    pub fn from_body(body: &str) -> ListMFADevicesError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "NoSuchEntityException" => {
                        ListMFADevicesError::NoSuchEntity(String::from(parsed_error.message))
                    }
                    "ServiceFailureException" => {
                        ListMFADevicesError::ServiceFailure(String::from(parsed_error.message))
                    }
                    _ => ListMFADevicesError::Unknown(String::from(body)),
                }
            }
            Err(_) => ListMFADevicesError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for ListMFADevicesError {
    fn from(err: XmlParseError) -> ListMFADevicesError {
        let XmlParseError(message) = err;
        ListMFADevicesError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for ListMFADevicesError {
    fn from(err: CredentialsError) -> ListMFADevicesError {
        ListMFADevicesError::Credentials(err)
    }
}
impl From<HttpDispatchError> for ListMFADevicesError {
    fn from(err: HttpDispatchError) -> ListMFADevicesError {
        ListMFADevicesError::HttpDispatch(err)
    }
}
impl From<io::Error> for ListMFADevicesError {
    fn from(err: io::Error) -> ListMFADevicesError {
        ListMFADevicesError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for ListMFADevicesError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ListMFADevicesError {
    fn description(&self) -> &str {
        match *self {
            ListMFADevicesError::NoSuchEntity(ref cause) => cause,
            ListMFADevicesError::ServiceFailure(ref cause) => cause,
            ListMFADevicesError::Validation(ref cause) => cause,
            ListMFADevicesError::Credentials(ref err) => err.description(),
            ListMFADevicesError::HttpDispatch(ref dispatch_error) => dispatch_error.description(),
            ListMFADevicesError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by ListOpenIDConnectProviders
#[derive(Debug, PartialEq)]
pub enum ListOpenIDConnectProvidersError {
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl ListOpenIDConnectProvidersError {
    pub fn from_body(body: &str) -> ListOpenIDConnectProvidersError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "ServiceFailureException" => ListOpenIDConnectProvidersError::ServiceFailure(String::from(parsed_error.message)),
                    _ => ListOpenIDConnectProvidersError::Unknown(String::from(body)),
                }
            }
            Err(_) => ListOpenIDConnectProvidersError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for ListOpenIDConnectProvidersError {
    fn from(err: XmlParseError) -> ListOpenIDConnectProvidersError {
        let XmlParseError(message) = err;
        ListOpenIDConnectProvidersError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for ListOpenIDConnectProvidersError {
    fn from(err: CredentialsError) -> ListOpenIDConnectProvidersError {
        ListOpenIDConnectProvidersError::Credentials(err)
    }
}
impl From<HttpDispatchError> for ListOpenIDConnectProvidersError {
    fn from(err: HttpDispatchError) -> ListOpenIDConnectProvidersError {
        ListOpenIDConnectProvidersError::HttpDispatch(err)
    }
}
impl From<io::Error> for ListOpenIDConnectProvidersError {
    fn from(err: io::Error) -> ListOpenIDConnectProvidersError {
        ListOpenIDConnectProvidersError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for ListOpenIDConnectProvidersError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ListOpenIDConnectProvidersError {
    fn description(&self) -> &str {
        match *self {
            ListOpenIDConnectProvidersError::ServiceFailure(ref cause) => cause,
            ListOpenIDConnectProvidersError::Validation(ref cause) => cause,
            ListOpenIDConnectProvidersError::Credentials(ref err) => err.description(),
            ListOpenIDConnectProvidersError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            ListOpenIDConnectProvidersError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by ListPolicies
#[derive(Debug, PartialEq)]
pub enum ListPoliciesError {
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl ListPoliciesError {
    pub fn from_body(body: &str) -> ListPoliciesError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "ServiceFailureException" => {
                        ListPoliciesError::ServiceFailure(String::from(parsed_error.message))
                    }
                    _ => ListPoliciesError::Unknown(String::from(body)),
                }
            }
            Err(_) => ListPoliciesError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for ListPoliciesError {
    fn from(err: XmlParseError) -> ListPoliciesError {
        let XmlParseError(message) = err;
        ListPoliciesError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for ListPoliciesError {
    fn from(err: CredentialsError) -> ListPoliciesError {
        ListPoliciesError::Credentials(err)
    }
}
impl From<HttpDispatchError> for ListPoliciesError {
    fn from(err: HttpDispatchError) -> ListPoliciesError {
        ListPoliciesError::HttpDispatch(err)
    }
}
impl From<io::Error> for ListPoliciesError {
    fn from(err: io::Error) -> ListPoliciesError {
        ListPoliciesError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for ListPoliciesError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ListPoliciesError {
    fn description(&self) -> &str {
        match *self {
            ListPoliciesError::ServiceFailure(ref cause) => cause,
            ListPoliciesError::Validation(ref cause) => cause,
            ListPoliciesError::Credentials(ref err) => err.description(),
            ListPoliciesError::HttpDispatch(ref dispatch_error) => dispatch_error.description(),
            ListPoliciesError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by ListPolicyVersions
#[derive(Debug, PartialEq)]
pub enum ListPolicyVersionsError {
    ///<p>The request was rejected because an invalid or out-of-range value was supplied for an input parameter.</p>
    InvalidInput(String),
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl ListPolicyVersionsError {
    pub fn from_body(body: &str) -> ListPolicyVersionsError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "InvalidInputException" => {
                        ListPolicyVersionsError::InvalidInput(String::from(parsed_error.message))
                    }
                    "NoSuchEntityException" => {
                        ListPolicyVersionsError::NoSuchEntity(String::from(parsed_error.message))
                    }
                    "ServiceFailureException" => {
                        ListPolicyVersionsError::ServiceFailure(String::from(parsed_error.message))
                    }
                    _ => ListPolicyVersionsError::Unknown(String::from(body)),
                }
            }
            Err(_) => ListPolicyVersionsError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for ListPolicyVersionsError {
    fn from(err: XmlParseError) -> ListPolicyVersionsError {
        let XmlParseError(message) = err;
        ListPolicyVersionsError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for ListPolicyVersionsError {
    fn from(err: CredentialsError) -> ListPolicyVersionsError {
        ListPolicyVersionsError::Credentials(err)
    }
}
impl From<HttpDispatchError> for ListPolicyVersionsError {
    fn from(err: HttpDispatchError) -> ListPolicyVersionsError {
        ListPolicyVersionsError::HttpDispatch(err)
    }
}
impl From<io::Error> for ListPolicyVersionsError {
    fn from(err: io::Error) -> ListPolicyVersionsError {
        ListPolicyVersionsError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for ListPolicyVersionsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ListPolicyVersionsError {
    fn description(&self) -> &str {
        match *self {
            ListPolicyVersionsError::InvalidInput(ref cause) => cause,
            ListPolicyVersionsError::NoSuchEntity(ref cause) => cause,
            ListPolicyVersionsError::ServiceFailure(ref cause) => cause,
            ListPolicyVersionsError::Validation(ref cause) => cause,
            ListPolicyVersionsError::Credentials(ref err) => err.description(),
            ListPolicyVersionsError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            ListPolicyVersionsError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by ListRolePolicies
#[derive(Debug, PartialEq)]
pub enum ListRolePoliciesError {
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl ListRolePoliciesError {
    pub fn from_body(body: &str) -> ListRolePoliciesError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "NoSuchEntityException" => {
                        ListRolePoliciesError::NoSuchEntity(String::from(parsed_error.message))
                    }
                    "ServiceFailureException" => {
                        ListRolePoliciesError::ServiceFailure(String::from(parsed_error.message))
                    }
                    _ => ListRolePoliciesError::Unknown(String::from(body)),
                }
            }
            Err(_) => ListRolePoliciesError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for ListRolePoliciesError {
    fn from(err: XmlParseError) -> ListRolePoliciesError {
        let XmlParseError(message) = err;
        ListRolePoliciesError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for ListRolePoliciesError {
    fn from(err: CredentialsError) -> ListRolePoliciesError {
        ListRolePoliciesError::Credentials(err)
    }
}
impl From<HttpDispatchError> for ListRolePoliciesError {
    fn from(err: HttpDispatchError) -> ListRolePoliciesError {
        ListRolePoliciesError::HttpDispatch(err)
    }
}
impl From<io::Error> for ListRolePoliciesError {
    fn from(err: io::Error) -> ListRolePoliciesError {
        ListRolePoliciesError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for ListRolePoliciesError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ListRolePoliciesError {
    fn description(&self) -> &str {
        match *self {
            ListRolePoliciesError::NoSuchEntity(ref cause) => cause,
            ListRolePoliciesError::ServiceFailure(ref cause) => cause,
            ListRolePoliciesError::Validation(ref cause) => cause,
            ListRolePoliciesError::Credentials(ref err) => err.description(),
            ListRolePoliciesError::HttpDispatch(ref dispatch_error) => dispatch_error.description(),
            ListRolePoliciesError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by ListRoles
#[derive(Debug, PartialEq)]
pub enum ListRolesError {
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl ListRolesError {
    pub fn from_body(body: &str) -> ListRolesError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "ServiceFailureException" => {
                        ListRolesError::ServiceFailure(String::from(parsed_error.message))
                    }
                    _ => ListRolesError::Unknown(String::from(body)),
                }
            }
            Err(_) => ListRolesError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for ListRolesError {
    fn from(err: XmlParseError) -> ListRolesError {
        let XmlParseError(message) = err;
        ListRolesError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for ListRolesError {
    fn from(err: CredentialsError) -> ListRolesError {
        ListRolesError::Credentials(err)
    }
}
impl From<HttpDispatchError> for ListRolesError {
    fn from(err: HttpDispatchError) -> ListRolesError {
        ListRolesError::HttpDispatch(err)
    }
}
impl From<io::Error> for ListRolesError {
    fn from(err: io::Error) -> ListRolesError {
        ListRolesError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for ListRolesError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ListRolesError {
    fn description(&self) -> &str {
        match *self {
            ListRolesError::ServiceFailure(ref cause) => cause,
            ListRolesError::Validation(ref cause) => cause,
            ListRolesError::Credentials(ref err) => err.description(),
            ListRolesError::HttpDispatch(ref dispatch_error) => dispatch_error.description(),
            ListRolesError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by ListSAMLProviders
#[derive(Debug, PartialEq)]
pub enum ListSAMLProvidersError {
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl ListSAMLProvidersError {
    pub fn from_body(body: &str) -> ListSAMLProvidersError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "ServiceFailureException" => {
                        ListSAMLProvidersError::ServiceFailure(String::from(parsed_error.message))
                    }
                    _ => ListSAMLProvidersError::Unknown(String::from(body)),
                }
            }
            Err(_) => ListSAMLProvidersError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for ListSAMLProvidersError {
    fn from(err: XmlParseError) -> ListSAMLProvidersError {
        let XmlParseError(message) = err;
        ListSAMLProvidersError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for ListSAMLProvidersError {
    fn from(err: CredentialsError) -> ListSAMLProvidersError {
        ListSAMLProvidersError::Credentials(err)
    }
}
impl From<HttpDispatchError> for ListSAMLProvidersError {
    fn from(err: HttpDispatchError) -> ListSAMLProvidersError {
        ListSAMLProvidersError::HttpDispatch(err)
    }
}
impl From<io::Error> for ListSAMLProvidersError {
    fn from(err: io::Error) -> ListSAMLProvidersError {
        ListSAMLProvidersError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for ListSAMLProvidersError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ListSAMLProvidersError {
    fn description(&self) -> &str {
        match *self {
            ListSAMLProvidersError::ServiceFailure(ref cause) => cause,
            ListSAMLProvidersError::Validation(ref cause) => cause,
            ListSAMLProvidersError::Credentials(ref err) => err.description(),
            ListSAMLProvidersError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            ListSAMLProvidersError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by ListSSHPublicKeys
#[derive(Debug, PartialEq)]
pub enum ListSSHPublicKeysError {
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl ListSSHPublicKeysError {
    pub fn from_body(body: &str) -> ListSSHPublicKeysError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "NoSuchEntityException" => {
                        ListSSHPublicKeysError::NoSuchEntity(String::from(parsed_error.message))
                    }
                    _ => ListSSHPublicKeysError::Unknown(String::from(body)),
                }
            }
            Err(_) => ListSSHPublicKeysError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for ListSSHPublicKeysError {
    fn from(err: XmlParseError) -> ListSSHPublicKeysError {
        let XmlParseError(message) = err;
        ListSSHPublicKeysError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for ListSSHPublicKeysError {
    fn from(err: CredentialsError) -> ListSSHPublicKeysError {
        ListSSHPublicKeysError::Credentials(err)
    }
}
impl From<HttpDispatchError> for ListSSHPublicKeysError {
    fn from(err: HttpDispatchError) -> ListSSHPublicKeysError {
        ListSSHPublicKeysError::HttpDispatch(err)
    }
}
impl From<io::Error> for ListSSHPublicKeysError {
    fn from(err: io::Error) -> ListSSHPublicKeysError {
        ListSSHPublicKeysError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for ListSSHPublicKeysError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ListSSHPublicKeysError {
    fn description(&self) -> &str {
        match *self {
            ListSSHPublicKeysError::NoSuchEntity(ref cause) => cause,
            ListSSHPublicKeysError::Validation(ref cause) => cause,
            ListSSHPublicKeysError::Credentials(ref err) => err.description(),
            ListSSHPublicKeysError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            ListSSHPublicKeysError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by ListServerCertificates
#[derive(Debug, PartialEq)]
pub enum ListServerCertificatesError {
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl ListServerCertificatesError {
    pub fn from_body(body: &str) -> ListServerCertificatesError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "ServiceFailureException" => ListServerCertificatesError::ServiceFailure(String::from(parsed_error.message)),
                    _ => ListServerCertificatesError::Unknown(String::from(body)),
                }
            }
            Err(_) => ListServerCertificatesError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for ListServerCertificatesError {
    fn from(err: XmlParseError) -> ListServerCertificatesError {
        let XmlParseError(message) = err;
        ListServerCertificatesError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for ListServerCertificatesError {
    fn from(err: CredentialsError) -> ListServerCertificatesError {
        ListServerCertificatesError::Credentials(err)
    }
}
impl From<HttpDispatchError> for ListServerCertificatesError {
    fn from(err: HttpDispatchError) -> ListServerCertificatesError {
        ListServerCertificatesError::HttpDispatch(err)
    }
}
impl From<io::Error> for ListServerCertificatesError {
    fn from(err: io::Error) -> ListServerCertificatesError {
        ListServerCertificatesError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for ListServerCertificatesError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ListServerCertificatesError {
    fn description(&self) -> &str {
        match *self {
            ListServerCertificatesError::ServiceFailure(ref cause) => cause,
            ListServerCertificatesError::Validation(ref cause) => cause,
            ListServerCertificatesError::Credentials(ref err) => err.description(),
            ListServerCertificatesError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            ListServerCertificatesError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by ListServiceSpecificCredentials
#[derive(Debug, PartialEq)]
pub enum ListServiceSpecificCredentialsError {
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The specified service does not support service-specific credentials.</p>
    ServiceNotSupported(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl ListServiceSpecificCredentialsError {
    pub fn from_body(body: &str) -> ListServiceSpecificCredentialsError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "NoSuchEntityException" => ListServiceSpecificCredentialsError::NoSuchEntity(String::from(parsed_error.message)),
                    "ServiceNotSupportedException" => ListServiceSpecificCredentialsError::ServiceNotSupported(String::from(parsed_error.message)),
                    _ => ListServiceSpecificCredentialsError::Unknown(String::from(body)),
                }
            }
            Err(_) => ListServiceSpecificCredentialsError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for ListServiceSpecificCredentialsError {
    fn from(err: XmlParseError) -> ListServiceSpecificCredentialsError {
        let XmlParseError(message) = err;
        ListServiceSpecificCredentialsError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for ListServiceSpecificCredentialsError {
    fn from(err: CredentialsError) -> ListServiceSpecificCredentialsError {
        ListServiceSpecificCredentialsError::Credentials(err)
    }
}
impl From<HttpDispatchError> for ListServiceSpecificCredentialsError {
    fn from(err: HttpDispatchError) -> ListServiceSpecificCredentialsError {
        ListServiceSpecificCredentialsError::HttpDispatch(err)
    }
}
impl From<io::Error> for ListServiceSpecificCredentialsError {
    fn from(err: io::Error) -> ListServiceSpecificCredentialsError {
        ListServiceSpecificCredentialsError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for ListServiceSpecificCredentialsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ListServiceSpecificCredentialsError {
    fn description(&self) -> &str {
        match *self {
            ListServiceSpecificCredentialsError::NoSuchEntity(ref cause) => cause,
            ListServiceSpecificCredentialsError::ServiceNotSupported(ref cause) => cause,
            ListServiceSpecificCredentialsError::Validation(ref cause) => cause,
            ListServiceSpecificCredentialsError::Credentials(ref err) => err.description(),
            ListServiceSpecificCredentialsError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            ListServiceSpecificCredentialsError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by ListSigningCertificates
#[derive(Debug, PartialEq)]
pub enum ListSigningCertificatesError {
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl ListSigningCertificatesError {
    pub fn from_body(body: &str) -> ListSigningCertificatesError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "NoSuchEntityException" => ListSigningCertificatesError::NoSuchEntity(String::from(parsed_error.message)),
                    "ServiceFailureException" => ListSigningCertificatesError::ServiceFailure(String::from(parsed_error.message)),
                    _ => ListSigningCertificatesError::Unknown(String::from(body)),
                }
            }
            Err(_) => ListSigningCertificatesError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for ListSigningCertificatesError {
    fn from(err: XmlParseError) -> ListSigningCertificatesError {
        let XmlParseError(message) = err;
        ListSigningCertificatesError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for ListSigningCertificatesError {
    fn from(err: CredentialsError) -> ListSigningCertificatesError {
        ListSigningCertificatesError::Credentials(err)
    }
}
impl From<HttpDispatchError> for ListSigningCertificatesError {
    fn from(err: HttpDispatchError) -> ListSigningCertificatesError {
        ListSigningCertificatesError::HttpDispatch(err)
    }
}
impl From<io::Error> for ListSigningCertificatesError {
    fn from(err: io::Error) -> ListSigningCertificatesError {
        ListSigningCertificatesError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for ListSigningCertificatesError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ListSigningCertificatesError {
    fn description(&self) -> &str {
        match *self {
            ListSigningCertificatesError::NoSuchEntity(ref cause) => cause,
            ListSigningCertificatesError::ServiceFailure(ref cause) => cause,
            ListSigningCertificatesError::Validation(ref cause) => cause,
            ListSigningCertificatesError::Credentials(ref err) => err.description(),
            ListSigningCertificatesError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            ListSigningCertificatesError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by ListUserPolicies
#[derive(Debug, PartialEq)]
pub enum ListUserPoliciesError {
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl ListUserPoliciesError {
    pub fn from_body(body: &str) -> ListUserPoliciesError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "NoSuchEntityException" => {
                        ListUserPoliciesError::NoSuchEntity(String::from(parsed_error.message))
                    }
                    "ServiceFailureException" => {
                        ListUserPoliciesError::ServiceFailure(String::from(parsed_error.message))
                    }
                    _ => ListUserPoliciesError::Unknown(String::from(body)),
                }
            }
            Err(_) => ListUserPoliciesError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for ListUserPoliciesError {
    fn from(err: XmlParseError) -> ListUserPoliciesError {
        let XmlParseError(message) = err;
        ListUserPoliciesError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for ListUserPoliciesError {
    fn from(err: CredentialsError) -> ListUserPoliciesError {
        ListUserPoliciesError::Credentials(err)
    }
}
impl From<HttpDispatchError> for ListUserPoliciesError {
    fn from(err: HttpDispatchError) -> ListUserPoliciesError {
        ListUserPoliciesError::HttpDispatch(err)
    }
}
impl From<io::Error> for ListUserPoliciesError {
    fn from(err: io::Error) -> ListUserPoliciesError {
        ListUserPoliciesError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for ListUserPoliciesError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ListUserPoliciesError {
    fn description(&self) -> &str {
        match *self {
            ListUserPoliciesError::NoSuchEntity(ref cause) => cause,
            ListUserPoliciesError::ServiceFailure(ref cause) => cause,
            ListUserPoliciesError::Validation(ref cause) => cause,
            ListUserPoliciesError::Credentials(ref err) => err.description(),
            ListUserPoliciesError::HttpDispatch(ref dispatch_error) => dispatch_error.description(),
            ListUserPoliciesError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by ListUsers
#[derive(Debug, PartialEq)]
pub enum ListUsersError {
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl ListUsersError {
    pub fn from_body(body: &str) -> ListUsersError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "ServiceFailureException" => {
                        ListUsersError::ServiceFailure(String::from(parsed_error.message))
                    }
                    _ => ListUsersError::Unknown(String::from(body)),
                }
            }
            Err(_) => ListUsersError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for ListUsersError {
    fn from(err: XmlParseError) -> ListUsersError {
        let XmlParseError(message) = err;
        ListUsersError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for ListUsersError {
    fn from(err: CredentialsError) -> ListUsersError {
        ListUsersError::Credentials(err)
    }
}
impl From<HttpDispatchError> for ListUsersError {
    fn from(err: HttpDispatchError) -> ListUsersError {
        ListUsersError::HttpDispatch(err)
    }
}
impl From<io::Error> for ListUsersError {
    fn from(err: io::Error) -> ListUsersError {
        ListUsersError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for ListUsersError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ListUsersError {
    fn description(&self) -> &str {
        match *self {
            ListUsersError::ServiceFailure(ref cause) => cause,
            ListUsersError::Validation(ref cause) => cause,
            ListUsersError::Credentials(ref err) => err.description(),
            ListUsersError::HttpDispatch(ref dispatch_error) => dispatch_error.description(),
            ListUsersError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by ListVirtualMFADevices
#[derive(Debug, PartialEq)]
pub enum ListVirtualMFADevicesError {
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl ListVirtualMFADevicesError {
    pub fn from_body(body: &str) -> ListVirtualMFADevicesError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    _ => ListVirtualMFADevicesError::Unknown(String::from(body)),
                }
            }
            Err(_) => ListVirtualMFADevicesError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for ListVirtualMFADevicesError {
    fn from(err: XmlParseError) -> ListVirtualMFADevicesError {
        let XmlParseError(message) = err;
        ListVirtualMFADevicesError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for ListVirtualMFADevicesError {
    fn from(err: CredentialsError) -> ListVirtualMFADevicesError {
        ListVirtualMFADevicesError::Credentials(err)
    }
}
impl From<HttpDispatchError> for ListVirtualMFADevicesError {
    fn from(err: HttpDispatchError) -> ListVirtualMFADevicesError {
        ListVirtualMFADevicesError::HttpDispatch(err)
    }
}
impl From<io::Error> for ListVirtualMFADevicesError {
    fn from(err: io::Error) -> ListVirtualMFADevicesError {
        ListVirtualMFADevicesError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for ListVirtualMFADevicesError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ListVirtualMFADevicesError {
    fn description(&self) -> &str {
        match *self {
            ListVirtualMFADevicesError::Validation(ref cause) => cause,
            ListVirtualMFADevicesError::Credentials(ref err) => err.description(),
            ListVirtualMFADevicesError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            ListVirtualMFADevicesError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by PutGroupPolicy
#[derive(Debug, PartialEq)]
pub enum PutGroupPolicyError {
    ///<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>
    LimitExceeded(String),
    ///<p>The request was rejected because the policy document was malformed. The error message describes the specific error.</p>
    MalformedPolicyDocument(String),
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl PutGroupPolicyError {
    pub fn from_body(body: &str) -> PutGroupPolicyError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "LimitExceededException" => {
                        PutGroupPolicyError::LimitExceeded(String::from(parsed_error.message))
                    }
                    "MalformedPolicyDocumentException" => PutGroupPolicyError::MalformedPolicyDocument(String::from(parsed_error.message)),
                    "NoSuchEntityException" => {
                        PutGroupPolicyError::NoSuchEntity(String::from(parsed_error.message))
                    }
                    "ServiceFailureException" => {
                        PutGroupPolicyError::ServiceFailure(String::from(parsed_error.message))
                    }
                    _ => PutGroupPolicyError::Unknown(String::from(body)),
                }
            }
            Err(_) => PutGroupPolicyError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for PutGroupPolicyError {
    fn from(err: XmlParseError) -> PutGroupPolicyError {
        let XmlParseError(message) = err;
        PutGroupPolicyError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for PutGroupPolicyError {
    fn from(err: CredentialsError) -> PutGroupPolicyError {
        PutGroupPolicyError::Credentials(err)
    }
}
impl From<HttpDispatchError> for PutGroupPolicyError {
    fn from(err: HttpDispatchError) -> PutGroupPolicyError {
        PutGroupPolicyError::HttpDispatch(err)
    }
}
impl From<io::Error> for PutGroupPolicyError {
    fn from(err: io::Error) -> PutGroupPolicyError {
        PutGroupPolicyError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for PutGroupPolicyError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for PutGroupPolicyError {
    fn description(&self) -> &str {
        match *self {
            PutGroupPolicyError::LimitExceeded(ref cause) => cause,
            PutGroupPolicyError::MalformedPolicyDocument(ref cause) => cause,
            PutGroupPolicyError::NoSuchEntity(ref cause) => cause,
            PutGroupPolicyError::ServiceFailure(ref cause) => cause,
            PutGroupPolicyError::Validation(ref cause) => cause,
            PutGroupPolicyError::Credentials(ref err) => err.description(),
            PutGroupPolicyError::HttpDispatch(ref dispatch_error) => dispatch_error.description(),
            PutGroupPolicyError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by PutRolePolicy
#[derive(Debug, PartialEq)]
pub enum PutRolePolicyError {
    ///<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>
    LimitExceeded(String),
    ///<p>The request was rejected because the policy document was malformed. The error message describes the specific error.</p>
    MalformedPolicyDocument(String),
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    ///<p>The request was rejected because only the service that depends on the service-linked role can modify or delete the role on your behalf. The error message includes the name of the service that depends on this service-linked role. You must request the change through that service.</p>
    UnmodifiableEntity(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl PutRolePolicyError {
    pub fn from_body(body: &str) -> PutRolePolicyError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "LimitExceededException" => {
                        PutRolePolicyError::LimitExceeded(String::from(parsed_error.message))
                    }
                    "MalformedPolicyDocumentException" => PutRolePolicyError::MalformedPolicyDocument(String::from(parsed_error.message)),
                    "NoSuchEntityException" => {
                        PutRolePolicyError::NoSuchEntity(String::from(parsed_error.message))
                    }
                    "ServiceFailureException" => {
                        PutRolePolicyError::ServiceFailure(String::from(parsed_error.message))
                    }
                    "UnmodifiableEntityException" => {
                        PutRolePolicyError::UnmodifiableEntity(String::from(parsed_error.message))
                    }
                    _ => PutRolePolicyError::Unknown(String::from(body)),
                }
            }
            Err(_) => PutRolePolicyError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for PutRolePolicyError {
    fn from(err: XmlParseError) -> PutRolePolicyError {
        let XmlParseError(message) = err;
        PutRolePolicyError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for PutRolePolicyError {
    fn from(err: CredentialsError) -> PutRolePolicyError {
        PutRolePolicyError::Credentials(err)
    }
}
impl From<HttpDispatchError> for PutRolePolicyError {
    fn from(err: HttpDispatchError) -> PutRolePolicyError {
        PutRolePolicyError::HttpDispatch(err)
    }
}
impl From<io::Error> for PutRolePolicyError {
    fn from(err: io::Error) -> PutRolePolicyError {
        PutRolePolicyError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for PutRolePolicyError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for PutRolePolicyError {
    fn description(&self) -> &str {
        match *self {
            PutRolePolicyError::LimitExceeded(ref cause) => cause,
            PutRolePolicyError::MalformedPolicyDocument(ref cause) => cause,
            PutRolePolicyError::NoSuchEntity(ref cause) => cause,
            PutRolePolicyError::ServiceFailure(ref cause) => cause,
            PutRolePolicyError::UnmodifiableEntity(ref cause) => cause,
            PutRolePolicyError::Validation(ref cause) => cause,
            PutRolePolicyError::Credentials(ref err) => err.description(),
            PutRolePolicyError::HttpDispatch(ref dispatch_error) => dispatch_error.description(),
            PutRolePolicyError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by PutUserPolicy
#[derive(Debug, PartialEq)]
pub enum PutUserPolicyError {
    ///<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>
    LimitExceeded(String),
    ///<p>The request was rejected because the policy document was malformed. The error message describes the specific error.</p>
    MalformedPolicyDocument(String),
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl PutUserPolicyError {
    pub fn from_body(body: &str) -> PutUserPolicyError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "LimitExceededException" => {
                        PutUserPolicyError::LimitExceeded(String::from(parsed_error.message))
                    }
                    "MalformedPolicyDocumentException" => PutUserPolicyError::MalformedPolicyDocument(String::from(parsed_error.message)),
                    "NoSuchEntityException" => {
                        PutUserPolicyError::NoSuchEntity(String::from(parsed_error.message))
                    }
                    "ServiceFailureException" => {
                        PutUserPolicyError::ServiceFailure(String::from(parsed_error.message))
                    }
                    _ => PutUserPolicyError::Unknown(String::from(body)),
                }
            }
            Err(_) => PutUserPolicyError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for PutUserPolicyError {
    fn from(err: XmlParseError) -> PutUserPolicyError {
        let XmlParseError(message) = err;
        PutUserPolicyError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for PutUserPolicyError {
    fn from(err: CredentialsError) -> PutUserPolicyError {
        PutUserPolicyError::Credentials(err)
    }
}
impl From<HttpDispatchError> for PutUserPolicyError {
    fn from(err: HttpDispatchError) -> PutUserPolicyError {
        PutUserPolicyError::HttpDispatch(err)
    }
}
impl From<io::Error> for PutUserPolicyError {
    fn from(err: io::Error) -> PutUserPolicyError {
        PutUserPolicyError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for PutUserPolicyError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for PutUserPolicyError {
    fn description(&self) -> &str {
        match *self {
            PutUserPolicyError::LimitExceeded(ref cause) => cause,
            PutUserPolicyError::MalformedPolicyDocument(ref cause) => cause,
            PutUserPolicyError::NoSuchEntity(ref cause) => cause,
            PutUserPolicyError::ServiceFailure(ref cause) => cause,
            PutUserPolicyError::Validation(ref cause) => cause,
            PutUserPolicyError::Credentials(ref err) => err.description(),
            PutUserPolicyError::HttpDispatch(ref dispatch_error) => dispatch_error.description(),
            PutUserPolicyError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by RemoveClientIDFromOpenIDConnectProvider
#[derive(Debug, PartialEq)]
pub enum RemoveClientIDFromOpenIDConnectProviderError {
    ///<p>The request was rejected because an invalid or out-of-range value was supplied for an input parameter.</p>
    InvalidInput(String),
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl RemoveClientIDFromOpenIDConnectProviderError {
    pub fn from_body(body: &str) -> RemoveClientIDFromOpenIDConnectProviderError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "InvalidInputException" => RemoveClientIDFromOpenIDConnectProviderError::InvalidInput(String::from(parsed_error.message)),
                    "NoSuchEntityException" => RemoveClientIDFromOpenIDConnectProviderError::NoSuchEntity(String::from(parsed_error.message)),
                    "ServiceFailureException" => RemoveClientIDFromOpenIDConnectProviderError::ServiceFailure(String::from(parsed_error.message)),
                    _ => RemoveClientIDFromOpenIDConnectProviderError::Unknown(String::from(body)),
                }
            }
            Err(_) => RemoveClientIDFromOpenIDConnectProviderError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for RemoveClientIDFromOpenIDConnectProviderError {
    fn from(err: XmlParseError) -> RemoveClientIDFromOpenIDConnectProviderError {
        let XmlParseError(message) = err;
        RemoveClientIDFromOpenIDConnectProviderError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for RemoveClientIDFromOpenIDConnectProviderError {
    fn from(err: CredentialsError) -> RemoveClientIDFromOpenIDConnectProviderError {
        RemoveClientIDFromOpenIDConnectProviderError::Credentials(err)
    }
}
impl From<HttpDispatchError> for RemoveClientIDFromOpenIDConnectProviderError {
    fn from(err: HttpDispatchError) -> RemoveClientIDFromOpenIDConnectProviderError {
        RemoveClientIDFromOpenIDConnectProviderError::HttpDispatch(err)
    }
}
impl From<io::Error> for RemoveClientIDFromOpenIDConnectProviderError {
    fn from(err: io::Error) -> RemoveClientIDFromOpenIDConnectProviderError {
        RemoveClientIDFromOpenIDConnectProviderError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for RemoveClientIDFromOpenIDConnectProviderError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for RemoveClientIDFromOpenIDConnectProviderError {
    fn description(&self) -> &str {
        match *self {
            RemoveClientIDFromOpenIDConnectProviderError::InvalidInput(ref cause) => cause,
            RemoveClientIDFromOpenIDConnectProviderError::NoSuchEntity(ref cause) => cause,
            RemoveClientIDFromOpenIDConnectProviderError::ServiceFailure(ref cause) => cause,
            RemoveClientIDFromOpenIDConnectProviderError::Validation(ref cause) => cause,
            RemoveClientIDFromOpenIDConnectProviderError::Credentials(ref err) => err.description(),
            RemoveClientIDFromOpenIDConnectProviderError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            RemoveClientIDFromOpenIDConnectProviderError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by RemoveRoleFromInstanceProfile
#[derive(Debug, PartialEq)]
pub enum RemoveRoleFromInstanceProfileError {
    ///<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>
    LimitExceeded(String),
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    ///<p>The request was rejected because only the service that depends on the service-linked role can modify or delete the role on your behalf. The error message includes the name of the service that depends on this service-linked role. You must request the change through that service.</p>
    UnmodifiableEntity(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl RemoveRoleFromInstanceProfileError {
    pub fn from_body(body: &str) -> RemoveRoleFromInstanceProfileError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "LimitExceededException" => RemoveRoleFromInstanceProfileError::LimitExceeded(String::from(parsed_error.message)),
                    "NoSuchEntityException" => RemoveRoleFromInstanceProfileError::NoSuchEntity(String::from(parsed_error.message)),
                    "ServiceFailureException" => RemoveRoleFromInstanceProfileError::ServiceFailure(String::from(parsed_error.message)),
                    "UnmodifiableEntityException" => RemoveRoleFromInstanceProfileError::UnmodifiableEntity(String::from(parsed_error.message)),
                    _ => RemoveRoleFromInstanceProfileError::Unknown(String::from(body)),
                }
            }
            Err(_) => RemoveRoleFromInstanceProfileError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for RemoveRoleFromInstanceProfileError {
    fn from(err: XmlParseError) -> RemoveRoleFromInstanceProfileError {
        let XmlParseError(message) = err;
        RemoveRoleFromInstanceProfileError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for RemoveRoleFromInstanceProfileError {
    fn from(err: CredentialsError) -> RemoveRoleFromInstanceProfileError {
        RemoveRoleFromInstanceProfileError::Credentials(err)
    }
}
impl From<HttpDispatchError> for RemoveRoleFromInstanceProfileError {
    fn from(err: HttpDispatchError) -> RemoveRoleFromInstanceProfileError {
        RemoveRoleFromInstanceProfileError::HttpDispatch(err)
    }
}
impl From<io::Error> for RemoveRoleFromInstanceProfileError {
    fn from(err: io::Error) -> RemoveRoleFromInstanceProfileError {
        RemoveRoleFromInstanceProfileError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for RemoveRoleFromInstanceProfileError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for RemoveRoleFromInstanceProfileError {
    fn description(&self) -> &str {
        match *self {
            RemoveRoleFromInstanceProfileError::LimitExceeded(ref cause) => cause,
            RemoveRoleFromInstanceProfileError::NoSuchEntity(ref cause) => cause,
            RemoveRoleFromInstanceProfileError::ServiceFailure(ref cause) => cause,
            RemoveRoleFromInstanceProfileError::UnmodifiableEntity(ref cause) => cause,
            RemoveRoleFromInstanceProfileError::Validation(ref cause) => cause,
            RemoveRoleFromInstanceProfileError::Credentials(ref err) => err.description(),
            RemoveRoleFromInstanceProfileError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            RemoveRoleFromInstanceProfileError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by RemoveUserFromGroup
#[derive(Debug, PartialEq)]
pub enum RemoveUserFromGroupError {
    ///<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>
    LimitExceeded(String),
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl RemoveUserFromGroupError {
    pub fn from_body(body: &str) -> RemoveUserFromGroupError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "LimitExceededException" => {
                        RemoveUserFromGroupError::LimitExceeded(String::from(parsed_error.message))
                    }
                    "NoSuchEntityException" => {
                        RemoveUserFromGroupError::NoSuchEntity(String::from(parsed_error.message))
                    }
                    "ServiceFailureException" => {
                        RemoveUserFromGroupError::ServiceFailure(String::from(parsed_error.message))
                    }
                    _ => RemoveUserFromGroupError::Unknown(String::from(body)),
                }
            }
            Err(_) => RemoveUserFromGroupError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for RemoveUserFromGroupError {
    fn from(err: XmlParseError) -> RemoveUserFromGroupError {
        let XmlParseError(message) = err;
        RemoveUserFromGroupError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for RemoveUserFromGroupError {
    fn from(err: CredentialsError) -> RemoveUserFromGroupError {
        RemoveUserFromGroupError::Credentials(err)
    }
}
impl From<HttpDispatchError> for RemoveUserFromGroupError {
    fn from(err: HttpDispatchError) -> RemoveUserFromGroupError {
        RemoveUserFromGroupError::HttpDispatch(err)
    }
}
impl From<io::Error> for RemoveUserFromGroupError {
    fn from(err: io::Error) -> RemoveUserFromGroupError {
        RemoveUserFromGroupError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for RemoveUserFromGroupError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for RemoveUserFromGroupError {
    fn description(&self) -> &str {
        match *self {
            RemoveUserFromGroupError::LimitExceeded(ref cause) => cause,
            RemoveUserFromGroupError::NoSuchEntity(ref cause) => cause,
            RemoveUserFromGroupError::ServiceFailure(ref cause) => cause,
            RemoveUserFromGroupError::Validation(ref cause) => cause,
            RemoveUserFromGroupError::Credentials(ref err) => err.description(),
            RemoveUserFromGroupError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            RemoveUserFromGroupError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by ResetServiceSpecificCredential
#[derive(Debug, PartialEq)]
pub enum ResetServiceSpecificCredentialError {
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl ResetServiceSpecificCredentialError {
    pub fn from_body(body: &str) -> ResetServiceSpecificCredentialError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "NoSuchEntityException" => ResetServiceSpecificCredentialError::NoSuchEntity(String::from(parsed_error.message)),
                    _ => ResetServiceSpecificCredentialError::Unknown(String::from(body)),
                }
            }
            Err(_) => ResetServiceSpecificCredentialError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for ResetServiceSpecificCredentialError {
    fn from(err: XmlParseError) -> ResetServiceSpecificCredentialError {
        let XmlParseError(message) = err;
        ResetServiceSpecificCredentialError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for ResetServiceSpecificCredentialError {
    fn from(err: CredentialsError) -> ResetServiceSpecificCredentialError {
        ResetServiceSpecificCredentialError::Credentials(err)
    }
}
impl From<HttpDispatchError> for ResetServiceSpecificCredentialError {
    fn from(err: HttpDispatchError) -> ResetServiceSpecificCredentialError {
        ResetServiceSpecificCredentialError::HttpDispatch(err)
    }
}
impl From<io::Error> for ResetServiceSpecificCredentialError {
    fn from(err: io::Error) -> ResetServiceSpecificCredentialError {
        ResetServiceSpecificCredentialError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for ResetServiceSpecificCredentialError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ResetServiceSpecificCredentialError {
    fn description(&self) -> &str {
        match *self {
            ResetServiceSpecificCredentialError::NoSuchEntity(ref cause) => cause,
            ResetServiceSpecificCredentialError::Validation(ref cause) => cause,
            ResetServiceSpecificCredentialError::Credentials(ref err) => err.description(),
            ResetServiceSpecificCredentialError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            ResetServiceSpecificCredentialError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by ResyncMFADevice
#[derive(Debug, PartialEq)]
pub enum ResyncMFADeviceError {
    ///<p>The request was rejected because the authentication code was not recognized. The error message describes the specific error.</p>
    InvalidAuthenticationCode(String),
    ///<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>
    LimitExceeded(String),
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl ResyncMFADeviceError {
    pub fn from_body(body: &str) -> ResyncMFADeviceError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "InvalidAuthenticationCodeException" => ResyncMFADeviceError::InvalidAuthenticationCode(String::from(parsed_error.message)),
                    "LimitExceededException" => {
                        ResyncMFADeviceError::LimitExceeded(String::from(parsed_error.message))
                    }
                    "NoSuchEntityException" => {
                        ResyncMFADeviceError::NoSuchEntity(String::from(parsed_error.message))
                    }
                    "ServiceFailureException" => {
                        ResyncMFADeviceError::ServiceFailure(String::from(parsed_error.message))
                    }
                    _ => ResyncMFADeviceError::Unknown(String::from(body)),
                }
            }
            Err(_) => ResyncMFADeviceError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for ResyncMFADeviceError {
    fn from(err: XmlParseError) -> ResyncMFADeviceError {
        let XmlParseError(message) = err;
        ResyncMFADeviceError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for ResyncMFADeviceError {
    fn from(err: CredentialsError) -> ResyncMFADeviceError {
        ResyncMFADeviceError::Credentials(err)
    }
}
impl From<HttpDispatchError> for ResyncMFADeviceError {
    fn from(err: HttpDispatchError) -> ResyncMFADeviceError {
        ResyncMFADeviceError::HttpDispatch(err)
    }
}
impl From<io::Error> for ResyncMFADeviceError {
    fn from(err: io::Error) -> ResyncMFADeviceError {
        ResyncMFADeviceError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for ResyncMFADeviceError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ResyncMFADeviceError {
    fn description(&self) -> &str {
        match *self {
            ResyncMFADeviceError::InvalidAuthenticationCode(ref cause) => cause,
            ResyncMFADeviceError::LimitExceeded(ref cause) => cause,
            ResyncMFADeviceError::NoSuchEntity(ref cause) => cause,
            ResyncMFADeviceError::ServiceFailure(ref cause) => cause,
            ResyncMFADeviceError::Validation(ref cause) => cause,
            ResyncMFADeviceError::Credentials(ref err) => err.description(),
            ResyncMFADeviceError::HttpDispatch(ref dispatch_error) => dispatch_error.description(),
            ResyncMFADeviceError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by SetDefaultPolicyVersion
#[derive(Debug, PartialEq)]
pub enum SetDefaultPolicyVersionError {
    ///<p>The request was rejected because an invalid or out-of-range value was supplied for an input parameter.</p>
    InvalidInput(String),
    ///<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>
    LimitExceeded(String),
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl SetDefaultPolicyVersionError {
    pub fn from_body(body: &str) -> SetDefaultPolicyVersionError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "InvalidInputException" => SetDefaultPolicyVersionError::InvalidInput(String::from(parsed_error.message)),
                    "LimitExceededException" => SetDefaultPolicyVersionError::LimitExceeded(String::from(parsed_error.message)),
                    "NoSuchEntityException" => SetDefaultPolicyVersionError::NoSuchEntity(String::from(parsed_error.message)),
                    "ServiceFailureException" => SetDefaultPolicyVersionError::ServiceFailure(String::from(parsed_error.message)),
                    _ => SetDefaultPolicyVersionError::Unknown(String::from(body)),
                }
            }
            Err(_) => SetDefaultPolicyVersionError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for SetDefaultPolicyVersionError {
    fn from(err: XmlParseError) -> SetDefaultPolicyVersionError {
        let XmlParseError(message) = err;
        SetDefaultPolicyVersionError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for SetDefaultPolicyVersionError {
    fn from(err: CredentialsError) -> SetDefaultPolicyVersionError {
        SetDefaultPolicyVersionError::Credentials(err)
    }
}
impl From<HttpDispatchError> for SetDefaultPolicyVersionError {
    fn from(err: HttpDispatchError) -> SetDefaultPolicyVersionError {
        SetDefaultPolicyVersionError::HttpDispatch(err)
    }
}
impl From<io::Error> for SetDefaultPolicyVersionError {
    fn from(err: io::Error) -> SetDefaultPolicyVersionError {
        SetDefaultPolicyVersionError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for SetDefaultPolicyVersionError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for SetDefaultPolicyVersionError {
    fn description(&self) -> &str {
        match *self {
            SetDefaultPolicyVersionError::InvalidInput(ref cause) => cause,
            SetDefaultPolicyVersionError::LimitExceeded(ref cause) => cause,
            SetDefaultPolicyVersionError::NoSuchEntity(ref cause) => cause,
            SetDefaultPolicyVersionError::ServiceFailure(ref cause) => cause,
            SetDefaultPolicyVersionError::Validation(ref cause) => cause,
            SetDefaultPolicyVersionError::Credentials(ref err) => err.description(),
            SetDefaultPolicyVersionError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            SetDefaultPolicyVersionError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by SimulateCustomPolicy
#[derive(Debug, PartialEq)]
pub enum SimulateCustomPolicyError {
    ///<p>The request was rejected because an invalid or out-of-range value was supplied for an input parameter.</p>
    InvalidInput(String),
    ///<p>The request failed because a provided policy could not be successfully evaluated. An additional detail message indicates the source of the failure.</p>
    PolicyEvaluation(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl SimulateCustomPolicyError {
    pub fn from_body(body: &str) -> SimulateCustomPolicyError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "InvalidInputException" => {
                        SimulateCustomPolicyError::InvalidInput(String::from(parsed_error.message))
                    }
                    "PolicyEvaluationException" => SimulateCustomPolicyError::PolicyEvaluation(String::from(parsed_error.message)),
                    _ => SimulateCustomPolicyError::Unknown(String::from(body)),
                }
            }
            Err(_) => SimulateCustomPolicyError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for SimulateCustomPolicyError {
    fn from(err: XmlParseError) -> SimulateCustomPolicyError {
        let XmlParseError(message) = err;
        SimulateCustomPolicyError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for SimulateCustomPolicyError {
    fn from(err: CredentialsError) -> SimulateCustomPolicyError {
        SimulateCustomPolicyError::Credentials(err)
    }
}
impl From<HttpDispatchError> for SimulateCustomPolicyError {
    fn from(err: HttpDispatchError) -> SimulateCustomPolicyError {
        SimulateCustomPolicyError::HttpDispatch(err)
    }
}
impl From<io::Error> for SimulateCustomPolicyError {
    fn from(err: io::Error) -> SimulateCustomPolicyError {
        SimulateCustomPolicyError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for SimulateCustomPolicyError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for SimulateCustomPolicyError {
    fn description(&self) -> &str {
        match *self {
            SimulateCustomPolicyError::InvalidInput(ref cause) => cause,
            SimulateCustomPolicyError::PolicyEvaluation(ref cause) => cause,
            SimulateCustomPolicyError::Validation(ref cause) => cause,
            SimulateCustomPolicyError::Credentials(ref err) => err.description(),
            SimulateCustomPolicyError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            SimulateCustomPolicyError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by SimulatePrincipalPolicy
#[derive(Debug, PartialEq)]
pub enum SimulatePrincipalPolicyError {
    ///<p>The request was rejected because an invalid or out-of-range value was supplied for an input parameter.</p>
    InvalidInput(String),
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request failed because a provided policy could not be successfully evaluated. An additional detail message indicates the source of the failure.</p>
    PolicyEvaluation(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl SimulatePrincipalPolicyError {
    pub fn from_body(body: &str) -> SimulatePrincipalPolicyError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "InvalidInputException" => SimulatePrincipalPolicyError::InvalidInput(String::from(parsed_error.message)),
                    "NoSuchEntityException" => SimulatePrincipalPolicyError::NoSuchEntity(String::from(parsed_error.message)),
                    "PolicyEvaluationException" => SimulatePrincipalPolicyError::PolicyEvaluation(String::from(parsed_error.message)),
                    _ => SimulatePrincipalPolicyError::Unknown(String::from(body)),
                }
            }
            Err(_) => SimulatePrincipalPolicyError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for SimulatePrincipalPolicyError {
    fn from(err: XmlParseError) -> SimulatePrincipalPolicyError {
        let XmlParseError(message) = err;
        SimulatePrincipalPolicyError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for SimulatePrincipalPolicyError {
    fn from(err: CredentialsError) -> SimulatePrincipalPolicyError {
        SimulatePrincipalPolicyError::Credentials(err)
    }
}
impl From<HttpDispatchError> for SimulatePrincipalPolicyError {
    fn from(err: HttpDispatchError) -> SimulatePrincipalPolicyError {
        SimulatePrincipalPolicyError::HttpDispatch(err)
    }
}
impl From<io::Error> for SimulatePrincipalPolicyError {
    fn from(err: io::Error) -> SimulatePrincipalPolicyError {
        SimulatePrincipalPolicyError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for SimulatePrincipalPolicyError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for SimulatePrincipalPolicyError {
    fn description(&self) -> &str {
        match *self {
            SimulatePrincipalPolicyError::InvalidInput(ref cause) => cause,
            SimulatePrincipalPolicyError::NoSuchEntity(ref cause) => cause,
            SimulatePrincipalPolicyError::PolicyEvaluation(ref cause) => cause,
            SimulatePrincipalPolicyError::Validation(ref cause) => cause,
            SimulatePrincipalPolicyError::Credentials(ref err) => err.description(),
            SimulatePrincipalPolicyError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            SimulatePrincipalPolicyError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by UpdateAccessKey
#[derive(Debug, PartialEq)]
pub enum UpdateAccessKeyError {
    ///<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>
    LimitExceeded(String),
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl UpdateAccessKeyError {
    pub fn from_body(body: &str) -> UpdateAccessKeyError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "LimitExceededException" => {
                        UpdateAccessKeyError::LimitExceeded(String::from(parsed_error.message))
                    }
                    "NoSuchEntityException" => {
                        UpdateAccessKeyError::NoSuchEntity(String::from(parsed_error.message))
                    }
                    "ServiceFailureException" => {
                        UpdateAccessKeyError::ServiceFailure(String::from(parsed_error.message))
                    }
                    _ => UpdateAccessKeyError::Unknown(String::from(body)),
                }
            }
            Err(_) => UpdateAccessKeyError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for UpdateAccessKeyError {
    fn from(err: XmlParseError) -> UpdateAccessKeyError {
        let XmlParseError(message) = err;
        UpdateAccessKeyError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for UpdateAccessKeyError {
    fn from(err: CredentialsError) -> UpdateAccessKeyError {
        UpdateAccessKeyError::Credentials(err)
    }
}
impl From<HttpDispatchError> for UpdateAccessKeyError {
    fn from(err: HttpDispatchError) -> UpdateAccessKeyError {
        UpdateAccessKeyError::HttpDispatch(err)
    }
}
impl From<io::Error> for UpdateAccessKeyError {
    fn from(err: io::Error) -> UpdateAccessKeyError {
        UpdateAccessKeyError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for UpdateAccessKeyError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for UpdateAccessKeyError {
    fn description(&self) -> &str {
        match *self {
            UpdateAccessKeyError::LimitExceeded(ref cause) => cause,
            UpdateAccessKeyError::NoSuchEntity(ref cause) => cause,
            UpdateAccessKeyError::ServiceFailure(ref cause) => cause,
            UpdateAccessKeyError::Validation(ref cause) => cause,
            UpdateAccessKeyError::Credentials(ref err) => err.description(),
            UpdateAccessKeyError::HttpDispatch(ref dispatch_error) => dispatch_error.description(),
            UpdateAccessKeyError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by UpdateAccountPasswordPolicy
#[derive(Debug, PartialEq)]
pub enum UpdateAccountPasswordPolicyError {
    ///<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>
    LimitExceeded(String),
    ///<p>The request was rejected because the policy document was malformed. The error message describes the specific error.</p>
    MalformedPolicyDocument(String),
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl UpdateAccountPasswordPolicyError {
    pub fn from_body(body: &str) -> UpdateAccountPasswordPolicyError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "LimitExceededException" => UpdateAccountPasswordPolicyError::LimitExceeded(String::from(parsed_error.message)),
                    "MalformedPolicyDocumentException" => UpdateAccountPasswordPolicyError::MalformedPolicyDocument(String::from(parsed_error.message)),
                    "NoSuchEntityException" => UpdateAccountPasswordPolicyError::NoSuchEntity(String::from(parsed_error.message)),
                    "ServiceFailureException" => UpdateAccountPasswordPolicyError::ServiceFailure(String::from(parsed_error.message)),
                    _ => UpdateAccountPasswordPolicyError::Unknown(String::from(body)),
                }
            }
            Err(_) => UpdateAccountPasswordPolicyError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for UpdateAccountPasswordPolicyError {
    fn from(err: XmlParseError) -> UpdateAccountPasswordPolicyError {
        let XmlParseError(message) = err;
        UpdateAccountPasswordPolicyError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for UpdateAccountPasswordPolicyError {
    fn from(err: CredentialsError) -> UpdateAccountPasswordPolicyError {
        UpdateAccountPasswordPolicyError::Credentials(err)
    }
}
impl From<HttpDispatchError> for UpdateAccountPasswordPolicyError {
    fn from(err: HttpDispatchError) -> UpdateAccountPasswordPolicyError {
        UpdateAccountPasswordPolicyError::HttpDispatch(err)
    }
}
impl From<io::Error> for UpdateAccountPasswordPolicyError {
    fn from(err: io::Error) -> UpdateAccountPasswordPolicyError {
        UpdateAccountPasswordPolicyError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for UpdateAccountPasswordPolicyError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for UpdateAccountPasswordPolicyError {
    fn description(&self) -> &str {
        match *self {
            UpdateAccountPasswordPolicyError::LimitExceeded(ref cause) => cause,
            UpdateAccountPasswordPolicyError::MalformedPolicyDocument(ref cause) => cause,
            UpdateAccountPasswordPolicyError::NoSuchEntity(ref cause) => cause,
            UpdateAccountPasswordPolicyError::ServiceFailure(ref cause) => cause,
            UpdateAccountPasswordPolicyError::Validation(ref cause) => cause,
            UpdateAccountPasswordPolicyError::Credentials(ref err) => err.description(),
            UpdateAccountPasswordPolicyError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            UpdateAccountPasswordPolicyError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by UpdateAssumeRolePolicy
#[derive(Debug, PartialEq)]
pub enum UpdateAssumeRolePolicyError {
    ///<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>
    LimitExceeded(String),
    ///<p>The request was rejected because the policy document was malformed. The error message describes the specific error.</p>
    MalformedPolicyDocument(String),
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    ///<p>The request was rejected because only the service that depends on the service-linked role can modify or delete the role on your behalf. The error message includes the name of the service that depends on this service-linked role. You must request the change through that service.</p>
    UnmodifiableEntity(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl UpdateAssumeRolePolicyError {
    pub fn from_body(body: &str) -> UpdateAssumeRolePolicyError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "LimitExceededException" => UpdateAssumeRolePolicyError::LimitExceeded(String::from(parsed_error.message)),
                    "MalformedPolicyDocumentException" => UpdateAssumeRolePolicyError::MalformedPolicyDocument(String::from(parsed_error.message)),
                    "NoSuchEntityException" => UpdateAssumeRolePolicyError::NoSuchEntity(String::from(parsed_error.message)),
                    "ServiceFailureException" => UpdateAssumeRolePolicyError::ServiceFailure(String::from(parsed_error.message)),
                    "UnmodifiableEntityException" => UpdateAssumeRolePolicyError::UnmodifiableEntity(String::from(parsed_error.message)),
                    _ => UpdateAssumeRolePolicyError::Unknown(String::from(body)),
                }
            }
            Err(_) => UpdateAssumeRolePolicyError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for UpdateAssumeRolePolicyError {
    fn from(err: XmlParseError) -> UpdateAssumeRolePolicyError {
        let XmlParseError(message) = err;
        UpdateAssumeRolePolicyError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for UpdateAssumeRolePolicyError {
    fn from(err: CredentialsError) -> UpdateAssumeRolePolicyError {
        UpdateAssumeRolePolicyError::Credentials(err)
    }
}
impl From<HttpDispatchError> for UpdateAssumeRolePolicyError {
    fn from(err: HttpDispatchError) -> UpdateAssumeRolePolicyError {
        UpdateAssumeRolePolicyError::HttpDispatch(err)
    }
}
impl From<io::Error> for UpdateAssumeRolePolicyError {
    fn from(err: io::Error) -> UpdateAssumeRolePolicyError {
        UpdateAssumeRolePolicyError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for UpdateAssumeRolePolicyError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for UpdateAssumeRolePolicyError {
    fn description(&self) -> &str {
        match *self {
            UpdateAssumeRolePolicyError::LimitExceeded(ref cause) => cause,
            UpdateAssumeRolePolicyError::MalformedPolicyDocument(ref cause) => cause,
            UpdateAssumeRolePolicyError::NoSuchEntity(ref cause) => cause,
            UpdateAssumeRolePolicyError::ServiceFailure(ref cause) => cause,
            UpdateAssumeRolePolicyError::UnmodifiableEntity(ref cause) => cause,
            UpdateAssumeRolePolicyError::Validation(ref cause) => cause,
            UpdateAssumeRolePolicyError::Credentials(ref err) => err.description(),
            UpdateAssumeRolePolicyError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            UpdateAssumeRolePolicyError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by UpdateGroup
#[derive(Debug, PartialEq)]
pub enum UpdateGroupError {
    ///<p>The request was rejected because it attempted to create a resource that already exists.</p>
    EntityAlreadyExists(String),
    ///<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>
    LimitExceeded(String),
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl UpdateGroupError {
    pub fn from_body(body: &str) -> UpdateGroupError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "EntityAlreadyExistsException" => {
                        UpdateGroupError::EntityAlreadyExists(String::from(parsed_error.message))
                    }
                    "LimitExceededException" => {
                        UpdateGroupError::LimitExceeded(String::from(parsed_error.message))
                    }
                    "NoSuchEntityException" => {
                        UpdateGroupError::NoSuchEntity(String::from(parsed_error.message))
                    }
                    "ServiceFailureException" => {
                        UpdateGroupError::ServiceFailure(String::from(parsed_error.message))
                    }
                    _ => UpdateGroupError::Unknown(String::from(body)),
                }
            }
            Err(_) => UpdateGroupError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for UpdateGroupError {
    fn from(err: XmlParseError) -> UpdateGroupError {
        let XmlParseError(message) = err;
        UpdateGroupError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for UpdateGroupError {
    fn from(err: CredentialsError) -> UpdateGroupError {
        UpdateGroupError::Credentials(err)
    }
}
impl From<HttpDispatchError> for UpdateGroupError {
    fn from(err: HttpDispatchError) -> UpdateGroupError {
        UpdateGroupError::HttpDispatch(err)
    }
}
impl From<io::Error> for UpdateGroupError {
    fn from(err: io::Error) -> UpdateGroupError {
        UpdateGroupError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for UpdateGroupError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for UpdateGroupError {
    fn description(&self) -> &str {
        match *self {
            UpdateGroupError::EntityAlreadyExists(ref cause) => cause,
            UpdateGroupError::LimitExceeded(ref cause) => cause,
            UpdateGroupError::NoSuchEntity(ref cause) => cause,
            UpdateGroupError::ServiceFailure(ref cause) => cause,
            UpdateGroupError::Validation(ref cause) => cause,
            UpdateGroupError::Credentials(ref err) => err.description(),
            UpdateGroupError::HttpDispatch(ref dispatch_error) => dispatch_error.description(),
            UpdateGroupError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by UpdateLoginProfile
#[derive(Debug, PartialEq)]
pub enum UpdateLoginProfileError {
    ///<p>The request was rejected because it referenced an entity that is temporarily unmodifiable, such as a user name that was deleted and then recreated. The error indicates that the request is likely to succeed if you try again after waiting several minutes. The error message describes the entity.</p>
    EntityTemporarilyUnmodifiable(String),
    ///<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>
    LimitExceeded(String),
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request was rejected because the provided password did not meet the requirements imposed by the account password policy.</p>
    PasswordPolicyViolation(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl UpdateLoginProfileError {
    pub fn from_body(body: &str) -> UpdateLoginProfileError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "EntityTemporarilyUnmodifiableException" => UpdateLoginProfileError::EntityTemporarilyUnmodifiable(String::from(parsed_error.message)),
                    "LimitExceededException" => {
                        UpdateLoginProfileError::LimitExceeded(String::from(parsed_error.message))
                    }
                    "NoSuchEntityException" => {
                        UpdateLoginProfileError::NoSuchEntity(String::from(parsed_error.message))
                    }
                    "PasswordPolicyViolationException" => UpdateLoginProfileError::PasswordPolicyViolation(String::from(parsed_error.message)),
                    "ServiceFailureException" => {
                        UpdateLoginProfileError::ServiceFailure(String::from(parsed_error.message))
                    }
                    _ => UpdateLoginProfileError::Unknown(String::from(body)),
                }
            }
            Err(_) => UpdateLoginProfileError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for UpdateLoginProfileError {
    fn from(err: XmlParseError) -> UpdateLoginProfileError {
        let XmlParseError(message) = err;
        UpdateLoginProfileError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for UpdateLoginProfileError {
    fn from(err: CredentialsError) -> UpdateLoginProfileError {
        UpdateLoginProfileError::Credentials(err)
    }
}
impl From<HttpDispatchError> for UpdateLoginProfileError {
    fn from(err: HttpDispatchError) -> UpdateLoginProfileError {
        UpdateLoginProfileError::HttpDispatch(err)
    }
}
impl From<io::Error> for UpdateLoginProfileError {
    fn from(err: io::Error) -> UpdateLoginProfileError {
        UpdateLoginProfileError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for UpdateLoginProfileError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for UpdateLoginProfileError {
    fn description(&self) -> &str {
        match *self {
            UpdateLoginProfileError::EntityTemporarilyUnmodifiable(ref cause) => cause,
            UpdateLoginProfileError::LimitExceeded(ref cause) => cause,
            UpdateLoginProfileError::NoSuchEntity(ref cause) => cause,
            UpdateLoginProfileError::PasswordPolicyViolation(ref cause) => cause,
            UpdateLoginProfileError::ServiceFailure(ref cause) => cause,
            UpdateLoginProfileError::Validation(ref cause) => cause,
            UpdateLoginProfileError::Credentials(ref err) => err.description(),
            UpdateLoginProfileError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            UpdateLoginProfileError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by UpdateOpenIDConnectProviderThumbprint
#[derive(Debug, PartialEq)]
pub enum UpdateOpenIDConnectProviderThumbprintError {
    ///<p>The request was rejected because an invalid or out-of-range value was supplied for an input parameter.</p>
    InvalidInput(String),
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl UpdateOpenIDConnectProviderThumbprintError {
    pub fn from_body(body: &str) -> UpdateOpenIDConnectProviderThumbprintError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "InvalidInputException" => UpdateOpenIDConnectProviderThumbprintError::InvalidInput(String::from(parsed_error.message)),
                    "NoSuchEntityException" => UpdateOpenIDConnectProviderThumbprintError::NoSuchEntity(String::from(parsed_error.message)),
                    "ServiceFailureException" => UpdateOpenIDConnectProviderThumbprintError::ServiceFailure(String::from(parsed_error.message)),
                    _ => UpdateOpenIDConnectProviderThumbprintError::Unknown(String::from(body)),
                }
            }
            Err(_) => UpdateOpenIDConnectProviderThumbprintError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for UpdateOpenIDConnectProviderThumbprintError {
    fn from(err: XmlParseError) -> UpdateOpenIDConnectProviderThumbprintError {
        let XmlParseError(message) = err;
        UpdateOpenIDConnectProviderThumbprintError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for UpdateOpenIDConnectProviderThumbprintError {
    fn from(err: CredentialsError) -> UpdateOpenIDConnectProviderThumbprintError {
        UpdateOpenIDConnectProviderThumbprintError::Credentials(err)
    }
}
impl From<HttpDispatchError> for UpdateOpenIDConnectProviderThumbprintError {
    fn from(err: HttpDispatchError) -> UpdateOpenIDConnectProviderThumbprintError {
        UpdateOpenIDConnectProviderThumbprintError::HttpDispatch(err)
    }
}
impl From<io::Error> for UpdateOpenIDConnectProviderThumbprintError {
    fn from(err: io::Error) -> UpdateOpenIDConnectProviderThumbprintError {
        UpdateOpenIDConnectProviderThumbprintError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for UpdateOpenIDConnectProviderThumbprintError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for UpdateOpenIDConnectProviderThumbprintError {
    fn description(&self) -> &str {
        match *self {
            UpdateOpenIDConnectProviderThumbprintError::InvalidInput(ref cause) => cause,
            UpdateOpenIDConnectProviderThumbprintError::NoSuchEntity(ref cause) => cause,
            UpdateOpenIDConnectProviderThumbprintError::ServiceFailure(ref cause) => cause,
            UpdateOpenIDConnectProviderThumbprintError::Validation(ref cause) => cause,
            UpdateOpenIDConnectProviderThumbprintError::Credentials(ref err) => err.description(),
            UpdateOpenIDConnectProviderThumbprintError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            UpdateOpenIDConnectProviderThumbprintError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by UpdateRoleDescription
#[derive(Debug, PartialEq)]
pub enum UpdateRoleDescriptionError {
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    ///<p>The request was rejected because only the service that depends on the service-linked role can modify or delete the role on your behalf. The error message includes the name of the service that depends on this service-linked role. You must request the change through that service.</p>
    UnmodifiableEntity(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl UpdateRoleDescriptionError {
    pub fn from_body(body: &str) -> UpdateRoleDescriptionError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "NoSuchEntityException" => {
                        UpdateRoleDescriptionError::NoSuchEntity(String::from(parsed_error.message))
                    }
                    "ServiceFailureException" => UpdateRoleDescriptionError::ServiceFailure(String::from(parsed_error.message)),
                    "UnmodifiableEntityException" => UpdateRoleDescriptionError::UnmodifiableEntity(String::from(parsed_error.message)),
                    _ => UpdateRoleDescriptionError::Unknown(String::from(body)),
                }
            }
            Err(_) => UpdateRoleDescriptionError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for UpdateRoleDescriptionError {
    fn from(err: XmlParseError) -> UpdateRoleDescriptionError {
        let XmlParseError(message) = err;
        UpdateRoleDescriptionError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for UpdateRoleDescriptionError {
    fn from(err: CredentialsError) -> UpdateRoleDescriptionError {
        UpdateRoleDescriptionError::Credentials(err)
    }
}
impl From<HttpDispatchError> for UpdateRoleDescriptionError {
    fn from(err: HttpDispatchError) -> UpdateRoleDescriptionError {
        UpdateRoleDescriptionError::HttpDispatch(err)
    }
}
impl From<io::Error> for UpdateRoleDescriptionError {
    fn from(err: io::Error) -> UpdateRoleDescriptionError {
        UpdateRoleDescriptionError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for UpdateRoleDescriptionError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for UpdateRoleDescriptionError {
    fn description(&self) -> &str {
        match *self {
            UpdateRoleDescriptionError::NoSuchEntity(ref cause) => cause,
            UpdateRoleDescriptionError::ServiceFailure(ref cause) => cause,
            UpdateRoleDescriptionError::UnmodifiableEntity(ref cause) => cause,
            UpdateRoleDescriptionError::Validation(ref cause) => cause,
            UpdateRoleDescriptionError::Credentials(ref err) => err.description(),
            UpdateRoleDescriptionError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            UpdateRoleDescriptionError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by UpdateSAMLProvider
#[derive(Debug, PartialEq)]
pub enum UpdateSAMLProviderError {
    ///<p>The request was rejected because an invalid or out-of-range value was supplied for an input parameter.</p>
    InvalidInput(String),
    ///<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>
    LimitExceeded(String),
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl UpdateSAMLProviderError {
    pub fn from_body(body: &str) -> UpdateSAMLProviderError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "InvalidInputException" => {
                        UpdateSAMLProviderError::InvalidInput(String::from(parsed_error.message))
                    }
                    "LimitExceededException" => {
                        UpdateSAMLProviderError::LimitExceeded(String::from(parsed_error.message))
                    }
                    "NoSuchEntityException" => {
                        UpdateSAMLProviderError::NoSuchEntity(String::from(parsed_error.message))
                    }
                    "ServiceFailureException" => {
                        UpdateSAMLProviderError::ServiceFailure(String::from(parsed_error.message))
                    }
                    _ => UpdateSAMLProviderError::Unknown(String::from(body)),
                }
            }
            Err(_) => UpdateSAMLProviderError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for UpdateSAMLProviderError {
    fn from(err: XmlParseError) -> UpdateSAMLProviderError {
        let XmlParseError(message) = err;
        UpdateSAMLProviderError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for UpdateSAMLProviderError {
    fn from(err: CredentialsError) -> UpdateSAMLProviderError {
        UpdateSAMLProviderError::Credentials(err)
    }
}
impl From<HttpDispatchError> for UpdateSAMLProviderError {
    fn from(err: HttpDispatchError) -> UpdateSAMLProviderError {
        UpdateSAMLProviderError::HttpDispatch(err)
    }
}
impl From<io::Error> for UpdateSAMLProviderError {
    fn from(err: io::Error) -> UpdateSAMLProviderError {
        UpdateSAMLProviderError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for UpdateSAMLProviderError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for UpdateSAMLProviderError {
    fn description(&self) -> &str {
        match *self {
            UpdateSAMLProviderError::InvalidInput(ref cause) => cause,
            UpdateSAMLProviderError::LimitExceeded(ref cause) => cause,
            UpdateSAMLProviderError::NoSuchEntity(ref cause) => cause,
            UpdateSAMLProviderError::ServiceFailure(ref cause) => cause,
            UpdateSAMLProviderError::Validation(ref cause) => cause,
            UpdateSAMLProviderError::Credentials(ref err) => err.description(),
            UpdateSAMLProviderError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            UpdateSAMLProviderError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by UpdateSSHPublicKey
#[derive(Debug, PartialEq)]
pub enum UpdateSSHPublicKeyError {
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl UpdateSSHPublicKeyError {
    pub fn from_body(body: &str) -> UpdateSSHPublicKeyError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "NoSuchEntityException" => {
                        UpdateSSHPublicKeyError::NoSuchEntity(String::from(parsed_error.message))
                    }
                    _ => UpdateSSHPublicKeyError::Unknown(String::from(body)),
                }
            }
            Err(_) => UpdateSSHPublicKeyError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for UpdateSSHPublicKeyError {
    fn from(err: XmlParseError) -> UpdateSSHPublicKeyError {
        let XmlParseError(message) = err;
        UpdateSSHPublicKeyError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for UpdateSSHPublicKeyError {
    fn from(err: CredentialsError) -> UpdateSSHPublicKeyError {
        UpdateSSHPublicKeyError::Credentials(err)
    }
}
impl From<HttpDispatchError> for UpdateSSHPublicKeyError {
    fn from(err: HttpDispatchError) -> UpdateSSHPublicKeyError {
        UpdateSSHPublicKeyError::HttpDispatch(err)
    }
}
impl From<io::Error> for UpdateSSHPublicKeyError {
    fn from(err: io::Error) -> UpdateSSHPublicKeyError {
        UpdateSSHPublicKeyError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for UpdateSSHPublicKeyError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for UpdateSSHPublicKeyError {
    fn description(&self) -> &str {
        match *self {
            UpdateSSHPublicKeyError::NoSuchEntity(ref cause) => cause,
            UpdateSSHPublicKeyError::Validation(ref cause) => cause,
            UpdateSSHPublicKeyError::Credentials(ref err) => err.description(),
            UpdateSSHPublicKeyError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            UpdateSSHPublicKeyError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by UpdateServerCertificate
#[derive(Debug, PartialEq)]
pub enum UpdateServerCertificateError {
    ///<p>The request was rejected because it attempted to create a resource that already exists.</p>
    EntityAlreadyExists(String),
    ///<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>
    LimitExceeded(String),
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl UpdateServerCertificateError {
    pub fn from_body(body: &str) -> UpdateServerCertificateError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "EntityAlreadyExistsException" => UpdateServerCertificateError::EntityAlreadyExists(String::from(parsed_error.message)),
                    "LimitExceededException" => UpdateServerCertificateError::LimitExceeded(String::from(parsed_error.message)),
                    "NoSuchEntityException" => UpdateServerCertificateError::NoSuchEntity(String::from(parsed_error.message)),
                    "ServiceFailureException" => UpdateServerCertificateError::ServiceFailure(String::from(parsed_error.message)),
                    _ => UpdateServerCertificateError::Unknown(String::from(body)),
                }
            }
            Err(_) => UpdateServerCertificateError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for UpdateServerCertificateError {
    fn from(err: XmlParseError) -> UpdateServerCertificateError {
        let XmlParseError(message) = err;
        UpdateServerCertificateError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for UpdateServerCertificateError {
    fn from(err: CredentialsError) -> UpdateServerCertificateError {
        UpdateServerCertificateError::Credentials(err)
    }
}
impl From<HttpDispatchError> for UpdateServerCertificateError {
    fn from(err: HttpDispatchError) -> UpdateServerCertificateError {
        UpdateServerCertificateError::HttpDispatch(err)
    }
}
impl From<io::Error> for UpdateServerCertificateError {
    fn from(err: io::Error) -> UpdateServerCertificateError {
        UpdateServerCertificateError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for UpdateServerCertificateError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for UpdateServerCertificateError {
    fn description(&self) -> &str {
        match *self {
            UpdateServerCertificateError::EntityAlreadyExists(ref cause) => cause,
            UpdateServerCertificateError::LimitExceeded(ref cause) => cause,
            UpdateServerCertificateError::NoSuchEntity(ref cause) => cause,
            UpdateServerCertificateError::ServiceFailure(ref cause) => cause,
            UpdateServerCertificateError::Validation(ref cause) => cause,
            UpdateServerCertificateError::Credentials(ref err) => err.description(),
            UpdateServerCertificateError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            UpdateServerCertificateError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by UpdateServiceSpecificCredential
#[derive(Debug, PartialEq)]
pub enum UpdateServiceSpecificCredentialError {
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl UpdateServiceSpecificCredentialError {
    pub fn from_body(body: &str) -> UpdateServiceSpecificCredentialError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "NoSuchEntityException" => UpdateServiceSpecificCredentialError::NoSuchEntity(String::from(parsed_error.message)),
                    _ => UpdateServiceSpecificCredentialError::Unknown(String::from(body)),
                }
            }
            Err(_) => UpdateServiceSpecificCredentialError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for UpdateServiceSpecificCredentialError {
    fn from(err: XmlParseError) -> UpdateServiceSpecificCredentialError {
        let XmlParseError(message) = err;
        UpdateServiceSpecificCredentialError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for UpdateServiceSpecificCredentialError {
    fn from(err: CredentialsError) -> UpdateServiceSpecificCredentialError {
        UpdateServiceSpecificCredentialError::Credentials(err)
    }
}
impl From<HttpDispatchError> for UpdateServiceSpecificCredentialError {
    fn from(err: HttpDispatchError) -> UpdateServiceSpecificCredentialError {
        UpdateServiceSpecificCredentialError::HttpDispatch(err)
    }
}
impl From<io::Error> for UpdateServiceSpecificCredentialError {
    fn from(err: io::Error) -> UpdateServiceSpecificCredentialError {
        UpdateServiceSpecificCredentialError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for UpdateServiceSpecificCredentialError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for UpdateServiceSpecificCredentialError {
    fn description(&self) -> &str {
        match *self {
            UpdateServiceSpecificCredentialError::NoSuchEntity(ref cause) => cause,
            UpdateServiceSpecificCredentialError::Validation(ref cause) => cause,
            UpdateServiceSpecificCredentialError::Credentials(ref err) => err.description(),
            UpdateServiceSpecificCredentialError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            UpdateServiceSpecificCredentialError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by UpdateSigningCertificate
#[derive(Debug, PartialEq)]
pub enum UpdateSigningCertificateError {
    ///<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>
    LimitExceeded(String),
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl UpdateSigningCertificateError {
    pub fn from_body(body: &str) -> UpdateSigningCertificateError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "LimitExceededException" => UpdateSigningCertificateError::LimitExceeded(String::from(parsed_error.message)),
                    "NoSuchEntityException" => UpdateSigningCertificateError::NoSuchEntity(String::from(parsed_error.message)),
                    "ServiceFailureException" => UpdateSigningCertificateError::ServiceFailure(String::from(parsed_error.message)),
                    _ => UpdateSigningCertificateError::Unknown(String::from(body)),
                }
            }
            Err(_) => UpdateSigningCertificateError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for UpdateSigningCertificateError {
    fn from(err: XmlParseError) -> UpdateSigningCertificateError {
        let XmlParseError(message) = err;
        UpdateSigningCertificateError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for UpdateSigningCertificateError {
    fn from(err: CredentialsError) -> UpdateSigningCertificateError {
        UpdateSigningCertificateError::Credentials(err)
    }
}
impl From<HttpDispatchError> for UpdateSigningCertificateError {
    fn from(err: HttpDispatchError) -> UpdateSigningCertificateError {
        UpdateSigningCertificateError::HttpDispatch(err)
    }
}
impl From<io::Error> for UpdateSigningCertificateError {
    fn from(err: io::Error) -> UpdateSigningCertificateError {
        UpdateSigningCertificateError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for UpdateSigningCertificateError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for UpdateSigningCertificateError {
    fn description(&self) -> &str {
        match *self {
            UpdateSigningCertificateError::LimitExceeded(ref cause) => cause,
            UpdateSigningCertificateError::NoSuchEntity(ref cause) => cause,
            UpdateSigningCertificateError::ServiceFailure(ref cause) => cause,
            UpdateSigningCertificateError::Validation(ref cause) => cause,
            UpdateSigningCertificateError::Credentials(ref err) => err.description(),
            UpdateSigningCertificateError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            UpdateSigningCertificateError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by UpdateUser
#[derive(Debug, PartialEq)]
pub enum UpdateUserError {
    ///<p>The request was rejected because it attempted to create a resource that already exists.</p>
    EntityAlreadyExists(String),
    ///<p>The request was rejected because it referenced an entity that is temporarily unmodifiable, such as a user name that was deleted and then recreated. The error indicates that the request is likely to succeed if you try again after waiting several minutes. The error message describes the entity.</p>
    EntityTemporarilyUnmodifiable(String),
    ///<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>
    LimitExceeded(String),
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl UpdateUserError {
    pub fn from_body(body: &str) -> UpdateUserError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "EntityAlreadyExistsException" => {
                        UpdateUserError::EntityAlreadyExists(String::from(parsed_error.message))
                    }
                    "EntityTemporarilyUnmodifiableException" => UpdateUserError::EntityTemporarilyUnmodifiable(String::from(parsed_error.message)),
                    "LimitExceededException" => {
                        UpdateUserError::LimitExceeded(String::from(parsed_error.message))
                    }
                    "NoSuchEntityException" => {
                        UpdateUserError::NoSuchEntity(String::from(parsed_error.message))
                    }
                    "ServiceFailureException" => {
                        UpdateUserError::ServiceFailure(String::from(parsed_error.message))
                    }
                    _ => UpdateUserError::Unknown(String::from(body)),
                }
            }
            Err(_) => UpdateUserError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for UpdateUserError {
    fn from(err: XmlParseError) -> UpdateUserError {
        let XmlParseError(message) = err;
        UpdateUserError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for UpdateUserError {
    fn from(err: CredentialsError) -> UpdateUserError {
        UpdateUserError::Credentials(err)
    }
}
impl From<HttpDispatchError> for UpdateUserError {
    fn from(err: HttpDispatchError) -> UpdateUserError {
        UpdateUserError::HttpDispatch(err)
    }
}
impl From<io::Error> for UpdateUserError {
    fn from(err: io::Error) -> UpdateUserError {
        UpdateUserError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for UpdateUserError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for UpdateUserError {
    fn description(&self) -> &str {
        match *self {
            UpdateUserError::EntityAlreadyExists(ref cause) => cause,
            UpdateUserError::EntityTemporarilyUnmodifiable(ref cause) => cause,
            UpdateUserError::LimitExceeded(ref cause) => cause,
            UpdateUserError::NoSuchEntity(ref cause) => cause,
            UpdateUserError::ServiceFailure(ref cause) => cause,
            UpdateUserError::Validation(ref cause) => cause,
            UpdateUserError::Credentials(ref err) => err.description(),
            UpdateUserError::HttpDispatch(ref dispatch_error) => dispatch_error.description(),
            UpdateUserError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by UploadSSHPublicKey
#[derive(Debug, PartialEq)]
pub enum UploadSSHPublicKeyError {
    ///<p>The request was rejected because the SSH public key is already associated with the specified IAM user.</p>
    DuplicateSSHPublicKey(String),
    ///<p>The request was rejected because the public key is malformed or otherwise invalid.</p>
    InvalidPublicKey(String),
    ///<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>
    LimitExceeded(String),
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request was rejected because the public key encoding format is unsupported or unrecognized.</p>
    UnrecognizedPublicKeyEncoding(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl UploadSSHPublicKeyError {
    pub fn from_body(body: &str) -> UploadSSHPublicKeyError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "DuplicateSSHPublicKeyException" => UploadSSHPublicKeyError::DuplicateSSHPublicKey(String::from(parsed_error.message)),
                    "InvalidPublicKeyException" => UploadSSHPublicKeyError::InvalidPublicKey(String::from(parsed_error.message)),
                    "LimitExceededException" => {
                        UploadSSHPublicKeyError::LimitExceeded(String::from(parsed_error.message))
                    }
                    "NoSuchEntityException" => {
                        UploadSSHPublicKeyError::NoSuchEntity(String::from(parsed_error.message))
                    }
                    "UnrecognizedPublicKeyEncodingException" => UploadSSHPublicKeyError::UnrecognizedPublicKeyEncoding(String::from(parsed_error.message)),
                    _ => UploadSSHPublicKeyError::Unknown(String::from(body)),
                }
            }
            Err(_) => UploadSSHPublicKeyError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for UploadSSHPublicKeyError {
    fn from(err: XmlParseError) -> UploadSSHPublicKeyError {
        let XmlParseError(message) = err;
        UploadSSHPublicKeyError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for UploadSSHPublicKeyError {
    fn from(err: CredentialsError) -> UploadSSHPublicKeyError {
        UploadSSHPublicKeyError::Credentials(err)
    }
}
impl From<HttpDispatchError> for UploadSSHPublicKeyError {
    fn from(err: HttpDispatchError) -> UploadSSHPublicKeyError {
        UploadSSHPublicKeyError::HttpDispatch(err)
    }
}
impl From<io::Error> for UploadSSHPublicKeyError {
    fn from(err: io::Error) -> UploadSSHPublicKeyError {
        UploadSSHPublicKeyError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for UploadSSHPublicKeyError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for UploadSSHPublicKeyError {
    fn description(&self) -> &str {
        match *self {
            UploadSSHPublicKeyError::DuplicateSSHPublicKey(ref cause) => cause,
            UploadSSHPublicKeyError::InvalidPublicKey(ref cause) => cause,
            UploadSSHPublicKeyError::LimitExceeded(ref cause) => cause,
            UploadSSHPublicKeyError::NoSuchEntity(ref cause) => cause,
            UploadSSHPublicKeyError::UnrecognizedPublicKeyEncoding(ref cause) => cause,
            UploadSSHPublicKeyError::Validation(ref cause) => cause,
            UploadSSHPublicKeyError::Credentials(ref err) => err.description(),
            UploadSSHPublicKeyError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            UploadSSHPublicKeyError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by UploadServerCertificate
#[derive(Debug, PartialEq)]
pub enum UploadServerCertificateError {
    ///<p>The request was rejected because it attempted to create a resource that already exists.</p>
    EntityAlreadyExists(String),
    ///<p>The request was rejected because the public key certificate and the private key do not match.</p>
    KeyPairMismatch(String),
    ///<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>
    LimitExceeded(String),
    ///<p>The request was rejected because the certificate was malformed or expired. The error message describes the specific error.</p>
    MalformedCertificate(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl UploadServerCertificateError {
    pub fn from_body(body: &str) -> UploadServerCertificateError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "EntityAlreadyExistsException" => UploadServerCertificateError::EntityAlreadyExists(String::from(parsed_error.message)),
                    "KeyPairMismatchException" => UploadServerCertificateError::KeyPairMismatch(String::from(parsed_error.message)),
                    "LimitExceededException" => UploadServerCertificateError::LimitExceeded(String::from(parsed_error.message)),
                    "MalformedCertificateException" => UploadServerCertificateError::MalformedCertificate(String::from(parsed_error.message)),
                    "ServiceFailureException" => UploadServerCertificateError::ServiceFailure(String::from(parsed_error.message)),
                    _ => UploadServerCertificateError::Unknown(String::from(body)),
                }
            }
            Err(_) => UploadServerCertificateError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for UploadServerCertificateError {
    fn from(err: XmlParseError) -> UploadServerCertificateError {
        let XmlParseError(message) = err;
        UploadServerCertificateError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for UploadServerCertificateError {
    fn from(err: CredentialsError) -> UploadServerCertificateError {
        UploadServerCertificateError::Credentials(err)
    }
}
impl From<HttpDispatchError> for UploadServerCertificateError {
    fn from(err: HttpDispatchError) -> UploadServerCertificateError {
        UploadServerCertificateError::HttpDispatch(err)
    }
}
impl From<io::Error> for UploadServerCertificateError {
    fn from(err: io::Error) -> UploadServerCertificateError {
        UploadServerCertificateError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for UploadServerCertificateError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for UploadServerCertificateError {
    fn description(&self) -> &str {
        match *self {
            UploadServerCertificateError::EntityAlreadyExists(ref cause) => cause,
            UploadServerCertificateError::KeyPairMismatch(ref cause) => cause,
            UploadServerCertificateError::LimitExceeded(ref cause) => cause,
            UploadServerCertificateError::MalformedCertificate(ref cause) => cause,
            UploadServerCertificateError::ServiceFailure(ref cause) => cause,
            UploadServerCertificateError::Validation(ref cause) => cause,
            UploadServerCertificateError::Credentials(ref err) => err.description(),
            UploadServerCertificateError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            UploadServerCertificateError::Unknown(ref cause) => cause,
        }
    }
}
/// Errors returned by UploadSigningCertificate
#[derive(Debug, PartialEq)]
pub enum UploadSigningCertificateError {
    ///<p>The request was rejected because the same certificate is associated with an IAM user in the account.</p>
    DuplicateCertificate(String),
    ///<p>The request was rejected because it attempted to create a resource that already exists.</p>
    EntityAlreadyExists(String),
    ///<p>The request was rejected because the certificate is invalid.</p>
    InvalidCertificate(String),
    ///<p>The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.</p>
    LimitExceeded(String),
    ///<p>The request was rejected because the certificate was malformed or expired. The error message describes the specific error.</p>
    MalformedCertificate(String),
    ///<p>The request was rejected because it referenced an entity that does not exist. The error message describes the entity.</p>
    NoSuchEntity(String),
    ///<p>The request processing has failed because of an unknown error, exception or failure.</p>
    ServiceFailure(String),
    /// An error occurred dispatching the HTTP request
    HttpDispatch(HttpDispatchError),
    /// An error was encountered with AWS credentials.
    Credentials(CredentialsError),
    /// A validation error occurred.  Details from AWS are provided.
    Validation(String),
    /// An unknown error occurred.  The raw HTTP response is provided.
    Unknown(String),
}


impl UploadSigningCertificateError {
    pub fn from_body(body: &str) -> UploadSigningCertificateError {
        let reader = EventReader::new(body.as_bytes());
        let mut stack = XmlResponse::new(reader.into_iter().peekable());
        let _start_document = stack.next();
        let _response_envelope = stack.next();
        match XmlErrorDeserializer::deserialize("Error", &mut stack) {
            Ok(parsed_error) => {
                match &parsed_error.code[..] {
                    "DuplicateCertificateException" => UploadSigningCertificateError::DuplicateCertificate(String::from(parsed_error.message)),
                    "EntityAlreadyExistsException" => UploadSigningCertificateError::EntityAlreadyExists(String::from(parsed_error.message)),
                    "InvalidCertificateException" => UploadSigningCertificateError::InvalidCertificate(String::from(parsed_error.message)),
                    "LimitExceededException" => UploadSigningCertificateError::LimitExceeded(String::from(parsed_error.message)),
                    "MalformedCertificateException" => UploadSigningCertificateError::MalformedCertificate(String::from(parsed_error.message)),
                    "NoSuchEntityException" => UploadSigningCertificateError::NoSuchEntity(String::from(parsed_error.message)),
                    "ServiceFailureException" => UploadSigningCertificateError::ServiceFailure(String::from(parsed_error.message)),
                    _ => UploadSigningCertificateError::Unknown(String::from(body)),
                }
            }
            Err(_) => UploadSigningCertificateError::Unknown(body.to_string()),
        }
    }
}

impl From<XmlParseError> for UploadSigningCertificateError {
    fn from(err: XmlParseError) -> UploadSigningCertificateError {
        let XmlParseError(message) = err;
        UploadSigningCertificateError::Unknown(message.to_string())
    }
}
impl From<CredentialsError> for UploadSigningCertificateError {
    fn from(err: CredentialsError) -> UploadSigningCertificateError {
        UploadSigningCertificateError::Credentials(err)
    }
}
impl From<HttpDispatchError> for UploadSigningCertificateError {
    fn from(err: HttpDispatchError) -> UploadSigningCertificateError {
        UploadSigningCertificateError::HttpDispatch(err)
    }
}
impl From<io::Error> for UploadSigningCertificateError {
    fn from(err: io::Error) -> UploadSigningCertificateError {
        UploadSigningCertificateError::HttpDispatch(HttpDispatchError::from(err))
    }
}
impl fmt::Display for UploadSigningCertificateError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for UploadSigningCertificateError {
    fn description(&self) -> &str {
        match *self {
            UploadSigningCertificateError::DuplicateCertificate(ref cause) => cause,
            UploadSigningCertificateError::EntityAlreadyExists(ref cause) => cause,
            UploadSigningCertificateError::InvalidCertificate(ref cause) => cause,
            UploadSigningCertificateError::LimitExceeded(ref cause) => cause,
            UploadSigningCertificateError::MalformedCertificate(ref cause) => cause,
            UploadSigningCertificateError::NoSuchEntity(ref cause) => cause,
            UploadSigningCertificateError::ServiceFailure(ref cause) => cause,
            UploadSigningCertificateError::Validation(ref cause) => cause,
            UploadSigningCertificateError::Credentials(ref err) => err.description(),
            UploadSigningCertificateError::HttpDispatch(ref dispatch_error) => {
                dispatch_error.description()
            }
            UploadSigningCertificateError::Unknown(ref cause) => cause,
        }
    }
}
/// Trait representing the capabilities of the IAM API. IAM clients implement this trait.
pub trait Iam {
    #[doc="<p>Adds a new client ID (also known as audience) to the list of client IDs already registered for the specified IAM OpenID Connect (OIDC) provider resource.</p> <p>This action is idempotent; it does not fail or return an error if you add an existing client ID to the provider.</p>"]
    fn add_client_id_to_open_id_connect_provider
        (&self,
         input: &AddClientIDToOpenIDConnectProviderRequest)
         -> Result<(), AddClientIDToOpenIDConnectProviderError>;


    #[doc="<p>Adds the specified IAM role to the specified instance profile. An instance profile can contain only one role, and this limit cannot be increased.</p> <note> <p>The caller of this API must be granted the <code>PassRole</code> permission on the IAM role by a permission policy.</p> </note> <p>For more information about roles, go to <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html\">Working with Roles</a>. For more information about instance profiles, go to <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html\">About Instance Profiles</a>.</p>"]
    fn add_role_to_instance_profile(&self,
                                    input: &AddRoleToInstanceProfileRequest)
                                    -> Result<(), AddRoleToInstanceProfileError>;


    #[doc="<p>Adds the specified user to the specified group.</p>"]
    fn add_user_to_group(&self, input: &AddUserToGroupRequest) -> Result<(), AddUserToGroupError>;


    #[doc="<p>Attaches the specified managed policy to the specified IAM group.</p> <p>You use this API to attach a managed policy to a group. To embed an inline policy in a group, use <a>PutGroupPolicy</a>.</p> <p>For more information about policies, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html\">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>"]
    fn attach_group_policy(&self,
                           input: &AttachGroupPolicyRequest)
                           -> Result<(), AttachGroupPolicyError>;


    #[doc="<p>Attaches the specified managed policy to the specified IAM role. When you attach a managed policy to a role, the managed policy becomes part of the role's permission (access) policy.</p> <note> <p>You cannot use a managed policy as the role's trust policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>.</p> </note> <p>Use this API to attach a <i>managed</i> policy to a role. To embed an inline policy in a role, use <a>PutRolePolicy</a>. For more information about policies, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html\">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>"]
    fn attach_role_policy(&self,
                          input: &AttachRolePolicyRequest)
                          -> Result<(), AttachRolePolicyError>;


    #[doc="<p>Attaches the specified managed policy to the specified user.</p> <p>You use this API to attach a <i>managed</i> policy to a user. To embed an inline policy in a user, use <a>PutUserPolicy</a>.</p> <p>For more information about policies, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html\">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>"]
    fn attach_user_policy(&self,
                          input: &AttachUserPolicyRequest)
                          -> Result<(), AttachUserPolicyError>;


    #[doc="<p>Changes the password of the IAM user who is calling this action. The root account password is not affected by this action.</p> <p>To change the password for a different user, see <a>UpdateLoginProfile</a>. For more information about modifying passwords, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html\">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>"]
    fn change_password(&self, input: &ChangePasswordRequest) -> Result<(), ChangePasswordError>;


    #[doc="<p> Creates a new AWS secret access key and corresponding AWS access key ID for the specified user. The default status for new keys is <code>Active</code>.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. Because this action works for access keys under the AWS account, you can use this action to manage root credentials even if the AWS account has no associated users.</p> <p> For information about limits on the number of keys you can create, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html\">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation. You must save the key (for example, in a text file) if you want to be able to access it again. If a secret key is lost, you can delete the access keys for the associated user and then create new keys.</p> </important>"]
    fn create_access_key(&self,
                         input: &CreateAccessKeyRequest)
                         -> Result<CreateAccessKeyResponse, CreateAccessKeyError>;


    #[doc="<p>Creates an alias for your AWS account. For information about using an AWS account alias, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html\">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.</p>"]
    fn create_account_alias(&self,
                            input: &CreateAccountAliasRequest)
                            -> Result<(), CreateAccountAliasError>;


    #[doc="<p>Creates a new group.</p> <p> For information about the number of groups you can create, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html\">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>"]
    fn create_group(&self,
                    input: &CreateGroupRequest)
                    -> Result<CreateGroupResponse, CreateGroupError>;


    #[doc="<p> Creates a new instance profile. For information about instance profiles, go to <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html\">About Instance Profiles</a>.</p> <p> For information about the number of instance profiles you can create, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html\">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>"]
    fn create_instance_profile
        (&self,
         input: &CreateInstanceProfileRequest)
         -> Result<CreateInstanceProfileResponse, CreateInstanceProfileError>;


    #[doc="<p> Creates a password for the specified user, giving the user the ability to access AWS services through the AWS Management Console. For more information about managing passwords, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html\">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>"]
    fn create_login_profile(&self,
                            input: &CreateLoginProfileRequest)
                            -> Result<CreateLoginProfileResponse, CreateLoginProfileError>;


    #[doc="<p>Creates an IAM entity to describe an identity provider (IdP) that supports <a href=\"http://openid.net/connect/\">OpenID Connect (OIDC)</a>.</p> <p>The OIDC provider that you create with this operation can be used as a principal in a role's trust policy to establish a trust relationship between AWS and the OIDC provider.</p> <p>When you create the IAM OIDC provider, you specify the URL of the OIDC identity provider (IdP) to trust, a list of client IDs (also known as audiences) that identify the application or applications that are allowed to authenticate using the OIDC provider, and a list of thumbprints of the server certificate(s) that the IdP uses. You get all of this information from the OIDC IdP that you want to use for access to AWS.</p> <note> <p>Because trust for the OIDC provider is ultimately derived from the IAM provider that this action creates, it is a best practice to limit access to the <a>CreateOpenIDConnectProvider</a> action to highly-privileged users.</p> </note>"]
    fn create_open_id_connect_provider
        (&self,
         input: &CreateOpenIDConnectProviderRequest)
         -> Result<CreateOpenIDConnectProviderResponse, CreateOpenIDConnectProviderError>;


    #[doc="<p>Creates a new managed policy for your AWS account.</p> <p>This operation creates a policy version with a version identifier of <code>v1</code> and sets v1 as the policy's default version. For more information about policy versions, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html\">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policies in general, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html\">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>"]
    fn create_policy(&self,
                     input: &CreatePolicyRequest)
                     -> Result<CreatePolicyResponse, CreatePolicyError>;


    #[doc="<p>Creates a new version of the specified managed policy. To update a managed policy, you create a new policy version. A managed policy can have up to five versions. If the policy has five versions, you must delete an existing version using <a>DeletePolicyVersion</a> before you create a new version.</p> <p>Optionally, you can set the new version as the policy's default version. The default version is the version that is in effect for the IAM users, groups, and roles to which the policy is attached.</p> <p>For more information about managed policy versions, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html\">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>"]
    fn create_policy_version(&self,
                             input: &CreatePolicyVersionRequest)
                             -> Result<CreatePolicyVersionResponse, CreatePolicyVersionError>;


    #[doc="<p>Creates a new role for your AWS account. For more information about roles, go to <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html\">Working with Roles</a>. For information about limitations on role names and the number of roles you can create, go to <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html\">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>"]
    fn create_role(&self,
                   input: &CreateRoleRequest)
                   -> Result<CreateRoleResponse, CreateRoleError>;


    #[doc="<p>Creates an IAM resource that describes an identity provider (IdP) that supports SAML 2.0.</p> <p>The SAML provider resource that you create with this operation can be used as a principal in an IAM role's trust policy to enable federated users who sign-in using the SAML IdP to assume the role. You can create an IAM role that supports Web-based single sign-on (SSO) to the AWS Management Console or one that supports API access to AWS.</p> <p>When you create the SAML provider resource, you upload an a SAML metadata document that you get from your IdP and that includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that the IdP sends. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <note> <p> This operation requires <a href=\"http://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\">Signature Version 4</a>.</p> </note> <p> For more information, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-saml.html\">Enabling SAML 2.0 Federated Users to Access the AWS Management Console</a> and <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html\">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i>.</p>"]
    fn create_saml_provider(&self,
                            input: &CreateSAMLProviderRequest)
                            -> Result<CreateSAMLProviderResponse, CreateSAMLProviderError>;


    #[doc="<p>Creates an IAM role that is linked to a specific AWS service. The service controls the attached policies and when the role can be deleted. This helps ensure that the service is not broken by an unexpectedly changed or deleted role, which could put your AWS resources into an unknown state. Allowing the service to control the role helps improve service stability and proper cleanup when a service and its role are no longer needed.</p> <p>The name of the role is autogenerated by combining the string that you specify for the <code>AWSServiceName</code> parameter with the string that you specify for the <code>CustomSuffix</code> parameter. The resulting name must be unique in your account or the request fails.</p> <p>To attach a policy to this service-linked role, you must make the request using the AWS service that depends on this role.</p>"]
    fn create_service_linked_role
        (&self,
         input: &CreateServiceLinkedRoleRequest)
         -> Result<CreateServiceLinkedRoleResponse, CreateServiceLinkedRoleError>;


    #[doc="<p>Generates a set of credentials consisting of a user name and password that can be used to access the service specified in the request. These credentials are generated by IAM, and can be used only for the specified service. </p> <p>You can have a maximum of two sets of service-specific credentials for each supported service per user.</p> <p>The only supported service at this time is AWS CodeCommit.</p> <p>You can reset the password to a new service-generated value by calling <a>ResetServiceSpecificCredential</a>.</p> <p>For more information about service-specific credentials, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_ssh-keys.html\">Using IAM with AWS CodeCommit: Git Credentials, SSH Keys, and AWS Access Keys</a> in the <i>IAM User Guide</i>.</p>"]
    fn create_service_specific_credential
        (&self,
         input: &CreateServiceSpecificCredentialRequest)
         -> Result<CreateServiceSpecificCredentialResponse, CreateServiceSpecificCredentialError>;


    #[doc="<p>Creates a new IAM user for your AWS account.</p> <p> For information about limitations on the number of IAM users you can create, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html\">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>"]
    fn create_user(&self,
                   input: &CreateUserRequest)
                   -> Result<CreateUserResponse, CreateUserError>;


    #[doc="<p>Creates a new virtual MFA device for the AWS account. After creating the virtual MFA, use <a>EnableMFADevice</a> to attach the MFA device to an IAM user. For more information about creating and working with virtual MFA devices, go to <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html\">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of MFA devices you can create, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html\">Limitations on Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>The seed information contained in the QR code and the Base32 string should be treated like any other secret access information, such as your AWS access keys or your passwords. After you provision your virtual device, you should ensure that the information is destroyed following secure procedures.</p> </important>"]
    fn create_virtual_mfa_device
        (&self,
         input: &CreateVirtualMFADeviceRequest)
         -> Result<CreateVirtualMFADeviceResponse, CreateVirtualMFADeviceError>;


    #[doc="<p>Deactivates the specified MFA device and removes it from association with the user name for which it was originally enabled.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html\">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p>"]
    fn deactivate_mfa_device(&self,
                             input: &DeactivateMFADeviceRequest)
                             -> Result<(), DeactivateMFADeviceError>;


    #[doc="<p>Deletes the access key pair associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. Because this action works for access keys under the AWS account, you can use this action to manage root credentials even if the AWS account has no associated users.</p>"]
    fn delete_access_key(&self,
                         input: &DeleteAccessKeyRequest)
                         -> Result<(), DeleteAccessKeyError>;


    #[doc="<p> Deletes the specified AWS account alias. For information about using an AWS account alias, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html\">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.</p>"]
    fn delete_account_alias(&self,
                            input: &DeleteAccountAliasRequest)
                            -> Result<(), DeleteAccountAliasError>;


    #[doc="<p>Deletes the password policy for the AWS account. There are no parameters.</p>"]
    fn delete_account_password_policy(&self) -> Result<(), DeleteAccountPasswordPolicyError>;


    #[doc="<p>Deletes the specified IAM group. The group must not contain any users or have any attached policies.</p>"]
    fn delete_group(&self, input: &DeleteGroupRequest) -> Result<(), DeleteGroupError>;


    #[doc="<p>Deletes the specified inline policy that is embedded in the specified IAM group.</p> <p>A group can also have managed policies attached to it. To detach a managed policy from a group, use <a>DetachGroupPolicy</a>. For more information about policies, refer to <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html\">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>"]
    fn delete_group_policy(&self,
                           input: &DeleteGroupPolicyRequest)
                           -> Result<(), DeleteGroupPolicyError>;


    #[doc="<p>Deletes the specified instance profile. The instance profile must not have an associated role.</p> <important> <p>Make sure you do not have any Amazon EC2 instances running with the instance profile you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important> <p>For more information about instance profiles, go to <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html\">About Instance Profiles</a>.</p>"]
    fn delete_instance_profile(&self,
                               input: &DeleteInstanceProfileRequest)
                               -> Result<(), DeleteInstanceProfileError>;


    #[doc="<p>Deletes the password for the specified IAM user, which terminates the user's ability to access AWS services through the AWS Management Console.</p> <important> <p> Deleting a user's password does not prevent a user from accessing AWS through the command line interface or the API. To prevent all user access you must also either make any access keys inactive or delete them. For more information about making keys inactive or deleting them, see <a>UpdateAccessKey</a> and <a>DeleteAccessKey</a>. </p> </important>"]
    fn delete_login_profile(&self,
                            input: &DeleteLoginProfileRequest)
                            -> Result<(), DeleteLoginProfileError>;


    #[doc="<p>Deletes an OpenID Connect identity provider (IdP) resource object in IAM.</p> <p>Deleting an IAM OIDC provider resource does not update any roles that reference the provider as a principal in their trust policies. Any attempt to assume a role that references a deleted provider fails.</p> <p>This action is idempotent; it does not fail or return an error if you call the action for a provider that does not exist.</p>"]
    fn delete_open_id_connect_provider(&self,
                                       input: &DeleteOpenIDConnectProviderRequest)
                                       -> Result<(), DeleteOpenIDConnectProviderError>;


    #[doc="<p>Deletes the specified managed policy.</p> <p>Before you can delete a managed policy, you must first detach the policy from all users, groups, and roles that it is attached to, and you must delete all of the policy's versions. The following steps describe the process for deleting a managed policy:</p> <ul> <li> <p>Detach the policy from all users, groups, and roles that the policy is attached to, using the <a>DetachUserPolicy</a>, <a>DetachGroupPolicy</a>, or <a>DetachRolePolicy</a> APIs. To list all the users, groups, and roles that a policy is attached to, use <a>ListEntitiesForPolicy</a>.</p> </li> <li> <p>Delete all versions of the policy using <a>DeletePolicyVersion</a>. To list the policy's versions, use <a>ListPolicyVersions</a>. You cannot use <a>DeletePolicyVersion</a> to delete the version that is marked as the default version. You delete the policy's default version in the next step of the process.</p> </li> <li> <p>Delete the policy (this automatically deletes the policy's default version) using this API.</p> </li> </ul> <p>For information about managed policies, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html\">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>"]
    fn delete_policy(&self, input: &DeletePolicyRequest) -> Result<(), DeletePolicyError>;


    #[doc="<p>Deletes the specified version from the specified managed policy.</p> <p>You cannot delete the default version from a policy using this API. To delete the default version from a policy, use <a>DeletePolicy</a>. To find out which version of a policy is marked as the default version, use <a>ListPolicyVersions</a>.</p> <p>For information about versions for managed policies, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html\">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>"]
    fn delete_policy_version(&self,
                             input: &DeletePolicyVersionRequest)
                             -> Result<(), DeletePolicyVersionError>;


    #[doc="<p>Deletes the specified role. The role must not have any policies attached. For more information about roles, go to <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html\">Working with Roles</a>.</p> <important> <p>Make sure you do not have any Amazon EC2 instances running with the role you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important>"]
    fn delete_role(&self, input: &DeleteRoleRequest) -> Result<(), DeleteRoleError>;


    #[doc="<p>Deletes the specified inline policy that is embedded in the specified IAM role.</p> <p>A role can also have managed policies attached to it. To detach a managed policy from a role, use <a>DetachRolePolicy</a>. For more information about policies, refer to <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html\">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>"]
    fn delete_role_policy(&self,
                          input: &DeleteRolePolicyRequest)
                          -> Result<(), DeleteRolePolicyError>;


    #[doc="<p>Deletes a SAML provider resource in IAM.</p> <p>Deleting the provider resource from IAM does not update any roles that reference the SAML provider resource's ARN as a principal in their trust policies. Any attempt to assume a role that references a non-existent provider resource ARN fails.</p> <note> <p> This operation requires <a href=\"http://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\">Signature Version 4</a>.</p> </note>"]
    fn delete_saml_provider(&self,
                            input: &DeleteSAMLProviderRequest)
                            -> Result<(), DeleteSAMLProviderError>;


    #[doc="<p>Deletes the specified SSH public key.</p> <p>The SSH public key deleted by this action is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href=\"http://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html\">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>"]
    fn delete_ssh_public_key(&self,
                             input: &DeleteSSHPublicKeyRequest)
                             -> Result<(), DeleteSSHPublicKeyError>;


    #[doc="<p>Deletes the specified server certificate.</p> <p>For more information about working with server certificates, including a list of AWS services that can use the server certificates that you manage with IAM, go to <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html\">Working with Server Certificates</a> in the <i>IAM User Guide</i>.</p> <important> <p> If you are using a server certificate with Elastic Load Balancing, deleting the certificate could have implications for your application. If Elastic Load Balancing doesn't detect the deletion of bound certificates, it may continue to use the certificates. This could cause Elastic Load Balancing to stop accepting traffic. We recommend that you remove the reference to the certificate from Elastic Load Balancing before using this command to delete the certificate. For more information, go to <a href=\"http://docs.aws.amazon.com/ElasticLoadBalancing/latest/APIReference/API_DeleteLoadBalancerListeners.html\">DeleteLoadBalancerListeners</a> in the <i>Elastic Load Balancing API Reference</i>.</p> </important>"]
    fn delete_server_certificate(&self,
                                 input: &DeleteServerCertificateRequest)
                                 -> Result<(), DeleteServerCertificateError>;


    #[doc="<p>Deletes the specified service-specific credential.</p>"]
    fn delete_service_specific_credential(&self,
                                          input: &DeleteServiceSpecificCredentialRequest)
                                          -> Result<(), DeleteServiceSpecificCredentialError>;


    #[doc="<p>Deletes a signing certificate associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. Because this action works for access keys under the AWS account, you can use this action to manage root credentials even if the AWS account has no associated IAM users.</p>"]
    fn delete_signing_certificate(&self,
                                  input: &DeleteSigningCertificateRequest)
                                  -> Result<(), DeleteSigningCertificateError>;


    #[doc="<p>Deletes the specified IAM user. The user must not belong to any groups or have any access keys, signing certificates, or attached policies.</p>"]
    fn delete_user(&self, input: &DeleteUserRequest) -> Result<(), DeleteUserError>;


    #[doc="<p>Deletes the specified inline policy that is embedded in the specified IAM user.</p> <p>A user can also have managed policies attached to it. To detach a managed policy from a user, use <a>DetachUserPolicy</a>. For more information about policies, refer to <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html\">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>"]
    fn delete_user_policy(&self,
                          input: &DeleteUserPolicyRequest)
                          -> Result<(), DeleteUserPolicyError>;


    #[doc="<p>Deletes a virtual MFA device.</p> <note> <p> You must deactivate a user's virtual MFA device before you can delete it. For information about deactivating MFA devices, see <a>DeactivateMFADevice</a>. </p> </note>"]
    fn delete_virtual_mfa_device(&self,
                                 input: &DeleteVirtualMFADeviceRequest)
                                 -> Result<(), DeleteVirtualMFADeviceError>;


    #[doc="<p>Removes the specified managed policy from the specified IAM group.</p> <p>A group can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteGroupPolicy</a> API. For information about policies, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html\">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>"]
    fn detach_group_policy(&self,
                           input: &DetachGroupPolicyRequest)
                           -> Result<(), DetachGroupPolicyError>;


    #[doc="<p>Removes the specified managed policy from the specified role.</p> <p>A role can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteRolePolicy</a> API. For information about policies, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html\">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>"]
    fn detach_role_policy(&self,
                          input: &DetachRolePolicyRequest)
                          -> Result<(), DetachRolePolicyError>;


    #[doc="<p>Removes the specified managed policy from the specified user.</p> <p>A user can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteUserPolicy</a> API. For information about policies, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html\">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>"]
    fn detach_user_policy(&self,
                          input: &DetachUserPolicyRequest)
                          -> Result<(), DetachUserPolicyError>;


    #[doc="<p>Enables the specified MFA device and associates it with the specified IAM user. When enabled, the MFA device is required for every subsequent login by the IAM user associated with the device.</p>"]
    fn enable_mfa_device(&self,
                         input: &EnableMFADeviceRequest)
                         -> Result<(), EnableMFADeviceError>;


    #[doc="<p> Generates a credential report for the AWS account. For more information about the credential report, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html\">Getting Credential Reports</a> in the <i>IAM User Guide</i>.</p>"]
    fn generate_credential_report
        (&self)
         -> Result<GenerateCredentialReportResponse, GenerateCredentialReportError>;


    #[doc="<p>Retrieves information about when the specified access key was last used. The information includes the date and time of last use, along with the AWS service and region that were specified in the last request made with that key.</p>"]
    fn get_access_key_last_used
        (&self,
         input: &GetAccessKeyLastUsedRequest)
         -> Result<GetAccessKeyLastUsedResponse, GetAccessKeyLastUsedError>;


    #[doc="<p>Retrieves information about all IAM users, groups, roles, and policies in your AWS account, including their relationships to one another. Use this API to obtain a snapshot of the configuration of IAM permissions (users, groups, roles, and policies) in your account.</p> <p>You can optionally filter the results using the <code>Filter</code> parameter. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>"]
    fn get_account_authorization_details
        (&self,
         input: &GetAccountAuthorizationDetailsRequest)
         -> Result<GetAccountAuthorizationDetailsResponse, GetAccountAuthorizationDetailsError>;


    #[doc="<p>Retrieves the password policy for the AWS account. For more information about using a password policy, go to <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html\">Managing an IAM Password Policy</a>.</p>"]
    fn get_account_password_policy
        (&self)
         -> Result<GetAccountPasswordPolicyResponse, GetAccountPasswordPolicyError>;


    #[doc="<p>Retrieves information about IAM entity usage and IAM quotas in the AWS account.</p> <p> For information about limitations on IAM entities, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html\">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>"]
    fn get_account_summary(&self) -> Result<GetAccountSummaryResponse, GetAccountSummaryError>;


    #[doc="<p>Gets a list of all of the context keys referenced in the input policies. The policies are supplied as a list of one or more strings. To get the context keys from policies associated with an IAM user, group, or role, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request, and can be evaluated by testing against a value specified in an IAM policy. Use GetContextKeysForCustomPolicy to understand what key names and values you must supply when you call <a>SimulateCustomPolicy</a>. Note that all parameters are shown in unencoded form here for clarity, but must be URL encoded to be included as a part of a real HTML request.</p>"]
    fn get_context_keys_for_custom_policy
        (&self,
         input: &GetContextKeysForCustomPolicyRequest)
         -> Result<GetContextKeysForPolicyResponse, GetContextKeysForCustomPolicyError>;


    #[doc="<p>Gets a list of all of the context keys referenced in all of the IAM policies attached to the specified IAM entity. The entity can be an IAM user, group, or role. If you specify a user, then the request also includes all of the policies attached to groups that the user is a member of.</p> <p>You can optionally include a list of one or more additional policies, specified as strings. If you want to include <i>only</i> a list of policies by string, use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request, and can be evaluated by testing against a value in an IAM policy. Use <a>GetContextKeysForPrincipalPolicy</a> to understand what key names and values you must supply when you call <a>SimulatePrincipalPolicy</a>.</p>"]
    fn get_context_keys_for_principal_policy
        (&self,
         input: &GetContextKeysForPrincipalPolicyRequest)
         -> Result<GetContextKeysForPolicyResponse, GetContextKeysForPrincipalPolicyError>;


    #[doc="<p> Retrieves a credential report for the AWS account. For more information about the credential report, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html\">Getting Credential Reports</a> in the <i>IAM User Guide</i>.</p>"]
    fn get_credential_report(&self)
                             -> Result<GetCredentialReportResponse, GetCredentialReportError>;


    #[doc="<p> Returns a list of IAM users that are in the specified IAM group. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>"]
    fn get_group(&self, input: &GetGroupRequest) -> Result<GetGroupResponse, GetGroupError>;


    #[doc="<p>Retrieves the specified inline policy document that is embedded in the specified IAM group.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href=\"https://tools.ietf.org/html/rfc3986\">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM group can also have managed policies attached to it. To retrieve a managed policy document that is attached to a group, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html\">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>"]
    fn get_group_policy(&self,
                        input: &GetGroupPolicyRequest)
                        -> Result<GetGroupPolicyResponse, GetGroupPolicyError>;


    #[doc="<p> Retrieves information about the specified instance profile, including the instance profile's path, GUID, ARN, and role. For more information about instance profiles, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html\">About Instance Profiles</a> in the <i>IAM User Guide</i>.</p>"]
    fn get_instance_profile(&self,
                            input: &GetInstanceProfileRequest)
                            -> Result<GetInstanceProfileResponse, GetInstanceProfileError>;


    #[doc="<p>Retrieves the user name and password-creation date for the specified IAM user. If the user has not been assigned a password, the action returns a 404 (<code>NoSuchEntity</code>) error.</p>"]
    fn get_login_profile(&self,
                         input: &GetLoginProfileRequest)
                         -> Result<GetLoginProfileResponse, GetLoginProfileError>;


    #[doc="<p>Returns information about the specified OpenID Connect (OIDC) provider resource object in IAM.</p>"]
    fn get_open_id_connect_provider
        (&self,
         input: &GetOpenIDConnectProviderRequest)
         -> Result<GetOpenIDConnectProviderResponse, GetOpenIDConnectProviderError>;


    #[doc="<p>Retrieves information about the specified managed policy, including the policy's default version and the total number of IAM users, groups, and roles to which the policy is attached. To retrieve the list of the specific users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API. This API returns metadata about the policy. To retrieve the actual policy document for a specific version of the policy, use <a>GetPolicyVersion</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded with an IAM user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about policies, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html\">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>"]
    fn get_policy(&self, input: &GetPolicyRequest) -> Result<GetPolicyResponse, GetPolicyError>;


    #[doc="<p>Retrieves information about the specified version of the specified managed policy, including the policy document.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href=\"https://tools.ietf.org/html/rfc3986\">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>To list the available versions for a policy, use <a>ListPolicyVersions</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded in a user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about the types of policies, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html\">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policy versions, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html\">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>"]
    fn get_policy_version(&self,
                          input: &GetPolicyVersionRequest)
                          -> Result<GetPolicyVersionResponse, GetPolicyVersionError>;


    #[doc="<p>Retrieves information about the specified role, including the role's path, GUID, ARN, and the role's trust policy that grants permission to assume the role. For more information about roles, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html\">Working with Roles</a>.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href=\"https://tools.ietf.org/html/rfc3986\">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note>"]
    fn get_role(&self, input: &GetRoleRequest) -> Result<GetRoleResponse, GetRoleError>;


    #[doc="<p>Retrieves the specified inline policy document that is embedded with the specified IAM role.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href=\"https://tools.ietf.org/html/rfc3986\">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM role can also have managed policies attached to it. To retrieve a managed policy document that is attached to a role, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html\">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about roles, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html\">Using Roles to Delegate Permissions and Federate Identities</a>.</p>"]
    fn get_role_policy(&self,
                       input: &GetRolePolicyRequest)
                       -> Result<GetRolePolicyResponse, GetRolePolicyError>;


    #[doc="<p>Returns the SAML provider metadocument that was uploaded when the IAM SAML provider resource object was created or updated.</p> <note> <p>This operation requires <a href=\"http://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\">Signature Version 4</a>.</p> </note>"]
    fn get_saml_provider(&self,
                         input: &GetSAMLProviderRequest)
                         -> Result<GetSAMLProviderResponse, GetSAMLProviderError>;


    #[doc="<p>Retrieves the specified SSH public key, including metadata about the key.</p> <p>The SSH public key retrieved by this action is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href=\"http://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html\">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>"]
    fn get_ssh_public_key(&self,
                          input: &GetSSHPublicKeyRequest)
                          -> Result<GetSSHPublicKeyResponse, GetSSHPublicKeyError>;


    #[doc="<p>Retrieves information about the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, including a list of AWS services that can use the server certificates that you manage with IAM, go to <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html\">Working with Server Certificates</a> in the <i>IAM User Guide</i>.</p>"]
    fn get_server_certificate
        (&self,
         input: &GetServerCertificateRequest)
         -> Result<GetServerCertificateResponse, GetServerCertificateError>;


    #[doc="<p>Retrieves information about the specified IAM user, including the user's creation date, path, unique ID, and ARN.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID used to sign the request to this API.</p>"]
    fn get_user(&self, input: &GetUserRequest) -> Result<GetUserResponse, GetUserError>;


    #[doc="<p>Retrieves the specified inline policy document that is embedded in the specified IAM user.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href=\"https://tools.ietf.org/html/rfc3986\">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM user can also have managed policies attached to it. To retrieve a managed policy document that is attached to a user, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html\">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>"]
    fn get_user_policy(&self,
                       input: &GetUserPolicyRequest)
                       -> Result<GetUserPolicyResponse, GetUserPolicyError>;


    #[doc="<p>Returns information about the access key IDs associated with the specified IAM user. If there are none, the action returns an empty list.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the UserName is determined implicitly based on the AWS access key ID used to sign the request. Because this action works for access keys under the AWS account, you can use this action to manage root credentials even if the AWS account has no associated users.</p> <note> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation.</p> </note>"]
    fn list_access_keys(&self,
                        input: &ListAccessKeysRequest)
                        -> Result<ListAccessKeysResponse, ListAccessKeysError>;


    #[doc="<p>Lists the account alias associated with the AWS account (Note: you can have only one). For information about using an AWS account alias, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html\">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.</p>"]
    fn list_account_aliases(&self,
                            input: &ListAccountAliasesRequest)
                            -> Result<ListAccountAliasesResponse, ListAccountAliasesError>;


    #[doc="<p>Lists all managed policies that are attached to the specified IAM group.</p> <p>An IAM group can also have inline policies embedded with it. To list the inline policies for a group, use the <a>ListGroupPolicies</a> API. For information about policies, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html\">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the action returns an empty list.</p>"]
    fn list_attached_group_policies
        (&self,
         input: &ListAttachedGroupPoliciesRequest)
         -> Result<ListAttachedGroupPoliciesResponse, ListAttachedGroupPoliciesError>;


    #[doc="<p>Lists all managed policies that are attached to the specified IAM role.</p> <p>An IAM role can also have inline policies embedded with it. To list the inline policies for a role, use the <a>ListRolePolicies</a> API. For information about policies, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html\">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified role (or none that match the specified path prefix), the action returns an empty list.</p>"]
    fn list_attached_role_policies
        (&self,
         input: &ListAttachedRolePoliciesRequest)
         -> Result<ListAttachedRolePoliciesResponse, ListAttachedRolePoliciesError>;


    #[doc="<p>Lists all managed policies that are attached to the specified IAM user.</p> <p>An IAM user can also have inline policies embedded with it. To list the inline policies for a user, use the <a>ListUserPolicies</a> API. For information about policies, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html\">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the action returns an empty list.</p>"]
    fn list_attached_user_policies
        (&self,
         input: &ListAttachedUserPoliciesRequest)
         -> Result<ListAttachedUserPoliciesResponse, ListAttachedUserPoliciesError>;


    #[doc="<p>Lists all IAM users, groups, and roles that the specified managed policy is attached to.</p> <p>You can use the optional <code>EntityFilter</code> parameter to limit the results to a particular type of entity (users, groups, or roles). For example, to list only the roles that are attached to the specified policy, set <code>EntityFilter</code> to <code>Role</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>"]
    fn list_entities_for_policy
        (&self,
         input: &ListEntitiesForPolicyRequest)
         -> Result<ListEntitiesForPolicyResponse, ListEntitiesForPolicyError>;


    #[doc="<p>Lists the names of the inline policies that are embedded in the specified IAM group.</p> <p>An IAM group can also have managed policies attached to it. To list the managed policies that are attached to a group, use <a>ListAttachedGroupPolicies</a>. For more information about policies, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html\">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified group, the action returns an empty list.</p>"]
    fn list_group_policies(&self,
                           input: &ListGroupPoliciesRequest)
                           -> Result<ListGroupPoliciesResponse, ListGroupPoliciesError>;


    #[doc="<p>Lists the IAM groups that have the specified path prefix.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>"]
    fn list_groups(&self,
                   input: &ListGroupsRequest)
                   -> Result<ListGroupsResponse, ListGroupsError>;


    #[doc="<p>Lists the IAM groups that the specified IAM user belongs to.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>"]
    fn list_groups_for_user(&self,
                            input: &ListGroupsForUserRequest)
                            -> Result<ListGroupsForUserResponse, ListGroupsForUserError>;


    #[doc="<p>Lists the instance profiles that have the specified path prefix. If there are none, the action returns an empty list. For more information about instance profiles, go to <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html\">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>"]
    fn list_instance_profiles
        (&self,
         input: &ListInstanceProfilesRequest)
         -> Result<ListInstanceProfilesResponse, ListInstanceProfilesError>;


    #[doc="<p>Lists the instance profiles that have the specified associated IAM role. If there are none, the action returns an empty list. For more information about instance profiles, go to <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html\">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>"]
    fn list_instance_profiles_for_role
        (&self,
         input: &ListInstanceProfilesForRoleRequest)
         -> Result<ListInstanceProfilesForRoleResponse, ListInstanceProfilesForRoleError>;


    #[doc="<p>Lists the MFA devices for an IAM user. If the request includes a IAM user name, then this action lists all the MFA devices associated with the specified user. If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request for this API.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>"]
    fn list_mfa_devices(&self,
                        input: &ListMFADevicesRequest)
                        -> Result<ListMFADevicesResponse, ListMFADevicesError>;


    #[doc="<p>Lists information about the IAM OpenID Connect (OIDC) provider resource objects defined in the AWS account.</p>"]
    fn list_open_id_connect_providers
        (&self,
         input: &ListOpenIDConnectProvidersRequest)
         -> Result<ListOpenIDConnectProvidersResponse, ListOpenIDConnectProvidersError>;


    #[doc="<p>Lists all the managed policies that are available in your AWS account, including your own customer-defined managed policies and all AWS managed policies.</p> <p>You can filter the list of policies that is returned using the optional <code>OnlyAttached</code>, <code>Scope</code>, and <code>PathPrefix</code> parameters. For example, to list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>. To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about managed policies, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html\">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>"]
    fn list_policies(&self,
                     input: &ListPoliciesRequest)
                     -> Result<ListPoliciesResponse, ListPoliciesError>;


    #[doc="<p>Lists information about the versions of the specified managed policy, including the version that is currently set as the policy's default version.</p> <p>For more information about managed policies, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html\">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>"]
    fn list_policy_versions(&self,
                            input: &ListPolicyVersionsRequest)
                            -> Result<ListPolicyVersionsResponse, ListPolicyVersionsError>;


    #[doc="<p>Lists the names of the inline policies that are embedded in the specified IAM role.</p> <p>An IAM role can also have managed policies attached to it. To list the managed policies that are attached to a role, use <a>ListAttachedRolePolicies</a>. For more information about policies, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html\">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified role, the action returns an empty list.</p>"]
    fn list_role_policies(&self,
                          input: &ListRolePoliciesRequest)
                          -> Result<ListRolePoliciesResponse, ListRolePoliciesError>;


    #[doc="<p>Lists the IAM roles that have the specified path prefix. If there are none, the action returns an empty list. For more information about roles, go to <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html\">Working with Roles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>"]
    fn list_roles(&self, input: &ListRolesRequest) -> Result<ListRolesResponse, ListRolesError>;


    #[doc="<p>Lists the SAML provider resource objects defined in IAM in the account.</p> <note> <p> This operation requires <a href=\"http://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\">Signature Version 4</a>.</p> </note>"]
    fn list_saml_providers(&self,
                           input: &ListSAMLProvidersRequest)
                           -> Result<ListSAMLProvidersResponse, ListSAMLProvidersError>;


    #[doc="<p>Returns information about the SSH public keys associated with the specified IAM user. If there are none, the action returns an empty list.</p> <p>The SSH public keys returned by this action are used only for authenticating the IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href=\"http://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html\">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>"]
    fn list_ssh_public_keys(&self,
                            input: &ListSSHPublicKeysRequest)
                            -> Result<ListSSHPublicKeysResponse, ListSSHPublicKeysError>;


    #[doc="<p>Lists the server certificates stored in IAM that have the specified path prefix. If none exist, the action returns an empty list.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about working with server certificates, including a list of AWS services that can use the server certificates that you manage with IAM, go to <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html\">Working with Server Certificates</a> in the <i>IAM User Guide</i>.</p>"]
    fn list_server_certificates
        (&self,
         input: &ListServerCertificatesRequest)
         -> Result<ListServerCertificatesResponse, ListServerCertificatesError>;


    #[doc="<p>Returns information about the service-specific credentials associated with the specified IAM user. If there are none, the action returns an empty list. The service-specific credentials returned by this action are used only for authenticating the IAM user to a specific service. For more information about using service-specific credentials to authenticate to an AWS service, see <a href=\"http://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-gc.html\">Set Up service-specific credentials</a> in the AWS CodeCommit User Guide.</p>"]
    fn list_service_specific_credentials
        (&self,
         input: &ListServiceSpecificCredentialsRequest)
         -> Result<ListServiceSpecificCredentialsResponse, ListServiceSpecificCredentialsError>;


    #[doc="<p>Returns information about the signing certificates associated with the specified IAM user. If there are none, the action returns an empty list.</p> <p>Although each user is limited to a small number of signing certificates, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request for this API. Because this action works for access keys under the AWS account, you can use this action to manage root credentials even if the AWS account has no associated users.</p>"]
    fn list_signing_certificates
        (&self,
         input: &ListSigningCertificatesRequest)
         -> Result<ListSigningCertificatesResponse, ListSigningCertificatesError>;


    #[doc="<p>Lists the names of the inline policies embedded in the specified IAM user.</p> <p>An IAM user can also have managed policies attached to it. To list the managed policies that are attached to a user, use <a>ListAttachedUserPolicies</a>. For more information about policies, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html\">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified user, the action returns an empty list.</p>"]
    fn list_user_policies(&self,
                          input: &ListUserPoliciesRequest)
                          -> Result<ListUserPoliciesResponse, ListUserPoliciesError>;


    #[doc="<p>Lists the IAM users that have the specified path prefix. If no path prefix is specified, the action returns all users in the AWS account. If there are none, the action returns an empty list.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>"]
    fn list_users(&self, input: &ListUsersRequest) -> Result<ListUsersResponse, ListUsersError>;


    #[doc="<p>Lists the virtual MFA devices defined in the AWS account by assignment status. If you do not specify an assignment status, the action returns a list of all virtual MFA devices. Assignment status can be <code>Assigned</code>, <code>Unassigned</code>, or <code>Any</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>"]
    fn list_virtual_mfa_devices
        (&self,
         input: &ListVirtualMFADevicesRequest)
         -> Result<ListVirtualMFADevicesResponse, ListVirtualMFADevicesError>;


    #[doc="<p>Adds or updates an inline policy document that is embedded in the specified IAM group.</p> <p>A user can also have managed policies attached to it. To attach a managed policy to a group, use <a>AttachGroupPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html\">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a group, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html\">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutGroupPolicy</code>. For general information about using the Query API with IAM, go to <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html\">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>"]
    fn put_group_policy(&self, input: &PutGroupPolicyRequest) -> Result<(), PutGroupPolicyError>;


    #[doc="<p>Adds or updates an inline policy document that is embedded in the specified IAM role.</p> <p>When you embed an inline policy in a role, the inline policy is used as part of the role's access (permissions) policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>. For more information about IAM roles, go to <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html\">Using Roles to Delegate Permissions and Federate Identities</a>.</p> <p>A role can also have a managed policy attached to it. To attach a managed policy to a role, use <a>AttachRolePolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html\">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed with a role, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html\">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutRolePolicy</code>. For general information about using the Query API with IAM, go to <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html\">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>"]
    fn put_role_policy(&self, input: &PutRolePolicyRequest) -> Result<(), PutRolePolicyError>;


    #[doc="<p>Adds or updates an inline policy document that is embedded in the specified IAM user.</p> <p>An IAM user can also have a managed policy attached to it. To attach a managed policy to a user, use <a>AttachUserPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html\">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a user, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html\">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutUserPolicy</code>. For general information about using the Query API with IAM, go to <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html\">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>"]
    fn put_user_policy(&self, input: &PutUserPolicyRequest) -> Result<(), PutUserPolicyError>;


    #[doc="<p>Removes the specified client ID (also known as audience) from the list of client IDs registered for the specified IAM OpenID Connect (OIDC) provider resource object.</p> <p>This action is idempotent; it does not fail or return an error if you try to remove a client ID that does not exist.</p>"]
    fn remove_client_id_from_open_id_connect_provider
        (&self,
         input: &RemoveClientIDFromOpenIDConnectProviderRequest)
         -> Result<(), RemoveClientIDFromOpenIDConnectProviderError>;


    #[doc="<p>Removes the specified IAM role from the specified EC2 instance profile.</p> <important> <p>Make sure you do not have any Amazon EC2 instances running with the role you are about to remove from the instance profile. Removing a role from an instance profile that is associated with a running instance might break any applications running on the instance.</p> </important> <p> For more information about IAM roles, go to <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html\">Working with Roles</a>. For more information about instance profiles, go to <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html\">About Instance Profiles</a>.</p>"]
    fn remove_role_from_instance_profile(&self,
                                         input: &RemoveRoleFromInstanceProfileRequest)
                                         -> Result<(), RemoveRoleFromInstanceProfileError>;


    #[doc="<p>Removes the specified user from the specified group.</p>"]
    fn remove_user_from_group(&self,
                              input: &RemoveUserFromGroupRequest)
                              -> Result<(), RemoveUserFromGroupError>;


    #[doc="<p>Resets the password for a service-specific credential. The new password is AWS generated and cryptographically strong. It cannot be configured by the user. Resetting the password immediately invalidates the previous password associated with this user.</p>"]
    fn reset_service_specific_credential
        (&self,
         input: &ResetServiceSpecificCredentialRequest)
         -> Result<ResetServiceSpecificCredentialResponse, ResetServiceSpecificCredentialError>;


    #[doc="<p>Synchronizes the specified MFA device with its IAM resource object on the AWS servers.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html\">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p>"]
    fn resync_mfa_device(&self,
                         input: &ResyncMFADeviceRequest)
                         -> Result<(), ResyncMFADeviceError>;


    #[doc="<p>Sets the specified version of the specified policy as the policy's default (operative) version.</p> <p>This action affects all users, groups, and roles that the policy is attached to. To list the users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API.</p> <p>For information about managed policies, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html\">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>"]
    fn set_default_policy_version(&self,
                                  input: &SetDefaultPolicyVersionRequest)
                                  -> Result<(), SetDefaultPolicyVersionError>;


    #[doc="<p>Simulate how a set of IAM policies and optionally a resource-based policy works with a list of API actions and AWS resources to determine the policies' effective permissions. The policies are provided as strings.</p> <p>The simulation does not perform the API actions; it only checks the authorization to determine if the simulated policies allow or deny the actions.</p> <p>If you want to simulate existing policies attached to an IAM user, group, or role, use <a>SimulatePrincipalPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForCustomPolicy</a>.</p> <p>If the output is long, you can use <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>"]
    fn simulate_custom_policy(&self,
                              input: &SimulateCustomPolicyRequest)
                              -> Result<SimulatePolicyResponse, SimulateCustomPolicyError>;


    #[doc="<p>Simulate how a set of IAM policies attached to an IAM entity works with a list of API actions and AWS resources to determine the policies' effective permissions. The entity can be an IAM user, group, or role. If you specify a user, then the simulation also includes all of the policies that are attached to groups that the user belongs to .</p> <p>You can optionally include a list of one or more additional policies specified as strings to include in the simulation. If you want to simulate only policies specified as strings, use <a>SimulateCustomPolicy</a> instead.</p> <p>You can also optionally include one resource-based policy to be evaluated with each of the resources included in the simulation.</p> <p>The simulation does not perform the API actions, it only checks the authorization to determine if the simulated policies allow or deny the actions.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>SimulateCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>If the output is long, you can use the <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>"]
    fn simulate_principal_policy
        (&self,
         input: &SimulatePrincipalPolicyRequest)
         -> Result<SimulatePolicyResponse, SimulatePrincipalPolicyError>;


    #[doc="<p>Changes the status of the specified access key from Active to Inactive, or vice versa. This action can be used to disable a user's key as part of a key rotation work flow.</p> <p>If the <code>UserName</code> field is not specified, the UserName is determined implicitly based on the AWS access key ID used to sign the request. Because this action works for access keys under the AWS account, you can use this action to manage root credentials even if the AWS account has no associated users.</p> <p>For information about rotating keys, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/ManagingCredentials.html\">Managing Keys and Certificates</a> in the <i>IAM User Guide</i>.</p>"]
    fn update_access_key(&self,
                         input: &UpdateAccessKeyRequest)
                         -> Result<(), UpdateAccessKeyError>;


    #[doc="<p>Updates the password policy settings for the AWS account.</p> <note> <p>This action does not support partial updates. No parameters are required, but if you do not specify a parameter, that parameter's value reverts to its default value. See the <b>Request Parameters</b> section for each parameter's default value.</p> </note> <p> For more information about using a password policy, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html\">Managing an IAM Password Policy</a> in the <i>IAM User Guide</i>.</p>"]
    fn update_account_password_policy(&self,
                                      input: &UpdateAccountPasswordPolicyRequest)
                                      -> Result<(), UpdateAccountPasswordPolicyError>;


    #[doc="<p>Updates the policy that grants an IAM entity permission to assume a role. This is typically referred to as the \"role trust policy\". For more information about roles, go to <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html\">Using Roles to Delegate Permissions and Federate Identities</a>.</p>"]
    fn update_assume_role_policy(&self,
                                 input: &UpdateAssumeRolePolicyRequest)
                                 -> Result<(), UpdateAssumeRolePolicyError>;


    #[doc="<p>Updates the name and/or the path of the specified IAM group.</p> <important> <p> You should understand the implications of changing a group's path or name. For more information, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_WorkingWithGroupsAndUsers.html\">Renaming Users and Groups</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>To change an IAM group name the requester must have appropriate permissions on both the source object and the target object. For example, to change \"Managers\" to \"MGRs\", the entity making the request must have permission on both \"Managers\" and \"MGRs\", or must have permission on all (*). For more information about permissions, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/PermissionsAndPolicies.html\">Permissions and Policies</a>. </p> </note>"]
    fn update_group(&self, input: &UpdateGroupRequest) -> Result<(), UpdateGroupError>;


    #[doc="<p>Changes the password for the specified IAM user.</p> <p>IAM users can change their own passwords by calling <a>ChangePassword</a>. For more information about modifying passwords, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html\">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>"]
    fn update_login_profile(&self,
                            input: &UpdateLoginProfileRequest)
                            -> Result<(), UpdateLoginProfileError>;


    #[doc="<p>Replaces the existing list of server certificate thumbprints associated with an OpenID Connect (OIDC) provider resource object with a new list of thumbprints.</p> <p>The list that you pass with this action completely replaces the existing list of thumbprints. (The lists are not merged.)</p> <p>Typically, you need to update a thumbprint only when the identity provider's certificate changes, which occurs rarely. However, if the provider's certificate <i>does</i> change, any attempt to assume an IAM role that specifies the OIDC provider as a principal fails until the certificate thumbprint is updated.</p> <note> <p>Because trust for the OIDC provider is ultimately derived from the provider's certificate and is validated by the thumbprint, it is a best practice to limit access to the <code>UpdateOpenIDConnectProviderThumbprint</code> action to highly-privileged users.</p> </note>"]
    fn update_open_id_connect_provider_thumbprint
        (&self,
         input: &UpdateOpenIDConnectProviderThumbprintRequest)
         -> Result<(), UpdateOpenIDConnectProviderThumbprintError>;


    #[doc="<p>Modifies the description of a role.</p>"]
    fn update_role_description
        (&self,
         input: &UpdateRoleDescriptionRequest)
         -> Result<UpdateRoleDescriptionResponse, UpdateRoleDescriptionError>;


    #[doc="<p>Updates the metadata document for an existing SAML provider resource object.</p> <note> <p>This operation requires <a href=\"http://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\">Signature Version 4</a>.</p> </note>"]
    fn update_saml_provider(&self,
                            input: &UpdateSAMLProviderRequest)
                            -> Result<UpdateSAMLProviderResponse, UpdateSAMLProviderError>;


    #[doc="<p>Sets the status of an IAM user's SSH public key to active or inactive. SSH public keys that are inactive cannot be used for authentication. This action can be used to disable a user's SSH public key as part of a key rotation work flow.</p> <p>The SSH public key affected by this action is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href=\"http://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html\">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>"]
    fn update_ssh_public_key(&self,
                             input: &UpdateSSHPublicKeyRequest)
                             -> Result<(), UpdateSSHPublicKeyError>;


    #[doc="<p>Updates the name and/or the path of the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, including a list of AWS services that can use the server certificates that you manage with IAM, go to <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html\">Working with Server Certificates</a> in the <i>IAM User Guide</i>.</p> <important> <p>You should understand the implications of changing a server certificate's path or name. For more information, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs_manage.html#RenamingServerCerts\">Renaming a Server Certificate</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>To change a server certificate name the requester must have appropriate permissions on both the source object and the target object. For example, to change the name from \"ProductionCert\" to \"ProdCert\", the entity making the request must have permission on \"ProductionCert\" and \"ProdCert\", or must have permission on all (*). For more information about permissions, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/access.html\">Access Management</a> in the <i>IAM User Guide</i>.</p> </note>"]
    fn update_server_certificate(&self,
                                 input: &UpdateServerCertificateRequest)
                                 -> Result<(), UpdateServerCertificateError>;


    #[doc="<p>Sets the status of a service-specific credential to <code>Active</code> or <code>Inactive</code>. Service-specific credentials that are inactive cannot be used for authentication to the service. This action can be used to disable a user’s service-specific credential as part of a credential rotation work flow.</p>"]
    fn update_service_specific_credential(&self,
                                          input: &UpdateServiceSpecificCredentialRequest)
                                          -> Result<(), UpdateServiceSpecificCredentialError>;


    #[doc="<p>Changes the status of the specified user signing certificate from active to disabled, or vice versa. This action can be used to disable an IAM user's signing certificate as part of a certificate rotation work flow.</p> <p>If the <code>UserName</code> field is not specified, the UserName is determined implicitly based on the AWS access key ID used to sign the request. Because this action works for access keys under the AWS account, you can use this action to manage root credentials even if the AWS account has no associated users.</p>"]
    fn update_signing_certificate(&self,
                                  input: &UpdateSigningCertificateRequest)
                                  -> Result<(), UpdateSigningCertificateError>;


    #[doc="<p>Updates the name and/or the path of the specified IAM user.</p> <important> <p> You should understand the implications of changing an IAM user's path or name. For more information, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_renaming\">Renaming an IAM User</a> and <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_manage_rename.html\">Renaming an IAM Group</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p> To change a user name the requester must have appropriate permissions on both the source object and the target object. For example, to change Bob to Robert, the entity making the request must have permission on Bob and Robert, or must have permission on all (*). For more information about permissions, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/PermissionsAndPolicies.html\">Permissions and Policies</a>. </p> </note>"]
    fn update_user(&self, input: &UpdateUserRequest) -> Result<(), UpdateUserError>;


    #[doc="<p>Uploads an SSH public key and associates it with the specified IAM user.</p> <p>The SSH public key uploaded by this action can be used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href=\"http://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html\">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>"]
    fn upload_ssh_public_key(&self,
                             input: &UploadSSHPublicKeyRequest)
                             -> Result<UploadSSHPublicKeyResponse, UploadSSHPublicKeyError>;


    #[doc="<p>Uploads a server certificate entity for the AWS account. The server certificate entity includes a public key certificate, a private key, and an optional certificate chain, which should all be PEM-encoded.</p> <p>We recommend that you use <a href=\"https://aws.amazon.com/certificate-manager/\">AWS Certificate Manager</a> to provision, manage, and deploy your server certificates. With ACM you can request a certificate, deploy it to AWS resources, and let ACM handle certificate renewals for you. Certificates provided by ACM are free. For more information about using ACM, see the <a href=\"http://docs.aws.amazon.com/acm/latest/userguide/\">AWS Certificate Manager User Guide</a>.</p> <p>For more information about working with server certificates, including a list of AWS services that can use the server certificates that you manage with IAM, go to <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html\">Working with Server Certificates</a> in the <i>IAM User Guide</i>.</p> <p>For information about the number of server certificates you can upload, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-limits.html\">Limitations on IAM Entities and Objects</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because the body of the public key certificate, private key, and the certificate chain can be large, you should use POST rather than GET when calling <code>UploadServerCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href=\"http://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html\">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/programming.html\">Calling the API by Making HTTP Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>"]
    fn upload_server_certificate
        (&self,
         input: &UploadServerCertificateRequest)
         -> Result<UploadServerCertificateResponse, UploadServerCertificateError>;


    #[doc="<p>Uploads an X.509 signing certificate and associates it with the specified IAM user. Some AWS services use X.509 signing certificates to validate requests that are signed with a corresponding private key. When you upload the certificate, its default status is <code>Active</code>.</p> <p>If the <code>UserName</code> field is not specified, the IAM user name is determined implicitly based on the AWS access key ID used to sign the request. Because this action works for access keys under the AWS account, you can use this action to manage root credentials even if the AWS account has no associated users.</p> <note> <p>Because the body of a X.509 certificate can be large, you should use POST rather than GET when calling <code>UploadSigningCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href=\"http://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html\">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html\">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>"]
    fn upload_signing_certificate
        (&self,
         input: &UploadSigningCertificateRequest)
         -> Result<UploadSigningCertificateResponse, UploadSigningCertificateError>;
}
/// A client for the IAM API.
pub struct IamClient<P, D>
    where P: ProvideAwsCredentials,
          D: DispatchSignedRequest
{
    credentials_provider: P,
    region: region::Region,
    dispatcher: D,
}

impl<P, D> IamClient<P, D>
    where P: ProvideAwsCredentials,
          D: DispatchSignedRequest
{
    pub fn new(request_dispatcher: D, credentials_provider: P, region: region::Region) -> Self {
        IamClient {
            credentials_provider: credentials_provider,
            region: region,
            dispatcher: request_dispatcher,
        }
    }
}

impl<P, D> Iam for IamClient<P, D>
    where P: ProvideAwsCredentials,
          D: DispatchSignedRequest
{
    #[doc="<p>Adds a new client ID (also known as audience) to the list of client IDs already registered for the specified IAM OpenID Connect (OIDC) provider resource.</p> <p>This action is idempotent; it does not fail or return an error if you add an existing client ID to the provider.</p>"]
    fn add_client_id_to_open_id_connect_provider
        (&self,
         input: &AddClientIDToOpenIDConnectProviderRequest)
         -> Result<(), AddClientIDToOpenIDConnectProviderError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "AddClientIDToOpenIDConnectProvider");
        params.put("Version", "2010-05-08");
        AddClientIDToOpenIDConnectProviderRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {
                let result = ();
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(AddClientIDToOpenIDConnectProviderError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Adds the specified IAM role to the specified instance profile. An instance profile can contain only one role, and this limit cannot be increased.</p> <note> <p>The caller of this API must be granted the <code>PassRole</code> permission on the IAM role by a permission policy.</p> </note> <p>For more information about roles, go to <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html\">Working with Roles</a>. For more information about instance profiles, go to <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html\">About Instance Profiles</a>.</p>"]
    fn add_role_to_instance_profile(&self,
                                    input: &AddRoleToInstanceProfileRequest)
                                    -> Result<(), AddRoleToInstanceProfileError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "AddRoleToInstanceProfile");
        params.put("Version", "2010-05-08");
        AddRoleToInstanceProfileRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {
                let result = ();
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(AddRoleToInstanceProfileError::from_body(String::from_utf8_lossy(&body)
                                                                 .as_ref()))
            }
        }
    }


    #[doc="<p>Adds the specified user to the specified group.</p>"]
    fn add_user_to_group(&self, input: &AddUserToGroupRequest) -> Result<(), AddUserToGroupError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "AddUserToGroup");
        params.put("Version", "2010-05-08");
        AddUserToGroupRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {
                let result = ();
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(AddUserToGroupError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Attaches the specified managed policy to the specified IAM group.</p> <p>You use this API to attach a managed policy to a group. To embed an inline policy in a group, use <a>PutGroupPolicy</a>.</p> <p>For more information about policies, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html\">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>"]
    fn attach_group_policy(&self,
                           input: &AttachGroupPolicyRequest)
                           -> Result<(), AttachGroupPolicyError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "AttachGroupPolicy");
        params.put("Version", "2010-05-08");
        AttachGroupPolicyRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {
                let result = ();
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(AttachGroupPolicyError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Attaches the specified managed policy to the specified IAM role. When you attach a managed policy to a role, the managed policy becomes part of the role's permission (access) policy.</p> <note> <p>You cannot use a managed policy as the role's trust policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>.</p> </note> <p>Use this API to attach a <i>managed</i> policy to a role. To embed an inline policy in a role, use <a>PutRolePolicy</a>. For more information about policies, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html\">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>"]
    fn attach_role_policy(&self,
                          input: &AttachRolePolicyRequest)
                          -> Result<(), AttachRolePolicyError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "AttachRolePolicy");
        params.put("Version", "2010-05-08");
        AttachRolePolicyRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {
                let result = ();
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(AttachRolePolicyError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Attaches the specified managed policy to the specified user.</p> <p>You use this API to attach a <i>managed</i> policy to a user. To embed an inline policy in a user, use <a>PutUserPolicy</a>.</p> <p>For more information about policies, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html\">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>"]
    fn attach_user_policy(&self,
                          input: &AttachUserPolicyRequest)
                          -> Result<(), AttachUserPolicyError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "AttachUserPolicy");
        params.put("Version", "2010-05-08");
        AttachUserPolicyRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {
                let result = ();
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(AttachUserPolicyError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Changes the password of the IAM user who is calling this action. The root account password is not affected by this action.</p> <p>To change the password for a different user, see <a>UpdateLoginProfile</a>. For more information about modifying passwords, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html\">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>"]
    fn change_password(&self, input: &ChangePasswordRequest) -> Result<(), ChangePasswordError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ChangePassword");
        params.put("Version", "2010-05-08");
        ChangePasswordRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {
                let result = ();
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(ChangePasswordError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p> Creates a new AWS secret access key and corresponding AWS access key ID for the specified user. The default status for new keys is <code>Active</code>.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. Because this action works for access keys under the AWS account, you can use this action to manage root credentials even if the AWS account has no associated users.</p> <p> For information about limits on the number of keys you can create, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html\">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation. You must save the key (for example, in a text file) if you want to be able to access it again. If a secret key is lost, you can delete the access keys for the associated user and then create new keys.</p> </important>"]
    fn create_access_key(&self,
                         input: &CreateAccessKeyRequest)
                         -> Result<CreateAccessKeyResponse, CreateAccessKeyError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CreateAccessKey");
        params.put("Version", "2010-05-08");
        CreateAccessKeyRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = CreateAccessKeyResponse::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(CreateAccessKeyResponseDeserializer::deserialize("CreateAccessKeyResult",
                                                                                   &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(CreateAccessKeyError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Creates an alias for your AWS account. For information about using an AWS account alias, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html\">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.</p>"]
    fn create_account_alias(&self,
                            input: &CreateAccountAliasRequest)
                            -> Result<(), CreateAccountAliasError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CreateAccountAlias");
        params.put("Version", "2010-05-08");
        CreateAccountAliasRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {
                let result = ();
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(CreateAccountAliasError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Creates a new group.</p> <p> For information about the number of groups you can create, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html\">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>"]
    fn create_group(&self,
                    input: &CreateGroupRequest)
                    -> Result<CreateGroupResponse, CreateGroupError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CreateGroup");
        params.put("Version", "2010-05-08");
        CreateGroupRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = CreateGroupResponse::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(CreateGroupResponseDeserializer::deserialize("CreateGroupResult",
                                                                               &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(CreateGroupError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p> Creates a new instance profile. For information about instance profiles, go to <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html\">About Instance Profiles</a>.</p> <p> For information about the number of instance profiles you can create, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html\">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>"]
    fn create_instance_profile
        (&self,
         input: &CreateInstanceProfileRequest)
         -> Result<CreateInstanceProfileResponse, CreateInstanceProfileError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CreateInstanceProfile");
        params.put("Version", "2010-05-08");
        CreateInstanceProfileRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = CreateInstanceProfileResponse::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result =
                        try!(CreateInstanceProfileResponseDeserializer::deserialize("CreateInstanceProfileResult",
                                                                                    &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(CreateInstanceProfileError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p> Creates a password for the specified user, giving the user the ability to access AWS services through the AWS Management Console. For more information about managing passwords, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html\">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>"]
    fn create_login_profile(&self,
                            input: &CreateLoginProfileRequest)
                            -> Result<CreateLoginProfileResponse, CreateLoginProfileError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CreateLoginProfile");
        params.put("Version", "2010-05-08");
        CreateLoginProfileRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = CreateLoginProfileResponse::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(CreateLoginProfileResponseDeserializer::deserialize("CreateLoginProfileResult",
                                                                                      &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(CreateLoginProfileError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Creates an IAM entity to describe an identity provider (IdP) that supports <a href=\"http://openid.net/connect/\">OpenID Connect (OIDC)</a>.</p> <p>The OIDC provider that you create with this operation can be used as a principal in a role's trust policy to establish a trust relationship between AWS and the OIDC provider.</p> <p>When you create the IAM OIDC provider, you specify the URL of the OIDC identity provider (IdP) to trust, a list of client IDs (also known as audiences) that identify the application or applications that are allowed to authenticate using the OIDC provider, and a list of thumbprints of the server certificate(s) that the IdP uses. You get all of this information from the OIDC IdP that you want to use for access to AWS.</p> <note> <p>Because trust for the OIDC provider is ultimately derived from the IAM provider that this action creates, it is a best practice to limit access to the <a>CreateOpenIDConnectProvider</a> action to highly-privileged users.</p> </note>"]
    fn create_open_id_connect_provider
        (&self,
         input: &CreateOpenIDConnectProviderRequest)
         -> Result<CreateOpenIDConnectProviderResponse, CreateOpenIDConnectProviderError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CreateOpenIDConnectProvider");
        params.put("Version", "2010-05-08");
        CreateOpenIDConnectProviderRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = CreateOpenIDConnectProviderResponse::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(CreateOpenIDConnectProviderResponseDeserializer::deserialize("CreateOpenIDConnectProviderResult", &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(CreateOpenIDConnectProviderError::from_body(String::from_utf8_lossy(&body)
                                                                    .as_ref()))
            }
        }
    }


    #[doc="<p>Creates a new managed policy for your AWS account.</p> <p>This operation creates a policy version with a version identifier of <code>v1</code> and sets v1 as the policy's default version. For more information about policy versions, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html\">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policies in general, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html\">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>"]
    fn create_policy(&self,
                     input: &CreatePolicyRequest)
                     -> Result<CreatePolicyResponse, CreatePolicyError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CreatePolicy");
        params.put("Version", "2010-05-08");
        CreatePolicyRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = CreatePolicyResponse::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(CreatePolicyResponseDeserializer::deserialize("CreatePolicyResult",
                                                                                &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(CreatePolicyError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Creates a new version of the specified managed policy. To update a managed policy, you create a new policy version. A managed policy can have up to five versions. If the policy has five versions, you must delete an existing version using <a>DeletePolicyVersion</a> before you create a new version.</p> <p>Optionally, you can set the new version as the policy's default version. The default version is the version that is in effect for the IAM users, groups, and roles to which the policy is attached.</p> <p>For more information about managed policy versions, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html\">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>"]
    fn create_policy_version(&self,
                             input: &CreatePolicyVersionRequest)
                             -> Result<CreatePolicyVersionResponse, CreatePolicyVersionError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CreatePolicyVersion");
        params.put("Version", "2010-05-08");
        CreatePolicyVersionRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = CreatePolicyVersionResponse::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(CreatePolicyVersionResponseDeserializer::deserialize("CreatePolicyVersionResult",
                                                                                       &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(CreatePolicyVersionError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Creates a new role for your AWS account. For more information about roles, go to <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html\">Working with Roles</a>. For information about limitations on role names and the number of roles you can create, go to <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html\">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>"]
    fn create_role(&self,
                   input: &CreateRoleRequest)
                   -> Result<CreateRoleResponse, CreateRoleError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CreateRole");
        params.put("Version", "2010-05-08");
        CreateRoleRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = CreateRoleResponse::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(CreateRoleResponseDeserializer::deserialize("CreateRoleResult",
                                                                              &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(CreateRoleError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Creates an IAM resource that describes an identity provider (IdP) that supports SAML 2.0.</p> <p>The SAML provider resource that you create with this operation can be used as a principal in an IAM role's trust policy to enable federated users who sign-in using the SAML IdP to assume the role. You can create an IAM role that supports Web-based single sign-on (SSO) to the AWS Management Console or one that supports API access to AWS.</p> <p>When you create the SAML provider resource, you upload an a SAML metadata document that you get from your IdP and that includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that the IdP sends. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <note> <p> This operation requires <a href=\"http://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\">Signature Version 4</a>.</p> </note> <p> For more information, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-saml.html\">Enabling SAML 2.0 Federated Users to Access the AWS Management Console</a> and <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html\">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i>.</p>"]
    fn create_saml_provider(&self,
                            input: &CreateSAMLProviderRequest)
                            -> Result<CreateSAMLProviderResponse, CreateSAMLProviderError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CreateSAMLProvider");
        params.put("Version", "2010-05-08");
        CreateSAMLProviderRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = CreateSAMLProviderResponse::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(CreateSAMLProviderResponseDeserializer::deserialize("CreateSAMLProviderResult",
                                                                                      &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(CreateSAMLProviderError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Creates an IAM role that is linked to a specific AWS service. The service controls the attached policies and when the role can be deleted. This helps ensure that the service is not broken by an unexpectedly changed or deleted role, which could put your AWS resources into an unknown state. Allowing the service to control the role helps improve service stability and proper cleanup when a service and its role are no longer needed.</p> <p>The name of the role is autogenerated by combining the string that you specify for the <code>AWSServiceName</code> parameter with the string that you specify for the <code>CustomSuffix</code> parameter. The resulting name must be unique in your account or the request fails.</p> <p>To attach a policy to this service-linked role, you must make the request using the AWS service that depends on this role.</p>"]
    fn create_service_linked_role
        (&self,
         input: &CreateServiceLinkedRoleRequest)
         -> Result<CreateServiceLinkedRoleResponse, CreateServiceLinkedRoleError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CreateServiceLinkedRole");
        params.put("Version", "2010-05-08");
        CreateServiceLinkedRoleRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = CreateServiceLinkedRoleResponse::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result =
                        try!(CreateServiceLinkedRoleResponseDeserializer::deserialize("CreateServiceLinkedRoleResult",
                                                                                      &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(CreateServiceLinkedRoleError::from_body(String::from_utf8_lossy(&body)
                                                                .as_ref()))
            }
        }
    }


    #[doc="<p>Generates a set of credentials consisting of a user name and password that can be used to access the service specified in the request. These credentials are generated by IAM, and can be used only for the specified service. </p> <p>You can have a maximum of two sets of service-specific credentials for each supported service per user.</p> <p>The only supported service at this time is AWS CodeCommit.</p> <p>You can reset the password to a new service-generated value by calling <a>ResetServiceSpecificCredential</a>.</p> <p>For more information about service-specific credentials, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_ssh-keys.html\">Using IAM with AWS CodeCommit: Git Credentials, SSH Keys, and AWS Access Keys</a> in the <i>IAM User Guide</i>.</p>"]
    fn create_service_specific_credential
        (&self,
         input: &CreateServiceSpecificCredentialRequest)
         -> Result<CreateServiceSpecificCredentialResponse, CreateServiceSpecificCredentialError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CreateServiceSpecificCredential");
        params.put("Version", "2010-05-08");
        CreateServiceSpecificCredentialRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = CreateServiceSpecificCredentialResponse::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(CreateServiceSpecificCredentialResponseDeserializer::deserialize("CreateServiceSpecificCredentialResult", &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(CreateServiceSpecificCredentialError::from_body(String::from_utf8_lossy(&body)
                                                                        .as_ref()))
            }
        }
    }


    #[doc="<p>Creates a new IAM user for your AWS account.</p> <p> For information about limitations on the number of IAM users you can create, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html\">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>"]
    fn create_user(&self,
                   input: &CreateUserRequest)
                   -> Result<CreateUserResponse, CreateUserError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CreateUser");
        params.put("Version", "2010-05-08");
        CreateUserRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = CreateUserResponse::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(CreateUserResponseDeserializer::deserialize("CreateUserResult",
                                                                              &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(CreateUserError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Creates a new virtual MFA device for the AWS account. After creating the virtual MFA, use <a>EnableMFADevice</a> to attach the MFA device to an IAM user. For more information about creating and working with virtual MFA devices, go to <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html\">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of MFA devices you can create, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html\">Limitations on Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>The seed information contained in the QR code and the Base32 string should be treated like any other secret access information, such as your AWS access keys or your passwords. After you provision your virtual device, you should ensure that the information is destroyed following secure procedures.</p> </important>"]
    fn create_virtual_mfa_device
        (&self,
         input: &CreateVirtualMFADeviceRequest)
         -> Result<CreateVirtualMFADeviceResponse, CreateVirtualMFADeviceError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CreateVirtualMFADevice");
        params.put("Version", "2010-05-08");
        CreateVirtualMFADeviceRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = CreateVirtualMFADeviceResponse::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result =
                        try!(CreateVirtualMFADeviceResponseDeserializer::deserialize("CreateVirtualMFADeviceResult",
                                                                                     &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(CreateVirtualMFADeviceError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Deactivates the specified MFA device and removes it from association with the user name for which it was originally enabled.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html\">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p>"]
    fn deactivate_mfa_device(&self,
                             input: &DeactivateMFADeviceRequest)
                             -> Result<(), DeactivateMFADeviceError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DeactivateMFADevice");
        params.put("Version", "2010-05-08");
        DeactivateMFADeviceRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {
                let result = ();
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(DeactivateMFADeviceError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Deletes the access key pair associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. Because this action works for access keys under the AWS account, you can use this action to manage root credentials even if the AWS account has no associated users.</p>"]
    fn delete_access_key(&self,
                         input: &DeleteAccessKeyRequest)
                         -> Result<(), DeleteAccessKeyError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DeleteAccessKey");
        params.put("Version", "2010-05-08");
        DeleteAccessKeyRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {
                let result = ();
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(DeleteAccessKeyError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p> Deletes the specified AWS account alias. For information about using an AWS account alias, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html\">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.</p>"]
    fn delete_account_alias(&self,
                            input: &DeleteAccountAliasRequest)
                            -> Result<(), DeleteAccountAliasError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DeleteAccountAlias");
        params.put("Version", "2010-05-08");
        DeleteAccountAliasRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {
                let result = ();
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(DeleteAccountAliasError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Deletes the password policy for the AWS account. There are no parameters.</p>"]
    fn delete_account_password_policy(&self) -> Result<(), DeleteAccountPasswordPolicyError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DeleteAccountPasswordPolicy");
        params.put("Version", "2010-05-08");

        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {
                let result = ();
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(DeleteAccountPasswordPolicyError::from_body(String::from_utf8_lossy(&body)
                                                                    .as_ref()))
            }
        }
    }


    #[doc="<p>Deletes the specified IAM group. The group must not contain any users or have any attached policies.</p>"]
    fn delete_group(&self, input: &DeleteGroupRequest) -> Result<(), DeleteGroupError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DeleteGroup");
        params.put("Version", "2010-05-08");
        DeleteGroupRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {
                let result = ();
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(DeleteGroupError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Deletes the specified inline policy that is embedded in the specified IAM group.</p> <p>A group can also have managed policies attached to it. To detach a managed policy from a group, use <a>DetachGroupPolicy</a>. For more information about policies, refer to <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html\">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>"]
    fn delete_group_policy(&self,
                           input: &DeleteGroupPolicyRequest)
                           -> Result<(), DeleteGroupPolicyError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DeleteGroupPolicy");
        params.put("Version", "2010-05-08");
        DeleteGroupPolicyRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {
                let result = ();
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(DeleteGroupPolicyError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Deletes the specified instance profile. The instance profile must not have an associated role.</p> <important> <p>Make sure you do not have any Amazon EC2 instances running with the instance profile you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important> <p>For more information about instance profiles, go to <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html\">About Instance Profiles</a>.</p>"]
    fn delete_instance_profile(&self,
                               input: &DeleteInstanceProfileRequest)
                               -> Result<(), DeleteInstanceProfileError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DeleteInstanceProfile");
        params.put("Version", "2010-05-08");
        DeleteInstanceProfileRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {
                let result = ();
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(DeleteInstanceProfileError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Deletes the password for the specified IAM user, which terminates the user's ability to access AWS services through the AWS Management Console.</p> <important> <p> Deleting a user's password does not prevent a user from accessing AWS through the command line interface or the API. To prevent all user access you must also either make any access keys inactive or delete them. For more information about making keys inactive or deleting them, see <a>UpdateAccessKey</a> and <a>DeleteAccessKey</a>. </p> </important>"]
    fn delete_login_profile(&self,
                            input: &DeleteLoginProfileRequest)
                            -> Result<(), DeleteLoginProfileError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DeleteLoginProfile");
        params.put("Version", "2010-05-08");
        DeleteLoginProfileRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {
                let result = ();
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(DeleteLoginProfileError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Deletes an OpenID Connect identity provider (IdP) resource object in IAM.</p> <p>Deleting an IAM OIDC provider resource does not update any roles that reference the provider as a principal in their trust policies. Any attempt to assume a role that references a deleted provider fails.</p> <p>This action is idempotent; it does not fail or return an error if you call the action for a provider that does not exist.</p>"]
    fn delete_open_id_connect_provider(&self,
                                       input: &DeleteOpenIDConnectProviderRequest)
                                       -> Result<(), DeleteOpenIDConnectProviderError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DeleteOpenIDConnectProvider");
        params.put("Version", "2010-05-08");
        DeleteOpenIDConnectProviderRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {
                let result = ();
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(DeleteOpenIDConnectProviderError::from_body(String::from_utf8_lossy(&body)
                                                                    .as_ref()))
            }
        }
    }


    #[doc="<p>Deletes the specified managed policy.</p> <p>Before you can delete a managed policy, you must first detach the policy from all users, groups, and roles that it is attached to, and you must delete all of the policy's versions. The following steps describe the process for deleting a managed policy:</p> <ul> <li> <p>Detach the policy from all users, groups, and roles that the policy is attached to, using the <a>DetachUserPolicy</a>, <a>DetachGroupPolicy</a>, or <a>DetachRolePolicy</a> APIs. To list all the users, groups, and roles that a policy is attached to, use <a>ListEntitiesForPolicy</a>.</p> </li> <li> <p>Delete all versions of the policy using <a>DeletePolicyVersion</a>. To list the policy's versions, use <a>ListPolicyVersions</a>. You cannot use <a>DeletePolicyVersion</a> to delete the version that is marked as the default version. You delete the policy's default version in the next step of the process.</p> </li> <li> <p>Delete the policy (this automatically deletes the policy's default version) using this API.</p> </li> </ul> <p>For information about managed policies, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html\">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>"]
    fn delete_policy(&self, input: &DeletePolicyRequest) -> Result<(), DeletePolicyError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DeletePolicy");
        params.put("Version", "2010-05-08");
        DeletePolicyRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {
                let result = ();
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(DeletePolicyError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Deletes the specified version from the specified managed policy.</p> <p>You cannot delete the default version from a policy using this API. To delete the default version from a policy, use <a>DeletePolicy</a>. To find out which version of a policy is marked as the default version, use <a>ListPolicyVersions</a>.</p> <p>For information about versions for managed policies, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html\">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>"]
    fn delete_policy_version(&self,
                             input: &DeletePolicyVersionRequest)
                             -> Result<(), DeletePolicyVersionError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DeletePolicyVersion");
        params.put("Version", "2010-05-08");
        DeletePolicyVersionRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {
                let result = ();
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(DeletePolicyVersionError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Deletes the specified role. The role must not have any policies attached. For more information about roles, go to <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html\">Working with Roles</a>.</p> <important> <p>Make sure you do not have any Amazon EC2 instances running with the role you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important>"]
    fn delete_role(&self, input: &DeleteRoleRequest) -> Result<(), DeleteRoleError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DeleteRole");
        params.put("Version", "2010-05-08");
        DeleteRoleRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {
                let result = ();
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(DeleteRoleError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Deletes the specified inline policy that is embedded in the specified IAM role.</p> <p>A role can also have managed policies attached to it. To detach a managed policy from a role, use <a>DetachRolePolicy</a>. For more information about policies, refer to <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html\">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>"]
    fn delete_role_policy(&self,
                          input: &DeleteRolePolicyRequest)
                          -> Result<(), DeleteRolePolicyError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DeleteRolePolicy");
        params.put("Version", "2010-05-08");
        DeleteRolePolicyRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {
                let result = ();
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(DeleteRolePolicyError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Deletes a SAML provider resource in IAM.</p> <p>Deleting the provider resource from IAM does not update any roles that reference the SAML provider resource's ARN as a principal in their trust policies. Any attempt to assume a role that references a non-existent provider resource ARN fails.</p> <note> <p> This operation requires <a href=\"http://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\">Signature Version 4</a>.</p> </note>"]
    fn delete_saml_provider(&self,
                            input: &DeleteSAMLProviderRequest)
                            -> Result<(), DeleteSAMLProviderError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DeleteSAMLProvider");
        params.put("Version", "2010-05-08");
        DeleteSAMLProviderRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {
                let result = ();
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(DeleteSAMLProviderError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Deletes the specified SSH public key.</p> <p>The SSH public key deleted by this action is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href=\"http://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html\">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>"]
    fn delete_ssh_public_key(&self,
                             input: &DeleteSSHPublicKeyRequest)
                             -> Result<(), DeleteSSHPublicKeyError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DeleteSSHPublicKey");
        params.put("Version", "2010-05-08");
        DeleteSSHPublicKeyRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {
                let result = ();
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(DeleteSSHPublicKeyError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Deletes the specified server certificate.</p> <p>For more information about working with server certificates, including a list of AWS services that can use the server certificates that you manage with IAM, go to <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html\">Working with Server Certificates</a> in the <i>IAM User Guide</i>.</p> <important> <p> If you are using a server certificate with Elastic Load Balancing, deleting the certificate could have implications for your application. If Elastic Load Balancing doesn't detect the deletion of bound certificates, it may continue to use the certificates. This could cause Elastic Load Balancing to stop accepting traffic. We recommend that you remove the reference to the certificate from Elastic Load Balancing before using this command to delete the certificate. For more information, go to <a href=\"http://docs.aws.amazon.com/ElasticLoadBalancing/latest/APIReference/API_DeleteLoadBalancerListeners.html\">DeleteLoadBalancerListeners</a> in the <i>Elastic Load Balancing API Reference</i>.</p> </important>"]
    fn delete_server_certificate(&self,
                                 input: &DeleteServerCertificateRequest)
                                 -> Result<(), DeleteServerCertificateError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DeleteServerCertificate");
        params.put("Version", "2010-05-08");
        DeleteServerCertificateRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {
                let result = ();
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(DeleteServerCertificateError::from_body(String::from_utf8_lossy(&body)
                                                                .as_ref()))
            }
        }
    }


    #[doc="<p>Deletes the specified service-specific credential.</p>"]
    fn delete_service_specific_credential(&self,
                                          input: &DeleteServiceSpecificCredentialRequest)
                                          -> Result<(), DeleteServiceSpecificCredentialError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DeleteServiceSpecificCredential");
        params.put("Version", "2010-05-08");
        DeleteServiceSpecificCredentialRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {
                let result = ();
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(DeleteServiceSpecificCredentialError::from_body(String::from_utf8_lossy(&body)
                                                                        .as_ref()))
            }
        }
    }


    #[doc="<p>Deletes a signing certificate associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. Because this action works for access keys under the AWS account, you can use this action to manage root credentials even if the AWS account has no associated IAM users.</p>"]
    fn delete_signing_certificate(&self,
                                  input: &DeleteSigningCertificateRequest)
                                  -> Result<(), DeleteSigningCertificateError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DeleteSigningCertificate");
        params.put("Version", "2010-05-08");
        DeleteSigningCertificateRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {
                let result = ();
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(DeleteSigningCertificateError::from_body(String::from_utf8_lossy(&body)
                                                                 .as_ref()))
            }
        }
    }


    #[doc="<p>Deletes the specified IAM user. The user must not belong to any groups or have any access keys, signing certificates, or attached policies.</p>"]
    fn delete_user(&self, input: &DeleteUserRequest) -> Result<(), DeleteUserError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DeleteUser");
        params.put("Version", "2010-05-08");
        DeleteUserRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {
                let result = ();
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(DeleteUserError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Deletes the specified inline policy that is embedded in the specified IAM user.</p> <p>A user can also have managed policies attached to it. To detach a managed policy from a user, use <a>DetachUserPolicy</a>. For more information about policies, refer to <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html\">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>"]
    fn delete_user_policy(&self,
                          input: &DeleteUserPolicyRequest)
                          -> Result<(), DeleteUserPolicyError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DeleteUserPolicy");
        params.put("Version", "2010-05-08");
        DeleteUserPolicyRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {
                let result = ();
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(DeleteUserPolicyError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Deletes a virtual MFA device.</p> <note> <p> You must deactivate a user's virtual MFA device before you can delete it. For information about deactivating MFA devices, see <a>DeactivateMFADevice</a>. </p> </note>"]
    fn delete_virtual_mfa_device(&self,
                                 input: &DeleteVirtualMFADeviceRequest)
                                 -> Result<(), DeleteVirtualMFADeviceError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DeleteVirtualMFADevice");
        params.put("Version", "2010-05-08");
        DeleteVirtualMFADeviceRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {
                let result = ();
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(DeleteVirtualMFADeviceError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Removes the specified managed policy from the specified IAM group.</p> <p>A group can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteGroupPolicy</a> API. For information about policies, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html\">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>"]
    fn detach_group_policy(&self,
                           input: &DetachGroupPolicyRequest)
                           -> Result<(), DetachGroupPolicyError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DetachGroupPolicy");
        params.put("Version", "2010-05-08");
        DetachGroupPolicyRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {
                let result = ();
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(DetachGroupPolicyError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Removes the specified managed policy from the specified role.</p> <p>A role can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteRolePolicy</a> API. For information about policies, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html\">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>"]
    fn detach_role_policy(&self,
                          input: &DetachRolePolicyRequest)
                          -> Result<(), DetachRolePolicyError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DetachRolePolicy");
        params.put("Version", "2010-05-08");
        DetachRolePolicyRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {
                let result = ();
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(DetachRolePolicyError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Removes the specified managed policy from the specified user.</p> <p>A user can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteUserPolicy</a> API. For information about policies, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html\">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>"]
    fn detach_user_policy(&self,
                          input: &DetachUserPolicyRequest)
                          -> Result<(), DetachUserPolicyError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DetachUserPolicy");
        params.put("Version", "2010-05-08");
        DetachUserPolicyRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {
                let result = ();
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(DetachUserPolicyError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Enables the specified MFA device and associates it with the specified IAM user. When enabled, the MFA device is required for every subsequent login by the IAM user associated with the device.</p>"]
    fn enable_mfa_device(&self,
                         input: &EnableMFADeviceRequest)
                         -> Result<(), EnableMFADeviceError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "EnableMFADevice");
        params.put("Version", "2010-05-08");
        EnableMFADeviceRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {
                let result = ();
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(EnableMFADeviceError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p> Generates a credential report for the AWS account. For more information about the credential report, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html\">Getting Credential Reports</a> in the <i>IAM User Guide</i>.</p>"]
    fn generate_credential_report
        (&self)
         -> Result<GenerateCredentialReportResponse, GenerateCredentialReportError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "GenerateCredentialReport");
        params.put("Version", "2010-05-08");

        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = GenerateCredentialReportResponse::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result =
                        try!(GenerateCredentialReportResponseDeserializer::deserialize("GenerateCredentialReportResult",
                                                                                       &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(GenerateCredentialReportError::from_body(String::from_utf8_lossy(&body)
                                                                 .as_ref()))
            }
        }
    }


    #[doc="<p>Retrieves information about when the specified access key was last used. The information includes the date and time of last use, along with the AWS service and region that were specified in the last request made with that key.</p>"]
    fn get_access_key_last_used
        (&self,
         input: &GetAccessKeyLastUsedRequest)
         -> Result<GetAccessKeyLastUsedResponse, GetAccessKeyLastUsedError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "GetAccessKeyLastUsed");
        params.put("Version", "2010-05-08");
        GetAccessKeyLastUsedRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = GetAccessKeyLastUsedResponse::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result =
                        try!(GetAccessKeyLastUsedResponseDeserializer::deserialize("GetAccessKeyLastUsedResult",
                                                                                   &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(GetAccessKeyLastUsedError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Retrieves information about all IAM users, groups, roles, and policies in your AWS account, including their relationships to one another. Use this API to obtain a snapshot of the configuration of IAM permissions (users, groups, roles, and policies) in your account.</p> <p>You can optionally filter the results using the <code>Filter</code> parameter. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>"]
    fn get_account_authorization_details
        (&self,
         input: &GetAccountAuthorizationDetailsRequest)
         -> Result<GetAccountAuthorizationDetailsResponse, GetAccountAuthorizationDetailsError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "GetAccountAuthorizationDetails");
        params.put("Version", "2010-05-08");
        GetAccountAuthorizationDetailsRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = GetAccountAuthorizationDetailsResponse::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(GetAccountAuthorizationDetailsResponseDeserializer::deserialize("GetAccountAuthorizationDetailsResult", &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(GetAccountAuthorizationDetailsError::from_body(String::from_utf8_lossy(&body)
                                                                       .as_ref()))
            }
        }
    }


    #[doc="<p>Retrieves the password policy for the AWS account. For more information about using a password policy, go to <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html\">Managing an IAM Password Policy</a>.</p>"]
    fn get_account_password_policy
        (&self)
         -> Result<GetAccountPasswordPolicyResponse, GetAccountPasswordPolicyError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "GetAccountPasswordPolicy");
        params.put("Version", "2010-05-08");

        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = GetAccountPasswordPolicyResponse::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result =
                        try!(GetAccountPasswordPolicyResponseDeserializer::deserialize("GetAccountPasswordPolicyResult",
                                                                                       &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(GetAccountPasswordPolicyError::from_body(String::from_utf8_lossy(&body)
                                                                 .as_ref()))
            }
        }
    }


    #[doc="<p>Retrieves information about IAM entity usage and IAM quotas in the AWS account.</p> <p> For information about limitations on IAM entities, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html\">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>"]
    fn get_account_summary(&self) -> Result<GetAccountSummaryResponse, GetAccountSummaryError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "GetAccountSummary");
        params.put("Version", "2010-05-08");

        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = GetAccountSummaryResponse::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(GetAccountSummaryResponseDeserializer::deserialize("GetAccountSummaryResult",
                                                                                     &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(GetAccountSummaryError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Gets a list of all of the context keys referenced in the input policies. The policies are supplied as a list of one or more strings. To get the context keys from policies associated with an IAM user, group, or role, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request, and can be evaluated by testing against a value specified in an IAM policy. Use GetContextKeysForCustomPolicy to understand what key names and values you must supply when you call <a>SimulateCustomPolicy</a>. Note that all parameters are shown in unencoded form here for clarity, but must be URL encoded to be included as a part of a real HTML request.</p>"]
    fn get_context_keys_for_custom_policy
        (&self,
         input: &GetContextKeysForCustomPolicyRequest)
         -> Result<GetContextKeysForPolicyResponse, GetContextKeysForCustomPolicyError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "GetContextKeysForCustomPolicy");
        params.put("Version", "2010-05-08");
        GetContextKeysForCustomPolicyRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = GetContextKeysForPolicyResponse::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result =
                        try!(GetContextKeysForPolicyResponseDeserializer::deserialize("GetContextKeysForCustomPolicyResult",
                                                                                      &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(GetContextKeysForCustomPolicyError::from_body(String::from_utf8_lossy(&body)
                                                                      .as_ref()))
            }
        }
    }


    #[doc="<p>Gets a list of all of the context keys referenced in all of the IAM policies attached to the specified IAM entity. The entity can be an IAM user, group, or role. If you specify a user, then the request also includes all of the policies attached to groups that the user is a member of.</p> <p>You can optionally include a list of one or more additional policies, specified as strings. If you want to include <i>only</i> a list of policies by string, use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request, and can be evaluated by testing against a value in an IAM policy. Use <a>GetContextKeysForPrincipalPolicy</a> to understand what key names and values you must supply when you call <a>SimulatePrincipalPolicy</a>.</p>"]
    fn get_context_keys_for_principal_policy
        (&self,
         input: &GetContextKeysForPrincipalPolicyRequest)
         -> Result<GetContextKeysForPolicyResponse, GetContextKeysForPrincipalPolicyError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "GetContextKeysForPrincipalPolicy");
        params.put("Version", "2010-05-08");
        GetContextKeysForPrincipalPolicyRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = GetContextKeysForPolicyResponse::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result =
                        try!(GetContextKeysForPolicyResponseDeserializer::deserialize("GetContextKeysForPrincipalPolicyResult",
                                                                                      &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(GetContextKeysForPrincipalPolicyError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p> Retrieves a credential report for the AWS account. For more information about the credential report, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html\">Getting Credential Reports</a> in the <i>IAM User Guide</i>.</p>"]
    fn get_credential_report(&self)
                             -> Result<GetCredentialReportResponse, GetCredentialReportError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "GetCredentialReport");
        params.put("Version", "2010-05-08");

        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = GetCredentialReportResponse::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(GetCredentialReportResponseDeserializer::deserialize("GetCredentialReportResult",
                                                                                       &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(GetCredentialReportError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p> Returns a list of IAM users that are in the specified IAM group. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>"]
    fn get_group(&self, input: &GetGroupRequest) -> Result<GetGroupResponse, GetGroupError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "GetGroup");
        params.put("Version", "2010-05-08");
        GetGroupRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = GetGroupResponse::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(GetGroupResponseDeserializer::deserialize("GetGroupResult",
                                                                            &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(GetGroupError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Retrieves the specified inline policy document that is embedded in the specified IAM group.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href=\"https://tools.ietf.org/html/rfc3986\">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM group can also have managed policies attached to it. To retrieve a managed policy document that is attached to a group, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html\">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>"]
    fn get_group_policy(&self,
                        input: &GetGroupPolicyRequest)
                        -> Result<GetGroupPolicyResponse, GetGroupPolicyError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "GetGroupPolicy");
        params.put("Version", "2010-05-08");
        GetGroupPolicyRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = GetGroupPolicyResponse::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(GetGroupPolicyResponseDeserializer::deserialize("GetGroupPolicyResult",
                                                                                  &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(GetGroupPolicyError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p> Retrieves information about the specified instance profile, including the instance profile's path, GUID, ARN, and role. For more information about instance profiles, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html\">About Instance Profiles</a> in the <i>IAM User Guide</i>.</p>"]
    fn get_instance_profile(&self,
                            input: &GetInstanceProfileRequest)
                            -> Result<GetInstanceProfileResponse, GetInstanceProfileError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "GetInstanceProfile");
        params.put("Version", "2010-05-08");
        GetInstanceProfileRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = GetInstanceProfileResponse::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(GetInstanceProfileResponseDeserializer::deserialize("GetInstanceProfileResult",
                                                                                      &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(GetInstanceProfileError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Retrieves the user name and password-creation date for the specified IAM user. If the user has not been assigned a password, the action returns a 404 (<code>NoSuchEntity</code>) error.</p>"]
    fn get_login_profile(&self,
                         input: &GetLoginProfileRequest)
                         -> Result<GetLoginProfileResponse, GetLoginProfileError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "GetLoginProfile");
        params.put("Version", "2010-05-08");
        GetLoginProfileRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = GetLoginProfileResponse::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(GetLoginProfileResponseDeserializer::deserialize("GetLoginProfileResult",
                                                                                   &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(GetLoginProfileError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Returns information about the specified OpenID Connect (OIDC) provider resource object in IAM.</p>"]
    fn get_open_id_connect_provider
        (&self,
         input: &GetOpenIDConnectProviderRequest)
         -> Result<GetOpenIDConnectProviderResponse, GetOpenIDConnectProviderError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "GetOpenIDConnectProvider");
        params.put("Version", "2010-05-08");
        GetOpenIDConnectProviderRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = GetOpenIDConnectProviderResponse::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result =
                        try!(GetOpenIDConnectProviderResponseDeserializer::deserialize("GetOpenIDConnectProviderResult",
                                                                                       &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(GetOpenIDConnectProviderError::from_body(String::from_utf8_lossy(&body)
                                                                 .as_ref()))
            }
        }
    }


    #[doc="<p>Retrieves information about the specified managed policy, including the policy's default version and the total number of IAM users, groups, and roles to which the policy is attached. To retrieve the list of the specific users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API. This API returns metadata about the policy. To retrieve the actual policy document for a specific version of the policy, use <a>GetPolicyVersion</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded with an IAM user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about policies, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html\">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>"]
    fn get_policy(&self, input: &GetPolicyRequest) -> Result<GetPolicyResponse, GetPolicyError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "GetPolicy");
        params.put("Version", "2010-05-08");
        GetPolicyRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = GetPolicyResponse::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(GetPolicyResponseDeserializer::deserialize("GetPolicyResult",
                                                                             &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(GetPolicyError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Retrieves information about the specified version of the specified managed policy, including the policy document.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href=\"https://tools.ietf.org/html/rfc3986\">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>To list the available versions for a policy, use <a>ListPolicyVersions</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded in a user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about the types of policies, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html\">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policy versions, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html\">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>"]
    fn get_policy_version(&self,
                          input: &GetPolicyVersionRequest)
                          -> Result<GetPolicyVersionResponse, GetPolicyVersionError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "GetPolicyVersion");
        params.put("Version", "2010-05-08");
        GetPolicyVersionRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = GetPolicyVersionResponse::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(GetPolicyVersionResponseDeserializer::deserialize("GetPolicyVersionResult",
                                                                                    &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(GetPolicyVersionError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Retrieves information about the specified role, including the role's path, GUID, ARN, and the role's trust policy that grants permission to assume the role. For more information about roles, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html\">Working with Roles</a>.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href=\"https://tools.ietf.org/html/rfc3986\">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note>"]
    fn get_role(&self, input: &GetRoleRequest) -> Result<GetRoleResponse, GetRoleError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "GetRole");
        params.put("Version", "2010-05-08");
        GetRoleRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = GetRoleResponse::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(GetRoleResponseDeserializer::deserialize("GetRoleResult",
                                                                           &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(GetRoleError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Retrieves the specified inline policy document that is embedded with the specified IAM role.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href=\"https://tools.ietf.org/html/rfc3986\">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM role can also have managed policies attached to it. To retrieve a managed policy document that is attached to a role, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html\">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about roles, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html\">Using Roles to Delegate Permissions and Federate Identities</a>.</p>"]
    fn get_role_policy(&self,
                       input: &GetRolePolicyRequest)
                       -> Result<GetRolePolicyResponse, GetRolePolicyError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "GetRolePolicy");
        params.put("Version", "2010-05-08");
        GetRolePolicyRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = GetRolePolicyResponse::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(GetRolePolicyResponseDeserializer::deserialize("GetRolePolicyResult",
                                                                                 &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(GetRolePolicyError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Returns the SAML provider metadocument that was uploaded when the IAM SAML provider resource object was created or updated.</p> <note> <p>This operation requires <a href=\"http://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\">Signature Version 4</a>.</p> </note>"]
    fn get_saml_provider(&self,
                         input: &GetSAMLProviderRequest)
                         -> Result<GetSAMLProviderResponse, GetSAMLProviderError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "GetSAMLProvider");
        params.put("Version", "2010-05-08");
        GetSAMLProviderRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = GetSAMLProviderResponse::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(GetSAMLProviderResponseDeserializer::deserialize("GetSAMLProviderResult",
                                                                                   &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(GetSAMLProviderError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Retrieves the specified SSH public key, including metadata about the key.</p> <p>The SSH public key retrieved by this action is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href=\"http://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html\">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>"]
    fn get_ssh_public_key(&self,
                          input: &GetSSHPublicKeyRequest)
                          -> Result<GetSSHPublicKeyResponse, GetSSHPublicKeyError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "GetSSHPublicKey");
        params.put("Version", "2010-05-08");
        GetSSHPublicKeyRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = GetSSHPublicKeyResponse::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(GetSSHPublicKeyResponseDeserializer::deserialize("GetSSHPublicKeyResult",
                                                                                   &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(GetSSHPublicKeyError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Retrieves information about the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, including a list of AWS services that can use the server certificates that you manage with IAM, go to <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html\">Working with Server Certificates</a> in the <i>IAM User Guide</i>.</p>"]
    fn get_server_certificate
        (&self,
         input: &GetServerCertificateRequest)
         -> Result<GetServerCertificateResponse, GetServerCertificateError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "GetServerCertificate");
        params.put("Version", "2010-05-08");
        GetServerCertificateRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = GetServerCertificateResponse::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result =
                        try!(GetServerCertificateResponseDeserializer::deserialize("GetServerCertificateResult",
                                                                                   &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(GetServerCertificateError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Retrieves information about the specified IAM user, including the user's creation date, path, unique ID, and ARN.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID used to sign the request to this API.</p>"]
    fn get_user(&self, input: &GetUserRequest) -> Result<GetUserResponse, GetUserError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "GetUser");
        params.put("Version", "2010-05-08");
        GetUserRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = GetUserResponse::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(GetUserResponseDeserializer::deserialize("GetUserResult",
                                                                           &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(GetUserError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Retrieves the specified inline policy document that is embedded in the specified IAM user.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href=\"https://tools.ietf.org/html/rfc3986\">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM user can also have managed policies attached to it. To retrieve a managed policy document that is attached to a user, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html\">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>"]
    fn get_user_policy(&self,
                       input: &GetUserPolicyRequest)
                       -> Result<GetUserPolicyResponse, GetUserPolicyError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "GetUserPolicy");
        params.put("Version", "2010-05-08");
        GetUserPolicyRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = GetUserPolicyResponse::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(GetUserPolicyResponseDeserializer::deserialize("GetUserPolicyResult",
                                                                                 &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(GetUserPolicyError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Returns information about the access key IDs associated with the specified IAM user. If there are none, the action returns an empty list.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the UserName is determined implicitly based on the AWS access key ID used to sign the request. Because this action works for access keys under the AWS account, you can use this action to manage root credentials even if the AWS account has no associated users.</p> <note> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation.</p> </note>"]
    fn list_access_keys(&self,
                        input: &ListAccessKeysRequest)
                        -> Result<ListAccessKeysResponse, ListAccessKeysError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ListAccessKeys");
        params.put("Version", "2010-05-08");
        ListAccessKeysRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = ListAccessKeysResponse::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(ListAccessKeysResponseDeserializer::deserialize("ListAccessKeysResult",
                                                                                  &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(ListAccessKeysError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Lists the account alias associated with the AWS account (Note: you can have only one). For information about using an AWS account alias, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html\">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.</p>"]
    fn list_account_aliases(&self,
                            input: &ListAccountAliasesRequest)
                            -> Result<ListAccountAliasesResponse, ListAccountAliasesError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ListAccountAliases");
        params.put("Version", "2010-05-08");
        ListAccountAliasesRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = ListAccountAliasesResponse::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(ListAccountAliasesResponseDeserializer::deserialize("ListAccountAliasesResult",
                                                                                      &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(ListAccountAliasesError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Lists all managed policies that are attached to the specified IAM group.</p> <p>An IAM group can also have inline policies embedded with it. To list the inline policies for a group, use the <a>ListGroupPolicies</a> API. For information about policies, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html\">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the action returns an empty list.</p>"]
    fn list_attached_group_policies
        (&self,
         input: &ListAttachedGroupPoliciesRequest)
         -> Result<ListAttachedGroupPoliciesResponse, ListAttachedGroupPoliciesError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ListAttachedGroupPolicies");
        params.put("Version", "2010-05-08");
        ListAttachedGroupPoliciesRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = ListAttachedGroupPoliciesResponse::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(ListAttachedGroupPoliciesResponseDeserializer::deserialize("ListAttachedGroupPoliciesResult", &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(ListAttachedGroupPoliciesError::from_body(String::from_utf8_lossy(&body)
                                                                  .as_ref()))
            }
        }
    }


    #[doc="<p>Lists all managed policies that are attached to the specified IAM role.</p> <p>An IAM role can also have inline policies embedded with it. To list the inline policies for a role, use the <a>ListRolePolicies</a> API. For information about policies, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html\">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified role (or none that match the specified path prefix), the action returns an empty list.</p>"]
    fn list_attached_role_policies
        (&self,
         input: &ListAttachedRolePoliciesRequest)
         -> Result<ListAttachedRolePoliciesResponse, ListAttachedRolePoliciesError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ListAttachedRolePolicies");
        params.put("Version", "2010-05-08");
        ListAttachedRolePoliciesRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = ListAttachedRolePoliciesResponse::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result =
                        try!(ListAttachedRolePoliciesResponseDeserializer::deserialize("ListAttachedRolePoliciesResult",
                                                                                       &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(ListAttachedRolePoliciesError::from_body(String::from_utf8_lossy(&body)
                                                                 .as_ref()))
            }
        }
    }


    #[doc="<p>Lists all managed policies that are attached to the specified IAM user.</p> <p>An IAM user can also have inline policies embedded with it. To list the inline policies for a user, use the <a>ListUserPolicies</a> API. For information about policies, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html\">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the action returns an empty list.</p>"]
    fn list_attached_user_policies
        (&self,
         input: &ListAttachedUserPoliciesRequest)
         -> Result<ListAttachedUserPoliciesResponse, ListAttachedUserPoliciesError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ListAttachedUserPolicies");
        params.put("Version", "2010-05-08");
        ListAttachedUserPoliciesRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = ListAttachedUserPoliciesResponse::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result =
                        try!(ListAttachedUserPoliciesResponseDeserializer::deserialize("ListAttachedUserPoliciesResult",
                                                                                       &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(ListAttachedUserPoliciesError::from_body(String::from_utf8_lossy(&body)
                                                                 .as_ref()))
            }
        }
    }


    #[doc="<p>Lists all IAM users, groups, and roles that the specified managed policy is attached to.</p> <p>You can use the optional <code>EntityFilter</code> parameter to limit the results to a particular type of entity (users, groups, or roles). For example, to list only the roles that are attached to the specified policy, set <code>EntityFilter</code> to <code>Role</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>"]
    fn list_entities_for_policy
        (&self,
         input: &ListEntitiesForPolicyRequest)
         -> Result<ListEntitiesForPolicyResponse, ListEntitiesForPolicyError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ListEntitiesForPolicy");
        params.put("Version", "2010-05-08");
        ListEntitiesForPolicyRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = ListEntitiesForPolicyResponse::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result =
                        try!(ListEntitiesForPolicyResponseDeserializer::deserialize("ListEntitiesForPolicyResult",
                                                                                    &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(ListEntitiesForPolicyError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Lists the names of the inline policies that are embedded in the specified IAM group.</p> <p>An IAM group can also have managed policies attached to it. To list the managed policies that are attached to a group, use <a>ListAttachedGroupPolicies</a>. For more information about policies, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html\">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified group, the action returns an empty list.</p>"]
    fn list_group_policies(&self,
                           input: &ListGroupPoliciesRequest)
                           -> Result<ListGroupPoliciesResponse, ListGroupPoliciesError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ListGroupPolicies");
        params.put("Version", "2010-05-08");
        ListGroupPoliciesRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = ListGroupPoliciesResponse::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(ListGroupPoliciesResponseDeserializer::deserialize("ListGroupPoliciesResult",
                                                                                     &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(ListGroupPoliciesError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Lists the IAM groups that have the specified path prefix.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>"]
    fn list_groups(&self,
                   input: &ListGroupsRequest)
                   -> Result<ListGroupsResponse, ListGroupsError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ListGroups");
        params.put("Version", "2010-05-08");
        ListGroupsRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = ListGroupsResponse::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(ListGroupsResponseDeserializer::deserialize("ListGroupsResult",
                                                                              &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(ListGroupsError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Lists the IAM groups that the specified IAM user belongs to.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>"]
    fn list_groups_for_user(&self,
                            input: &ListGroupsForUserRequest)
                            -> Result<ListGroupsForUserResponse, ListGroupsForUserError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ListGroupsForUser");
        params.put("Version", "2010-05-08");
        ListGroupsForUserRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = ListGroupsForUserResponse::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(ListGroupsForUserResponseDeserializer::deserialize("ListGroupsForUserResult",
                                                                                     &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(ListGroupsForUserError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Lists the instance profiles that have the specified path prefix. If there are none, the action returns an empty list. For more information about instance profiles, go to <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html\">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>"]
    fn list_instance_profiles
        (&self,
         input: &ListInstanceProfilesRequest)
         -> Result<ListInstanceProfilesResponse, ListInstanceProfilesError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ListInstanceProfiles");
        params.put("Version", "2010-05-08");
        ListInstanceProfilesRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = ListInstanceProfilesResponse::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result =
                        try!(ListInstanceProfilesResponseDeserializer::deserialize("ListInstanceProfilesResult",
                                                                                   &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(ListInstanceProfilesError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Lists the instance profiles that have the specified associated IAM role. If there are none, the action returns an empty list. For more information about instance profiles, go to <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html\">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>"]
    fn list_instance_profiles_for_role
        (&self,
         input: &ListInstanceProfilesForRoleRequest)
         -> Result<ListInstanceProfilesForRoleResponse, ListInstanceProfilesForRoleError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ListInstanceProfilesForRole");
        params.put("Version", "2010-05-08");
        ListInstanceProfilesForRoleRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = ListInstanceProfilesForRoleResponse::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(ListInstanceProfilesForRoleResponseDeserializer::deserialize("ListInstanceProfilesForRoleResult", &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(ListInstanceProfilesForRoleError::from_body(String::from_utf8_lossy(&body)
                                                                    .as_ref()))
            }
        }
    }


    #[doc="<p>Lists the MFA devices for an IAM user. If the request includes a IAM user name, then this action lists all the MFA devices associated with the specified user. If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request for this API.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>"]
    fn list_mfa_devices(&self,
                        input: &ListMFADevicesRequest)
                        -> Result<ListMFADevicesResponse, ListMFADevicesError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ListMFADevices");
        params.put("Version", "2010-05-08");
        ListMFADevicesRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = ListMFADevicesResponse::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(ListMFADevicesResponseDeserializer::deserialize("ListMFADevicesResult",
                                                                                  &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(ListMFADevicesError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Lists information about the IAM OpenID Connect (OIDC) provider resource objects defined in the AWS account.</p>"]
    fn list_open_id_connect_providers
        (&self,
         input: &ListOpenIDConnectProvidersRequest)
         -> Result<ListOpenIDConnectProvidersResponse, ListOpenIDConnectProvidersError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ListOpenIDConnectProviders");
        params.put("Version", "2010-05-08");
        ListOpenIDConnectProvidersRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = ListOpenIDConnectProvidersResponse::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(ListOpenIDConnectProvidersResponseDeserializer::deserialize("ListOpenIDConnectProvidersResult", &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(ListOpenIDConnectProvidersError::from_body(String::from_utf8_lossy(&body)
                                                                   .as_ref()))
            }
        }
    }


    #[doc="<p>Lists all the managed policies that are available in your AWS account, including your own customer-defined managed policies and all AWS managed policies.</p> <p>You can filter the list of policies that is returned using the optional <code>OnlyAttached</code>, <code>Scope</code>, and <code>PathPrefix</code> parameters. For example, to list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>. To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about managed policies, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html\">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>"]
    fn list_policies(&self,
                     input: &ListPoliciesRequest)
                     -> Result<ListPoliciesResponse, ListPoliciesError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ListPolicies");
        params.put("Version", "2010-05-08");
        ListPoliciesRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = ListPoliciesResponse::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(ListPoliciesResponseDeserializer::deserialize("ListPoliciesResult",
                                                                                &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(ListPoliciesError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Lists information about the versions of the specified managed policy, including the version that is currently set as the policy's default version.</p> <p>For more information about managed policies, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html\">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>"]
    fn list_policy_versions(&self,
                            input: &ListPolicyVersionsRequest)
                            -> Result<ListPolicyVersionsResponse, ListPolicyVersionsError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ListPolicyVersions");
        params.put("Version", "2010-05-08");
        ListPolicyVersionsRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = ListPolicyVersionsResponse::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(ListPolicyVersionsResponseDeserializer::deserialize("ListPolicyVersionsResult",
                                                                                      &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(ListPolicyVersionsError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Lists the names of the inline policies that are embedded in the specified IAM role.</p> <p>An IAM role can also have managed policies attached to it. To list the managed policies that are attached to a role, use <a>ListAttachedRolePolicies</a>. For more information about policies, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html\">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified role, the action returns an empty list.</p>"]
    fn list_role_policies(&self,
                          input: &ListRolePoliciesRequest)
                          -> Result<ListRolePoliciesResponse, ListRolePoliciesError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ListRolePolicies");
        params.put("Version", "2010-05-08");
        ListRolePoliciesRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = ListRolePoliciesResponse::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(ListRolePoliciesResponseDeserializer::deserialize("ListRolePoliciesResult",
                                                                                    &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(ListRolePoliciesError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Lists the IAM roles that have the specified path prefix. If there are none, the action returns an empty list. For more information about roles, go to <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html\">Working with Roles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>"]
    fn list_roles(&self, input: &ListRolesRequest) -> Result<ListRolesResponse, ListRolesError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ListRoles");
        params.put("Version", "2010-05-08");
        ListRolesRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = ListRolesResponse::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(ListRolesResponseDeserializer::deserialize("ListRolesResult",
                                                                             &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(ListRolesError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Lists the SAML provider resource objects defined in IAM in the account.</p> <note> <p> This operation requires <a href=\"http://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\">Signature Version 4</a>.</p> </note>"]
    fn list_saml_providers(&self,
                           input: &ListSAMLProvidersRequest)
                           -> Result<ListSAMLProvidersResponse, ListSAMLProvidersError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ListSAMLProviders");
        params.put("Version", "2010-05-08");
        ListSAMLProvidersRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = ListSAMLProvidersResponse::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(ListSAMLProvidersResponseDeserializer::deserialize("ListSAMLProvidersResult",
                                                                                     &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(ListSAMLProvidersError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Returns information about the SSH public keys associated with the specified IAM user. If there are none, the action returns an empty list.</p> <p>The SSH public keys returned by this action are used only for authenticating the IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href=\"http://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html\">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>"]
    fn list_ssh_public_keys(&self,
                            input: &ListSSHPublicKeysRequest)
                            -> Result<ListSSHPublicKeysResponse, ListSSHPublicKeysError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ListSSHPublicKeys");
        params.put("Version", "2010-05-08");
        ListSSHPublicKeysRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = ListSSHPublicKeysResponse::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(ListSSHPublicKeysResponseDeserializer::deserialize("ListSSHPublicKeysResult",
                                                                                     &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(ListSSHPublicKeysError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Lists the server certificates stored in IAM that have the specified path prefix. If none exist, the action returns an empty list.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about working with server certificates, including a list of AWS services that can use the server certificates that you manage with IAM, go to <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html\">Working with Server Certificates</a> in the <i>IAM User Guide</i>.</p>"]
    fn list_server_certificates
        (&self,
         input: &ListServerCertificatesRequest)
         -> Result<ListServerCertificatesResponse, ListServerCertificatesError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ListServerCertificates");
        params.put("Version", "2010-05-08");
        ListServerCertificatesRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = ListServerCertificatesResponse::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result =
                        try!(ListServerCertificatesResponseDeserializer::deserialize("ListServerCertificatesResult",
                                                                                     &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(ListServerCertificatesError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Returns information about the service-specific credentials associated with the specified IAM user. If there are none, the action returns an empty list. The service-specific credentials returned by this action are used only for authenticating the IAM user to a specific service. For more information about using service-specific credentials to authenticate to an AWS service, see <a href=\"http://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-gc.html\">Set Up service-specific credentials</a> in the AWS CodeCommit User Guide.</p>"]
    fn list_service_specific_credentials
        (&self,
         input: &ListServiceSpecificCredentialsRequest)
         -> Result<ListServiceSpecificCredentialsResponse, ListServiceSpecificCredentialsError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ListServiceSpecificCredentials");
        params.put("Version", "2010-05-08");
        ListServiceSpecificCredentialsRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = ListServiceSpecificCredentialsResponse::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(ListServiceSpecificCredentialsResponseDeserializer::deserialize("ListServiceSpecificCredentialsResult", &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(ListServiceSpecificCredentialsError::from_body(String::from_utf8_lossy(&body)
                                                                       .as_ref()))
            }
        }
    }


    #[doc="<p>Returns information about the signing certificates associated with the specified IAM user. If there are none, the action returns an empty list.</p> <p>Although each user is limited to a small number of signing certificates, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request for this API. Because this action works for access keys under the AWS account, you can use this action to manage root credentials even if the AWS account has no associated users.</p>"]
    fn list_signing_certificates
        (&self,
         input: &ListSigningCertificatesRequest)
         -> Result<ListSigningCertificatesResponse, ListSigningCertificatesError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ListSigningCertificates");
        params.put("Version", "2010-05-08");
        ListSigningCertificatesRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = ListSigningCertificatesResponse::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result =
                        try!(ListSigningCertificatesResponseDeserializer::deserialize("ListSigningCertificatesResult",
                                                                                      &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(ListSigningCertificatesError::from_body(String::from_utf8_lossy(&body)
                                                                .as_ref()))
            }
        }
    }


    #[doc="<p>Lists the names of the inline policies embedded in the specified IAM user.</p> <p>An IAM user can also have managed policies attached to it. To list the managed policies that are attached to a user, use <a>ListAttachedUserPolicies</a>. For more information about policies, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html\">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified user, the action returns an empty list.</p>"]
    fn list_user_policies(&self,
                          input: &ListUserPoliciesRequest)
                          -> Result<ListUserPoliciesResponse, ListUserPoliciesError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ListUserPolicies");
        params.put("Version", "2010-05-08");
        ListUserPoliciesRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = ListUserPoliciesResponse::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(ListUserPoliciesResponseDeserializer::deserialize("ListUserPoliciesResult",
                                                                                    &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(ListUserPoliciesError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Lists the IAM users that have the specified path prefix. If no path prefix is specified, the action returns all users in the AWS account. If there are none, the action returns an empty list.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>"]
    fn list_users(&self, input: &ListUsersRequest) -> Result<ListUsersResponse, ListUsersError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ListUsers");
        params.put("Version", "2010-05-08");
        ListUsersRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = ListUsersResponse::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(ListUsersResponseDeserializer::deserialize("ListUsersResult",
                                                                             &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(ListUsersError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Lists the virtual MFA devices defined in the AWS account by assignment status. If you do not specify an assignment status, the action returns a list of all virtual MFA devices. Assignment status can be <code>Assigned</code>, <code>Unassigned</code>, or <code>Any</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>"]
    fn list_virtual_mfa_devices
        (&self,
         input: &ListVirtualMFADevicesRequest)
         -> Result<ListVirtualMFADevicesResponse, ListVirtualMFADevicesError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ListVirtualMFADevices");
        params.put("Version", "2010-05-08");
        ListVirtualMFADevicesRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = ListVirtualMFADevicesResponse::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result =
                        try!(ListVirtualMFADevicesResponseDeserializer::deserialize("ListVirtualMFADevicesResult",
                                                                                    &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(ListVirtualMFADevicesError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Adds or updates an inline policy document that is embedded in the specified IAM group.</p> <p>A user can also have managed policies attached to it. To attach a managed policy to a group, use <a>AttachGroupPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html\">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a group, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html\">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutGroupPolicy</code>. For general information about using the Query API with IAM, go to <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html\">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>"]
    fn put_group_policy(&self, input: &PutGroupPolicyRequest) -> Result<(), PutGroupPolicyError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "PutGroupPolicy");
        params.put("Version", "2010-05-08");
        PutGroupPolicyRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {
                let result = ();
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(PutGroupPolicyError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Adds or updates an inline policy document that is embedded in the specified IAM role.</p> <p>When you embed an inline policy in a role, the inline policy is used as part of the role's access (permissions) policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>. For more information about IAM roles, go to <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html\">Using Roles to Delegate Permissions and Federate Identities</a>.</p> <p>A role can also have a managed policy attached to it. To attach a managed policy to a role, use <a>AttachRolePolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html\">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed with a role, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html\">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutRolePolicy</code>. For general information about using the Query API with IAM, go to <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html\">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>"]
    fn put_role_policy(&self, input: &PutRolePolicyRequest) -> Result<(), PutRolePolicyError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "PutRolePolicy");
        params.put("Version", "2010-05-08");
        PutRolePolicyRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {
                let result = ();
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(PutRolePolicyError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Adds or updates an inline policy document that is embedded in the specified IAM user.</p> <p>An IAM user can also have a managed policy attached to it. To attach a managed policy to a user, use <a>AttachUserPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html\">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a user, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html\">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutUserPolicy</code>. For general information about using the Query API with IAM, go to <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html\">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>"]
    fn put_user_policy(&self, input: &PutUserPolicyRequest) -> Result<(), PutUserPolicyError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "PutUserPolicy");
        params.put("Version", "2010-05-08");
        PutUserPolicyRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {
                let result = ();
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(PutUserPolicyError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Removes the specified client ID (also known as audience) from the list of client IDs registered for the specified IAM OpenID Connect (OIDC) provider resource object.</p> <p>This action is idempotent; it does not fail or return an error if you try to remove a client ID that does not exist.</p>"]
    fn remove_client_id_from_open_id_connect_provider
        (&self,
         input: &RemoveClientIDFromOpenIDConnectProviderRequest)
         -> Result<(), RemoveClientIDFromOpenIDConnectProviderError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "RemoveClientIDFromOpenIDConnectProvider");
        params.put("Version", "2010-05-08");
        RemoveClientIDFromOpenIDConnectProviderRequestSerializer::serialize(&mut params,
                                                                            "",
                                                                            &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {
                let result = ();
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(RemoveClientIDFromOpenIDConnectProviderError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Removes the specified IAM role from the specified EC2 instance profile.</p> <important> <p>Make sure you do not have any Amazon EC2 instances running with the role you are about to remove from the instance profile. Removing a role from an instance profile that is associated with a running instance might break any applications running on the instance.</p> </important> <p> For more information about IAM roles, go to <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html\">Working with Roles</a>. For more information about instance profiles, go to <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html\">About Instance Profiles</a>.</p>"]
    fn remove_role_from_instance_profile(&self,
                                         input: &RemoveRoleFromInstanceProfileRequest)
                                         -> Result<(), RemoveRoleFromInstanceProfileError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "RemoveRoleFromInstanceProfile");
        params.put("Version", "2010-05-08");
        RemoveRoleFromInstanceProfileRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {
                let result = ();
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(RemoveRoleFromInstanceProfileError::from_body(String::from_utf8_lossy(&body)
                                                                      .as_ref()))
            }
        }
    }


    #[doc="<p>Removes the specified user from the specified group.</p>"]
    fn remove_user_from_group(&self,
                              input: &RemoveUserFromGroupRequest)
                              -> Result<(), RemoveUserFromGroupError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "RemoveUserFromGroup");
        params.put("Version", "2010-05-08");
        RemoveUserFromGroupRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {
                let result = ();
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(RemoveUserFromGroupError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Resets the password for a service-specific credential. The new password is AWS generated and cryptographically strong. It cannot be configured by the user. Resetting the password immediately invalidates the previous password associated with this user.</p>"]
    fn reset_service_specific_credential
        (&self,
         input: &ResetServiceSpecificCredentialRequest)
         -> Result<ResetServiceSpecificCredentialResponse, ResetServiceSpecificCredentialError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ResetServiceSpecificCredential");
        params.put("Version", "2010-05-08");
        ResetServiceSpecificCredentialRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = ResetServiceSpecificCredentialResponse::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(ResetServiceSpecificCredentialResponseDeserializer::deserialize("ResetServiceSpecificCredentialResult", &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(ResetServiceSpecificCredentialError::from_body(String::from_utf8_lossy(&body)
                                                                       .as_ref()))
            }
        }
    }


    #[doc="<p>Synchronizes the specified MFA device with its IAM resource object on the AWS servers.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html\">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p>"]
    fn resync_mfa_device(&self,
                         input: &ResyncMFADeviceRequest)
                         -> Result<(), ResyncMFADeviceError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ResyncMFADevice");
        params.put("Version", "2010-05-08");
        ResyncMFADeviceRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {
                let result = ();
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(ResyncMFADeviceError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Sets the specified version of the specified policy as the policy's default (operative) version.</p> <p>This action affects all users, groups, and roles that the policy is attached to. To list the users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API.</p> <p>For information about managed policies, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html\">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>"]
    fn set_default_policy_version(&self,
                                  input: &SetDefaultPolicyVersionRequest)
                                  -> Result<(), SetDefaultPolicyVersionError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "SetDefaultPolicyVersion");
        params.put("Version", "2010-05-08");
        SetDefaultPolicyVersionRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {
                let result = ();
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(SetDefaultPolicyVersionError::from_body(String::from_utf8_lossy(&body)
                                                                .as_ref()))
            }
        }
    }


    #[doc="<p>Simulate how a set of IAM policies and optionally a resource-based policy works with a list of API actions and AWS resources to determine the policies' effective permissions. The policies are provided as strings.</p> <p>The simulation does not perform the API actions; it only checks the authorization to determine if the simulated policies allow or deny the actions.</p> <p>If you want to simulate existing policies attached to an IAM user, group, or role, use <a>SimulatePrincipalPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForCustomPolicy</a>.</p> <p>If the output is long, you can use <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>"]
    fn simulate_custom_policy(&self,
                              input: &SimulateCustomPolicyRequest)
                              -> Result<SimulatePolicyResponse, SimulateCustomPolicyError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "SimulateCustomPolicy");
        params.put("Version", "2010-05-08");
        SimulateCustomPolicyRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = SimulatePolicyResponse::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(SimulatePolicyResponseDeserializer::deserialize("SimulateCustomPolicyResult",
                                                                                  &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(SimulateCustomPolicyError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Simulate how a set of IAM policies attached to an IAM entity works with a list of API actions and AWS resources to determine the policies' effective permissions. The entity can be an IAM user, group, or role. If you specify a user, then the simulation also includes all of the policies that are attached to groups that the user belongs to .</p> <p>You can optionally include a list of one or more additional policies specified as strings to include in the simulation. If you want to simulate only policies specified as strings, use <a>SimulateCustomPolicy</a> instead.</p> <p>You can also optionally include one resource-based policy to be evaluated with each of the resources included in the simulation.</p> <p>The simulation does not perform the API actions, it only checks the authorization to determine if the simulated policies allow or deny the actions.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>SimulateCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>If the output is long, you can use the <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>"]
    fn simulate_principal_policy
        (&self,
         input: &SimulatePrincipalPolicyRequest)
         -> Result<SimulatePolicyResponse, SimulatePrincipalPolicyError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "SimulatePrincipalPolicy");
        params.put("Version", "2010-05-08");
        SimulatePrincipalPolicyRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = SimulatePolicyResponse::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(SimulatePolicyResponseDeserializer::deserialize("SimulatePrincipalPolicyResult",
                                                                                  &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(SimulatePrincipalPolicyError::from_body(String::from_utf8_lossy(&body)
                                                                .as_ref()))
            }
        }
    }


    #[doc="<p>Changes the status of the specified access key from Active to Inactive, or vice versa. This action can be used to disable a user's key as part of a key rotation work flow.</p> <p>If the <code>UserName</code> field is not specified, the UserName is determined implicitly based on the AWS access key ID used to sign the request. Because this action works for access keys under the AWS account, you can use this action to manage root credentials even if the AWS account has no associated users.</p> <p>For information about rotating keys, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/ManagingCredentials.html\">Managing Keys and Certificates</a> in the <i>IAM User Guide</i>.</p>"]
    fn update_access_key(&self,
                         input: &UpdateAccessKeyRequest)
                         -> Result<(), UpdateAccessKeyError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "UpdateAccessKey");
        params.put("Version", "2010-05-08");
        UpdateAccessKeyRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {
                let result = ();
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(UpdateAccessKeyError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Updates the password policy settings for the AWS account.</p> <note> <p>This action does not support partial updates. No parameters are required, but if you do not specify a parameter, that parameter's value reverts to its default value. See the <b>Request Parameters</b> section for each parameter's default value.</p> </note> <p> For more information about using a password policy, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html\">Managing an IAM Password Policy</a> in the <i>IAM User Guide</i>.</p>"]
    fn update_account_password_policy(&self,
                                      input: &UpdateAccountPasswordPolicyRequest)
                                      -> Result<(), UpdateAccountPasswordPolicyError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "UpdateAccountPasswordPolicy");
        params.put("Version", "2010-05-08");
        UpdateAccountPasswordPolicyRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {
                let result = ();
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(UpdateAccountPasswordPolicyError::from_body(String::from_utf8_lossy(&body)
                                                                    .as_ref()))
            }
        }
    }


    #[doc="<p>Updates the policy that grants an IAM entity permission to assume a role. This is typically referred to as the \"role trust policy\". For more information about roles, go to <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html\">Using Roles to Delegate Permissions and Federate Identities</a>.</p>"]
    fn update_assume_role_policy(&self,
                                 input: &UpdateAssumeRolePolicyRequest)
                                 -> Result<(), UpdateAssumeRolePolicyError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "UpdateAssumeRolePolicy");
        params.put("Version", "2010-05-08");
        UpdateAssumeRolePolicyRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {
                let result = ();
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(UpdateAssumeRolePolicyError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Updates the name and/or the path of the specified IAM group.</p> <important> <p> You should understand the implications of changing a group's path or name. For more information, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_WorkingWithGroupsAndUsers.html\">Renaming Users and Groups</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>To change an IAM group name the requester must have appropriate permissions on both the source object and the target object. For example, to change \"Managers\" to \"MGRs\", the entity making the request must have permission on both \"Managers\" and \"MGRs\", or must have permission on all (*). For more information about permissions, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/PermissionsAndPolicies.html\">Permissions and Policies</a>. </p> </note>"]
    fn update_group(&self, input: &UpdateGroupRequest) -> Result<(), UpdateGroupError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "UpdateGroup");
        params.put("Version", "2010-05-08");
        UpdateGroupRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {
                let result = ();
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(UpdateGroupError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Changes the password for the specified IAM user.</p> <p>IAM users can change their own passwords by calling <a>ChangePassword</a>. For more information about modifying passwords, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html\">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>"]
    fn update_login_profile(&self,
                            input: &UpdateLoginProfileRequest)
                            -> Result<(), UpdateLoginProfileError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "UpdateLoginProfile");
        params.put("Version", "2010-05-08");
        UpdateLoginProfileRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {
                let result = ();
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(UpdateLoginProfileError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Replaces the existing list of server certificate thumbprints associated with an OpenID Connect (OIDC) provider resource object with a new list of thumbprints.</p> <p>The list that you pass with this action completely replaces the existing list of thumbprints. (The lists are not merged.)</p> <p>Typically, you need to update a thumbprint only when the identity provider's certificate changes, which occurs rarely. However, if the provider's certificate <i>does</i> change, any attempt to assume an IAM role that specifies the OIDC provider as a principal fails until the certificate thumbprint is updated.</p> <note> <p>Because trust for the OIDC provider is ultimately derived from the provider's certificate and is validated by the thumbprint, it is a best practice to limit access to the <code>UpdateOpenIDConnectProviderThumbprint</code> action to highly-privileged users.</p> </note>"]
    fn update_open_id_connect_provider_thumbprint
        (&self,
         input: &UpdateOpenIDConnectProviderThumbprintRequest)
         -> Result<(), UpdateOpenIDConnectProviderThumbprintError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "UpdateOpenIDConnectProviderThumbprint");
        params.put("Version", "2010-05-08");
        UpdateOpenIDConnectProviderThumbprintRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {
                let result = ();
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(UpdateOpenIDConnectProviderThumbprintError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Modifies the description of a role.</p>"]
    fn update_role_description
        (&self,
         input: &UpdateRoleDescriptionRequest)
         -> Result<UpdateRoleDescriptionResponse, UpdateRoleDescriptionError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "UpdateRoleDescription");
        params.put("Version", "2010-05-08");
        UpdateRoleDescriptionRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = UpdateRoleDescriptionResponse::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result =
                        try!(UpdateRoleDescriptionResponseDeserializer::deserialize("UpdateRoleDescriptionResult",
                                                                                    &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(UpdateRoleDescriptionError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Updates the metadata document for an existing SAML provider resource object.</p> <note> <p>This operation requires <a href=\"http://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\">Signature Version 4</a>.</p> </note>"]
    fn update_saml_provider(&self,
                            input: &UpdateSAMLProviderRequest)
                            -> Result<UpdateSAMLProviderResponse, UpdateSAMLProviderError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "UpdateSAMLProvider");
        params.put("Version", "2010-05-08");
        UpdateSAMLProviderRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = UpdateSAMLProviderResponse::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(UpdateSAMLProviderResponseDeserializer::deserialize("UpdateSAMLProviderResult",
                                                                                      &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(UpdateSAMLProviderError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Sets the status of an IAM user's SSH public key to active or inactive. SSH public keys that are inactive cannot be used for authentication. This action can be used to disable a user's SSH public key as part of a key rotation work flow.</p> <p>The SSH public key affected by this action is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href=\"http://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html\">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>"]
    fn update_ssh_public_key(&self,
                             input: &UpdateSSHPublicKeyRequest)
                             -> Result<(), UpdateSSHPublicKeyError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "UpdateSSHPublicKey");
        params.put("Version", "2010-05-08");
        UpdateSSHPublicKeyRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {
                let result = ();
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(UpdateSSHPublicKeyError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Updates the name and/or the path of the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, including a list of AWS services that can use the server certificates that you manage with IAM, go to <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html\">Working with Server Certificates</a> in the <i>IAM User Guide</i>.</p> <important> <p>You should understand the implications of changing a server certificate's path or name. For more information, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs_manage.html#RenamingServerCerts\">Renaming a Server Certificate</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>To change a server certificate name the requester must have appropriate permissions on both the source object and the target object. For example, to change the name from \"ProductionCert\" to \"ProdCert\", the entity making the request must have permission on \"ProductionCert\" and \"ProdCert\", or must have permission on all (*). For more information about permissions, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/access.html\">Access Management</a> in the <i>IAM User Guide</i>.</p> </note>"]
    fn update_server_certificate(&self,
                                 input: &UpdateServerCertificateRequest)
                                 -> Result<(), UpdateServerCertificateError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "UpdateServerCertificate");
        params.put("Version", "2010-05-08");
        UpdateServerCertificateRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {
                let result = ();
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(UpdateServerCertificateError::from_body(String::from_utf8_lossy(&body)
                                                                .as_ref()))
            }
        }
    }


    #[doc="<p>Sets the status of a service-specific credential to <code>Active</code> or <code>Inactive</code>. Service-specific credentials that are inactive cannot be used for authentication to the service. This action can be used to disable a user’s service-specific credential as part of a credential rotation work flow.</p>"]
    fn update_service_specific_credential(&self,
                                          input: &UpdateServiceSpecificCredentialRequest)
                                          -> Result<(), UpdateServiceSpecificCredentialError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "UpdateServiceSpecificCredential");
        params.put("Version", "2010-05-08");
        UpdateServiceSpecificCredentialRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {
                let result = ();
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(UpdateServiceSpecificCredentialError::from_body(String::from_utf8_lossy(&body)
                                                                        .as_ref()))
            }
        }
    }


    #[doc="<p>Changes the status of the specified user signing certificate from active to disabled, or vice versa. This action can be used to disable an IAM user's signing certificate as part of a certificate rotation work flow.</p> <p>If the <code>UserName</code> field is not specified, the UserName is determined implicitly based on the AWS access key ID used to sign the request. Because this action works for access keys under the AWS account, you can use this action to manage root credentials even if the AWS account has no associated users.</p>"]
    fn update_signing_certificate(&self,
                                  input: &UpdateSigningCertificateRequest)
                                  -> Result<(), UpdateSigningCertificateError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "UpdateSigningCertificate");
        params.put("Version", "2010-05-08");
        UpdateSigningCertificateRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {
                let result = ();
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(UpdateSigningCertificateError::from_body(String::from_utf8_lossy(&body)
                                                                 .as_ref()))
            }
        }
    }


    #[doc="<p>Updates the name and/or the path of the specified IAM user.</p> <important> <p> You should understand the implications of changing an IAM user's path or name. For more information, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_renaming\">Renaming an IAM User</a> and <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_manage_rename.html\">Renaming an IAM Group</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p> To change a user name the requester must have appropriate permissions on both the source object and the target object. For example, to change Bob to Robert, the entity making the request must have permission on Bob and Robert, or must have permission on all (*). For more information about permissions, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/PermissionsAndPolicies.html\">Permissions and Policies</a>. </p> </note>"]
    fn update_user(&self, input: &UpdateUserRequest) -> Result<(), UpdateUserError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "UpdateUser");
        params.put("Version", "2010-05-08");
        UpdateUserRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {
                let result = ();
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(UpdateUserError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Uploads an SSH public key and associates it with the specified IAM user.</p> <p>The SSH public key uploaded by this action can be used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href=\"http://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html\">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>"]
    fn upload_ssh_public_key(&self,
                             input: &UploadSSHPublicKeyRequest)
                             -> Result<UploadSSHPublicKeyResponse, UploadSSHPublicKeyError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "UploadSSHPublicKey");
        params.put("Version", "2010-05-08");
        UploadSSHPublicKeyRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = UploadSSHPublicKeyResponse::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result = try!(UploadSSHPublicKeyResponseDeserializer::deserialize("UploadSSHPublicKeyResult",
                                                                                      &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(UploadSSHPublicKeyError::from_body(String::from_utf8_lossy(&body).as_ref()))
            }
        }
    }


    #[doc="<p>Uploads a server certificate entity for the AWS account. The server certificate entity includes a public key certificate, a private key, and an optional certificate chain, which should all be PEM-encoded.</p> <p>We recommend that you use <a href=\"https://aws.amazon.com/certificate-manager/\">AWS Certificate Manager</a> to provision, manage, and deploy your server certificates. With ACM you can request a certificate, deploy it to AWS resources, and let ACM handle certificate renewals for you. Certificates provided by ACM are free. For more information about using ACM, see the <a href=\"http://docs.aws.amazon.com/acm/latest/userguide/\">AWS Certificate Manager User Guide</a>.</p> <p>For more information about working with server certificates, including a list of AWS services that can use the server certificates that you manage with IAM, go to <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html\">Working with Server Certificates</a> in the <i>IAM User Guide</i>.</p> <p>For information about the number of server certificates you can upload, see <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-limits.html\">Limitations on IAM Entities and Objects</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because the body of the public key certificate, private key, and the certificate chain can be large, you should use POST rather than GET when calling <code>UploadServerCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href=\"http://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html\">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/programming.html\">Calling the API by Making HTTP Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>"]
    fn upload_server_certificate
        (&self,
         input: &UploadServerCertificateRequest)
         -> Result<UploadServerCertificateResponse, UploadServerCertificateError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "UploadServerCertificate");
        params.put("Version", "2010-05-08");
        UploadServerCertificateRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = UploadServerCertificateResponse::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result =
                        try!(UploadServerCertificateResponseDeserializer::deserialize("UploadServerCertificateResult",
                                                                                      &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(UploadServerCertificateError::from_body(String::from_utf8_lossy(&body)
                                                                .as_ref()))
            }
        }
    }


    #[doc="<p>Uploads an X.509 signing certificate and associates it with the specified IAM user. Some AWS services use X.509 signing certificates to validate requests that are signed with a corresponding private key. When you upload the certificate, its default status is <code>Active</code>.</p> <p>If the <code>UserName</code> field is not specified, the IAM user name is determined implicitly based on the AWS access key ID used to sign the request. Because this action works for access keys under the AWS account, you can use this action to manage root credentials even if the AWS account has no associated users.</p> <note> <p>Because the body of a X.509 certificate can be large, you should use POST rather than GET when calling <code>UploadSigningCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href=\"http://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html\">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html\">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>"]
    fn upload_signing_certificate
        (&self,
         input: &UploadSigningCertificateRequest)
         -> Result<UploadSigningCertificateResponse, UploadSigningCertificateError> {
        let mut request = SignedRequest::new("POST", "iam", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "UploadSigningCertificate");
        params.put("Version", "2010-05-08");
        UploadSigningCertificateRequestSerializer::serialize(&mut params, "", &input);
        request.set_params(params);

        request.sign_with_plus(&try!(self.credentials_provider.credentials()), true);
        let mut response = try!(self.dispatcher.dispatch(&request));
        match response.status {
            StatusCode::Ok => {

                let result;
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));

                if body.is_empty() {
                    result = UploadSigningCertificateResponse::default();
                } else {
                    let reader = EventReader::new_with_config(body.as_slice(),
                                                              ParserConfig::new()
                                                                  .trim_whitespace(true));
                    let mut stack = XmlResponse::new(reader.into_iter().peekable());
                    let _start_document = stack.next();
                    let actual_tag_name = try!(peek_at_name(&mut stack));
                    try!(start_element(&actual_tag_name, &mut stack));
                    result =
                        try!(UploadSigningCertificateResponseDeserializer::deserialize("UploadSigningCertificateResult",
                                                                                       &mut stack));
                    skip_tree(&mut stack);
                    try!(end_element(&actual_tag_name, &mut stack));
                }
                Ok(result)
            }
            _ => {
                let mut body: Vec<u8> = Vec::new();
                try!(response.body.read_to_end(&mut body));
                Err(UploadSigningCertificateError::from_body(String::from_utf8_lossy(&body)
                                                                 .as_ref()))
            }
        }
    }
}

#[cfg(test)]
mod protocol_tests {

    extern crate rusoto_mock;

    use super::*;
    use self::rusoto_mock::*;
    use rusoto_core::Region as rusoto_region;


    #[test]
    fn test_parse_error_iam_get_user() {
        let mock_response = MockResponseReader::read_response("test_resources/generated/error",
                                                              "iam-get-user.xml");
        let mock = MockRequestDispatcher::with_status(400).with_body(&mock_response);
        let client = IamClient::new(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = GetUserRequest::default();
        let result = client.get_user(&request);
        assert!(!result.is_ok(), "parse error: {:?}", result);
    }

    #[test]
    fn test_parse_valid_iam_create_virtual_mfa_device() {
        let mock_response = MockResponseReader::read_response("test_resources/generated/valid",
                                                              "iam-create-virtual-mfa-device.xml");
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = IamClient::new(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = CreateVirtualMFADeviceRequest::default();
        let result = client.create_virtual_mfa_device(&request);
        assert!(result.is_ok(), "parse error: {:?}", result);
    }


    #[test]
    fn test_parse_valid_iam_get_account_summary() {
        let mock_response = MockResponseReader::read_response("test_resources/generated/valid",
                                                              "iam-get-account-summary.xml");
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = IamClient::new(mock, MockCredentialsProvider, rusoto_region::UsEast1);

        let result = client.get_account_summary();
        assert!(result.is_ok(), "parse error: {:?}", result);
    }


    #[test]
    fn test_parse_valid_iam_get_group() {
        let mock_response = MockResponseReader::read_response("test_resources/generated/valid",
                                                              "iam-get-group.xml");
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = IamClient::new(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = GetGroupRequest::default();
        let result = client.get_group(&request);
        assert!(result.is_ok(), "parse error: {:?}", result);
    }


    #[test]
    fn test_parse_valid_iam_get_user_policy() {
        let mock_response = MockResponseReader::read_response("test_resources/generated/valid",
                                                              "iam-get-user-policy.xml");
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = IamClient::new(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = GetUserPolicyRequest::default();
        let result = client.get_user_policy(&request);
        assert!(result.is_ok(), "parse error: {:?}", result);
    }


    #[test]
    fn test_parse_valid_iam_get_user() {
        let mock_response = MockResponseReader::read_response("test_resources/generated/valid",
                                                              "iam-get-user.xml");
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = IamClient::new(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = GetUserRequest::default();
        let result = client.get_user(&request);
        assert!(result.is_ok(), "parse error: {:?}", result);
    }


    #[test]
    fn test_parse_valid_iam_list_access_keys() {
        let mock_response = MockResponseReader::read_response("test_resources/generated/valid",
                                                              "iam-list-access-keys.xml");
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = IamClient::new(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = ListAccessKeysRequest::default();
        let result = client.list_access_keys(&request);
        assert!(result.is_ok(), "parse error: {:?}", result);
    }


    #[test]
    fn test_parse_valid_iam_list_account_aliases() {
        let mock_response = MockResponseReader::read_response("test_resources/generated/valid",
                                                              "iam-list-account-aliases.xml");
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = IamClient::new(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = ListAccountAliasesRequest::default();
        let result = client.list_account_aliases(&request);
        assert!(result.is_ok(), "parse error: {:?}", result);
    }


    #[test]
    fn test_parse_valid_iam_list_groups() {
        let mock_response = MockResponseReader::read_response("test_resources/generated/valid",
                                                              "iam-list-groups.xml");
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = IamClient::new(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = ListGroupsRequest::default();
        let result = client.list_groups(&request);
        assert!(result.is_ok(), "parse error: {:?}", result);
    }


    #[test]
    fn test_parse_valid_iam_list_instance_profiles() {
        let mock_response = MockResponseReader::read_response("test_resources/generated/valid",
                                                              "iam-list-instance-profiles.xml");
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = IamClient::new(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = ListInstanceProfilesRequest::default();
        let result = client.list_instance_profiles(&request);
        assert!(result.is_ok(), "parse error: {:?}", result);
    }


    #[test]
    fn test_parse_valid_iam_list_mfa_devices() {
        let mock_response = MockResponseReader::read_response("test_resources/generated/valid",
                                                              "iam-list-mfa-devices.xml");
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = IamClient::new(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = ListMFADevicesRequest::default();
        let result = client.list_mfa_devices(&request);
        assert!(result.is_ok(), "parse error: {:?}", result);
    }


    #[test]
    fn test_parse_valid_iam_list_roles() {
        let mock_response = MockResponseReader::read_response("test_resources/generated/valid",
                                                              "iam-list-roles.xml");
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = IamClient::new(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = ListRolesRequest::default();
        let result = client.list_roles(&request);
        assert!(result.is_ok(), "parse error: {:?}", result);
    }


    #[test]
    fn test_parse_valid_iam_list_server_certificates() {
        let mock_response = MockResponseReader::read_response("test_resources/generated/valid",
                                                              "iam-list-server-certificates.xml");
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = IamClient::new(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = ListServerCertificatesRequest::default();
        let result = client.list_server_certificates(&request);
        assert!(result.is_ok(), "parse error: {:?}", result);
    }


    #[test]
    fn test_parse_valid_iam_list_signing_certificates() {
        let mock_response = MockResponseReader::read_response("test_resources/generated/valid",
                                                              "iam-list-signing-certificates.xml");
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = IamClient::new(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = ListSigningCertificatesRequest::default();
        let result = client.list_signing_certificates(&request);
        assert!(result.is_ok(), "parse error: {:?}", result);
    }


    #[test]
    fn test_parse_valid_iam_list_users() {
        let mock_response = MockResponseReader::read_response("test_resources/generated/valid",
                                                              "iam-list-users.xml");
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = IamClient::new(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = ListUsersRequest::default();
        let result = client.list_users(&request);
        assert!(result.is_ok(), "parse error: {:?}", result);
    }


    #[test]
    fn test_parse_valid_iam_list_virtual_mfa_devices() {
        let mock_response = MockResponseReader::read_response("test_resources/generated/valid",
                                                              "iam-list-virtual-mfa-devices.xml");
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = IamClient::new(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = ListVirtualMFADevicesRequest::default();
        let result = client.list_virtual_mfa_devices(&request);
        assert!(result.is_ok(), "parse error: {:?}", result);
    }
}
